# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_test_dll', [dirname(__file__)])
        except ImportError:
            import _test_dll
            return _test_dll
        if fp is not None:
            try:
                _mod = imp.load_module('_test_dll', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _test_dll = swig_import_helper()
    del swig_import_helper
else:
    import _test_dll
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class World(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    __repr__ = _swig_repr

    def set(self, msg):
        return _test_dll.World_set(self, msg)

    def greet(self):
        return _test_dll.World_greet(self)
    __swig_setmethods__["msg"] = _test_dll.World_msg_set
    __swig_getmethods__["msg"] = _test_dll.World_msg_get
    if _newclass:
        msg = _swig_property(_test_dll.World_msg_get, _test_dll.World_msg_set)

    def __init__(self):
        this = _test_dll.new_World()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_World
    __del__ = lambda self: None
World_swigregister = _test_dll.World_swigregister
World_swigregister(World)
cvar = _test_dll.cvar
tree_node_key = cvar.tree_node_key

class SimRoot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRoot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRoot, name)
    __repr__ = _swig_repr

    def Description(self, *args):
        return _test_dll.SimRoot_Description(self, *args)

    def ObjectOwnerHistory(self, *args):
        return _test_dll.SimRoot_ObjectOwnerHistory(self, *args)

    def IfcGlobalID(self, *args):
        return _test_dll.SimRoot_IfcGlobalID(self, *args)

    def IfcName(self, *args):
        return _test_dll.SimRoot_IfcName(self, *args)

    def SimUniqueID(self, *args):
        return _test_dll.SimRoot_SimUniqueID(self, *args)

    def SimModelType(self, *args):
        return _test_dll.SimRoot_SimModelType(self, *args)

    def SimModelSubtype(self, *args):
        return _test_dll.SimRoot_SimModelSubtype(self, *args)

    def SimModelName(self, *args):
        return _test_dll.SimRoot_SimModelName(self, *args)

    def SourceModelSchema(self, *args):
        return _test_dll.SimRoot_SourceModelSchema(self, *args)

    def SourceModelObjectType(self, *args):
        return _test_dll.SimRoot_SourceModelObjectType(self, *args)

    def SourceLibraryEntryID(self, *args):
        return _test_dll.SimRoot_SourceLibraryEntryID(self, *args)

    def SourceLibraryEntryRef(self, *args):
        return _test_dll.SimRoot_SourceLibraryEntryRef(self, *args)

    def RefId(self, *args):
        return _test_dll.SimRoot_RefId(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimRoot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimRoot__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimRoot
    __del__ = lambda self: None

    def setId(self, _id):
        return _test_dll.SimRoot_setId(self, _id)

    def refId(self):
        return _test_dll.SimRoot_refId(self)
    __swig_setmethods__["_id"] = _test_dll.SimRoot__id_set
    __swig_getmethods__["_id"] = _test_dll.SimRoot__id_get
    if _newclass:
        _id = _swig_property(_test_dll.SimRoot__id_get, _test_dll.SimRoot__id_set)
SimRoot_swigregister = _test_dll.SimRoot_swigregister
SimRoot_swigregister(SimRoot)

# This file is compatible with both classic and new-style classes.


