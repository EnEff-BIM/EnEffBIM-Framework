// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateNaturalVentilation.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateNaturalVentilation
      // 

      const SimTemplateNaturalVentilation::TemplateAFN_SystemParams_optional& SimTemplateNaturalVentilation::
      TemplateAFN_SystemParams () const
      {
        return this->TemplateAFN_SystemParams_;
      }

      SimTemplateNaturalVentilation::TemplateAFN_SystemParams_optional& SimTemplateNaturalVentilation::
      TemplateAFN_SystemParams ()
      {
        return this->TemplateAFN_SystemParams_;
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_SystemParams (const TemplateAFN_SystemParams_type& x)
      {
        this->TemplateAFN_SystemParams_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_SystemParams (const TemplateAFN_SystemParams_optional& x)
      {
        this->TemplateAFN_SystemParams_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_SystemParams (::std::auto_ptr< TemplateAFN_SystemParams_type > x)
      {
        this->TemplateAFN_SystemParams_.set (x);
      }

      const SimTemplateNaturalVentilation::TemplateAFN_ZoneParams_optional& SimTemplateNaturalVentilation::
      TemplateAFN_ZoneParams () const
      {
        return this->TemplateAFN_ZoneParams_;
      }

      SimTemplateNaturalVentilation::TemplateAFN_ZoneParams_optional& SimTemplateNaturalVentilation::
      TemplateAFN_ZoneParams ()
      {
        return this->TemplateAFN_ZoneParams_;
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_ZoneParams (const TemplateAFN_ZoneParams_type& x)
      {
        this->TemplateAFN_ZoneParams_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_ZoneParams (const TemplateAFN_ZoneParams_optional& x)
      {
        this->TemplateAFN_ZoneParams_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateAFN_ZoneParams (::std::auto_ptr< TemplateAFN_ZoneParams_type > x)
      {
        this->TemplateAFN_ZoneParams_.set (x);
      }

      const SimTemplateNaturalVentilation::TemplateExteriorWallCrack_optional& SimTemplateNaturalVentilation::
      TemplateExteriorWallCrack () const
      {
        return this->TemplateExteriorWallCrack_;
      }

      SimTemplateNaturalVentilation::TemplateExteriorWallCrack_optional& SimTemplateNaturalVentilation::
      TemplateExteriorWallCrack ()
      {
        return this->TemplateExteriorWallCrack_;
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorWallCrack (const TemplateExteriorWallCrack_type& x)
      {
        this->TemplateExteriorWallCrack_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorWallCrack (const TemplateExteriorWallCrack_optional& x)
      {
        this->TemplateExteriorWallCrack_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorWallCrack (::std::auto_ptr< TemplateExteriorWallCrack_type > x)
      {
        this->TemplateExteriorWallCrack_.set (x);
      }

      const SimTemplateNaturalVentilation::TemplateInteriorWallCrack_optional& SimTemplateNaturalVentilation::
      TemplateInteriorWallCrack () const
      {
        return this->TemplateInteriorWallCrack_;
      }

      SimTemplateNaturalVentilation::TemplateInteriorWallCrack_optional& SimTemplateNaturalVentilation::
      TemplateInteriorWallCrack ()
      {
        return this->TemplateInteriorWallCrack_;
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorWallCrack (const TemplateInteriorWallCrack_type& x)
      {
        this->TemplateInteriorWallCrack_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorWallCrack (const TemplateInteriorWallCrack_optional& x)
      {
        this->TemplateInteriorWallCrack_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorWallCrack (::std::auto_ptr< TemplateInteriorWallCrack_type > x)
      {
        this->TemplateInteriorWallCrack_.set (x);
      }

      const SimTemplateNaturalVentilation::TemplateExteriorSlabCrack_optional& SimTemplateNaturalVentilation::
      TemplateExteriorSlabCrack () const
      {
        return this->TemplateExteriorSlabCrack_;
      }

      SimTemplateNaturalVentilation::TemplateExteriorSlabCrack_optional& SimTemplateNaturalVentilation::
      TemplateExteriorSlabCrack ()
      {
        return this->TemplateExteriorSlabCrack_;
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorSlabCrack (const TemplateExteriorSlabCrack_type& x)
      {
        this->TemplateExteriorSlabCrack_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorSlabCrack (const TemplateExteriorSlabCrack_optional& x)
      {
        this->TemplateExteriorSlabCrack_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateExteriorSlabCrack (::std::auto_ptr< TemplateExteriorSlabCrack_type > x)
      {
        this->TemplateExteriorSlabCrack_.set (x);
      }

      const SimTemplateNaturalVentilation::TemplateInteriorSlabCrack_optional& SimTemplateNaturalVentilation::
      TemplateInteriorSlabCrack () const
      {
        return this->TemplateInteriorSlabCrack_;
      }

      SimTemplateNaturalVentilation::TemplateInteriorSlabCrack_optional& SimTemplateNaturalVentilation::
      TemplateInteriorSlabCrack ()
      {
        return this->TemplateInteriorSlabCrack_;
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorSlabCrack (const TemplateInteriorSlabCrack_type& x)
      {
        this->TemplateInteriorSlabCrack_.set (x);
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorSlabCrack (const TemplateInteriorSlabCrack_optional& x)
      {
        this->TemplateInteriorSlabCrack_ = x;
      }

      void SimTemplateNaturalVentilation::
      TemplateInteriorSlabCrack (::std::auto_ptr< TemplateInteriorSlabCrack_type > x)
      {
        this->TemplateInteriorSlabCrack_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateNaturalVentilation
      //

      SimTemplateNaturalVentilation::
      SimTemplateNaturalVentilation (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (RefId),
        TemplateAFN_SystemParams_ (this),
        TemplateAFN_ZoneParams_ (this),
        TemplateExteriorWallCrack_ (this),
        TemplateInteriorWallCrack_ (this),
        TemplateExteriorSlabCrack_ (this),
        TemplateInteriorSlabCrack_ (this)
      {
      }

      SimTemplateNaturalVentilation::
      SimTemplateNaturalVentilation (const SimTemplateNaturalVentilation& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (x, f, c),
        TemplateAFN_SystemParams_ (x.TemplateAFN_SystemParams_, f, this),
        TemplateAFN_ZoneParams_ (x.TemplateAFN_ZoneParams_, f, this),
        TemplateExteriorWallCrack_ (x.TemplateExteriorWallCrack_, f, this),
        TemplateInteriorWallCrack_ (x.TemplateInteriorWallCrack_, f, this),
        TemplateExteriorSlabCrack_ (x.TemplateExteriorSlabCrack_, f, this),
        TemplateInteriorSlabCrack_ (x.TemplateInteriorSlabCrack_, f, this)
      {
      }

      SimTemplateNaturalVentilation::
      SimTemplateNaturalVentilation (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateAFN_SystemParams_ (this),
        TemplateAFN_ZoneParams_ (this),
        TemplateExteriorWallCrack_ (this),
        TemplateInteriorWallCrack_ (this),
        TemplateExteriorSlabCrack_ (this),
        TemplateInteriorSlabCrack_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateNaturalVentilation::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateAFN_SystemParams
          //
          if (n.name () == "TemplateAFN_SystemParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateAFN_SystemParams_type > r (
              TemplateAFN_SystemParams_traits::create (i, f, this));

            if (!this->TemplateAFN_SystemParams_)
            {
              this->TemplateAFN_SystemParams_.set (r);
              continue;
            }
          }

          // TemplateAFN_ZoneParams
          //
          if (n.name () == "TemplateAFN_ZoneParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateAFN_ZoneParams_type > r (
              TemplateAFN_ZoneParams_traits::create (i, f, this));

            if (!this->TemplateAFN_ZoneParams_)
            {
              this->TemplateAFN_ZoneParams_.set (r);
              continue;
            }
          }

          // TemplateExteriorWallCrack
          //
          if (n.name () == "TemplateExteriorWallCrack" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateExteriorWallCrack_type > r (
              TemplateExteriorWallCrack_traits::create (i, f, this));

            if (!this->TemplateExteriorWallCrack_)
            {
              this->TemplateExteriorWallCrack_.set (r);
              continue;
            }
          }

          // TemplateInteriorWallCrack
          //
          if (n.name () == "TemplateInteriorWallCrack" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInteriorWallCrack_type > r (
              TemplateInteriorWallCrack_traits::create (i, f, this));

            if (!this->TemplateInteriorWallCrack_)
            {
              this->TemplateInteriorWallCrack_.set (r);
              continue;
            }
          }

          // TemplateExteriorSlabCrack
          //
          if (n.name () == "TemplateExteriorSlabCrack" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateExteriorSlabCrack_type > r (
              TemplateExteriorSlabCrack_traits::create (i, f, this));

            if (!this->TemplateExteriorSlabCrack_)
            {
              this->TemplateExteriorSlabCrack_.set (r);
              continue;
            }
          }

          // TemplateInteriorSlabCrack
          //
          if (n.name () == "TemplateInteriorSlabCrack" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInteriorSlabCrack_type > r (
              TemplateInteriorSlabCrack_traits::create (i, f, this));

            if (!this->TemplateInteriorSlabCrack_)
            {
              this->TemplateInteriorSlabCrack_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateNaturalVentilation* SimTemplateNaturalVentilation::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateNaturalVentilation (*this, f, c);
      }

      SimTemplateNaturalVentilation& SimTemplateNaturalVentilation::
      operator= (const SimTemplateNaturalVentilation& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimTemplate& > (*this) = x;
          this->TemplateAFN_SystemParams_ = x.TemplateAFN_SystemParams_;
          this->TemplateAFN_ZoneParams_ = x.TemplateAFN_ZoneParams_;
          this->TemplateExteriorWallCrack_ = x.TemplateExteriorWallCrack_;
          this->TemplateInteriorWallCrack_ = x.TemplateInteriorWallCrack_;
          this->TemplateExteriorSlabCrack_ = x.TemplateExteriorSlabCrack_;
          this->TemplateInteriorSlabCrack_ = x.TemplateInteriorSlabCrack_;
        }

        return *this;
      }

      SimTemplateNaturalVentilation::
      ~SimTemplateNaturalVentilation ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

