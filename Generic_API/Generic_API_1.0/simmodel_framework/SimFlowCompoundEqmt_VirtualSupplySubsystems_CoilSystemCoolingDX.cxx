// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX
      // 

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DehumidCntlType () const
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DehumidCntlType ()
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_type& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_optional& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DehumidCntlType (::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilObjType () const
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilObjType ()
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilName () const
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilName ()
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_CoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysInletNodeName () const
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysInletNodeName ()
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysInletNodeName (const SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_type& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysInletNodeName (const SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysInletNodeName (::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_type > x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName () const
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName ()
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName (const SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_type& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName (const SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_type > x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName () const
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName ()
      {
        return this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName (const SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_type& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName (const SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_optional& x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName (::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_type > x)
      {
        this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_RunOnSensLoad_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnSensLoad () const
      {
        return this->SimFlowCompEqmt_RunOnSensLoad_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_RunOnSensLoad_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnSensLoad ()
      {
        return this->SimFlowCompEqmt_RunOnSensLoad_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnSensLoad (const SimFlowCompEqmt_RunOnSensLoad_type& x)
      {
        this->SimFlowCompEqmt_RunOnSensLoad_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnSensLoad (const SimFlowCompEqmt_RunOnSensLoad_optional& x)
      {
        this->SimFlowCompEqmt_RunOnSensLoad_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnSensLoad (::std::auto_ptr< SimFlowCompEqmt_RunOnSensLoad_type > x)
      {
        this->SimFlowCompEqmt_RunOnSensLoad_.set (x);
      }

      const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_RunOnLatentLoad_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnLatentLoad () const
      {
        return this->SimFlowCompEqmt_RunOnLatentLoad_;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::SimFlowCompEqmt_RunOnLatentLoad_optional& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnLatentLoad ()
      {
        return this->SimFlowCompEqmt_RunOnLatentLoad_;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnLatentLoad (const SimFlowCompEqmt_RunOnLatentLoad_type& x)
      {
        this->SimFlowCompEqmt_RunOnLatentLoad_.set (x);
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnLatentLoad (const SimFlowCompEqmt_RunOnLatentLoad_optional& x)
      {
        this->SimFlowCompEqmt_RunOnLatentLoad_ = x;
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompEqmt_RunOnLatentLoad (::std::auto_ptr< SimFlowCompEqmt_RunOnLatentLoad_type > x)
      {
        this->SimFlowCompEqmt_RunOnLatentLoad_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX
      //

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_VirtualSupplySubsystems (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_ (this),
        SimFlowCompEqmt_RunOnSensLoad_ (this),
        SimFlowCompEqmt_RunOnLatentLoad_ (this)
      {
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX& x,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_VirtualSupplySubsystems (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_DehumidCntlType_ (x.SimFlowCompEqmt_DehumidCntlType_, f, this),
        SimFlowCompEqmt_CoolingCoilObjType_ (x.SimFlowCompEqmt_CoolingCoilObjType_, f, this),
        SimFlowCompEqmt_CoolingCoilName_ (x.SimFlowCompEqmt_CoolingCoilName_, f, this),
        SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_ (x.SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_, f, this),
        SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_ (x.SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_, f, this),
        SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_ (x.SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_, f, this),
        SimFlowCompEqmt_RunOnSensLoad_ (x.SimFlowCompEqmt_RunOnSensLoad_, f, this),
        SimFlowCompEqmt_RunOnLatentLoad_ (x.SimFlowCompEqmt_RunOnLatentLoad_, f, this)
      {
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX (const ::xercesc::DOMElement& e,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_VirtualSupplySubsystems (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_ (this),
        SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_ (this),
        SimFlowCompEqmt_RunOnSensLoad_ (this),
        SimFlowCompEqmt_RunOnLatentLoad_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_VirtualSupplySubsystems::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DehumidCntlType
          //
          if (n.name () == "SimFlowCompEqmt_DehumidCntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > r (
              SimFlowCompEqmt_DehumidCntlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DehumidCntlType_)
            {
              this->SimFlowCompEqmt_DehumidCntlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > r (
              SimFlowCompEqmt_CoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilObjType_)
            {
              this->SimFlowCompEqmt_CoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > r (
              SimFlowCompEqmt_CoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilName_)
            {
              this->SimFlowCompEqmt_CoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DXCoolingCoilSysInletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_DXCoolingCoilSysInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_type > r (
              SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_)
            {
              this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_type > r (
              SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_)
            {
              this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName
          //
          if (n.name () == "SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_type > r (
              SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_)
            {
              this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_RunOnSensLoad
          //
          if (n.name () == "SimFlowCompEqmt_RunOnSensLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_RunOnSensLoad_type > r (
              SimFlowCompEqmt_RunOnSensLoad_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_RunOnSensLoad_)
            {
              this->SimFlowCompEqmt_RunOnSensLoad_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_RunOnLatentLoad
          //
          if (n.name () == "SimFlowCompEqmt_RunOnLatentLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_RunOnLatentLoad_type > r (
              SimFlowCompEqmt_RunOnLatentLoad_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_RunOnLatentLoad_)
            {
              this->SimFlowCompEqmt_RunOnLatentLoad_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX* SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX (*this, f, c);
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX& SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      operator= (const SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_VirtualSupplySubsystems& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_DehumidCntlType_ = x.SimFlowCompEqmt_DehumidCntlType_;
          this->SimFlowCompEqmt_CoolingCoilObjType_ = x.SimFlowCompEqmt_CoolingCoilObjType_;
          this->SimFlowCompEqmt_CoolingCoilName_ = x.SimFlowCompEqmt_CoolingCoilName_;
          this->SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_ = x.SimFlowCompEqmt_DXCoolingCoilSysInletNodeName_;
          this->SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_ = x.SimFlowCompEqmt_DXCoolingCoilSysOutletNodeName_;
          this->SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_ = x.SimFlowCompEqmt_DXCoolingCoilSysSensorNodeName_;
          this->SimFlowCompEqmt_RunOnSensLoad_ = x.SimFlowCompEqmt_RunOnSensLoad_;
          this->SimFlowCompEqmt_RunOnLatentLoad_ = x.SimFlowCompEqmt_RunOnLatentLoad_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX::
      ~SimFlowCompoundEqmt_VirtualSupplySubsystems_CoilSystemCoolingDX ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

