// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SYSTEM_REFRIGERATION_SECONDARY_FULL_SYSTEM_HXX
#define SIM_SYSTEM_REFRIGERATION_SECONDARY_FULL_SYSTEM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimSystem_RefrigerationSecondary_FullSystem;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simsystem_refrigerationsecondary.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimSystem_RefrigerationSecondary_FullSystem: public ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary
      {
        public:
        // SimSys_RefrigCaseWalkinCaseAndWalkInListName
        //
        typedef ::xml_schema::idref SimSys_RefrigCaseWalkinCaseAndWalkInListName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type, char > SimSys_RefrigCaseWalkinCaseAndWalkInListName_traits;

        const SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional&
        SimSys_RefrigCaseWalkinCaseAndWalkInListName () const;

        SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional&
        SimSys_RefrigCaseWalkinCaseAndWalkInListName ();

        void
        SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_type& x);

        void
        SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& x);

        void
        SimSys_RefrigCaseWalkinCaseAndWalkInListName (::std::auto_ptr< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > p);

        // SimSys_EndUseSubCat
        //
        typedef ::xml_schema::string SimSys_EndUseSubCat_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EndUseSubCat_type > SimSys_EndUseSubCat_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EndUseSubCat_type, char > SimSys_EndUseSubCat_traits;

        const SimSys_EndUseSubCat_optional&
        SimSys_EndUseSubCat () const;

        SimSys_EndUseSubCat_optional&
        SimSys_EndUseSubCat ();

        void
        SimSys_EndUseSubCat (const SimSys_EndUseSubCat_type& x);

        void
        SimSys_EndUseSubCat (const SimSys_EndUseSubCat_optional& x);

        void
        SimSys_EndUseSubCat (::std::auto_ptr< SimSys_EndUseSubCat_type > p);

        // SimSys_CircFluidType
        //
        typedef ::xml_schema::string SimSys_CircFluidType_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CircFluidType_type > SimSys_CircFluidType_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CircFluidType_type, char > SimSys_CircFluidType_traits;

        const SimSys_CircFluidType_optional&
        SimSys_CircFluidType () const;

        SimSys_CircFluidType_optional&
        SimSys_CircFluidType ();

        void
        SimSys_CircFluidType (const SimSys_CircFluidType_type& x);

        void
        SimSys_CircFluidType (const SimSys_CircFluidType_optional& x);

        void
        SimSys_CircFluidType (::std::auto_ptr< SimSys_CircFluidType_type > p);

        // SimSys_CircFluidName
        //
        typedef ::xml_schema::idref SimSys_CircFluidName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CircFluidName_type > SimSys_CircFluidName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CircFluidName_type, char > SimSys_CircFluidName_traits;

        const SimSys_CircFluidName_optional&
        SimSys_CircFluidName () const;

        SimSys_CircFluidName_optional&
        SimSys_CircFluidName ();

        void
        SimSys_CircFluidName (const SimSys_CircFluidName_type& x);

        void
        SimSys_CircFluidName (const SimSys_CircFluidName_optional& x);

        void
        SimSys_CircFluidName (::std::auto_ptr< SimSys_CircFluidName_type > p);

        // SimSys_EvapCapacity
        //
        typedef ::xml_schema::double_ SimSys_EvapCapacity_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapCapacity_type > SimSys_EvapCapacity_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapCapacity_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapCapacity_traits;

        const SimSys_EvapCapacity_optional&
        SimSys_EvapCapacity () const;

        SimSys_EvapCapacity_optional&
        SimSys_EvapCapacity ();

        void
        SimSys_EvapCapacity (const SimSys_EvapCapacity_type& x);

        void
        SimSys_EvapCapacity (const SimSys_EvapCapacity_optional& x);

        // SimSys_EvapFlowRateSecndFluid
        //
        typedef ::xml_schema::double_ SimSys_EvapFlowRateSecndFluid_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapFlowRateSecndFluid_type > SimSys_EvapFlowRateSecndFluid_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapFlowRateSecndFluid_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapFlowRateSecndFluid_traits;

        const SimSys_EvapFlowRateSecndFluid_optional&
        SimSys_EvapFlowRateSecndFluid () const;

        SimSys_EvapFlowRateSecndFluid_optional&
        SimSys_EvapFlowRateSecndFluid ();

        void
        SimSys_EvapFlowRateSecndFluid (const SimSys_EvapFlowRateSecndFluid_type& x);

        void
        SimSys_EvapFlowRateSecndFluid (const SimSys_EvapFlowRateSecndFluid_optional& x);

        // SimSys_EvapEvaporatingTemp
        //
        typedef ::xml_schema::double_ SimSys_EvapEvaporatingTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapEvaporatingTemp_type > SimSys_EvapEvaporatingTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapEvaporatingTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapEvaporatingTemp_traits;

        const SimSys_EvapEvaporatingTemp_optional&
        SimSys_EvapEvaporatingTemp () const;

        SimSys_EvapEvaporatingTemp_optional&
        SimSys_EvapEvaporatingTemp ();

        void
        SimSys_EvapEvaporatingTemp (const SimSys_EvapEvaporatingTemp_type& x);

        void
        SimSys_EvapEvaporatingTemp (const SimSys_EvapEvaporatingTemp_optional& x);

        // SimSys_EvapApproachTempDiff
        //
        typedef ::xml_schema::double_ SimSys_EvapApproachTempDiff_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapApproachTempDiff_type > SimSys_EvapApproachTempDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapApproachTempDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapApproachTempDiff_traits;

        const SimSys_EvapApproachTempDiff_optional&
        SimSys_EvapApproachTempDiff () const;

        SimSys_EvapApproachTempDiff_optional&
        SimSys_EvapApproachTempDiff ();

        void
        SimSys_EvapApproachTempDiff (const SimSys_EvapApproachTempDiff_type& x);

        void
        SimSys_EvapApproachTempDiff (const SimSys_EvapApproachTempDiff_optional& x);

        // SimSys_EvapRangeTempDiff
        //
        typedef ::xml_schema::double_ SimSys_EvapRangeTempDiff_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapRangeTempDiff_type > SimSys_EvapRangeTempDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapRangeTempDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapRangeTempDiff_traits;

        const SimSys_EvapRangeTempDiff_optional&
        SimSys_EvapRangeTempDiff () const;

        SimSys_EvapRangeTempDiff_optional&
        SimSys_EvapRangeTempDiff ();

        void
        SimSys_EvapRangeTempDiff (const SimSys_EvapRangeTempDiff_type& x);

        void
        SimSys_EvapRangeTempDiff (const SimSys_EvapRangeTempDiff_optional& x);

        // SimSys_NumbPumpsInLoop
        //
        typedef ::xml_schema::int_ SimSys_NumbPumpsInLoop_type;
        typedef ::xsd::cxx::tree::optional< SimSys_NumbPumpsInLoop_type > SimSys_NumbPumpsInLoop_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_NumbPumpsInLoop_type, char > SimSys_NumbPumpsInLoop_traits;

        const SimSys_NumbPumpsInLoop_optional&
        SimSys_NumbPumpsInLoop () const;

        SimSys_NumbPumpsInLoop_optional&
        SimSys_NumbPumpsInLoop ();

        void
        SimSys_NumbPumpsInLoop (const SimSys_NumbPumpsInLoop_type& x);

        void
        SimSys_NumbPumpsInLoop (const SimSys_NumbPumpsInLoop_optional& x);

        // SimSys_TotalPumpFlowRate
        //
        typedef ::xml_schema::double_ SimSys_TotalPumpFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSys_TotalPumpFlowRate_type > SimSys_TotalPumpFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_TotalPumpFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_TotalPumpFlowRate_traits;

        const SimSys_TotalPumpFlowRate_optional&
        SimSys_TotalPumpFlowRate () const;

        SimSys_TotalPumpFlowRate_optional&
        SimSys_TotalPumpFlowRate ();

        void
        SimSys_TotalPumpFlowRate (const SimSys_TotalPumpFlowRate_type& x);

        void
        SimSys_TotalPumpFlowRate (const SimSys_TotalPumpFlowRate_optional& x);

        // SimSys_TotalPumpPower
        //
        typedef ::xml_schema::double_ SimSys_TotalPumpPower_type;
        typedef ::xsd::cxx::tree::optional< SimSys_TotalPumpPower_type > SimSys_TotalPumpPower_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_TotalPumpPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_TotalPumpPower_traits;

        const SimSys_TotalPumpPower_optional&
        SimSys_TotalPumpPower () const;

        SimSys_TotalPumpPower_optional&
        SimSys_TotalPumpPower ();

        void
        SimSys_TotalPumpPower (const SimSys_TotalPumpPower_type& x);

        void
        SimSys_TotalPumpPower (const SimSys_TotalPumpPower_optional& x);

        // SimSys_TotalPumpHead
        //
        typedef ::xml_schema::double_ SimSys_TotalPumpHead_type;
        typedef ::xsd::cxx::tree::optional< SimSys_TotalPumpHead_type > SimSys_TotalPumpHead_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_TotalPumpHead_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_TotalPumpHead_traits;

        const SimSys_TotalPumpHead_optional&
        SimSys_TotalPumpHead () const;

        SimSys_TotalPumpHead_optional&
        SimSys_TotalPumpHead ();

        void
        SimSys_TotalPumpHead (const SimSys_TotalPumpHead_type& x);

        void
        SimSys_TotalPumpHead (const SimSys_TotalPumpHead_optional& x);

        // SimSys_PhaseChangeCircRate
        //
        typedef ::xml_schema::double_ SimSys_PhaseChangeCircRate_type;
        typedef ::xsd::cxx::tree::optional< SimSys_PhaseChangeCircRate_type > SimSys_PhaseChangeCircRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_PhaseChangeCircRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_PhaseChangeCircRate_traits;

        const SimSys_PhaseChangeCircRate_optional&
        SimSys_PhaseChangeCircRate () const;

        SimSys_PhaseChangeCircRate_optional&
        SimSys_PhaseChangeCircRate ();

        void
        SimSys_PhaseChangeCircRate (const SimSys_PhaseChangeCircRate_type& x);

        void
        SimSys_PhaseChangeCircRate (const SimSys_PhaseChangeCircRate_optional& x);

        // SimSys_PumpDriveType
        //
        typedef ::xml_schema::string SimSys_PumpDriveType_type;
        typedef ::xsd::cxx::tree::optional< SimSys_PumpDriveType_type > SimSys_PumpDriveType_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_PumpDriveType_type, char > SimSys_PumpDriveType_traits;

        const SimSys_PumpDriveType_optional&
        SimSys_PumpDriveType () const;

        SimSys_PumpDriveType_optional&
        SimSys_PumpDriveType ();

        void
        SimSys_PumpDriveType (const SimSys_PumpDriveType_type& x);

        void
        SimSys_PumpDriveType (const SimSys_PumpDriveType_optional& x);

        void
        SimSys_PumpDriveType (::std::auto_ptr< SimSys_PumpDriveType_type > p);

        // SimSys_VarSpdPumpCubicCurveName
        //
        typedef ::xml_schema::idref SimSys_VarSpdPumpCubicCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_VarSpdPumpCubicCurveName_type > SimSys_VarSpdPumpCubicCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_VarSpdPumpCubicCurveName_type, char > SimSys_VarSpdPumpCubicCurveName_traits;

        const SimSys_VarSpdPumpCubicCurveName_optional&
        SimSys_VarSpdPumpCubicCurveName () const;

        SimSys_VarSpdPumpCubicCurveName_optional&
        SimSys_VarSpdPumpCubicCurveName ();

        void
        SimSys_VarSpdPumpCubicCurveName (const SimSys_VarSpdPumpCubicCurveName_type& x);

        void
        SimSys_VarSpdPumpCubicCurveName (const SimSys_VarSpdPumpCubicCurveName_optional& x);

        void
        SimSys_VarSpdPumpCubicCurveName (::std::auto_ptr< SimSys_VarSpdPumpCubicCurveName_type > p);

        // SimSys_PumpMotorHeatToFluid
        //
        typedef ::xml_schema::double_ SimSys_PumpMotorHeatToFluid_type;
        typedef ::xsd::cxx::tree::optional< SimSys_PumpMotorHeatToFluid_type > SimSys_PumpMotorHeatToFluid_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_PumpMotorHeatToFluid_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_PumpMotorHeatToFluid_traits;

        const SimSys_PumpMotorHeatToFluid_optional&
        SimSys_PumpMotorHeatToFluid () const;

        SimSys_PumpMotorHeatToFluid_optional&
        SimSys_PumpMotorHeatToFluid ();

        void
        SimSys_PumpMotorHeatToFluid (const SimSys_PumpMotorHeatToFluid_type& x);

        void
        SimSys_PumpMotorHeatToFluid (const SimSys_PumpMotorHeatToFluid_optional& x);

        // SimSys_SumUADistPiping
        //
        typedef ::xml_schema::double_ SimSys_SumUADistPiping_type;
        typedef ::xsd::cxx::tree::optional< SimSys_SumUADistPiping_type > SimSys_SumUADistPiping_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_SumUADistPiping_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_SumUADistPiping_traits;

        const SimSys_SumUADistPiping_optional&
        SimSys_SumUADistPiping () const;

        SimSys_SumUADistPiping_optional&
        SimSys_SumUADistPiping ();

        void
        SimSys_SumUADistPiping (const SimSys_SumUADistPiping_type& x);

        void
        SimSys_SumUADistPiping (const SimSys_SumUADistPiping_optional& x);

        // SimSys_DistPipingZoneName
        //
        typedef ::xml_schema::idref SimSys_DistPipingZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_DistPipingZoneName_type > SimSys_DistPipingZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_DistPipingZoneName_type, char > SimSys_DistPipingZoneName_traits;

        const SimSys_DistPipingZoneName_optional&
        SimSys_DistPipingZoneName () const;

        SimSys_DistPipingZoneName_optional&
        SimSys_DistPipingZoneName ();

        void
        SimSys_DistPipingZoneName (const SimSys_DistPipingZoneName_type& x);

        void
        SimSys_DistPipingZoneName (const SimSys_DistPipingZoneName_optional& x);

        void
        SimSys_DistPipingZoneName (::std::auto_ptr< SimSys_DistPipingZoneName_type > p);

        // SimSys_SumUARecvr_SepShell
        //
        typedef ::xml_schema::double_ SimSys_SumUARecvr_SepShell_type;
        typedef ::xsd::cxx::tree::optional< SimSys_SumUARecvr_SepShell_type > SimSys_SumUARecvr_SepShell_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_SumUARecvr_SepShell_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_SumUARecvr_SepShell_traits;

        const SimSys_SumUARecvr_SepShell_optional&
        SimSys_SumUARecvr_SepShell () const;

        SimSys_SumUARecvr_SepShell_optional&
        SimSys_SumUARecvr_SepShell ();

        void
        SimSys_SumUARecvr_SepShell (const SimSys_SumUARecvr_SepShell_type& x);

        void
        SimSys_SumUARecvr_SepShell (const SimSys_SumUARecvr_SepShell_optional& x);

        // SimSys_Recvr_SepZoneName
        //
        typedef ::xml_schema::idref SimSys_Recvr_SepZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_Recvr_SepZoneName_type > SimSys_Recvr_SepZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_Recvr_SepZoneName_type, char > SimSys_Recvr_SepZoneName_traits;

        const SimSys_Recvr_SepZoneName_optional&
        SimSys_Recvr_SepZoneName () const;

        SimSys_Recvr_SepZoneName_optional&
        SimSys_Recvr_SepZoneName ();

        void
        SimSys_Recvr_SepZoneName (const SimSys_Recvr_SepZoneName_type& x);

        void
        SimSys_Recvr_SepZoneName (const SimSys_Recvr_SepZoneName_optional& x);

        void
        SimSys_Recvr_SepZoneName (::std::auto_ptr< SimSys_Recvr_SepZoneName_type > p);

        // SimSys_EvapRefrigInventory
        //
        typedef ::xml_schema::double_ SimSys_EvapRefrigInventory_type;
        typedef ::xsd::cxx::tree::optional< SimSys_EvapRefrigInventory_type > SimSys_EvapRefrigInventory_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_EvapRefrigInventory_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_EvapRefrigInventory_traits;

        const SimSys_EvapRefrigInventory_optional&
        SimSys_EvapRefrigInventory () const;

        SimSys_EvapRefrigInventory_optional&
        SimSys_EvapRefrigInventory ();

        void
        SimSys_EvapRefrigInventory (const SimSys_EvapRefrigInventory_type& x);

        void
        SimSys_EvapRefrigInventory (const SimSys_EvapRefrigInventory_optional& x);

        // Constructors.
        //
        SimSystem_RefrigerationSecondary_FullSystem (const RefId_type&);

        SimSystem_RefrigerationSecondary_FullSystem (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        SimSystem_RefrigerationSecondary_FullSystem (const SimSystem_RefrigerationSecondary_FullSystem& x,
                                                     ::xml_schema::flags f = 0,
                                                     ::xml_schema::container* c = 0);

        virtual SimSystem_RefrigerationSecondary_FullSystem*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSystem_RefrigerationSecondary_FullSystem&
        operator= (const SimSystem_RefrigerationSecondary_FullSystem& x);

        virtual 
        ~SimSystem_RefrigerationSecondary_FullSystem ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
        SimSys_EndUseSubCat_optional SimSys_EndUseSubCat_;
        SimSys_CircFluidType_optional SimSys_CircFluidType_;
        SimSys_CircFluidName_optional SimSys_CircFluidName_;
        SimSys_EvapCapacity_optional SimSys_EvapCapacity_;
        SimSys_EvapFlowRateSecndFluid_optional SimSys_EvapFlowRateSecndFluid_;
        SimSys_EvapEvaporatingTemp_optional SimSys_EvapEvaporatingTemp_;
        SimSys_EvapApproachTempDiff_optional SimSys_EvapApproachTempDiff_;
        SimSys_EvapRangeTempDiff_optional SimSys_EvapRangeTempDiff_;
        SimSys_NumbPumpsInLoop_optional SimSys_NumbPumpsInLoop_;
        SimSys_TotalPumpFlowRate_optional SimSys_TotalPumpFlowRate_;
        SimSys_TotalPumpPower_optional SimSys_TotalPumpPower_;
        SimSys_TotalPumpHead_optional SimSys_TotalPumpHead_;
        SimSys_PhaseChangeCircRate_optional SimSys_PhaseChangeCircRate_;
        SimSys_PumpDriveType_optional SimSys_PumpDriveType_;
        SimSys_VarSpdPumpCubicCurveName_optional SimSys_VarSpdPumpCubicCurveName_;
        SimSys_PumpMotorHeatToFluid_optional SimSys_PumpMotorHeatToFluid_;
        SimSys_SumUADistPiping_optional SimSys_SumUADistPiping_;
        SimSys_DistPipingZoneName_optional SimSys_DistPipingZoneName_;
        SimSys_SumUARecvr_SepShell_optional SimSys_SumUARecvr_SepShell_;
        SimSys_Recvr_SepZoneName_optional SimSys_Recvr_SepZoneName_;
        SimSys_EvapRefrigInventory_optional SimSys_EvapRefrigInventory_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SYSTEM_REFRIGERATION_SECONDARY_FULL_SYSTEM_HXX
