// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateDaylighting.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateDaylighting
      // 

      const SimTemplateDaylighting::TemplateDaylightingController_optional& SimTemplateDaylighting::
      TemplateDaylightingController () const
      {
        return this->TemplateDaylightingController_;
      }

      SimTemplateDaylighting::TemplateDaylightingController_optional& SimTemplateDaylighting::
      TemplateDaylightingController ()
      {
        return this->TemplateDaylightingController_;
      }

      void SimTemplateDaylighting::
      TemplateDaylightingController (const TemplateDaylightingController_type& x)
      {
        this->TemplateDaylightingController_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateDaylightingController (const TemplateDaylightingController_optional& x)
      {
        this->TemplateDaylightingController_ = x;
      }

      void SimTemplateDaylighting::
      TemplateDaylightingController (::std::auto_ptr< TemplateDaylightingController_type > x)
      {
        this->TemplateDaylightingController_.set (x);
      }

      const SimTemplateDaylighting::TemplateNumberOfSensors_optional& SimTemplateDaylighting::
      TemplateNumberOfSensors () const
      {
        return this->TemplateNumberOfSensors_;
      }

      SimTemplateDaylighting::TemplateNumberOfSensors_optional& SimTemplateDaylighting::
      TemplateNumberOfSensors ()
      {
        return this->TemplateNumberOfSensors_;
      }

      void SimTemplateDaylighting::
      TemplateNumberOfSensors (const TemplateNumberOfSensors_type& x)
      {
        this->TemplateNumberOfSensors_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateNumberOfSensors (const TemplateNumberOfSensors_optional& x)
      {
        this->TemplateNumberOfSensors_ = x;
      }

      const SimTemplateDaylighting::TemplateFractionCntrlSensor1_optional& SimTemplateDaylighting::
      TemplateFractionCntrlSensor1 () const
      {
        return this->TemplateFractionCntrlSensor1_;
      }

      SimTemplateDaylighting::TemplateFractionCntrlSensor1_optional& SimTemplateDaylighting::
      TemplateFractionCntrlSensor1 ()
      {
        return this->TemplateFractionCntrlSensor1_;
      }

      void SimTemplateDaylighting::
      TemplateFractionCntrlSensor1 (const TemplateFractionCntrlSensor1_type& x)
      {
        this->TemplateFractionCntrlSensor1_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateFractionCntrlSensor1 (const TemplateFractionCntrlSensor1_optional& x)
      {
        this->TemplateFractionCntrlSensor1_ = x;
      }

      const SimTemplateDaylighting::TemplateFractionCntrlSensor2_optional& SimTemplateDaylighting::
      TemplateFractionCntrlSensor2 () const
      {
        return this->TemplateFractionCntrlSensor2_;
      }

      SimTemplateDaylighting::TemplateFractionCntrlSensor2_optional& SimTemplateDaylighting::
      TemplateFractionCntrlSensor2 ()
      {
        return this->TemplateFractionCntrlSensor2_;
      }

      void SimTemplateDaylighting::
      TemplateFractionCntrlSensor2 (const TemplateFractionCntrlSensor2_type& x)
      {
        this->TemplateFractionCntrlSensor2_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateFractionCntrlSensor2 (const TemplateFractionCntrlSensor2_optional& x)
      {
        this->TemplateFractionCntrlSensor2_ = x;
      }

      const SimTemplateDaylighting::TemplateIlluminanceSetpoint1_optional& SimTemplateDaylighting::
      TemplateIlluminanceSetpoint1 () const
      {
        return this->TemplateIlluminanceSetpoint1_;
      }

      SimTemplateDaylighting::TemplateIlluminanceSetpoint1_optional& SimTemplateDaylighting::
      TemplateIlluminanceSetpoint1 ()
      {
        return this->TemplateIlluminanceSetpoint1_;
      }

      void SimTemplateDaylighting::
      TemplateIlluminanceSetpoint1 (const TemplateIlluminanceSetpoint1_type& x)
      {
        this->TemplateIlluminanceSetpoint1_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateIlluminanceSetpoint1 (const TemplateIlluminanceSetpoint1_optional& x)
      {
        this->TemplateIlluminanceSetpoint1_ = x;
      }

      const SimTemplateDaylighting::TemplateIlluminanceSetpoint2_optional& SimTemplateDaylighting::
      TemplateIlluminanceSetpoint2 () const
      {
        return this->TemplateIlluminanceSetpoint2_;
      }

      SimTemplateDaylighting::TemplateIlluminanceSetpoint2_optional& SimTemplateDaylighting::
      TemplateIlluminanceSetpoint2 ()
      {
        return this->TemplateIlluminanceSetpoint2_;
      }

      void SimTemplateDaylighting::
      TemplateIlluminanceSetpoint2 (const TemplateIlluminanceSetpoint2_type& x)
      {
        this->TemplateIlluminanceSetpoint2_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateIlluminanceSetpoint2 (const TemplateIlluminanceSetpoint2_optional& x)
      {
        this->TemplateIlluminanceSetpoint2_ = x;
      }

      const SimTemplateDaylighting::TemplateLuxSensor1_optional& SimTemplateDaylighting::
      TemplateLuxSensor1 () const
      {
        return this->TemplateLuxSensor1_;
      }

      SimTemplateDaylighting::TemplateLuxSensor1_optional& SimTemplateDaylighting::
      TemplateLuxSensor1 ()
      {
        return this->TemplateLuxSensor1_;
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor1 (const TemplateLuxSensor1_type& x)
      {
        this->TemplateLuxSensor1_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor1 (const TemplateLuxSensor1_optional& x)
      {
        this->TemplateLuxSensor1_ = x;
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor1 (::std::auto_ptr< TemplateLuxSensor1_type > x)
      {
        this->TemplateLuxSensor1_.set (x);
      }

      const SimTemplateDaylighting::TemplateSensorType1_optional& SimTemplateDaylighting::
      TemplateSensorType1 () const
      {
        return this->TemplateSensorType1_;
      }

      SimTemplateDaylighting::TemplateSensorType1_optional& SimTemplateDaylighting::
      TemplateSensorType1 ()
      {
        return this->TemplateSensorType1_;
      }

      void SimTemplateDaylighting::
      TemplateSensorType1 (const TemplateSensorType1_type& x)
      {
        this->TemplateSensorType1_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateSensorType1 (const TemplateSensorType1_optional& x)
      {
        this->TemplateSensorType1_ = x;
      }

      void SimTemplateDaylighting::
      TemplateSensorType1 (::std::auto_ptr< TemplateSensorType1_type > x)
      {
        this->TemplateSensorType1_.set (x);
      }

      const SimTemplateDaylighting::Sensor1_LocAlongWindows_optional& SimTemplateDaylighting::
      Sensor1_LocAlongWindows () const
      {
        return this->Sensor1_LocAlongWindows_;
      }

      SimTemplateDaylighting::Sensor1_LocAlongWindows_optional& SimTemplateDaylighting::
      Sensor1_LocAlongWindows ()
      {
        return this->Sensor1_LocAlongWindows_;
      }

      void SimTemplateDaylighting::
      Sensor1_LocAlongWindows (const Sensor1_LocAlongWindows_type& x)
      {
        this->Sensor1_LocAlongWindows_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor1_LocAlongWindows (const Sensor1_LocAlongWindows_optional& x)
      {
        this->Sensor1_LocAlongWindows_ = x;
      }

      void SimTemplateDaylighting::
      Sensor1_LocAlongWindows (::std::auto_ptr< Sensor1_LocAlongWindows_type > x)
      {
        this->Sensor1_LocAlongWindows_.set (x);
      }

      const SimTemplateDaylighting::Sensor1_LocWindowsOffset_optional& SimTemplateDaylighting::
      Sensor1_LocWindowsOffset () const
      {
        return this->Sensor1_LocWindowsOffset_;
      }

      SimTemplateDaylighting::Sensor1_LocWindowsOffset_optional& SimTemplateDaylighting::
      Sensor1_LocWindowsOffset ()
      {
        return this->Sensor1_LocWindowsOffset_;
      }

      void SimTemplateDaylighting::
      Sensor1_LocWindowsOffset (const Sensor1_LocWindowsOffset_type& x)
      {
        this->Sensor1_LocWindowsOffset_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor1_LocWindowsOffset (const Sensor1_LocWindowsOffset_optional& x)
      {
        this->Sensor1_LocWindowsOffset_ = x;
      }

      const SimTemplateDaylighting::Sensor1_LocHeightAboveFloor_optional& SimTemplateDaylighting::
      Sensor1_LocHeightAboveFloor () const
      {
        return this->Sensor1_LocHeightAboveFloor_;
      }

      SimTemplateDaylighting::Sensor1_LocHeightAboveFloor_optional& SimTemplateDaylighting::
      Sensor1_LocHeightAboveFloor ()
      {
        return this->Sensor1_LocHeightAboveFloor_;
      }

      void SimTemplateDaylighting::
      Sensor1_LocHeightAboveFloor (const Sensor1_LocHeightAboveFloor_type& x)
      {
        this->Sensor1_LocHeightAboveFloor_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor1_LocHeightAboveFloor (const Sensor1_LocHeightAboveFloor_optional& x)
      {
        this->Sensor1_LocHeightAboveFloor_ = x;
      }

      const SimTemplateDaylighting::TemplateLuxSensor2_optional& SimTemplateDaylighting::
      TemplateLuxSensor2 () const
      {
        return this->TemplateLuxSensor2_;
      }

      SimTemplateDaylighting::TemplateLuxSensor2_optional& SimTemplateDaylighting::
      TemplateLuxSensor2 ()
      {
        return this->TemplateLuxSensor2_;
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor2 (const TemplateLuxSensor2_type& x)
      {
        this->TemplateLuxSensor2_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor2 (const TemplateLuxSensor2_optional& x)
      {
        this->TemplateLuxSensor2_ = x;
      }

      void SimTemplateDaylighting::
      TemplateLuxSensor2 (::std::auto_ptr< TemplateLuxSensor2_type > x)
      {
        this->TemplateLuxSensor2_.set (x);
      }

      const SimTemplateDaylighting::TemplateSensorType2_optional& SimTemplateDaylighting::
      TemplateSensorType2 () const
      {
        return this->TemplateSensorType2_;
      }

      SimTemplateDaylighting::TemplateSensorType2_optional& SimTemplateDaylighting::
      TemplateSensorType2 ()
      {
        return this->TemplateSensorType2_;
      }

      void SimTemplateDaylighting::
      TemplateSensorType2 (const TemplateSensorType2_type& x)
      {
        this->TemplateSensorType2_.set (x);
      }

      void SimTemplateDaylighting::
      TemplateSensorType2 (const TemplateSensorType2_optional& x)
      {
        this->TemplateSensorType2_ = x;
      }

      void SimTemplateDaylighting::
      TemplateSensorType2 (::std::auto_ptr< TemplateSensorType2_type > x)
      {
        this->TemplateSensorType2_.set (x);
      }

      const SimTemplateDaylighting::Sensor2_LocAlongWindows_optional& SimTemplateDaylighting::
      Sensor2_LocAlongWindows () const
      {
        return this->Sensor2_LocAlongWindows_;
      }

      SimTemplateDaylighting::Sensor2_LocAlongWindows_optional& SimTemplateDaylighting::
      Sensor2_LocAlongWindows ()
      {
        return this->Sensor2_LocAlongWindows_;
      }

      void SimTemplateDaylighting::
      Sensor2_LocAlongWindows (const Sensor2_LocAlongWindows_type& x)
      {
        this->Sensor2_LocAlongWindows_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor2_LocAlongWindows (const Sensor2_LocAlongWindows_optional& x)
      {
        this->Sensor2_LocAlongWindows_ = x;
      }

      void SimTemplateDaylighting::
      Sensor2_LocAlongWindows (::std::auto_ptr< Sensor2_LocAlongWindows_type > x)
      {
        this->Sensor2_LocAlongWindows_.set (x);
      }

      const SimTemplateDaylighting::Sensor2_LocWindowsOffset_optional& SimTemplateDaylighting::
      Sensor2_LocWindowsOffset () const
      {
        return this->Sensor2_LocWindowsOffset_;
      }

      SimTemplateDaylighting::Sensor2_LocWindowsOffset_optional& SimTemplateDaylighting::
      Sensor2_LocWindowsOffset ()
      {
        return this->Sensor2_LocWindowsOffset_;
      }

      void SimTemplateDaylighting::
      Sensor2_LocWindowsOffset (const Sensor2_LocWindowsOffset_type& x)
      {
        this->Sensor2_LocWindowsOffset_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor2_LocWindowsOffset (const Sensor2_LocWindowsOffset_optional& x)
      {
        this->Sensor2_LocWindowsOffset_ = x;
      }

      const SimTemplateDaylighting::Sensor2_LocHeightAboveFloor_optional& SimTemplateDaylighting::
      Sensor2_LocHeightAboveFloor () const
      {
        return this->Sensor2_LocHeightAboveFloor_;
      }

      SimTemplateDaylighting::Sensor2_LocHeightAboveFloor_optional& SimTemplateDaylighting::
      Sensor2_LocHeightAboveFloor ()
      {
        return this->Sensor2_LocHeightAboveFloor_;
      }

      void SimTemplateDaylighting::
      Sensor2_LocHeightAboveFloor (const Sensor2_LocHeightAboveFloor_type& x)
      {
        this->Sensor2_LocHeightAboveFloor_.set (x);
      }

      void SimTemplateDaylighting::
      Sensor2_LocHeightAboveFloor (const Sensor2_LocHeightAboveFloor_optional& x)
      {
        this->Sensor2_LocHeightAboveFloor_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateDaylighting
      //

      SimTemplateDaylighting::
      SimTemplateDaylighting (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (RefId),
        TemplateDaylightingController_ (this),
        TemplateNumberOfSensors_ (this),
        TemplateFractionCntrlSensor1_ (this),
        TemplateFractionCntrlSensor2_ (this),
        TemplateIlluminanceSetpoint1_ (this),
        TemplateIlluminanceSetpoint2_ (this),
        TemplateLuxSensor1_ (this),
        TemplateSensorType1_ (this),
        Sensor1_LocAlongWindows_ (this),
        Sensor1_LocWindowsOffset_ (this),
        Sensor1_LocHeightAboveFloor_ (this),
        TemplateLuxSensor2_ (this),
        TemplateSensorType2_ (this),
        Sensor2_LocAlongWindows_ (this),
        Sensor2_LocWindowsOffset_ (this),
        Sensor2_LocHeightAboveFloor_ (this)
      {
      }

      SimTemplateDaylighting::
      SimTemplateDaylighting (const SimTemplateDaylighting& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (x, f, c),
        TemplateDaylightingController_ (x.TemplateDaylightingController_, f, this),
        TemplateNumberOfSensors_ (x.TemplateNumberOfSensors_, f, this),
        TemplateFractionCntrlSensor1_ (x.TemplateFractionCntrlSensor1_, f, this),
        TemplateFractionCntrlSensor2_ (x.TemplateFractionCntrlSensor2_, f, this),
        TemplateIlluminanceSetpoint1_ (x.TemplateIlluminanceSetpoint1_, f, this),
        TemplateIlluminanceSetpoint2_ (x.TemplateIlluminanceSetpoint2_, f, this),
        TemplateLuxSensor1_ (x.TemplateLuxSensor1_, f, this),
        TemplateSensorType1_ (x.TemplateSensorType1_, f, this),
        Sensor1_LocAlongWindows_ (x.Sensor1_LocAlongWindows_, f, this),
        Sensor1_LocWindowsOffset_ (x.Sensor1_LocWindowsOffset_, f, this),
        Sensor1_LocHeightAboveFloor_ (x.Sensor1_LocHeightAboveFloor_, f, this),
        TemplateLuxSensor2_ (x.TemplateLuxSensor2_, f, this),
        TemplateSensorType2_ (x.TemplateSensorType2_, f, this),
        Sensor2_LocAlongWindows_ (x.Sensor2_LocAlongWindows_, f, this),
        Sensor2_LocWindowsOffset_ (x.Sensor2_LocWindowsOffset_, f, this),
        Sensor2_LocHeightAboveFloor_ (x.Sensor2_LocHeightAboveFloor_, f, this)
      {
      }

      SimTemplateDaylighting::
      SimTemplateDaylighting (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateDaylightingController_ (this),
        TemplateNumberOfSensors_ (this),
        TemplateFractionCntrlSensor1_ (this),
        TemplateFractionCntrlSensor2_ (this),
        TemplateIlluminanceSetpoint1_ (this),
        TemplateIlluminanceSetpoint2_ (this),
        TemplateLuxSensor1_ (this),
        TemplateSensorType1_ (this),
        Sensor1_LocAlongWindows_ (this),
        Sensor1_LocWindowsOffset_ (this),
        Sensor1_LocHeightAboveFloor_ (this),
        TemplateLuxSensor2_ (this),
        TemplateSensorType2_ (this),
        Sensor2_LocAlongWindows_ (this),
        Sensor2_LocWindowsOffset_ (this),
        Sensor2_LocHeightAboveFloor_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateDaylighting::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateDaylightingController
          //
          if (n.name () == "TemplateDaylightingController" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateDaylightingController_type > r (
              TemplateDaylightingController_traits::create (i, f, this));

            if (!this->TemplateDaylightingController_)
            {
              this->TemplateDaylightingController_.set (r);
              continue;
            }
          }

          // TemplateNumberOfSensors
          //
          if (n.name () == "TemplateNumberOfSensors" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemplateNumberOfSensors_)
            {
              this->TemplateNumberOfSensors_.set (TemplateNumberOfSensors_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateFractionCntrlSensor1
          //
          if (n.name () == "TemplateFractionCntrlSensor1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemplateFractionCntrlSensor1_)
            {
              this->TemplateFractionCntrlSensor1_.set (TemplateFractionCntrlSensor1_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateFractionCntrlSensor2
          //
          if (n.name () == "TemplateFractionCntrlSensor2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemplateFractionCntrlSensor2_)
            {
              this->TemplateFractionCntrlSensor2_.set (TemplateFractionCntrlSensor2_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateIlluminanceSetpoint1
          //
          if (n.name () == "TemplateIlluminanceSetpoint1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemplateIlluminanceSetpoint1_)
            {
              this->TemplateIlluminanceSetpoint1_.set (TemplateIlluminanceSetpoint1_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateIlluminanceSetpoint2
          //
          if (n.name () == "TemplateIlluminanceSetpoint2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemplateIlluminanceSetpoint2_)
            {
              this->TemplateIlluminanceSetpoint2_.set (TemplateIlluminanceSetpoint2_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateLuxSensor1
          //
          if (n.name () == "TemplateLuxSensor1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateLuxSensor1_type > r (
              TemplateLuxSensor1_traits::create (i, f, this));

            if (!this->TemplateLuxSensor1_)
            {
              this->TemplateLuxSensor1_.set (r);
              continue;
            }
          }

          // TemplateSensorType1
          //
          if (n.name () == "TemplateSensorType1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSensorType1_type > r (
              TemplateSensorType1_traits::create (i, f, this));

            if (!this->TemplateSensorType1_)
            {
              this->TemplateSensorType1_.set (r);
              continue;
            }
          }

          // Sensor1_LocAlongWindows
          //
          if (n.name () == "Sensor1_LocAlongWindows" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Sensor1_LocAlongWindows_type > r (
              Sensor1_LocAlongWindows_traits::create (i, f, this));

            if (!this->Sensor1_LocAlongWindows_)
            {
              this->Sensor1_LocAlongWindows_.set (r);
              continue;
            }
          }

          // Sensor1_LocWindowsOffset
          //
          if (n.name () == "Sensor1_LocWindowsOffset" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Sensor1_LocWindowsOffset_)
            {
              this->Sensor1_LocWindowsOffset_.set (Sensor1_LocWindowsOffset_traits::create (i, f, this));
              continue;
            }
          }

          // Sensor1_LocHeightAboveFloor
          //
          if (n.name () == "Sensor1_LocHeightAboveFloor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Sensor1_LocHeightAboveFloor_)
            {
              this->Sensor1_LocHeightAboveFloor_.set (Sensor1_LocHeightAboveFloor_traits::create (i, f, this));
              continue;
            }
          }

          // TemplateLuxSensor2
          //
          if (n.name () == "TemplateLuxSensor2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateLuxSensor2_type > r (
              TemplateLuxSensor2_traits::create (i, f, this));

            if (!this->TemplateLuxSensor2_)
            {
              this->TemplateLuxSensor2_.set (r);
              continue;
            }
          }

          // TemplateSensorType2
          //
          if (n.name () == "TemplateSensorType2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSensorType2_type > r (
              TemplateSensorType2_traits::create (i, f, this));

            if (!this->TemplateSensorType2_)
            {
              this->TemplateSensorType2_.set (r);
              continue;
            }
          }

          // Sensor2_LocAlongWindows
          //
          if (n.name () == "Sensor2_LocAlongWindows" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Sensor2_LocAlongWindows_type > r (
              Sensor2_LocAlongWindows_traits::create (i, f, this));

            if (!this->Sensor2_LocAlongWindows_)
            {
              this->Sensor2_LocAlongWindows_.set (r);
              continue;
            }
          }

          // Sensor2_LocWindowsOffset
          //
          if (n.name () == "Sensor2_LocWindowsOffset" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Sensor2_LocWindowsOffset_)
            {
              this->Sensor2_LocWindowsOffset_.set (Sensor2_LocWindowsOffset_traits::create (i, f, this));
              continue;
            }
          }

          // Sensor2_LocHeightAboveFloor
          //
          if (n.name () == "Sensor2_LocHeightAboveFloor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Sensor2_LocHeightAboveFloor_)
            {
              this->Sensor2_LocHeightAboveFloor_.set (Sensor2_LocHeightAboveFloor_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimTemplateDaylighting* SimTemplateDaylighting::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateDaylighting (*this, f, c);
      }

      SimTemplateDaylighting& SimTemplateDaylighting::
      operator= (const SimTemplateDaylighting& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimTemplate& > (*this) = x;
          this->TemplateDaylightingController_ = x.TemplateDaylightingController_;
          this->TemplateNumberOfSensors_ = x.TemplateNumberOfSensors_;
          this->TemplateFractionCntrlSensor1_ = x.TemplateFractionCntrlSensor1_;
          this->TemplateFractionCntrlSensor2_ = x.TemplateFractionCntrlSensor2_;
          this->TemplateIlluminanceSetpoint1_ = x.TemplateIlluminanceSetpoint1_;
          this->TemplateIlluminanceSetpoint2_ = x.TemplateIlluminanceSetpoint2_;
          this->TemplateLuxSensor1_ = x.TemplateLuxSensor1_;
          this->TemplateSensorType1_ = x.TemplateSensorType1_;
          this->Sensor1_LocAlongWindows_ = x.Sensor1_LocAlongWindows_;
          this->Sensor1_LocWindowsOffset_ = x.Sensor1_LocWindowsOffset_;
          this->Sensor1_LocHeightAboveFloor_ = x.Sensor1_LocHeightAboveFloor_;
          this->TemplateLuxSensor2_ = x.TemplateLuxSensor2_;
          this->TemplateSensorType2_ = x.TemplateSensorType2_;
          this->Sensor2_LocAlongWindows_ = x.Sensor2_LocAlongWindows_;
          this->Sensor2_LocWindowsOffset_ = x.Sensor2_LocWindowsOffset_;
          this->Sensor2_LocHeightAboveFloor_ = x.Sensor2_LocHeightAboveFloor_;
        }

        return *this;
      }

      SimTemplateDaylighting::
      ~SimTemplateDaylighting ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

