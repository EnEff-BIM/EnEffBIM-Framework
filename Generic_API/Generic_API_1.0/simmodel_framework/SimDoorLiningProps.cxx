// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDoorLiningProps.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimDoorLiningProps
      // 

      const SimDoorLiningProps::GlobalId_optional& SimDoorLiningProps::
      GlobalId () const
      {
        return this->GlobalId_;
      }

      SimDoorLiningProps::GlobalId_optional& SimDoorLiningProps::
      GlobalId ()
      {
        return this->GlobalId_;
      }

      void SimDoorLiningProps::
      GlobalId (const GlobalId_type& x)
      {
        this->GlobalId_.set (x);
      }

      void SimDoorLiningProps::
      GlobalId (const GlobalId_optional& x)
      {
        this->GlobalId_ = x;
      }

      void SimDoorLiningProps::
      GlobalId (::std::auto_ptr< GlobalId_type > x)
      {
        this->GlobalId_.set (x);
      }

      const SimDoorLiningProps::OwnerHistory_optional& SimDoorLiningProps::
      OwnerHistory () const
      {
        return this->OwnerHistory_;
      }

      SimDoorLiningProps::OwnerHistory_optional& SimDoorLiningProps::
      OwnerHistory ()
      {
        return this->OwnerHistory_;
      }

      void SimDoorLiningProps::
      OwnerHistory (const OwnerHistory_type& x)
      {
        this->OwnerHistory_.set (x);
      }

      void SimDoorLiningProps::
      OwnerHistory (const OwnerHistory_optional& x)
      {
        this->OwnerHistory_ = x;
      }

      void SimDoorLiningProps::
      OwnerHistory (::std::auto_ptr< OwnerHistory_type > x)
      {
        this->OwnerHistory_.set (x);
      }

      const SimDoorLiningProps::LiningDepth_optional& SimDoorLiningProps::
      LiningDepth () const
      {
        return this->LiningDepth_;
      }

      SimDoorLiningProps::LiningDepth_optional& SimDoorLiningProps::
      LiningDepth ()
      {
        return this->LiningDepth_;
      }

      void SimDoorLiningProps::
      LiningDepth (const LiningDepth_type& x)
      {
        this->LiningDepth_.set (x);
      }

      void SimDoorLiningProps::
      LiningDepth (const LiningDepth_optional& x)
      {
        this->LiningDepth_ = x;
      }

      const SimDoorLiningProps::LiningThickness_optional& SimDoorLiningProps::
      LiningThickness () const
      {
        return this->LiningThickness_;
      }

      SimDoorLiningProps::LiningThickness_optional& SimDoorLiningProps::
      LiningThickness ()
      {
        return this->LiningThickness_;
      }

      void SimDoorLiningProps::
      LiningThickness (const LiningThickness_type& x)
      {
        this->LiningThickness_.set (x);
      }

      void SimDoorLiningProps::
      LiningThickness (const LiningThickness_optional& x)
      {
        this->LiningThickness_ = x;
      }

      const SimDoorLiningProps::ThresholdDepth_optional& SimDoorLiningProps::
      ThresholdDepth () const
      {
        return this->ThresholdDepth_;
      }

      SimDoorLiningProps::ThresholdDepth_optional& SimDoorLiningProps::
      ThresholdDepth ()
      {
        return this->ThresholdDepth_;
      }

      void SimDoorLiningProps::
      ThresholdDepth (const ThresholdDepth_type& x)
      {
        this->ThresholdDepth_.set (x);
      }

      void SimDoorLiningProps::
      ThresholdDepth (const ThresholdDepth_optional& x)
      {
        this->ThresholdDepth_ = x;
      }

      const SimDoorLiningProps::ThresholdThickness_optional& SimDoorLiningProps::
      ThresholdThickness () const
      {
        return this->ThresholdThickness_;
      }

      SimDoorLiningProps::ThresholdThickness_optional& SimDoorLiningProps::
      ThresholdThickness ()
      {
        return this->ThresholdThickness_;
      }

      void SimDoorLiningProps::
      ThresholdThickness (const ThresholdThickness_type& x)
      {
        this->ThresholdThickness_.set (x);
      }

      void SimDoorLiningProps::
      ThresholdThickness (const ThresholdThickness_optional& x)
      {
        this->ThresholdThickness_ = x;
      }

      const SimDoorLiningProps::TransomThickness_optional& SimDoorLiningProps::
      TransomThickness () const
      {
        return this->TransomThickness_;
      }

      SimDoorLiningProps::TransomThickness_optional& SimDoorLiningProps::
      TransomThickness ()
      {
        return this->TransomThickness_;
      }

      void SimDoorLiningProps::
      TransomThickness (const TransomThickness_type& x)
      {
        this->TransomThickness_.set (x);
      }

      void SimDoorLiningProps::
      TransomThickness (const TransomThickness_optional& x)
      {
        this->TransomThickness_ = x;
      }

      const SimDoorLiningProps::TransomOffset_optional& SimDoorLiningProps::
      TransomOffset () const
      {
        return this->TransomOffset_;
      }

      SimDoorLiningProps::TransomOffset_optional& SimDoorLiningProps::
      TransomOffset ()
      {
        return this->TransomOffset_;
      }

      void SimDoorLiningProps::
      TransomOffset (const TransomOffset_type& x)
      {
        this->TransomOffset_.set (x);
      }

      void SimDoorLiningProps::
      TransomOffset (const TransomOffset_optional& x)
      {
        this->TransomOffset_ = x;
      }

      const SimDoorLiningProps::LiningOffset_optional& SimDoorLiningProps::
      LiningOffset () const
      {
        return this->LiningOffset_;
      }

      SimDoorLiningProps::LiningOffset_optional& SimDoorLiningProps::
      LiningOffset ()
      {
        return this->LiningOffset_;
      }

      void SimDoorLiningProps::
      LiningOffset (const LiningOffset_type& x)
      {
        this->LiningOffset_.set (x);
      }

      void SimDoorLiningProps::
      LiningOffset (const LiningOffset_optional& x)
      {
        this->LiningOffset_ = x;
      }

      const SimDoorLiningProps::ThresholdOffset_optional& SimDoorLiningProps::
      ThresholdOffset () const
      {
        return this->ThresholdOffset_;
      }

      SimDoorLiningProps::ThresholdOffset_optional& SimDoorLiningProps::
      ThresholdOffset ()
      {
        return this->ThresholdOffset_;
      }

      void SimDoorLiningProps::
      ThresholdOffset (const ThresholdOffset_type& x)
      {
        this->ThresholdOffset_.set (x);
      }

      void SimDoorLiningProps::
      ThresholdOffset (const ThresholdOffset_optional& x)
      {
        this->ThresholdOffset_ = x;
      }

      const SimDoorLiningProps::CasingThickness_optional& SimDoorLiningProps::
      CasingThickness () const
      {
        return this->CasingThickness_;
      }

      SimDoorLiningProps::CasingThickness_optional& SimDoorLiningProps::
      CasingThickness ()
      {
        return this->CasingThickness_;
      }

      void SimDoorLiningProps::
      CasingThickness (const CasingThickness_type& x)
      {
        this->CasingThickness_.set (x);
      }

      void SimDoorLiningProps::
      CasingThickness (const CasingThickness_optional& x)
      {
        this->CasingThickness_ = x;
      }

      const SimDoorLiningProps::CasingDepth_optional& SimDoorLiningProps::
      CasingDepth () const
      {
        return this->CasingDepth_;
      }

      SimDoorLiningProps::CasingDepth_optional& SimDoorLiningProps::
      CasingDepth ()
      {
        return this->CasingDepth_;
      }

      void SimDoorLiningProps::
      CasingDepth (const CasingDepth_type& x)
      {
        this->CasingDepth_.set (x);
      }

      void SimDoorLiningProps::
      CasingDepth (const CasingDepth_optional& x)
      {
        this->CasingDepth_ = x;
      }

      const SimDoorLiningProps::ShapeAspectStyle_optional& SimDoorLiningProps::
      ShapeAspectStyle () const
      {
        return this->ShapeAspectStyle_;
      }

      SimDoorLiningProps::ShapeAspectStyle_optional& SimDoorLiningProps::
      ShapeAspectStyle ()
      {
        return this->ShapeAspectStyle_;
      }

      void SimDoorLiningProps::
      ShapeAspectStyle (const ShapeAspectStyle_type& x)
      {
        this->ShapeAspectStyle_.set (x);
      }

      void SimDoorLiningProps::
      ShapeAspectStyle (const ShapeAspectStyle_optional& x)
      {
        this->ShapeAspectStyle_ = x;
      }

      void SimDoorLiningProps::
      ShapeAspectStyle (::std::auto_ptr< ShapeAspectStyle_type > x)
      {
        this->ShapeAspectStyle_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimDoorLiningProps
      //

      SimDoorLiningProps::
      SimDoorLiningProps (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimPropertySetDefinition (RefId),
        GlobalId_ (this),
        OwnerHistory_ (this),
        LiningDepth_ (this),
        LiningThickness_ (this),
        ThresholdDepth_ (this),
        ThresholdThickness_ (this),
        TransomThickness_ (this),
        TransomOffset_ (this),
        LiningOffset_ (this),
        ThresholdOffset_ (this),
        CasingThickness_ (this),
        CasingDepth_ (this),
        ShapeAspectStyle_ (this)
      {
      }

      SimDoorLiningProps::
      SimDoorLiningProps (const SimDoorLiningProps& x,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimPropertySetDefinition (x, f, c),
        GlobalId_ (x.GlobalId_, f, this),
        OwnerHistory_ (x.OwnerHistory_, f, this),
        LiningDepth_ (x.LiningDepth_, f, this),
        LiningThickness_ (x.LiningThickness_, f, this),
        ThresholdDepth_ (x.ThresholdDepth_, f, this),
        ThresholdThickness_ (x.ThresholdThickness_, f, this),
        TransomThickness_ (x.TransomThickness_, f, this),
        TransomOffset_ (x.TransomOffset_, f, this),
        LiningOffset_ (x.LiningOffset_, f, this),
        ThresholdOffset_ (x.ThresholdOffset_, f, this),
        CasingThickness_ (x.CasingThickness_, f, this),
        CasingDepth_ (x.CasingDepth_, f, this),
        ShapeAspectStyle_ (x.ShapeAspectStyle_, f, this)
      {
      }

      SimDoorLiningProps::
      SimDoorLiningProps (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f,
                          ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimPropertySetDefinition (e, f | ::xml_schema::flags::base, c),
        GlobalId_ (this),
        OwnerHistory_ (this),
        LiningDepth_ (this),
        LiningThickness_ (this),
        ThresholdDepth_ (this),
        ThresholdThickness_ (this),
        TransomThickness_ (this),
        TransomOffset_ (this),
        LiningOffset_ (this),
        ThresholdOffset_ (this),
        CasingThickness_ (this),
        CasingDepth_ (this),
        ShapeAspectStyle_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDoorLiningProps::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimPropertySetDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // GlobalId
          //
          if (n.name () == "GlobalId" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< GlobalId_type > r (
              GlobalId_traits::create (i, f, this));

            if (!this->GlobalId_)
            {
              this->GlobalId_.set (r);
              continue;
            }
          }

          // OwnerHistory
          //
          if (n.name () == "OwnerHistory" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< OwnerHistory_type > r (
              OwnerHistory_traits::create (i, f, this));

            if (!this->OwnerHistory_)
            {
              this->OwnerHistory_.set (r);
              continue;
            }
          }

          // LiningDepth
          //
          if (n.name () == "LiningDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->LiningDepth_)
            {
              this->LiningDepth_.set (LiningDepth_traits::create (i, f, this));
              continue;
            }
          }

          // LiningThickness
          //
          if (n.name () == "LiningThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->LiningThickness_)
            {
              this->LiningThickness_.set (LiningThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ThresholdDepth
          //
          if (n.name () == "ThresholdDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ThresholdDepth_)
            {
              this->ThresholdDepth_.set (ThresholdDepth_traits::create (i, f, this));
              continue;
            }
          }

          // ThresholdThickness
          //
          if (n.name () == "ThresholdThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ThresholdThickness_)
            {
              this->ThresholdThickness_.set (ThresholdThickness_traits::create (i, f, this));
              continue;
            }
          }

          // TransomThickness
          //
          if (n.name () == "TransomThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TransomThickness_)
            {
              this->TransomThickness_.set (TransomThickness_traits::create (i, f, this));
              continue;
            }
          }

          // TransomOffset
          //
          if (n.name () == "TransomOffset" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TransomOffset_)
            {
              this->TransomOffset_.set (TransomOffset_traits::create (i, f, this));
              continue;
            }
          }

          // LiningOffset
          //
          if (n.name () == "LiningOffset" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->LiningOffset_)
            {
              this->LiningOffset_.set (LiningOffset_traits::create (i, f, this));
              continue;
            }
          }

          // ThresholdOffset
          //
          if (n.name () == "ThresholdOffset" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ThresholdOffset_)
            {
              this->ThresholdOffset_.set (ThresholdOffset_traits::create (i, f, this));
              continue;
            }
          }

          // CasingThickness
          //
          if (n.name () == "CasingThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->CasingThickness_)
            {
              this->CasingThickness_.set (CasingThickness_traits::create (i, f, this));
              continue;
            }
          }

          // CasingDepth
          //
          if (n.name () == "CasingDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->CasingDepth_)
            {
              this->CasingDepth_.set (CasingDepth_traits::create (i, f, this));
              continue;
            }
          }

          // ShapeAspectStyle
          //
          if (n.name () == "ShapeAspectStyle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ShapeAspectStyle_type > r (
              ShapeAspectStyle_traits::create (i, f, this));

            if (!this->ShapeAspectStyle_)
            {
              this->ShapeAspectStyle_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimDoorLiningProps* SimDoorLiningProps::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDoorLiningProps (*this, f, c);
      }

      SimDoorLiningProps& SimDoorLiningProps::
      operator= (const SimDoorLiningProps& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimPropertySetDefinition& > (*this) = x;
          this->GlobalId_ = x.GlobalId_;
          this->OwnerHistory_ = x.OwnerHistory_;
          this->LiningDepth_ = x.LiningDepth_;
          this->LiningThickness_ = x.LiningThickness_;
          this->ThresholdDepth_ = x.ThresholdDepth_;
          this->ThresholdThickness_ = x.ThresholdThickness_;
          this->TransomThickness_ = x.TransomThickness_;
          this->TransomOffset_ = x.TransomOffset_;
          this->LiningOffset_ = x.LiningOffset_;
          this->ThresholdOffset_ = x.ThresholdOffset_;
          this->CasingThickness_ = x.CasingThickness_;
          this->CasingDepth_ = x.CasingDepth_;
          this->ShapeAspectStyle_ = x.ShapeAspectStyle_;
        }

        return *this;
      }

      SimDoorLiningProps::
      ~SimDoorLiningProps ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

