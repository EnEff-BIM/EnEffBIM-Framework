// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_DOOR_GLAZED_DOOR_INTERIOR_HXX
#define SIM_DOOR_GLAZED_DOOR_INTERIOR_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimDoor_GlazedDoor_Interior;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simdoor_glazeddoor.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimDoor_GlazedDoor_Interior: public ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor
      {
        public:
        // DoorTypeTag
        //
        typedef ::xml_schema::string DoorTypeTag_type;
        typedef ::xsd::cxx::tree::optional< DoorTypeTag_type > DoorTypeTag_optional;
        typedef ::xsd::cxx::tree::traits< DoorTypeTag_type, char > DoorTypeTag_traits;

        const DoorTypeTag_optional&
        DoorTypeTag () const;

        DoorTypeTag_optional&
        DoorTypeTag ();

        void
        DoorTypeTag (const DoorTypeTag_type& x);

        void
        DoorTypeTag (const DoorTypeTag_optional& x);

        void
        DoorTypeTag (::std::auto_ptr< DoorTypeTag_type > p);

        // DoorPanelOperation
        //
        typedef ::xml_schema::string DoorPanelOperation_type;
        typedef ::xsd::cxx::tree::optional< DoorPanelOperation_type > DoorPanelOperation_optional;
        typedef ::xsd::cxx::tree::traits< DoorPanelOperation_type, char > DoorPanelOperation_traits;

        const DoorPanelOperation_optional&
        DoorPanelOperation () const;

        DoorPanelOperation_optional&
        DoorPanelOperation ();

        void
        DoorPanelOperation (const DoorPanelOperation_type& x);

        void
        DoorPanelOperation (const DoorPanelOperation_optional& x);

        void
        DoorPanelOperation (::std::auto_ptr< DoorPanelOperation_type > p);

        // DoorConstructionType
        //
        typedef ::xml_schema::string DoorConstructionType_type;
        typedef ::xsd::cxx::tree::optional< DoorConstructionType_type > DoorConstructionType_optional;
        typedef ::xsd::cxx::tree::traits< DoorConstructionType_type, char > DoorConstructionType_traits;

        const DoorConstructionType_optional&
        DoorConstructionType () const;

        DoorConstructionType_optional&
        DoorConstructionType ();

        void
        DoorConstructionType (const DoorConstructionType_type& x);

        void
        DoorConstructionType (const DoorConstructionType_optional& x);

        void
        DoorConstructionType (::std::auto_ptr< DoorConstructionType_type > p);

        // DoorIsExternal
        //
        typedef ::xml_schema::boolean DoorIsExternal_type;
        typedef ::xsd::cxx::tree::optional< DoorIsExternal_type > DoorIsExternal_optional;
        typedef ::xsd::cxx::tree::traits< DoorIsExternal_type, char > DoorIsExternal_traits;

        const DoorIsExternal_optional&
        DoorIsExternal () const;

        DoorIsExternal_optional&
        DoorIsExternal ();

        void
        DoorIsExternal (const DoorIsExternal_type& x);

        void
        DoorIsExternal (const DoorIsExternal_optional& x);

        // CompositeThermalTransmittance
        //
        typedef ::xml_schema::double_ CompositeThermalTransmittance_type;
        typedef ::xsd::cxx::tree::optional< CompositeThermalTransmittance_type > CompositeThermalTransmittance_optional;
        typedef ::xsd::cxx::tree::traits< CompositeThermalTransmittance_type, char, ::xsd::cxx::tree::schema_type::double_ > CompositeThermalTransmittance_traits;

        const CompositeThermalTransmittance_optional&
        CompositeThermalTransmittance () const;

        CompositeThermalTransmittance_optional&
        CompositeThermalTransmittance ();

        void
        CompositeThermalTransmittance (const CompositeThermalTransmittance_type& x);

        void
        CompositeThermalTransmittance (const CompositeThermalTransmittance_optional& x);

        // DoorHeight
        //
        typedef ::xml_schema::double_ DoorHeight_type;
        typedef ::xsd::cxx::tree::optional< DoorHeight_type > DoorHeight_optional;
        typedef ::xsd::cxx::tree::traits< DoorHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorHeight_traits;

        const DoorHeight_optional&
        DoorHeight () const;

        DoorHeight_optional&
        DoorHeight ();

        void
        DoorHeight (const DoorHeight_type& x);

        void
        DoorHeight (const DoorHeight_optional& x);

        // DoorWidth
        //
        typedef ::xml_schema::double_ DoorWidth_type;
        typedef ::xsd::cxx::tree::optional< DoorWidth_type > DoorWidth_optional;
        typedef ::xsd::cxx::tree::traits< DoorWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorWidth_traits;

        const DoorWidth_optional&
        DoorWidth () const;

        DoorWidth_optional&
        DoorWidth ();

        void
        DoorWidth (const DoorWidth_type& x);

        void
        DoorWidth (const DoorWidth_optional& x);

        // DoorArea
        //
        typedef ::xml_schema::double_ DoorArea_type;
        typedef ::xsd::cxx::tree::optional< DoorArea_type > DoorArea_optional;
        typedef ::xsd::cxx::tree::traits< DoorArea_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorArea_traits;

        const DoorArea_optional&
        DoorArea () const;

        DoorArea_optional&
        DoorArea ();

        void
        DoorArea (const DoorArea_type& x);

        void
        DoorArea (const DoorArea_optional& x);

        // DoorPerimeter
        //
        typedef ::xml_schema::double_ DoorPerimeter_type;
        typedef ::xsd::cxx::tree::optional< DoorPerimeter_type > DoorPerimeter_optional;
        typedef ::xsd::cxx::tree::traits< DoorPerimeter_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorPerimeter_traits;

        const DoorPerimeter_optional&
        DoorPerimeter () const;

        DoorPerimeter_optional&
        DoorPerimeter ();

        void
        DoorPerimeter (const DoorPerimeter_type& x);

        void
        DoorPerimeter (const DoorPerimeter_optional& x);

        // DoorFrameDepth
        //
        typedef ::xml_schema::double_ DoorFrameDepth_type;
        typedef ::xsd::cxx::tree::optional< DoorFrameDepth_type > DoorFrameDepth_optional;
        typedef ::xsd::cxx::tree::traits< DoorFrameDepth_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorFrameDepth_traits;

        const DoorFrameDepth_optional&
        DoorFrameDepth () const;

        DoorFrameDepth_optional&
        DoorFrameDepth ();

        void
        DoorFrameDepth (const DoorFrameDepth_type& x);

        void
        DoorFrameDepth (const DoorFrameDepth_optional& x);

        // DoorFrameThickness
        //
        typedef ::xml_schema::double_ DoorFrameThickness_type;
        typedef ::xsd::cxx::tree::optional< DoorFrameThickness_type > DoorFrameThickness_optional;
        typedef ::xsd::cxx::tree::traits< DoorFrameThickness_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorFrameThickness_traits;

        const DoorFrameThickness_optional&
        DoorFrameThickness () const;

        DoorFrameThickness_optional&
        DoorFrameThickness ();

        void
        DoorFrameThickness (const DoorFrameThickness_type& x);

        void
        DoorFrameThickness (const DoorFrameThickness_optional& x);

        // DoorLeafThickness
        //
        typedef ::xml_schema::double_ DoorLeafThickness_type;
        typedef ::xsd::cxx::tree::optional< DoorLeafThickness_type > DoorLeafThickness_optional;
        typedef ::xsd::cxx::tree::traits< DoorLeafThickness_type, char, ::xsd::cxx::tree::schema_type::double_ > DoorLeafThickness_traits;

        const DoorLeafThickness_optional&
        DoorLeafThickness () const;

        DoorLeafThickness_optional&
        DoorLeafThickness ();

        void
        DoorLeafThickness (const DoorLeafThickness_type& x);

        void
        DoorLeafThickness (const DoorLeafThickness_optional& x);

        // ClassRef_UniFormat
        //
        typedef ::xml_schema::idref ClassRef_UniFormat_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_UniFormat_type > ClassRef_UniFormat_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_UniFormat_type, char > ClassRef_UniFormat_traits;

        const ClassRef_UniFormat_optional&
        ClassRef_UniFormat () const;

        ClassRef_UniFormat_optional&
        ClassRef_UniFormat ();

        void
        ClassRef_UniFormat (const ClassRef_UniFormat_type& x);

        void
        ClassRef_UniFormat (const ClassRef_UniFormat_optional& x);

        void
        ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > p);

        // MaterialList
        //
        typedef ::xml_schema::idref MaterialList_type;
        typedef ::xsd::cxx::tree::optional< MaterialList_type > MaterialList_optional;
        typedef ::xsd::cxx::tree::traits< MaterialList_type, char > MaterialList_traits;

        const MaterialList_optional&
        MaterialList () const;

        MaterialList_optional&
        MaterialList ();

        void
        MaterialList (const MaterialList_type& x);

        void
        MaterialList (const MaterialList_optional& x);

        void
        MaterialList (::std::auto_ptr< MaterialList_type > p);

        // VoidsInDoor
        //
        typedef ::xml_schema::idrefs VoidsInDoor_type;
        typedef ::xsd::cxx::tree::optional< VoidsInDoor_type > VoidsInDoor_optional;
        typedef ::xsd::cxx::tree::traits< VoidsInDoor_type, char > VoidsInDoor_traits;

        const VoidsInDoor_optional&
        VoidsInDoor () const;

        VoidsInDoor_optional&
        VoidsInDoor ();

        void
        VoidsInDoor (const VoidsInDoor_type& x);

        void
        VoidsInDoor (const VoidsInDoor_optional& x);

        void
        VoidsInDoor (::std::auto_ptr< VoidsInDoor_type > p);

        // OpeningFilledByDoor
        //
        typedef ::xml_schema::idref OpeningFilledByDoor_type;
        typedef ::xsd::cxx::tree::optional< OpeningFilledByDoor_type > OpeningFilledByDoor_optional;
        typedef ::xsd::cxx::tree::traits< OpeningFilledByDoor_type, char > OpeningFilledByDoor_traits;

        const OpeningFilledByDoor_optional&
        OpeningFilledByDoor () const;

        OpeningFilledByDoor_optional&
        OpeningFilledByDoor ();

        void
        OpeningFilledByDoor (const OpeningFilledByDoor_type& x);

        void
        OpeningFilledByDoor (const OpeningFilledByDoor_optional& x);

        void
        OpeningFilledByDoor (::std::auto_ptr< OpeningFilledByDoor_type > p);

        // SimDoor_ConstructionName
        //
        typedef ::xml_schema::idref SimDoor_ConstructionName_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_ConstructionName_type > SimDoor_ConstructionName_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_ConstructionName_type, char > SimDoor_ConstructionName_traits;

        const SimDoor_ConstructionName_optional&
        SimDoor_ConstructionName () const;

        SimDoor_ConstructionName_optional&
        SimDoor_ConstructionName ();

        void
        SimDoor_ConstructionName (const SimDoor_ConstructionName_type& x);

        void
        SimDoor_ConstructionName (const SimDoor_ConstructionName_optional& x);

        void
        SimDoor_ConstructionName (::std::auto_ptr< SimDoor_ConstructionName_type > p);

        // SimDoor_BldgSurfName
        //
        typedef ::xml_schema::idref SimDoor_BldgSurfName_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_BldgSurfName_type > SimDoor_BldgSurfName_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_BldgSurfName_type, char > SimDoor_BldgSurfName_traits;

        const SimDoor_BldgSurfName_optional&
        SimDoor_BldgSurfName () const;

        SimDoor_BldgSurfName_optional&
        SimDoor_BldgSurfName ();

        void
        SimDoor_BldgSurfName (const SimDoor_BldgSurfName_type& x);

        void
        SimDoor_BldgSurfName (const SimDoor_BldgSurfName_optional& x);

        void
        SimDoor_BldgSurfName (::std::auto_ptr< SimDoor_BldgSurfName_type > p);

        // SimDoor_OutsdBndCondObject
        //
        typedef ::xml_schema::idref SimDoor_OutsdBndCondObject_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_OutsdBndCondObject_type > SimDoor_OutsdBndCondObject_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_OutsdBndCondObject_type, char > SimDoor_OutsdBndCondObject_traits;

        const SimDoor_OutsdBndCondObject_optional&
        SimDoor_OutsdBndCondObject () const;

        SimDoor_OutsdBndCondObject_optional&
        SimDoor_OutsdBndCondObject ();

        void
        SimDoor_OutsdBndCondObject (const SimDoor_OutsdBndCondObject_type& x);

        void
        SimDoor_OutsdBndCondObject (const SimDoor_OutsdBndCondObject_optional& x);

        void
        SimDoor_OutsdBndCondObject (::std::auto_ptr< SimDoor_OutsdBndCondObject_type > p);

        // SimDoor_Mult
        //
        typedef ::xml_schema::double_ SimDoor_Mult_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_Mult_type > SimDoor_Mult_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_Mult_type, char, ::xsd::cxx::tree::schema_type::double_ > SimDoor_Mult_traits;

        const SimDoor_Mult_optional&
        SimDoor_Mult () const;

        SimDoor_Mult_optional&
        SimDoor_Mult ();

        void
        SimDoor_Mult (const SimDoor_Mult_type& x);

        void
        SimDoor_Mult (const SimDoor_Mult_optional& x);

        // SimDoor_StartXCoord
        //
        typedef ::xml_schema::double_ SimDoor_StartXCoord_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_StartXCoord_type > SimDoor_StartXCoord_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_StartXCoord_type, char, ::xsd::cxx::tree::schema_type::double_ > SimDoor_StartXCoord_traits;

        const SimDoor_StartXCoord_optional&
        SimDoor_StartXCoord () const;

        SimDoor_StartXCoord_optional&
        SimDoor_StartXCoord ();

        void
        SimDoor_StartXCoord (const SimDoor_StartXCoord_type& x);

        void
        SimDoor_StartXCoord (const SimDoor_StartXCoord_optional& x);

        // SimDoor_StartZCoord
        //
        typedef ::xml_schema::double_ SimDoor_StartZCoord_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_StartZCoord_type > SimDoor_StartZCoord_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_StartZCoord_type, char, ::xsd::cxx::tree::schema_type::double_ > SimDoor_StartZCoord_traits;

        const SimDoor_StartZCoord_optional&
        SimDoor_StartZCoord () const;

        SimDoor_StartZCoord_optional&
        SimDoor_StartZCoord ();

        void
        SimDoor_StartZCoord (const SimDoor_StartZCoord_type& x);

        void
        SimDoor_StartZCoord (const SimDoor_StartZCoord_optional& x);

        // SimDoor_Length
        //
        typedef ::xml_schema::double_ SimDoor_Length_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_Length_type > SimDoor_Length_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_Length_type, char, ::xsd::cxx::tree::schema_type::double_ > SimDoor_Length_traits;

        const SimDoor_Length_optional&
        SimDoor_Length () const;

        SimDoor_Length_optional&
        SimDoor_Length ();

        void
        SimDoor_Length (const SimDoor_Length_type& x);

        void
        SimDoor_Length (const SimDoor_Length_optional& x);

        // SimDoor_Ht
        //
        typedef ::xml_schema::double_ SimDoor_Ht_type;
        typedef ::xsd::cxx::tree::optional< SimDoor_Ht_type > SimDoor_Ht_optional;
        typedef ::xsd::cxx::tree::traits< SimDoor_Ht_type, char, ::xsd::cxx::tree::schema_type::double_ > SimDoor_Ht_traits;

        const SimDoor_Ht_optional&
        SimDoor_Ht () const;

        SimDoor_Ht_optional&
        SimDoor_Ht ();

        void
        SimDoor_Ht (const SimDoor_Ht_type& x);

        void
        SimDoor_Ht (const SimDoor_Ht_optional& x);

        // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type > Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits;

        const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const;

        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ();

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type > Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits;

        const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const;

        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional&
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ();

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x);

        // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
        //
        typedef ::xml_schema::string Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type, char > Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits;

        const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional&
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const;

        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional&
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ();

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > p);

        // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type > Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits;

        const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional&
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const;

        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional&
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ();

        void
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x);

        // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
        //
        typedef ::xml_schema::int_ Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type > Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type, char > Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits;

        const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional&
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const;

        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional&
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ();

        void
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x);

        // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
        //
        typedef ::namespaces::Sim::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
        //
        typedef ::namespaces::Sim::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
        //
        typedef ::namespaces::Sim::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
        //
        typedef ::namespaces::Sim::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
        //
        typedef ::namespaces::Sim::SimModelCore::doubleList Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type, char > Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits;

        const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const;

        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional&
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ();

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x);

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x);

        void
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > p);

        // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type > Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits;

        const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional&
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const;

        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional&
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ();

        void
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x);

        // Airflow_MZone_Comp_SmplOpng_DischargeCoef
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_SmplOpng_DischargeCoef_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_SmplOpng_DischargeCoef_type > Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_SmplOpng_DischargeCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits;

        const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional&
        Airflow_MZone_Comp_SmplOpng_DischargeCoef () const;

        Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional&
        Airflow_MZone_Comp_SmplOpng_DischargeCoef ();

        void
        Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x);

        void
        Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x);

        // Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle
        //
        typedef ::xml_schema::double_ Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type;
        typedef ::xsd::cxx::tree::optional< Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type > Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional;
        typedef ::xsd::cxx::tree::traits< Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type, char, ::xsd::cxx::tree::schema_type::double_ > Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_traits;

        const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional&
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle () const;

        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional&
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle ();

        void
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type& x);

        void
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& x);

        // Constructors.
        //
        SimDoor_GlazedDoor_Interior (const RefId_type&);

        SimDoor_GlazedDoor_Interior (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        SimDoor_GlazedDoor_Interior (const SimDoor_GlazedDoor_Interior& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        virtual SimDoor_GlazedDoor_Interior*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimDoor_GlazedDoor_Interior&
        operator= (const SimDoor_GlazedDoor_Interior& x);

        virtual 
        ~SimDoor_GlazedDoor_Interior ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        DoorTypeTag_optional DoorTypeTag_;
        DoorPanelOperation_optional DoorPanelOperation_;
        DoorConstructionType_optional DoorConstructionType_;
        DoorIsExternal_optional DoorIsExternal_;
        CompositeThermalTransmittance_optional CompositeThermalTransmittance_;
        DoorHeight_optional DoorHeight_;
        DoorWidth_optional DoorWidth_;
        DoorArea_optional DoorArea_;
        DoorPerimeter_optional DoorPerimeter_;
        DoorFrameDepth_optional DoorFrameDepth_;
        DoorFrameThickness_optional DoorFrameThickness_;
        DoorLeafThickness_optional DoorLeafThickness_;
        ClassRef_UniFormat_optional ClassRef_UniFormat_;
        MaterialList_optional MaterialList_;
        VoidsInDoor_optional VoidsInDoor_;
        OpeningFilledByDoor_optional OpeningFilledByDoor_;
        SimDoor_ConstructionName_optional SimDoor_ConstructionName_;
        SimDoor_BldgSurfName_optional SimDoor_BldgSurfName_;
        SimDoor_OutsdBndCondObject_optional SimDoor_OutsdBndCondObject_;
        SimDoor_Mult_optional SimDoor_Mult_;
        SimDoor_StartXCoord_optional SimDoor_StartXCoord_;
        SimDoor_StartZCoord_optional SimDoor_StartZCoord_;
        SimDoor_Length_optional SimDoor_Length_;
        SimDoor_Ht_optional SimDoor_Ht_;
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_DOOR_GLAZED_DOOR_INTERIOR_HXX
