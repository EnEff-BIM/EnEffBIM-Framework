// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed
      // 

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ()
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName () const
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName ()
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName () const
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName ()
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_CondAirInletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_CondAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondType () const
      {
        return this->SimFlowEnergyTrans_CondType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondType ()
      {
        return this->SimFlowEnergyTrans_CondType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_type& x)
      {
        this->SimFlowEnergyTrans_CondType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_optional& x)
      {
        this->SimFlowEnergyTrans_CondType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_CondType (::std::auto_ptr< SimFlowEnergyTrans_CondType_type > x)
      {
        this->SimFlowEnergyTrans_CondType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName () const
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName ()
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatCap () const
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatCap ()
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp () const
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp ()
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName () const
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName ()
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap () const
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap ()
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_type& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio () const
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio ()
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_type& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedCOP () const
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedCOP_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedCOP ()
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedCOP_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedCOP (const SimFlowEnergyTrans_RatedHighSpeedCOP_type& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedCOP_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedCOP (const SimFlowEnergyTrans_RatedHighSpeedCOP_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedCOP_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedAirFlowRate (const SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedHighSpeedAirFlowRate (const SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_UnitInternalStaticAirPressure () const
      {
        return this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_UnitInternalStaticAirPressure ()
      {
        return this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_UnitInternalStaticAirPressure (const SimFlowEnergyTrans_UnitInternalStaticAirPressure_type& x)
      {
        this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_UnitInternalStaticAirPressure (const SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional& x)
      {
        this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap () const
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap ()
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_type& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio () const
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio ()
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_type& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedCOP () const
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedCOP_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedCOP ()
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedCOP_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedCOP (const SimFlowEnergyTrans_RatedLowSpeedCOP_type& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedCOP_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedCOP (const SimFlowEnergyTrans_RatedLowSpeedCOP_optional& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedCOP_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedAirFlowRate (const SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_RatedLowSpeedAirFlowRate (const SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondEffect () const
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondEffect ()
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondEffect (const SimFlowEnergyTrans_HighSpeedEvapCondEffect_type& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondEffect (const SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump () const
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump ()
      {
        return this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_type& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional& x)
      {
        this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondEffect () const
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondEffect ()
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondEffect (const SimFlowEnergyTrans_LowSpeedEvapCondEffect_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondEffect (const SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump () const
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump ()
      {
        return this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed
      //

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (this),
        SimFlowEnergyTrans_CondType_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this),
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedHighSpeedCOP_ (this),
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_UnitInternalStaticAirPressure_ (this),
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedLowSpeedCOP_ (this),
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondEffect_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondEffect_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed& x,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_, f, this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (x.SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (x.SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_, f, this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_, f, this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (x.SimFlowEnergyTrans_CondAirInletNodeName_, f, this),
        SimFlowEnergyTrans_CondType_ (x.SimFlowEnergyTrans_CondType_, f, this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (x.SimFlowEnergyTrans_SupWaterStoTankName_, f, this),
        SimFlowEnergyTrans_BasinHeatCap_ (x.SimFlowEnergyTrans_BasinHeatCap_, f, this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (x.SimFlowEnergyTrans_BasinHeatSetpointTemp_, f, this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (x.SimFlowEnergyTrans_BasinHeatOperatSchedName_, f, this),
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_ (x.SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_, f, this),
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_ (x.SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_, f, this),
        SimFlowEnergyTrans_RatedHighSpeedCOP_ (x.SimFlowEnergyTrans_RatedHighSpeedCOP_, f, this),
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_ (x.SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_, f, this),
        SimFlowEnergyTrans_UnitInternalStaticAirPressure_ (x.SimFlowEnergyTrans_UnitInternalStaticAirPressure_, f, this),
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_ (x.SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_, f, this),
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_ (x.SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_, f, this),
        SimFlowEnergyTrans_RatedLowSpeedCOP_ (x.SimFlowEnergyTrans_RatedLowSpeedCOP_, f, this),
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_ (x.SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_, f, this),
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_ (x.SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_ (x.SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_HighSpeedEvapCondEffect_ (x.SimFlowEnergyTrans_HighSpeedEvapCondEffect_, f, this),
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_ (x.SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_, f, this),
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_ (x.SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_, f, this),
        SimFlowEnergyTrans_LowSpeedEvapCondEffect_ (x.SimFlowEnergyTrans_LowSpeedEvapCondEffect_, f, this),
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_ (x.SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_, f, this),
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_ (x.SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_, f, this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (this),
        SimFlowEnergyTrans_CondType_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this),
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedHighSpeedCOP_ (this),
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_UnitInternalStaticAirPressure_ (this),
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedLowSpeedCOP_ (this),
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondEffect_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondEffect_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
          //
          if (n.name () == "SimFlowEnergyTrans_CondsCollectionWaterStorageTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > r (
              SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_)
            {
              this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > r (
              SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > r (
              SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_)
            {
              this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PartLoadFractCorrelCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_PartLoadFractCorrelCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > r (
              SimFlowEnergyTrans_PartLoadFractCorrelCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_)
            {
              this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_CondAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > r (
              SimFlowEnergyTrans_CondAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_CondAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondType
          //
          if (n.name () == "SimFlowEnergyTrans_CondType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondType_type > r (
              SimFlowEnergyTrans_CondType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondType_)
            {
              this->SimFlowEnergyTrans_CondType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SupWaterStoTankName
          //
          if (n.name () == "SimFlowEnergyTrans_SupWaterStoTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > r (
              SimFlowEnergyTrans_SupWaterStoTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupWaterStoTankName_)
            {
              this->SimFlowEnergyTrans_SupWaterStoTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatCap_)
            {
              this->SimFlowEnergyTrans_BasinHeatCap_.set (SimFlowEnergyTrans_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatSetpointTemp
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatSetpointTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatSetpointTemp_)
            {
              this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (SimFlowEnergyTrans_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatOperatSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatOperatSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > r (
              SimFlowEnergyTrans_BasinHeatOperatSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_BasinHeatOperatSchedName_)
            {
              this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_)
            {
              this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_.set (SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_)
            {
              this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_.set (SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHighSpeedCOP
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHighSpeedCOP" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHighSpeedCOP_)
            {
              this->SimFlowEnergyTrans_RatedHighSpeedCOP_.set (SimFlowEnergyTrans_RatedHighSpeedCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHighSpeedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHighSpeedAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_.set (SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_UnitInternalStaticAirPressure
          //
          if (n.name () == "SimFlowEnergyTrans_UnitInternalStaticAirPressure" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_)
            {
              this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_.set (SimFlowEnergyTrans_UnitInternalStaticAirPressure_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_)
            {
              this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_.set (SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio
          //
          if (n.name () == "SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_)
            {
              this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_.set (SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedLowSpeedCOP
          //
          if (n.name () == "SimFlowEnergyTrans_RatedLowSpeedCOP" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedLowSpeedCOP_)
            {
              this->SimFlowEnergyTrans_RatedLowSpeedCOP_.set (SimFlowEnergyTrans_RatedLowSpeedCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedLowSpeedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedLowSpeedAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_.set (SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type > r (
              SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type > r (
              SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HighSpeedEvapCondEffect
          //
          if (n.name () == "SimFlowEnergyTrans_HighSpeedEvapCondEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_)
            {
              this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_.set (SimFlowEnergyTrans_HighSpeedEvapCondEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_)
            {
              this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_.set (SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump
          //
          if (n.name () == "SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_)
            {
              this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_.set (SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedEvapCondEffect
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedEvapCondEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_)
            {
              this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_.set (SimFlowEnergyTrans_LowSpeedEvapCondEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_)
            {
              this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_.set (SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_)
            {
              this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_.set (SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed* SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (*this, f, c);
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      operator= (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
          this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ = x.SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
          this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ = x.SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
          this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
          this->SimFlowEnergyTrans_CondAirInletNodeName_ = x.SimFlowEnergyTrans_CondAirInletNodeName_;
          this->SimFlowEnergyTrans_CondType_ = x.SimFlowEnergyTrans_CondType_;
          this->SimFlowEnergyTrans_SupWaterStoTankName_ = x.SimFlowEnergyTrans_SupWaterStoTankName_;
          this->SimFlowEnergyTrans_BasinHeatCap_ = x.SimFlowEnergyTrans_BasinHeatCap_;
          this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x.SimFlowEnergyTrans_BasinHeatSetpointTemp_;
          this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x.SimFlowEnergyTrans_BasinHeatOperatSchedName_;
          this->SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_ = x.SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_;
          this->SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_ = x.SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_;
          this->SimFlowEnergyTrans_RatedHighSpeedCOP_ = x.SimFlowEnergyTrans_RatedHighSpeedCOP_;
          this->SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_ = x.SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_;
          this->SimFlowEnergyTrans_UnitInternalStaticAirPressure_ = x.SimFlowEnergyTrans_UnitInternalStaticAirPressure_;
          this->SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_ = x.SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_;
          this->SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_ = x.SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_;
          this->SimFlowEnergyTrans_RatedLowSpeedCOP_ = x.SimFlowEnergyTrans_RatedLowSpeedCOP_;
          this->SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_ = x.SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_;
          this->SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_ = x.SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_;
          this->SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_ = x.SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_;
          this->SimFlowEnergyTrans_HighSpeedEvapCondEffect_ = x.SimFlowEnergyTrans_HighSpeedEvapCondEffect_;
          this->SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_ = x.SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_;
          this->SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_ = x.SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_;
          this->SimFlowEnergyTrans_LowSpeedEvapCondEffect_ = x.SimFlowEnergyTrans_LowSpeedEvapCondEffect_;
          this->SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_ = x.SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_;
          this->SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_ = x.SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed::
      ~SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

