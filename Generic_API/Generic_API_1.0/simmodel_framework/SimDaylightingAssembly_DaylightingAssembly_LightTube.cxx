// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDaylightingAssembly_DaylightingAssembly_LightTube.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDaylightingAssembly_DaylightingAssembly_LightTube
      // 

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_ConstructionName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_ConstructionName () const
      {
        return this->SimDaylightingAssembly_ConstructionName_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_ConstructionName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_ConstructionName ()
      {
        return this->SimDaylightingAssembly_ConstructionName_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_ConstructionName (const SimDaylightingAssembly_ConstructionName_type& x)
      {
        this->SimDaylightingAssembly_ConstructionName_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_ConstructionName (const SimDaylightingAssembly_ConstructionName_optional& x)
      {
        this->SimDaylightingAssembly_ConstructionName_ = x;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_ConstructionName (::std::auto_ptr< SimDaylightingAssembly_ConstructionName_type > x)
      {
        this->SimDaylightingAssembly_ConstructionName_.set (x);
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_DomeName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DomeName () const
      {
        return this->SimDaylightingAssembly_DomeName_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_DomeName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DomeName ()
      {
        return this->SimDaylightingAssembly_DomeName_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DomeName (const SimDaylightingAssembly_DomeName_type& x)
      {
        this->SimDaylightingAssembly_DomeName_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DomeName (const SimDaylightingAssembly_DomeName_optional& x)
      {
        this->SimDaylightingAssembly_DomeName_ = x;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DomeName (::std::auto_ptr< SimDaylightingAssembly_DomeName_type > x)
      {
        this->SimDaylightingAssembly_DomeName_.set (x);
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_DiffuserName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DiffuserName () const
      {
        return this->SimDaylightingAssembly_DiffuserName_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_DiffuserName_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DiffuserName ()
      {
        return this->SimDaylightingAssembly_DiffuserName_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DiffuserName (const SimDaylightingAssembly_DiffuserName_type& x)
      {
        this->SimDaylightingAssembly_DiffuserName_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DiffuserName (const SimDaylightingAssembly_DiffuserName_optional& x)
      {
        this->SimDaylightingAssembly_DiffuserName_ = x;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DiffuserName (::std::auto_ptr< SimDaylightingAssembly_DiffuserName_type > x)
      {
        this->SimDaylightingAssembly_DiffuserName_.set (x);
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_Diam_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_Diam () const
      {
        return this->SimDaylightingAssembly_Diam_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_Diam_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_Diam ()
      {
        return this->SimDaylightingAssembly_Diam_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_Diam (const SimDaylightingAssembly_Diam_type& x)
      {
        this->SimDaylightingAssembly_Diam_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_Diam (const SimDaylightingAssembly_Diam_optional& x)
      {
        this->SimDaylightingAssembly_Diam_ = x;
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TotalLength_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TotalLength () const
      {
        return this->SimDaylightingAssembly_TotalLength_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TotalLength_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TotalLength ()
      {
        return this->SimDaylightingAssembly_TotalLength_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TotalLength (const SimDaylightingAssembly_TotalLength_type& x)
      {
        this->SimDaylightingAssembly_TotalLength_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TotalLength (const SimDaylightingAssembly_TotalLength_optional& x)
      {
        this->SimDaylightingAssembly_TotalLength_ = x;
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_EffecThermalResist_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_EffecThermalResist () const
      {
        return this->SimDaylightingAssembly_EffecThermalResist_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_EffecThermalResist_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_EffecThermalResist ()
      {
        return this->SimDaylightingAssembly_EffecThermalResist_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_EffecThermalResist (const SimDaylightingAssembly_EffecThermalResist_type& x)
      {
        this->SimDaylightingAssembly_EffecThermalResist_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_EffecThermalResist (const SimDaylightingAssembly_EffecThermalResist_optional& x)
      {
        this->SimDaylightingAssembly_EffecThermalResist_ = x;
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TransitionZoneName_1_4_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneName_1_4 () const
      {
        return this->SimDaylightingAssembly_TransitionZoneName_1_4_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TransitionZoneName_1_4_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneName_1_4 ()
      {
        return this->SimDaylightingAssembly_TransitionZoneName_1_4_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneName_1_4 (const SimDaylightingAssembly_TransitionZoneName_1_4_type& x)
      {
        this->SimDaylightingAssembly_TransitionZoneName_1_4_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneName_1_4 (const SimDaylightingAssembly_TransitionZoneName_1_4_optional& x)
      {
        this->SimDaylightingAssembly_TransitionZoneName_1_4_ = x;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneName_1_4 (::std::auto_ptr< SimDaylightingAssembly_TransitionZoneName_1_4_type > x)
      {
        this->SimDaylightingAssembly_TransitionZoneName_1_4_.set (x);
      }

      const SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TransitionZoneLength_1_4_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneLength_1_4 () const
      {
        return this->SimDaylightingAssembly_TransitionZoneLength_1_4_;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::SimDaylightingAssembly_TransitionZoneLength_1_4_optional& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneLength_1_4 ()
      {
        return this->SimDaylightingAssembly_TransitionZoneLength_1_4_;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneLength_1_4 (const SimDaylightingAssembly_TransitionZoneLength_1_4_type& x)
      {
        this->SimDaylightingAssembly_TransitionZoneLength_1_4_.set (x);
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneLength_1_4 (const SimDaylightingAssembly_TransitionZoneLength_1_4_optional& x)
      {
        this->SimDaylightingAssembly_TransitionZoneLength_1_4_ = x;
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_TransitionZoneLength_1_4 (::std::auto_ptr< SimDaylightingAssembly_TransitionZoneLength_1_4_type > x)
      {
        this->SimDaylightingAssembly_TransitionZoneLength_1_4_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDaylightingAssembly_DaylightingAssembly_LightTube
      //

      SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DaylightingAssembly_LightTube (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimDaylightingAssembly_DaylightingAssembly (RefId),
        SimDaylightingAssembly_ConstructionName_ (this),
        SimDaylightingAssembly_DomeName_ (this),
        SimDaylightingAssembly_DiffuserName_ (this),
        SimDaylightingAssembly_Diam_ (this),
        SimDaylightingAssembly_TotalLength_ (this),
        SimDaylightingAssembly_EffecThermalResist_ (this),
        SimDaylightingAssembly_TransitionZoneName_1_4_ (this),
        SimDaylightingAssembly_TransitionZoneLength_1_4_ (this)
      {
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DaylightingAssembly_LightTube (const SimDaylightingAssembly_DaylightingAssembly_LightTube& x,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDaylightingAssembly_DaylightingAssembly (x, f, c),
        SimDaylightingAssembly_ConstructionName_ (x.SimDaylightingAssembly_ConstructionName_, f, this),
        SimDaylightingAssembly_DomeName_ (x.SimDaylightingAssembly_DomeName_, f, this),
        SimDaylightingAssembly_DiffuserName_ (x.SimDaylightingAssembly_DiffuserName_, f, this),
        SimDaylightingAssembly_Diam_ (x.SimDaylightingAssembly_Diam_, f, this),
        SimDaylightingAssembly_TotalLength_ (x.SimDaylightingAssembly_TotalLength_, f, this),
        SimDaylightingAssembly_EffecThermalResist_ (x.SimDaylightingAssembly_EffecThermalResist_, f, this),
        SimDaylightingAssembly_TransitionZoneName_1_4_ (x.SimDaylightingAssembly_TransitionZoneName_1_4_, f, this),
        SimDaylightingAssembly_TransitionZoneLength_1_4_ (x.SimDaylightingAssembly_TransitionZoneLength_1_4_, f, this)
      {
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::
      SimDaylightingAssembly_DaylightingAssembly_LightTube (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f,
                                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDaylightingAssembly_DaylightingAssembly (e, f | ::xml_schema::flags::base, c),
        SimDaylightingAssembly_ConstructionName_ (this),
        SimDaylightingAssembly_DomeName_ (this),
        SimDaylightingAssembly_DiffuserName_ (this),
        SimDaylightingAssembly_Diam_ (this),
        SimDaylightingAssembly_TotalLength_ (this),
        SimDaylightingAssembly_EffecThermalResist_ (this),
        SimDaylightingAssembly_TransitionZoneName_1_4_ (this),
        SimDaylightingAssembly_TransitionZoneLength_1_4_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDaylightingAssembly_DaylightingAssembly_LightTube::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimDaylightingAssembly_DaylightingAssembly::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimDaylightingAssembly_ConstructionName
          //
          if (n.name () == "SimDaylightingAssembly_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDaylightingAssembly_ConstructionName_type > r (
              SimDaylightingAssembly_ConstructionName_traits::create (i, f, this));

            if (!this->SimDaylightingAssembly_ConstructionName_)
            {
              this->SimDaylightingAssembly_ConstructionName_.set (r);
              continue;
            }
          }

          // SimDaylightingAssembly_DomeName
          //
          if (n.name () == "SimDaylightingAssembly_DomeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DomeName_type > r (
              SimDaylightingAssembly_DomeName_traits::create (i, f, this));

            if (!this->SimDaylightingAssembly_DomeName_)
            {
              this->SimDaylightingAssembly_DomeName_.set (r);
              continue;
            }
          }

          // SimDaylightingAssembly_DiffuserName
          //
          if (n.name () == "SimDaylightingAssembly_DiffuserName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDaylightingAssembly_DiffuserName_type > r (
              SimDaylightingAssembly_DiffuserName_traits::create (i, f, this));

            if (!this->SimDaylightingAssembly_DiffuserName_)
            {
              this->SimDaylightingAssembly_DiffuserName_.set (r);
              continue;
            }
          }

          // SimDaylightingAssembly_Diam
          //
          if (n.name () == "SimDaylightingAssembly_Diam" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDaylightingAssembly_Diam_)
            {
              this->SimDaylightingAssembly_Diam_.set (SimDaylightingAssembly_Diam_traits::create (i, f, this));
              continue;
            }
          }

          // SimDaylightingAssembly_TotalLength
          //
          if (n.name () == "SimDaylightingAssembly_TotalLength" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDaylightingAssembly_TotalLength_)
            {
              this->SimDaylightingAssembly_TotalLength_.set (SimDaylightingAssembly_TotalLength_traits::create (i, f, this));
              continue;
            }
          }

          // SimDaylightingAssembly_EffecThermalResist
          //
          if (n.name () == "SimDaylightingAssembly_EffecThermalResist" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDaylightingAssembly_EffecThermalResist_)
            {
              this->SimDaylightingAssembly_EffecThermalResist_.set (SimDaylightingAssembly_EffecThermalResist_traits::create (i, f, this));
              continue;
            }
          }

          // SimDaylightingAssembly_TransitionZoneName_1_4
          //
          if (n.name () == "SimDaylightingAssembly_TransitionZoneName_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDaylightingAssembly_TransitionZoneName_1_4_type > r (
              SimDaylightingAssembly_TransitionZoneName_1_4_traits::create (i, f, this));

            if (!this->SimDaylightingAssembly_TransitionZoneName_1_4_)
            {
              this->SimDaylightingAssembly_TransitionZoneName_1_4_.set (r);
              continue;
            }
          }

          // SimDaylightingAssembly_TransitionZoneLength_1_4
          //
          if (n.name () == "SimDaylightingAssembly_TransitionZoneLength_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDaylightingAssembly_TransitionZoneLength_1_4_type > r (
              SimDaylightingAssembly_TransitionZoneLength_1_4_traits::create (i, f, this));

            if (!this->SimDaylightingAssembly_TransitionZoneLength_1_4_)
            {
              this->SimDaylightingAssembly_TransitionZoneLength_1_4_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube* SimDaylightingAssembly_DaylightingAssembly_LightTube::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDaylightingAssembly_DaylightingAssembly_LightTube (*this, f, c);
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube& SimDaylightingAssembly_DaylightingAssembly_LightTube::
      operator= (const SimDaylightingAssembly_DaylightingAssembly_LightTube& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimDaylightingAssembly_DaylightingAssembly& > (*this) = x;
          this->SimDaylightingAssembly_ConstructionName_ = x.SimDaylightingAssembly_ConstructionName_;
          this->SimDaylightingAssembly_DomeName_ = x.SimDaylightingAssembly_DomeName_;
          this->SimDaylightingAssembly_DiffuserName_ = x.SimDaylightingAssembly_DiffuserName_;
          this->SimDaylightingAssembly_Diam_ = x.SimDaylightingAssembly_Diam_;
          this->SimDaylightingAssembly_TotalLength_ = x.SimDaylightingAssembly_TotalLength_;
          this->SimDaylightingAssembly_EffecThermalResist_ = x.SimDaylightingAssembly_EffecThermalResist_;
          this->SimDaylightingAssembly_TransitionZoneName_1_4_ = x.SimDaylightingAssembly_TransitionZoneName_1_4_;
          this->SimDaylightingAssembly_TransitionZoneLength_1_4_ = x.SimDaylightingAssembly_TransitionZoneLength_1_4_;
        }

        return *this;
      }

      SimDaylightingAssembly_DaylightingAssembly_LightTube::
      ~SimDaylightingAssembly_DaylightingAssembly_LightTube ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

