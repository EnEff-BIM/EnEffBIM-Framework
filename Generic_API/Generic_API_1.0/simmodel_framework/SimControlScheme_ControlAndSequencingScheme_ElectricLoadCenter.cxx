// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter
      // 

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_GenListName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenListName () const
      {
        return this->SimCntrlSchm_GenListName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_GenListName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenListName ()
      {
        return this->SimCntrlSchm_GenListName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenListName (const SimCntrlSchm_GenListName_type& x)
      {
        this->SimCntrlSchm_GenListName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenListName (const SimCntrlSchm_GenListName_optional& x)
      {
        this->SimCntrlSchm_GenListName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenListName (::std::auto_ptr< SimCntrlSchm_GenListName_type > x)
      {
        this->SimCntrlSchm_GenListName_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_GenOpSchemeType_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenOpSchemeType () const
      {
        return this->SimCntrlSchm_GenOpSchemeType_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_GenOpSchemeType_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenOpSchemeType ()
      {
        return this->SimCntrlSchm_GenOpSchemeType_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenOpSchemeType (const SimCntrlSchm_GenOpSchemeType_type& x)
      {
        this->SimCntrlSchm_GenOpSchemeType_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenOpSchemeType (const SimCntrlSchm_GenOpSchemeType_optional& x)
      {
        this->SimCntrlSchm_GenOpSchemeType_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_GenOpSchemeType (::std::auto_ptr< SimCntrlSchm_GenOpSchemeType_type > x)
      {
        this->SimCntrlSchm_GenOpSchemeType_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit () const
      {
        return this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit ()
      {
        return this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit (const SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_type& x)
      {
        this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit (const SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_optional& x)
      {
        this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_ = x;
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TrackSchedNameSchemeSchedName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackSchedNameSchemeSchedName () const
      {
        return this->SimCntrlSchm_TrackSchedNameSchemeSchedName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TrackSchedNameSchemeSchedName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackSchedNameSchemeSchedName ()
      {
        return this->SimCntrlSchm_TrackSchedNameSchemeSchedName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackSchedNameSchemeSchedName (const SimCntrlSchm_TrackSchedNameSchemeSchedName_type& x)
      {
        this->SimCntrlSchm_TrackSchedNameSchemeSchedName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackSchedNameSchemeSchedName (const SimCntrlSchm_TrackSchedNameSchemeSchedName_optional& x)
      {
        this->SimCntrlSchm_TrackSchedNameSchemeSchedName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackSchedNameSchemeSchedName (::std::auto_ptr< SimCntrlSchm_TrackSchedNameSchemeSchedName_type > x)
      {
        this->SimCntrlSchm_TrackSchedNameSchemeSchedName_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TrackMeterSchemeMeterName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackMeterSchemeMeterName () const
      {
        return this->SimCntrlSchm_TrackMeterSchemeMeterName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TrackMeterSchemeMeterName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackMeterSchemeMeterName ()
      {
        return this->SimCntrlSchm_TrackMeterSchemeMeterName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackMeterSchemeMeterName (const SimCntrlSchm_TrackMeterSchemeMeterName_type& x)
      {
        this->SimCntrlSchm_TrackMeterSchemeMeterName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackMeterSchemeMeterName (const SimCntrlSchm_TrackMeterSchemeMeterName_optional& x)
      {
        this->SimCntrlSchm_TrackMeterSchemeMeterName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TrackMeterSchemeMeterName (::std::auto_ptr< SimCntrlSchm_TrackMeterSchemeMeterName_type > x)
      {
        this->SimCntrlSchm_TrackMeterSchemeMeterName_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_ElecBussType_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecBussType () const
      {
        return this->SimCntrlSchm_ElecBussType_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_ElecBussType_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecBussType ()
      {
        return this->SimCntrlSchm_ElecBussType_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecBussType (const SimCntrlSchm_ElecBussType_type& x)
      {
        this->SimCntrlSchm_ElecBussType_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecBussType (const SimCntrlSchm_ElecBussType_optional& x)
      {
        this->SimCntrlSchm_ElecBussType_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecBussType (::std::auto_ptr< SimCntrlSchm_ElecBussType_type > x)
      {
        this->SimCntrlSchm_ElecBussType_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_verterObjName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_verterObjName () const
      {
        return this->SimCntrlSchm_verterObjName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_verterObjName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_verterObjName ()
      {
        return this->SimCntrlSchm_verterObjName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_verterObjName (const SimCntrlSchm_verterObjName_type& x)
      {
        this->SimCntrlSchm_verterObjName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_verterObjName (const SimCntrlSchm_verterObjName_optional& x)
      {
        this->SimCntrlSchm_verterObjName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_verterObjName (::std::auto_ptr< SimCntrlSchm_verterObjName_type > x)
      {
        this->SimCntrlSchm_verterObjName_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_ElecStorageObjName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecStorageObjName () const
      {
        return this->SimCntrlSchm_ElecStorageObjName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_ElecStorageObjName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecStorageObjName ()
      {
        return this->SimCntrlSchm_ElecStorageObjName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecStorageObjName (const SimCntrlSchm_ElecStorageObjName_type& x)
      {
        this->SimCntrlSchm_ElecStorageObjName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecStorageObjName (const SimCntrlSchm_ElecStorageObjName_optional& x)
      {
        this->SimCntrlSchm_ElecStorageObjName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_ElecStorageObjName (::std::auto_ptr< SimCntrlSchm_ElecStorageObjName_type > x)
      {
        this->SimCntrlSchm_ElecStorageObjName_.set (x);
      }

      const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TransformObjectName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TransformObjectName () const
      {
        return this->SimCntrlSchm_TransformObjectName_;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::SimCntrlSchm_TransformObjectName_optional& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TransformObjectName ()
      {
        return this->SimCntrlSchm_TransformObjectName_;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TransformObjectName (const SimCntrlSchm_TransformObjectName_type& x)
      {
        this->SimCntrlSchm_TransformObjectName_.set (x);
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TransformObjectName (const SimCntrlSchm_TransformObjectName_optional& x)
      {
        this->SimCntrlSchm_TransformObjectName_ = x;
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimCntrlSchm_TransformObjectName (::std::auto_ptr< SimCntrlSchm_TransformObjectName_type > x)
      {
        this->SimCntrlSchm_TransformObjectName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter
      //

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ControlAndSequencingScheme (RefId),
        SimCntrlSchm_GenListName_ (this),
        SimCntrlSchm_GenOpSchemeType_ (this),
        SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_ (this),
        SimCntrlSchm_TrackSchedNameSchemeSchedName_ (this),
        SimCntrlSchm_TrackMeterSchemeMeterName_ (this),
        SimCntrlSchm_ElecBussType_ (this),
        SimCntrlSchm_verterObjName_ (this),
        SimCntrlSchm_ElecStorageObjName_ (this),
        SimCntrlSchm_TransformObjectName_ (this)
      {
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter (const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter& x,
                                                                      ::xml_schema::flags f,
                                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ControlAndSequencingScheme (x, f, c),
        SimCntrlSchm_GenListName_ (x.SimCntrlSchm_GenListName_, f, this),
        SimCntrlSchm_GenOpSchemeType_ (x.SimCntrlSchm_GenOpSchemeType_, f, this),
        SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_ (x.SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_, f, this),
        SimCntrlSchm_TrackSchedNameSchemeSchedName_ (x.SimCntrlSchm_TrackSchedNameSchemeSchedName_, f, this),
        SimCntrlSchm_TrackMeterSchemeMeterName_ (x.SimCntrlSchm_TrackMeterSchemeMeterName_, f, this),
        SimCntrlSchm_ElecBussType_ (x.SimCntrlSchm_ElecBussType_, f, this),
        SimCntrlSchm_verterObjName_ (x.SimCntrlSchm_verterObjName_, f, this),
        SimCntrlSchm_ElecStorageObjName_ (x.SimCntrlSchm_ElecStorageObjName_, f, this),
        SimCntrlSchm_TransformObjectName_ (x.SimCntrlSchm_TransformObjectName_, f, this)
      {
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter (const ::xercesc::DOMElement& e,
                                                                      ::xml_schema::flags f,
                                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ControlAndSequencingScheme (e, f | ::xml_schema::flags::base, c),
        SimCntrlSchm_GenListName_ (this),
        SimCntrlSchm_GenOpSchemeType_ (this),
        SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_ (this),
        SimCntrlSchm_TrackSchedNameSchemeSchedName_ (this),
        SimCntrlSchm_TrackMeterSchemeMeterName_ (this),
        SimCntrlSchm_ElecBussType_ (this),
        SimCntrlSchm_verterObjName_ (this),
        SimCntrlSchm_ElecStorageObjName_ (this),
        SimCntrlSchm_TransformObjectName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimControlScheme_ControlAndSequencingScheme::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrlSchm_GenListName
          //
          if (n.name () == "SimCntrlSchm_GenListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_GenListName_type > r (
              SimCntrlSchm_GenListName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_GenListName_)
            {
              this->SimCntrlSchm_GenListName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_GenOpSchemeType
          //
          if (n.name () == "SimCntrlSchm_GenOpSchemeType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_GenOpSchemeType_type > r (
              SimCntrlSchm_GenOpSchemeType_traits::create (i, f, this));

            if (!this->SimCntrlSchm_GenOpSchemeType_)
            {
              this->SimCntrlSchm_GenOpSchemeType_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit
          //
          if (n.name () == "SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_)
            {
              this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_.set (SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_TrackSchedNameSchemeSchedName
          //
          if (n.name () == "SimCntrlSchm_TrackSchedNameSchemeSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_TrackSchedNameSchemeSchedName_type > r (
              SimCntrlSchm_TrackSchedNameSchemeSchedName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_TrackSchedNameSchemeSchedName_)
            {
              this->SimCntrlSchm_TrackSchedNameSchemeSchedName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_TrackMeterSchemeMeterName
          //
          if (n.name () == "SimCntrlSchm_TrackMeterSchemeMeterName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_TrackMeterSchemeMeterName_type > r (
              SimCntrlSchm_TrackMeterSchemeMeterName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_TrackMeterSchemeMeterName_)
            {
              this->SimCntrlSchm_TrackMeterSchemeMeterName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ElecBussType
          //
          if (n.name () == "SimCntrlSchm_ElecBussType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_ElecBussType_type > r (
              SimCntrlSchm_ElecBussType_traits::create (i, f, this));

            if (!this->SimCntrlSchm_ElecBussType_)
            {
              this->SimCntrlSchm_ElecBussType_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_verterObjName
          //
          if (n.name () == "SimCntrlSchm_verterObjName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_verterObjName_type > r (
              SimCntrlSchm_verterObjName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_verterObjName_)
            {
              this->SimCntrlSchm_verterObjName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_ElecStorageObjName
          //
          if (n.name () == "SimCntrlSchm_ElecStorageObjName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_ElecStorageObjName_type > r (
              SimCntrlSchm_ElecStorageObjName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_ElecStorageObjName_)
            {
              this->SimCntrlSchm_ElecStorageObjName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_TransformObjectName
          //
          if (n.name () == "SimCntrlSchm_TransformObjectName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_TransformObjectName_type > r (
              SimCntrlSchm_TransformObjectName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_TransformObjectName_)
            {
              this->SimCntrlSchm_TransformObjectName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter* SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter (*this, f, c);
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter& SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      operator= (const SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ControlAndSequencingScheme& > (*this) = x;
          this->SimCntrlSchm_GenListName_ = x.SimCntrlSchm_GenListName_;
          this->SimCntrlSchm_GenOpSchemeType_ = x.SimCntrlSchm_GenOpSchemeType_;
          this->SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_ = x.SimCntrlSchm_DemandLimitSchemePurchasedElecDemandLimit_;
          this->SimCntrlSchm_TrackSchedNameSchemeSchedName_ = x.SimCntrlSchm_TrackSchedNameSchemeSchedName_;
          this->SimCntrlSchm_TrackMeterSchemeMeterName_ = x.SimCntrlSchm_TrackMeterSchemeMeterName_;
          this->SimCntrlSchm_ElecBussType_ = x.SimCntrlSchm_ElecBussType_;
          this->SimCntrlSchm_verterObjName_ = x.SimCntrlSchm_verterObjName_;
          this->SimCntrlSchm_ElecStorageObjName_ = x.SimCntrlSchm_ElecStorageObjName_;
          this->SimCntrlSchm_TransformObjectName_ = x.SimCntrlSchm_TransformObjectName_;
        }

        return *this;
      }

      SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter::
      ~SimControlScheme_ControlAndSequencingScheme_ElectricLoadCenter ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

