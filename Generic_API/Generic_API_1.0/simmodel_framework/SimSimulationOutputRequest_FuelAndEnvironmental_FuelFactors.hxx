// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SIMULATION_OUTPUT_REQUEST_FUEL_AND_ENVIRONMENTAL_FUEL_FACTORS_HXX
#define SIM_SIMULATION_OUTPUT_REQUEST_FUEL_AND_ENVIRONMENTAL_FUEL_FACTORS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simsimulationoutputrequest_fuelandenvironmental.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors: public ::namespaces::Sim::ResourcesGeneral::SimSimulationOutputRequest_FuelAndEnvironmental
      {
        public:
        // SimSimulaOutputRequest_ExistingFuelResourceName
        //
        typedef ::xml_schema::string SimSimulaOutputRequest_ExistingFuelResourceName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_ExistingFuelResourceName_type > SimSimulaOutputRequest_ExistingFuelResourceName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_ExistingFuelResourceName_type, char > SimSimulaOutputRequest_ExistingFuelResourceName_traits;

        const SimSimulaOutputRequest_ExistingFuelResourceName_optional&
        SimSimulaOutputRequest_ExistingFuelResourceName () const;

        SimSimulaOutputRequest_ExistingFuelResourceName_optional&
        SimSimulaOutputRequest_ExistingFuelResourceName ();

        void
        SimSimulaOutputRequest_ExistingFuelResourceName (const SimSimulaOutputRequest_ExistingFuelResourceName_type& x);

        void
        SimSimulaOutputRequest_ExistingFuelResourceName (const SimSimulaOutputRequest_ExistingFuelResourceName_optional& x);

        void
        SimSimulaOutputRequest_ExistingFuelResourceName (::std::auto_ptr< SimSimulaOutputRequest_ExistingFuelResourceName_type > p);

        // SimSimulaOutputRequest_UnitsofMeasure
        //
        typedef ::xml_schema::string SimSimulaOutputRequest_UnitsofMeasure_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_UnitsofMeasure_type > SimSimulaOutputRequest_UnitsofMeasure_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_UnitsofMeasure_type, char > SimSimulaOutputRequest_UnitsofMeasure_traits;

        const SimSimulaOutputRequest_UnitsofMeasure_optional&
        SimSimulaOutputRequest_UnitsofMeasure () const;

        SimSimulaOutputRequest_UnitsofMeasure_optional&
        SimSimulaOutputRequest_UnitsofMeasure ();

        void
        SimSimulaOutputRequest_UnitsofMeasure (const SimSimulaOutputRequest_UnitsofMeasure_type& x);

        void
        SimSimulaOutputRequest_UnitsofMeasure (const SimSimulaOutputRequest_UnitsofMeasure_optional& x);

        void
        SimSimulaOutputRequest_UnitsofMeasure (::std::auto_ptr< SimSimulaOutputRequest_UnitsofMeasure_type > p);

        // SimSimulaOutputRequest_EnergyperUnitFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_EnergyperUnitFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_EnergyperUnitFactor_type > SimSimulaOutputRequest_EnergyperUnitFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_EnergyperUnitFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_EnergyperUnitFactor_traits;

        const SimSimulaOutputRequest_EnergyperUnitFactor_optional&
        SimSimulaOutputRequest_EnergyperUnitFactor () const;

        SimSimulaOutputRequest_EnergyperUnitFactor_optional&
        SimSimulaOutputRequest_EnergyperUnitFactor ();

        void
        SimSimulaOutputRequest_EnergyperUnitFactor (const SimSimulaOutputRequest_EnergyperUnitFactor_type& x);

        void
        SimSimulaOutputRequest_EnergyperUnitFactor (const SimSimulaOutputRequest_EnergyperUnitFactor_optional& x);

        // SimSimulaOutputRequest_SourceEnergyFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_SourceEnergyFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_SourceEnergyFactor_type > SimSimulaOutputRequest_SourceEnergyFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_SourceEnergyFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_SourceEnergyFactor_traits;

        const SimSimulaOutputRequest_SourceEnergyFactor_optional&
        SimSimulaOutputRequest_SourceEnergyFactor () const;

        SimSimulaOutputRequest_SourceEnergyFactor_optional&
        SimSimulaOutputRequest_SourceEnergyFactor ();

        void
        SimSimulaOutputRequest_SourceEnergyFactor (const SimSimulaOutputRequest_SourceEnergyFactor_type& x);

        void
        SimSimulaOutputRequest_SourceEnergyFactor (const SimSimulaOutputRequest_SourceEnergyFactor_optional& x);

        // SimSimulaOutputRequest_SourceEnergySchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_SourceEnergySchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_SourceEnergySchedName_type > SimSimulaOutputRequest_SourceEnergySchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_SourceEnergySchedName_type, char > SimSimulaOutputRequest_SourceEnergySchedName_traits;

        const SimSimulaOutputRequest_SourceEnergySchedName_optional&
        SimSimulaOutputRequest_SourceEnergySchedName () const;

        SimSimulaOutputRequest_SourceEnergySchedName_optional&
        SimSimulaOutputRequest_SourceEnergySchedName ();

        void
        SimSimulaOutputRequest_SourceEnergySchedName (const SimSimulaOutputRequest_SourceEnergySchedName_type& x);

        void
        SimSimulaOutputRequest_SourceEnergySchedName (const SimSimulaOutputRequest_SourceEnergySchedName_optional& x);

        void
        SimSimulaOutputRequest_SourceEnergySchedName (::std::auto_ptr< SimSimulaOutputRequest_SourceEnergySchedName_type > p);

        // SimSimulaOutputRequest_CO2_EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_CO2_EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CO2_EmissFactor_type > SimSimulaOutputRequest_CO2_EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CO2_EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_CO2_EmissFactor_traits;

        const SimSimulaOutputRequest_CO2_EmissFactor_optional&
        SimSimulaOutputRequest_CO2_EmissFactor () const;

        SimSimulaOutputRequest_CO2_EmissFactor_optional&
        SimSimulaOutputRequest_CO2_EmissFactor ();

        void
        SimSimulaOutputRequest_CO2_EmissFactor (const SimSimulaOutputRequest_CO2_EmissFactor_type& x);

        void
        SimSimulaOutputRequest_CO2_EmissFactor (const SimSimulaOutputRequest_CO2_EmissFactor_optional& x);

        // SimSimulaOutputRequest_CO2_EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_CO2_EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CO2_EmissFactorSchedName_type > SimSimulaOutputRequest_CO2_EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CO2_EmissFactorSchedName_type, char > SimSimulaOutputRequest_CO2_EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_CO2_EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CO2_EmissFactorSchedName () const;

        SimSimulaOutputRequest_CO2_EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CO2_EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_CO2_EmissFactorSchedName (const SimSimulaOutputRequest_CO2_EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_CO2_EmissFactorSchedName (const SimSimulaOutputRequest_CO2_EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_CO2_EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_CO2_EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_CO_EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_CO_EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CO_EmissFactor_type > SimSimulaOutputRequest_CO_EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CO_EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_CO_EmissFactor_traits;

        const SimSimulaOutputRequest_CO_EmissFactor_optional&
        SimSimulaOutputRequest_CO_EmissFactor () const;

        SimSimulaOutputRequest_CO_EmissFactor_optional&
        SimSimulaOutputRequest_CO_EmissFactor ();

        void
        SimSimulaOutputRequest_CO_EmissFactor (const SimSimulaOutputRequest_CO_EmissFactor_type& x);

        void
        SimSimulaOutputRequest_CO_EmissFactor (const SimSimulaOutputRequest_CO_EmissFactor_optional& x);

        // SimSimulaOutputRequest_CO_EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_CO_EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CO_EmissFactorSchedName_type > SimSimulaOutputRequest_CO_EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CO_EmissFactorSchedName_type, char > SimSimulaOutputRequest_CO_EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_CO_EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CO_EmissFactorSchedName () const;

        SimSimulaOutputRequest_CO_EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CO_EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_CO_EmissFactorSchedName (const SimSimulaOutputRequest_CO_EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_CO_EmissFactorSchedName (const SimSimulaOutputRequest_CO_EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_CO_EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_CO_EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_CH4EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_CH4EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CH4EmissFactor_type > SimSimulaOutputRequest_CH4EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CH4EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_CH4EmissFactor_traits;

        const SimSimulaOutputRequest_CH4EmissFactor_optional&
        SimSimulaOutputRequest_CH4EmissFactor () const;

        SimSimulaOutputRequest_CH4EmissFactor_optional&
        SimSimulaOutputRequest_CH4EmissFactor ();

        void
        SimSimulaOutputRequest_CH4EmissFactor (const SimSimulaOutputRequest_CH4EmissFactor_type& x);

        void
        SimSimulaOutputRequest_CH4EmissFactor (const SimSimulaOutputRequest_CH4EmissFactor_optional& x);

        // SimSimulaOutputRequest_CH4EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_CH4EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_CH4EmissFactorSchedName_type > SimSimulaOutputRequest_CH4EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_CH4EmissFactorSchedName_type, char > SimSimulaOutputRequest_CH4EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_CH4EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CH4EmissFactorSchedName () const;

        SimSimulaOutputRequest_CH4EmissFactorSchedName_optional&
        SimSimulaOutputRequest_CH4EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_CH4EmissFactorSchedName (const SimSimulaOutputRequest_CH4EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_CH4EmissFactorSchedName (const SimSimulaOutputRequest_CH4EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_CH4EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_CH4EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_NOxEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_NOxEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NOxEmissFactor_type > SimSimulaOutputRequest_NOxEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NOxEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_NOxEmissFactor_traits;

        const SimSimulaOutputRequest_NOxEmissFactor_optional&
        SimSimulaOutputRequest_NOxEmissFactor () const;

        SimSimulaOutputRequest_NOxEmissFactor_optional&
        SimSimulaOutputRequest_NOxEmissFactor ();

        void
        SimSimulaOutputRequest_NOxEmissFactor (const SimSimulaOutputRequest_NOxEmissFactor_type& x);

        void
        SimSimulaOutputRequest_NOxEmissFactor (const SimSimulaOutputRequest_NOxEmissFactor_optional& x);

        // SimSimulaOutputRequest_NOxEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_NOxEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NOxEmissFactorSchedName_type > SimSimulaOutputRequest_NOxEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NOxEmissFactorSchedName_type, char > SimSimulaOutputRequest_NOxEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_NOxEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NOxEmissFactorSchedName () const;

        SimSimulaOutputRequest_NOxEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NOxEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_NOxEmissFactorSchedName (const SimSimulaOutputRequest_NOxEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_NOxEmissFactorSchedName (const SimSimulaOutputRequest_NOxEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_NOxEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_NOxEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_N2OEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_N2OEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_N2OEmissFactor_type > SimSimulaOutputRequest_N2OEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_N2OEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_N2OEmissFactor_traits;

        const SimSimulaOutputRequest_N2OEmissFactor_optional&
        SimSimulaOutputRequest_N2OEmissFactor () const;

        SimSimulaOutputRequest_N2OEmissFactor_optional&
        SimSimulaOutputRequest_N2OEmissFactor ();

        void
        SimSimulaOutputRequest_N2OEmissFactor (const SimSimulaOutputRequest_N2OEmissFactor_type& x);

        void
        SimSimulaOutputRequest_N2OEmissFactor (const SimSimulaOutputRequest_N2OEmissFactor_optional& x);

        // SimSimulaOutputRequest_N2OEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_N2OEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_N2OEmissFactorSchedName_type > SimSimulaOutputRequest_N2OEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_N2OEmissFactorSchedName_type, char > SimSimulaOutputRequest_N2OEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_N2OEmissFactorSchedName_optional&
        SimSimulaOutputRequest_N2OEmissFactorSchedName () const;

        SimSimulaOutputRequest_N2OEmissFactorSchedName_optional&
        SimSimulaOutputRequest_N2OEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_N2OEmissFactorSchedName (const SimSimulaOutputRequest_N2OEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_N2OEmissFactorSchedName (const SimSimulaOutputRequest_N2OEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_N2OEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_N2OEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_SO2EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_SO2EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_SO2EmissFactor_type > SimSimulaOutputRequest_SO2EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_SO2EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_SO2EmissFactor_traits;

        const SimSimulaOutputRequest_SO2EmissFactor_optional&
        SimSimulaOutputRequest_SO2EmissFactor () const;

        SimSimulaOutputRequest_SO2EmissFactor_optional&
        SimSimulaOutputRequest_SO2EmissFactor ();

        void
        SimSimulaOutputRequest_SO2EmissFactor (const SimSimulaOutputRequest_SO2EmissFactor_type& x);

        void
        SimSimulaOutputRequest_SO2EmissFactor (const SimSimulaOutputRequest_SO2EmissFactor_optional& x);

        // SimSimulaOutputRequest_SO2EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_SO2EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_SO2EmissFactorSchedName_type > SimSimulaOutputRequest_SO2EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_SO2EmissFactorSchedName_type, char > SimSimulaOutputRequest_SO2EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_SO2EmissFactorSchedName_optional&
        SimSimulaOutputRequest_SO2EmissFactorSchedName () const;

        SimSimulaOutputRequest_SO2EmissFactorSchedName_optional&
        SimSimulaOutputRequest_SO2EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_SO2EmissFactorSchedName (const SimSimulaOutputRequest_SO2EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_SO2EmissFactorSchedName (const SimSimulaOutputRequest_SO2EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_SO2EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_SO2EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_PMEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_PMEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PMEmissFactor_type > SimSimulaOutputRequest_PMEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PMEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_PMEmissFactor_traits;

        const SimSimulaOutputRequest_PMEmissFactor_optional&
        SimSimulaOutputRequest_PMEmissFactor () const;

        SimSimulaOutputRequest_PMEmissFactor_optional&
        SimSimulaOutputRequest_PMEmissFactor ();

        void
        SimSimulaOutputRequest_PMEmissFactor (const SimSimulaOutputRequest_PMEmissFactor_type& x);

        void
        SimSimulaOutputRequest_PMEmissFactor (const SimSimulaOutputRequest_PMEmissFactor_optional& x);

        // SimSimulaOutputRequest_PMEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_PMEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PMEmissFactorSchedName_type > SimSimulaOutputRequest_PMEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PMEmissFactorSchedName_type, char > SimSimulaOutputRequest_PMEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_PMEmissFactorSchedName_optional&
        SimSimulaOutputRequest_PMEmissFactorSchedName () const;

        SimSimulaOutputRequest_PMEmissFactorSchedName_optional&
        SimSimulaOutputRequest_PMEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_PMEmissFactorSchedName (const SimSimulaOutputRequest_PMEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_PMEmissFactorSchedName (const SimSimulaOutputRequest_PMEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_PMEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_PMEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_PM10EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_PM10EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PM10EmissFactor_type > SimSimulaOutputRequest_PM10EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PM10EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_PM10EmissFactor_traits;

        const SimSimulaOutputRequest_PM10EmissFactor_optional&
        SimSimulaOutputRequest_PM10EmissFactor () const;

        SimSimulaOutputRequest_PM10EmissFactor_optional&
        SimSimulaOutputRequest_PM10EmissFactor ();

        void
        SimSimulaOutputRequest_PM10EmissFactor (const SimSimulaOutputRequest_PM10EmissFactor_type& x);

        void
        SimSimulaOutputRequest_PM10EmissFactor (const SimSimulaOutputRequest_PM10EmissFactor_optional& x);

        // SimSimulaOutputRequest_PM10EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_PM10EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PM10EmissFactorSchedName_type > SimSimulaOutputRequest_PM10EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PM10EmissFactorSchedName_type, char > SimSimulaOutputRequest_PM10EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_PM10EmissFactorSchedName_optional&
        SimSimulaOutputRequest_PM10EmissFactorSchedName () const;

        SimSimulaOutputRequest_PM10EmissFactorSchedName_optional&
        SimSimulaOutputRequest_PM10EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_PM10EmissFactorSchedName (const SimSimulaOutputRequest_PM10EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_PM10EmissFactorSchedName (const SimSimulaOutputRequest_PM10EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_PM10EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_PM10EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_PM2_5EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_PM2_5EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PM2_5EmissFactor_type > SimSimulaOutputRequest_PM2_5EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PM2_5EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_PM2_5EmissFactor_traits;

        const SimSimulaOutputRequest_PM2_5EmissFactor_optional&
        SimSimulaOutputRequest_PM2_5EmissFactor () const;

        SimSimulaOutputRequest_PM2_5EmissFactor_optional&
        SimSimulaOutputRequest_PM2_5EmissFactor ();

        void
        SimSimulaOutputRequest_PM2_5EmissFactor (const SimSimulaOutputRequest_PM2_5EmissFactor_type& x);

        void
        SimSimulaOutputRequest_PM2_5EmissFactor (const SimSimulaOutputRequest_PM2_5EmissFactor_optional& x);

        // SimSimulaOutputRequest_PM2_5EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_PM2_5EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PM2_5EmissFactorSchedName_type > SimSimulaOutputRequest_PM2_5EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PM2_5EmissFactorSchedName_type, char > SimSimulaOutputRequest_PM2_5EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_PM2_5EmissFactorSchedName_optional&
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName () const;

        SimSimulaOutputRequest_PM2_5EmissFactorSchedName_optional&
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName (const SimSimulaOutputRequest_PM2_5EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName (const SimSimulaOutputRequest_PM2_5EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_PM2_5EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_NH3EmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_NH3EmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NH3EmissFactor_type > SimSimulaOutputRequest_NH3EmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NH3EmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_NH3EmissFactor_traits;

        const SimSimulaOutputRequest_NH3EmissFactor_optional&
        SimSimulaOutputRequest_NH3EmissFactor () const;

        SimSimulaOutputRequest_NH3EmissFactor_optional&
        SimSimulaOutputRequest_NH3EmissFactor ();

        void
        SimSimulaOutputRequest_NH3EmissFactor (const SimSimulaOutputRequest_NH3EmissFactor_type& x);

        void
        SimSimulaOutputRequest_NH3EmissFactor (const SimSimulaOutputRequest_NH3EmissFactor_optional& x);

        // SimSimulaOutputRequest_NH3EmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_NH3EmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NH3EmissFactorSchedName_type > SimSimulaOutputRequest_NH3EmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NH3EmissFactorSchedName_type, char > SimSimulaOutputRequest_NH3EmissFactorSchedName_traits;

        const SimSimulaOutputRequest_NH3EmissFactorSchedName_optional&
        SimSimulaOutputRequest_NH3EmissFactorSchedName () const;

        SimSimulaOutputRequest_NH3EmissFactorSchedName_optional&
        SimSimulaOutputRequest_NH3EmissFactorSchedName ();

        void
        SimSimulaOutputRequest_NH3EmissFactorSchedName (const SimSimulaOutputRequest_NH3EmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_NH3EmissFactorSchedName (const SimSimulaOutputRequest_NH3EmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_NH3EmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_NH3EmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_NMVOCEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_NMVOCEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NMVOCEmissFactor_type > SimSimulaOutputRequest_NMVOCEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NMVOCEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_NMVOCEmissFactor_traits;

        const SimSimulaOutputRequest_NMVOCEmissFactor_optional&
        SimSimulaOutputRequest_NMVOCEmissFactor () const;

        SimSimulaOutputRequest_NMVOCEmissFactor_optional&
        SimSimulaOutputRequest_NMVOCEmissFactor ();

        void
        SimSimulaOutputRequest_NMVOCEmissFactor (const SimSimulaOutputRequest_NMVOCEmissFactor_type& x);

        void
        SimSimulaOutputRequest_NMVOCEmissFactor (const SimSimulaOutputRequest_NMVOCEmissFactor_optional& x);

        // SimSimulaOutputRequest_NMVOCEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_NMVOCEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NMVOCEmissFactorSchedName_type > SimSimulaOutputRequest_NMVOCEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NMVOCEmissFactorSchedName_type, char > SimSimulaOutputRequest_NMVOCEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_NMVOCEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName () const;

        SimSimulaOutputRequest_NMVOCEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName (const SimSimulaOutputRequest_NMVOCEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName (const SimSimulaOutputRequest_NMVOCEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_NMVOCEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_HgEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_HgEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_HgEmissFactor_type > SimSimulaOutputRequest_HgEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_HgEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_HgEmissFactor_traits;

        const SimSimulaOutputRequest_HgEmissFactor_optional&
        SimSimulaOutputRequest_HgEmissFactor () const;

        SimSimulaOutputRequest_HgEmissFactor_optional&
        SimSimulaOutputRequest_HgEmissFactor ();

        void
        SimSimulaOutputRequest_HgEmissFactor (const SimSimulaOutputRequest_HgEmissFactor_type& x);

        void
        SimSimulaOutputRequest_HgEmissFactor (const SimSimulaOutputRequest_HgEmissFactor_optional& x);

        // SimSimulaOutputRequest_HgEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_HgEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_HgEmissFactorSchedName_type > SimSimulaOutputRequest_HgEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_HgEmissFactorSchedName_type, char > SimSimulaOutputRequest_HgEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_HgEmissFactorSchedName_optional&
        SimSimulaOutputRequest_HgEmissFactorSchedName () const;

        SimSimulaOutputRequest_HgEmissFactorSchedName_optional&
        SimSimulaOutputRequest_HgEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_HgEmissFactorSchedName (const SimSimulaOutputRequest_HgEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_HgEmissFactorSchedName (const SimSimulaOutputRequest_HgEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_HgEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_HgEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_PbEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_PbEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PbEmissFactor_type > SimSimulaOutputRequest_PbEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PbEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_PbEmissFactor_traits;

        const SimSimulaOutputRequest_PbEmissFactor_optional&
        SimSimulaOutputRequest_PbEmissFactor () const;

        SimSimulaOutputRequest_PbEmissFactor_optional&
        SimSimulaOutputRequest_PbEmissFactor ();

        void
        SimSimulaOutputRequest_PbEmissFactor (const SimSimulaOutputRequest_PbEmissFactor_type& x);

        void
        SimSimulaOutputRequest_PbEmissFactor (const SimSimulaOutputRequest_PbEmissFactor_optional& x);

        // SimSimulaOutputRequest_PbEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_PbEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_PbEmissFactorSchedName_type > SimSimulaOutputRequest_PbEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_PbEmissFactorSchedName_type, char > SimSimulaOutputRequest_PbEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_PbEmissFactorSchedName_optional&
        SimSimulaOutputRequest_PbEmissFactorSchedName () const;

        SimSimulaOutputRequest_PbEmissFactorSchedName_optional&
        SimSimulaOutputRequest_PbEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_PbEmissFactorSchedName (const SimSimulaOutputRequest_PbEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_PbEmissFactorSchedName (const SimSimulaOutputRequest_PbEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_PbEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_PbEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_WaterEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_WaterEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_WaterEmissFactor_type > SimSimulaOutputRequest_WaterEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_WaterEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_WaterEmissFactor_traits;

        const SimSimulaOutputRequest_WaterEmissFactor_optional&
        SimSimulaOutputRequest_WaterEmissFactor () const;

        SimSimulaOutputRequest_WaterEmissFactor_optional&
        SimSimulaOutputRequest_WaterEmissFactor ();

        void
        SimSimulaOutputRequest_WaterEmissFactor (const SimSimulaOutputRequest_WaterEmissFactor_type& x);

        void
        SimSimulaOutputRequest_WaterEmissFactor (const SimSimulaOutputRequest_WaterEmissFactor_optional& x);

        // SimSimulaOutputRequest_WaterEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_WaterEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_WaterEmissFactorSchedName_type > SimSimulaOutputRequest_WaterEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_WaterEmissFactorSchedName_type, char > SimSimulaOutputRequest_WaterEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_WaterEmissFactorSchedName_optional&
        SimSimulaOutputRequest_WaterEmissFactorSchedName () const;

        SimSimulaOutputRequest_WaterEmissFactorSchedName_optional&
        SimSimulaOutputRequest_WaterEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_WaterEmissFactorSchedName (const SimSimulaOutputRequest_WaterEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_WaterEmissFactorSchedName (const SimSimulaOutputRequest_WaterEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_WaterEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_WaterEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_NuclearHighLevelEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_NuclearHighLevelEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NuclearHighLevelEmissFactor_type > SimSimulaOutputRequest_NuclearHighLevelEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NuclearHighLevelEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_NuclearHighLevelEmissFactor_traits;

        const SimSimulaOutputRequest_NuclearHighLevelEmissFactor_optional&
        SimSimulaOutputRequest_NuclearHighLevelEmissFactor () const;

        SimSimulaOutputRequest_NuclearHighLevelEmissFactor_optional&
        SimSimulaOutputRequest_NuclearHighLevelEmissFactor ();

        void
        SimSimulaOutputRequest_NuclearHighLevelEmissFactor (const SimSimulaOutputRequest_NuclearHighLevelEmissFactor_type& x);

        void
        SimSimulaOutputRequest_NuclearHighLevelEmissFactor (const SimSimulaOutputRequest_NuclearHighLevelEmissFactor_optional& x);

        // SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_type > SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_type, char > SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName () const;

        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName (const SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName (const SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_type > p);

        // SimSimulaOutputRequest_NuclearLowLevelEmissFactor
        //
        typedef ::xml_schema::double_ SimSimulaOutputRequest_NuclearLowLevelEmissFactor_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NuclearLowLevelEmissFactor_type > SimSimulaOutputRequest_NuclearLowLevelEmissFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NuclearLowLevelEmissFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimulaOutputRequest_NuclearLowLevelEmissFactor_traits;

        const SimSimulaOutputRequest_NuclearLowLevelEmissFactor_optional&
        SimSimulaOutputRequest_NuclearLowLevelEmissFactor () const;

        SimSimulaOutputRequest_NuclearLowLevelEmissFactor_optional&
        SimSimulaOutputRequest_NuclearLowLevelEmissFactor ();

        void
        SimSimulaOutputRequest_NuclearLowLevelEmissFactor (const SimSimulaOutputRequest_NuclearLowLevelEmissFactor_type& x);

        void
        SimSimulaOutputRequest_NuclearLowLevelEmissFactor (const SimSimulaOutputRequest_NuclearLowLevelEmissFactor_optional& x);

        // SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName
        //
        typedef ::xml_schema::idref SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_type > SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_type, char > SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_traits;

        const SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName () const;

        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_optional&
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName ();

        void
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName (const SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_type& x);

        void
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName (const SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_optional& x);

        void
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName (::std::auto_ptr< SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_type > p);

        // Constructors.
        //
        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors (const RefId_type&);

        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors (const ::xercesc::DOMElement& e,
                                                                     ::xml_schema::flags f = 0,
                                                                     ::xml_schema::container* c = 0);

        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors (const SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors& x,
                                                                     ::xml_schema::flags f = 0,
                                                                     ::xml_schema::container* c = 0);

        virtual SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors&
        operator= (const SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors& x);

        virtual 
        ~SimSimulationOutputRequest_FuelAndEnvironmental_FuelFactors ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimSimulaOutputRequest_ExistingFuelResourceName_optional SimSimulaOutputRequest_ExistingFuelResourceName_;
        SimSimulaOutputRequest_UnitsofMeasure_optional SimSimulaOutputRequest_UnitsofMeasure_;
        SimSimulaOutputRequest_EnergyperUnitFactor_optional SimSimulaOutputRequest_EnergyperUnitFactor_;
        SimSimulaOutputRequest_SourceEnergyFactor_optional SimSimulaOutputRequest_SourceEnergyFactor_;
        SimSimulaOutputRequest_SourceEnergySchedName_optional SimSimulaOutputRequest_SourceEnergySchedName_;
        SimSimulaOutputRequest_CO2_EmissFactor_optional SimSimulaOutputRequest_CO2_EmissFactor_;
        SimSimulaOutputRequest_CO2_EmissFactorSchedName_optional SimSimulaOutputRequest_CO2_EmissFactorSchedName_;
        SimSimulaOutputRequest_CO_EmissFactor_optional SimSimulaOutputRequest_CO_EmissFactor_;
        SimSimulaOutputRequest_CO_EmissFactorSchedName_optional SimSimulaOutputRequest_CO_EmissFactorSchedName_;
        SimSimulaOutputRequest_CH4EmissFactor_optional SimSimulaOutputRequest_CH4EmissFactor_;
        SimSimulaOutputRequest_CH4EmissFactorSchedName_optional SimSimulaOutputRequest_CH4EmissFactorSchedName_;
        SimSimulaOutputRequest_NOxEmissFactor_optional SimSimulaOutputRequest_NOxEmissFactor_;
        SimSimulaOutputRequest_NOxEmissFactorSchedName_optional SimSimulaOutputRequest_NOxEmissFactorSchedName_;
        SimSimulaOutputRequest_N2OEmissFactor_optional SimSimulaOutputRequest_N2OEmissFactor_;
        SimSimulaOutputRequest_N2OEmissFactorSchedName_optional SimSimulaOutputRequest_N2OEmissFactorSchedName_;
        SimSimulaOutputRequest_SO2EmissFactor_optional SimSimulaOutputRequest_SO2EmissFactor_;
        SimSimulaOutputRequest_SO2EmissFactorSchedName_optional SimSimulaOutputRequest_SO2EmissFactorSchedName_;
        SimSimulaOutputRequest_PMEmissFactor_optional SimSimulaOutputRequest_PMEmissFactor_;
        SimSimulaOutputRequest_PMEmissFactorSchedName_optional SimSimulaOutputRequest_PMEmissFactorSchedName_;
        SimSimulaOutputRequest_PM10EmissFactor_optional SimSimulaOutputRequest_PM10EmissFactor_;
        SimSimulaOutputRequest_PM10EmissFactorSchedName_optional SimSimulaOutputRequest_PM10EmissFactorSchedName_;
        SimSimulaOutputRequest_PM2_5EmissFactor_optional SimSimulaOutputRequest_PM2_5EmissFactor_;
        SimSimulaOutputRequest_PM2_5EmissFactorSchedName_optional SimSimulaOutputRequest_PM2_5EmissFactorSchedName_;
        SimSimulaOutputRequest_NH3EmissFactor_optional SimSimulaOutputRequest_NH3EmissFactor_;
        SimSimulaOutputRequest_NH3EmissFactorSchedName_optional SimSimulaOutputRequest_NH3EmissFactorSchedName_;
        SimSimulaOutputRequest_NMVOCEmissFactor_optional SimSimulaOutputRequest_NMVOCEmissFactor_;
        SimSimulaOutputRequest_NMVOCEmissFactorSchedName_optional SimSimulaOutputRequest_NMVOCEmissFactorSchedName_;
        SimSimulaOutputRequest_HgEmissFactor_optional SimSimulaOutputRequest_HgEmissFactor_;
        SimSimulaOutputRequest_HgEmissFactorSchedName_optional SimSimulaOutputRequest_HgEmissFactorSchedName_;
        SimSimulaOutputRequest_PbEmissFactor_optional SimSimulaOutputRequest_PbEmissFactor_;
        SimSimulaOutputRequest_PbEmissFactorSchedName_optional SimSimulaOutputRequest_PbEmissFactorSchedName_;
        SimSimulaOutputRequest_WaterEmissFactor_optional SimSimulaOutputRequest_WaterEmissFactor_;
        SimSimulaOutputRequest_WaterEmissFactorSchedName_optional SimSimulaOutputRequest_WaterEmissFactorSchedName_;
        SimSimulaOutputRequest_NuclearHighLevelEmissFactor_optional SimSimulaOutputRequest_NuclearHighLevelEmissFactor_;
        SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_optional SimSimulaOutputRequest_NuclearHighLevelEmissFactorSchedName_;
        SimSimulaOutputRequest_NuclearLowLevelEmissFactor_optional SimSimulaOutputRequest_NuclearLowLevelEmissFactor_;
        SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_optional SimSimulaOutputRequest_NuclearLowLevelEmissFactorSchedName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SIMULATION_OUTPUT_REQUEST_FUEL_AND_ENVIRONMENTAL_FUEL_FACTORS_HXX
