// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_Dehumidifier_NoFans.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Dehumidifier_NoFans
      // 

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_CntlType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_CntlType () const
      {
        return this->SimFlowEnergyTrans_CntlType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_CntlType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_CntlType ()
      {
        return this->SimFlowEnergyTrans_CntlType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_type& x)
      {
        this->SimFlowEnergyTrans_CntlType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_CntlType (const SimFlowEnergyTrans_CntlType_optional& x)
      {
        this->SimFlowEnergyTrans_CntlType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_CntlType (::std::auto_ptr< SimFlowEnergyTrans_CntlType_type > x)
      {
        this->SimFlowEnergyTrans_CntlType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_ProcAirInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_ProcAirInletNodeName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_ProcAirInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_ProcAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirInletNodeName (const SimFlowEnergyTrans_ProcAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ProcAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirInletNodeName (const SimFlowEnergyTrans_ProcAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ProcAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ProcAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ProcAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_ProcAirOutletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_ProcAirOutletNodeName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_ProcAirOutletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_ProcAirOutletNodeName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirOutletNodeName (const SimFlowEnergyTrans_ProcAirOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ProcAirOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirOutletNodeName (const SimFlowEnergyTrans_ProcAirOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ProcAirOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_ProcAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ProcAirOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ProcAirOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenAirInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_RegenAirInletNodeName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenAirInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_RegenAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenAirInletNodeName (const SimFlowEnergyTrans_RegenAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenAirInletNodeName (const SimFlowEnergyTrans_RegenAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_RegenAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanInletNodeName () const
      {
        return this->SimFlowEnergyTrans_RegenFanInletNodeName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanInletNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanInletNodeName ()
      {
        return this->SimFlowEnergyTrans_RegenFanInletNodeName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanInletNodeName (const SimFlowEnergyTrans_RegenFanInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_RegenFanInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanInletNodeName (const SimFlowEnergyTrans_RegenFanInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenFanInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_RegenFanInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_RegenFanInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint () const
      {
        return this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint ()
      {
        return this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint (const SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_type& x)
      {
        this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint (const SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_optional& x)
      {
        this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomProcAirFlowRate_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_NomProcAirFlowRate_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomProcAirFlowRate_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_NomProcAirFlowRate_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirFlowRate (const SimFlowEnergyTrans_NomProcAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_NomProcAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirFlowRate (const SimFlowEnergyTrans_NomProcAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_NomProcAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomProcAirVelo_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirVelo () const
      {
        return this->SimFlowEnergyTrans_NomProcAirVelo_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomProcAirVelo_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirVelo ()
      {
        return this->SimFlowEnergyTrans_NomProcAirVelo_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirVelo (const SimFlowEnergyTrans_NomProcAirVelo_type& x)
      {
        this->SimFlowEnergyTrans_NomProcAirVelo_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomProcAirVelo (const SimFlowEnergyTrans_NomProcAirVelo_optional& x)
      {
        this->SimFlowEnergyTrans_NomProcAirVelo_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RotorPwr_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RotorPwr () const
      {
        return this->SimFlowEnergyTrans_RotorPwr_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RotorPwr_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RotorPwr ()
      {
        return this->SimFlowEnergyTrans_RotorPwr_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RotorPwr (const SimFlowEnergyTrans_RotorPwr_type& x)
      {
        this->SimFlowEnergyTrans_RotorPwr_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RotorPwr (const SimFlowEnergyTrans_RotorPwr_optional& x)
      {
        this->SimFlowEnergyTrans_RotorPwr_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenCoilObjType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilObjType () const
      {
        return this->SimFlowEnergyTrans_RegenCoilObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenCoilObjType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilObjType ()
      {
        return this->SimFlowEnergyTrans_RegenCoilObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilObjType (const SimFlowEnergyTrans_RegenCoilObjType_type& x)
      {
        this->SimFlowEnergyTrans_RegenCoilObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilObjType (const SimFlowEnergyTrans_RegenCoilObjType_optional& x)
      {
        this->SimFlowEnergyTrans_RegenCoilObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenCoilObjType_type > x)
      {
        this->SimFlowEnergyTrans_RegenCoilObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenCoilName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilName () const
      {
        return this->SimFlowEnergyTrans_RegenCoilName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenCoilName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilName ()
      {
        return this->SimFlowEnergyTrans_RegenCoilName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilName (const SimFlowEnergyTrans_RegenCoilName_type& x)
      {
        this->SimFlowEnergyTrans_RegenCoilName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilName (const SimFlowEnergyTrans_RegenCoilName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenCoilName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenCoilName (::std::auto_ptr< SimFlowEnergyTrans_RegenCoilName_type > x)
      {
        this->SimFlowEnergyTrans_RegenCoilName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanObjType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanObjType () const
      {
        return this->SimFlowEnergyTrans_RegenFanObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanObjType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanObjType ()
      {
        return this->SimFlowEnergyTrans_RegenFanObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanObjType (const SimFlowEnergyTrans_RegenFanObjType_type& x)
      {
        this->SimFlowEnergyTrans_RegenFanObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanObjType (const SimFlowEnergyTrans_RegenFanObjType_optional& x)
      {
        this->SimFlowEnergyTrans_RegenFanObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenFanObjType_type > x)
      {
        this->SimFlowEnergyTrans_RegenFanObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanName () const
      {
        return this->SimFlowEnergyTrans_RegenFanName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenFanName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanName ()
      {
        return this->SimFlowEnergyTrans_RegenFanName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanName (const SimFlowEnergyTrans_RegenFanName_type& x)
      {
        this->SimFlowEnergyTrans_RegenFanName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanName (const SimFlowEnergyTrans_RegenFanName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenFanName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenFanName (::std::auto_ptr< SimFlowEnergyTrans_RegenFanName_type > x)
      {
        this->SimFlowEnergyTrans_RegenFanName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_PerfModelType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_PerfModelType () const
      {
        return this->SimFlowEnergyTrans_PerfModelType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_PerfModelType_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_PerfModelType ()
      {
        return this->SimFlowEnergyTrans_PerfModelType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_PerfModelType (const SimFlowEnergyTrans_PerfModelType_type& x)
      {
        this->SimFlowEnergyTrans_PerfModelType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_PerfModelType (const SimFlowEnergyTrans_PerfModelType_optional& x)
      {
        this->SimFlowEnergyTrans_PerfModelType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_PerfModelType (::std::auto_ptr< SimFlowEnergyTrans_PerfModelType_type > x)
      {
        this->SimFlowEnergyTrans_PerfModelType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName () const
      {
        return this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName ()
      {
        return this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName () const
      {
        return this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName ()
      {
        return this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName () const
      {
        return this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName ()
      {
        return this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName () const
      {
        return this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName ()
      {
        return this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type& x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (const SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type > x)
      {
        this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName () const
      {
        return this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName ()
      {
        return this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type& x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type > x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName () const
      {
        return this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName ()
      {
        return this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type& x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type > x)
      {
        this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName () const
      {
        return this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName ()
      {
        return this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type& x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (const SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type > x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName () const
      {
        return this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName ()
      {
        return this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type& x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (const SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName (::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type > x)
      {
        this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomRegenTemp_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomRegenTemp () const
      {
        return this->SimFlowEnergyTrans_NomRegenTemp_;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::SimFlowEnergyTrans_NomRegenTemp_optional& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomRegenTemp ()
      {
        return this->SimFlowEnergyTrans_NomRegenTemp_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomRegenTemp (const SimFlowEnergyTrans_NomRegenTemp_type& x)
      {
        this->SimFlowEnergyTrans_NomRegenTemp_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTrans_NomRegenTemp (const SimFlowEnergyTrans_NomRegenTemp_optional& x)
      {
        this->SimFlowEnergyTrans_NomRegenTemp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Dehumidifier_NoFans
      //

      SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTransfer_Dehumidifier_NoFans (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (RefId),
        SimFlowEnergyTrans_CntlType_ (this),
        SimFlowEnergyTrans_ProcAirInletNodeName_ (this),
        SimFlowEnergyTrans_ProcAirOutletNodeName_ (this),
        SimFlowEnergyTrans_RegenAirInletNodeName_ (this),
        SimFlowEnergyTrans_RegenFanInletNodeName_ (this),
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_ (this),
        SimFlowEnergyTrans_NomProcAirFlowRate_ (this),
        SimFlowEnergyTrans_NomProcAirVelo_ (this),
        SimFlowEnergyTrans_RotorPwr_ (this),
        SimFlowEnergyTrans_RegenCoilObjType_ (this),
        SimFlowEnergyTrans_RegenCoilName_ (this),
        SimFlowEnergyTrans_RegenFanObjType_ (this),
        SimFlowEnergyTrans_RegenFanName_ (this),
        SimFlowEnergyTrans_PerfModelType_ (this),
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_NomRegenTemp_ (this)
      {
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTransfer_Dehumidifier_NoFans (const SimFlowEnergyTransfer_Dehumidifier_NoFans& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (x, f, c),
        SimFlowEnergyTrans_CntlType_ (x.SimFlowEnergyTrans_CntlType_, f, this),
        SimFlowEnergyTrans_ProcAirInletNodeName_ (x.SimFlowEnergyTrans_ProcAirInletNodeName_, f, this),
        SimFlowEnergyTrans_ProcAirOutletNodeName_ (x.SimFlowEnergyTrans_ProcAirOutletNodeName_, f, this),
        SimFlowEnergyTrans_RegenAirInletNodeName_ (x.SimFlowEnergyTrans_RegenAirInletNodeName_, f, this),
        SimFlowEnergyTrans_RegenFanInletNodeName_ (x.SimFlowEnergyTrans_RegenFanInletNodeName_, f, this),
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_ (x.SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_, f, this),
        SimFlowEnergyTrans_NomProcAirFlowRate_ (x.SimFlowEnergyTrans_NomProcAirFlowRate_, f, this),
        SimFlowEnergyTrans_NomProcAirVelo_ (x.SimFlowEnergyTrans_NomProcAirVelo_, f, this),
        SimFlowEnergyTrans_RotorPwr_ (x.SimFlowEnergyTrans_RotorPwr_, f, this),
        SimFlowEnergyTrans_RegenCoilObjType_ (x.SimFlowEnergyTrans_RegenCoilObjType_, f, this),
        SimFlowEnergyTrans_RegenCoilName_ (x.SimFlowEnergyTrans_RegenCoilName_, f, this),
        SimFlowEnergyTrans_RegenFanObjType_ (x.SimFlowEnergyTrans_RegenFanObjType_, f, this),
        SimFlowEnergyTrans_RegenFanName_ (x.SimFlowEnergyTrans_RegenFanName_, f, this),
        SimFlowEnergyTrans_PerfModelType_ (x.SimFlowEnergyTrans_PerfModelType_, f, this),
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_ (x.SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_, f, this),
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_ (x.SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_, f, this),
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_ (x.SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_, f, this),
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_ (x.SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_, f, this),
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_ (x.SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_, f, this),
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_ (x.SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_, f, this),
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_ (x.SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_, f, this),
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_ (x.SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_, f, this),
        SimFlowEnergyTrans_NomRegenTemp_ (x.SimFlowEnergyTrans_NomRegenTemp_, f, this)
      {
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::
      SimFlowEnergyTransfer_Dehumidifier_NoFans (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_CntlType_ (this),
        SimFlowEnergyTrans_ProcAirInletNodeName_ (this),
        SimFlowEnergyTrans_ProcAirOutletNodeName_ (this),
        SimFlowEnergyTrans_RegenAirInletNodeName_ (this),
        SimFlowEnergyTrans_RegenFanInletNodeName_ (this),
        SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_ (this),
        SimFlowEnergyTrans_NomProcAirFlowRate_ (this),
        SimFlowEnergyTrans_NomProcAirVelo_ (this),
        SimFlowEnergyTrans_RotorPwr_ (this),
        SimFlowEnergyTrans_RegenCoilObjType_ (this),
        SimFlowEnergyTrans_RegenCoilName_ (this),
        SimFlowEnergyTrans_RegenFanObjType_ (this),
        SimFlowEnergyTrans_RegenFanName_ (this),
        SimFlowEnergyTrans_PerfModelType_ (this),
        SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_ (this),
        SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_ (this),
        SimFlowEnergyTrans_NomRegenTemp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_Dehumidifier_NoFans::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_CntlType
          //
          if (n.name () == "SimFlowEnergyTrans_CntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CntlType_type > r (
              SimFlowEnergyTrans_CntlType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CntlType_)
            {
              this->SimFlowEnergyTrans_CntlType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ProcAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ProcAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ProcAirInletNodeName_type > r (
              SimFlowEnergyTrans_ProcAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ProcAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_ProcAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ProcAirOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ProcAirOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ProcAirOutletNodeName_type > r (
              SimFlowEnergyTrans_ProcAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ProcAirOutletNodeName_)
            {
              this->SimFlowEnergyTrans_ProcAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirInletNodeName_type > r (
              SimFlowEnergyTrans_RegenAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_RegenAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenFanInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenFanInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenFanInletNodeName_type > r (
              SimFlowEnergyTrans_RegenFanInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenFanInletNodeName_)
            {
              this->SimFlowEnergyTrans_RegenFanInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint
          //
          if (n.name () == "SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_)
            {
              this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_.set (SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NomProcAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_NomProcAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomProcAirFlowRate_)
            {
              this->SimFlowEnergyTrans_NomProcAirFlowRate_.set (SimFlowEnergyTrans_NomProcAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NomProcAirVelo
          //
          if (n.name () == "SimFlowEnergyTrans_NomProcAirVelo" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomProcAirVelo_)
            {
              this->SimFlowEnergyTrans_NomProcAirVelo_.set (SimFlowEnergyTrans_NomProcAirVelo_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RotorPwr
          //
          if (n.name () == "SimFlowEnergyTrans_RotorPwr" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RotorPwr_)
            {
              this->SimFlowEnergyTrans_RotorPwr_.set (SimFlowEnergyTrans_RotorPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenCoilObjType
          //
          if (n.name () == "SimFlowEnergyTrans_RegenCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenCoilObjType_type > r (
              SimFlowEnergyTrans_RegenCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenCoilObjType_)
            {
              this->SimFlowEnergyTrans_RegenCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenCoilName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenCoilName_type > r (
              SimFlowEnergyTrans_RegenCoilName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenCoilName_)
            {
              this->SimFlowEnergyTrans_RegenCoilName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenFanObjType
          //
          if (n.name () == "SimFlowEnergyTrans_RegenFanObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenFanObjType_type > r (
              SimFlowEnergyTrans_RegenFanObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenFanObjType_)
            {
              this->SimFlowEnergyTrans_RegenFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenFanName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenFanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenFanName_type > r (
              SimFlowEnergyTrans_RegenFanName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenFanName_)
            {
              this->SimFlowEnergyTrans_RegenFanName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PerfModelType
          //
          if (n.name () == "SimFlowEnergyTrans_PerfModelType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PerfModelType_type > r (
              SimFlowEnergyTrans_PerfModelType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PerfModelType_)
            {
              this->SimFlowEnergyTrans_PerfModelType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_type > r (
              SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_)
            {
              this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_type > r (
              SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_)
            {
              this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_type > r (
              SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_)
            {
              this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_type > r (
              SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_)
            {
              this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_type > r (
              SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_)
            {
              this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_type > r (
              SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_)
            {
              this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_type > r (
              SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_)
            {
              this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_type > r (
              SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_)
            {
              this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NomRegenTemp
          //
          if (n.name () == "SimFlowEnergyTrans_NomRegenTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomRegenTemp_)
            {
              this->SimFlowEnergyTrans_NomRegenTemp_.set (SimFlowEnergyTrans_NomRegenTemp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans* SimFlowEnergyTransfer_Dehumidifier_NoFans::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_Dehumidifier_NoFans (*this, f, c);
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans& SimFlowEnergyTransfer_Dehumidifier_NoFans::
      operator= (const SimFlowEnergyTransfer_Dehumidifier_NoFans& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier& > (*this) = x;
          this->SimFlowEnergyTrans_CntlType_ = x.SimFlowEnergyTrans_CntlType_;
          this->SimFlowEnergyTrans_ProcAirInletNodeName_ = x.SimFlowEnergyTrans_ProcAirInletNodeName_;
          this->SimFlowEnergyTrans_ProcAirOutletNodeName_ = x.SimFlowEnergyTrans_ProcAirOutletNodeName_;
          this->SimFlowEnergyTrans_RegenAirInletNodeName_ = x.SimFlowEnergyTrans_RegenAirInletNodeName_;
          this->SimFlowEnergyTrans_RegenFanInletNodeName_ = x.SimFlowEnergyTrans_RegenFanInletNodeName_;
          this->SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_ = x.SimFlowEnergyTrans_LeavMaxHumidRatioSetpoint_;
          this->SimFlowEnergyTrans_NomProcAirFlowRate_ = x.SimFlowEnergyTrans_NomProcAirFlowRate_;
          this->SimFlowEnergyTrans_NomProcAirVelo_ = x.SimFlowEnergyTrans_NomProcAirVelo_;
          this->SimFlowEnergyTrans_RotorPwr_ = x.SimFlowEnergyTrans_RotorPwr_;
          this->SimFlowEnergyTrans_RegenCoilObjType_ = x.SimFlowEnergyTrans_RegenCoilObjType_;
          this->SimFlowEnergyTrans_RegenCoilName_ = x.SimFlowEnergyTrans_RegenCoilName_;
          this->SimFlowEnergyTrans_RegenFanObjType_ = x.SimFlowEnergyTrans_RegenFanObjType_;
          this->SimFlowEnergyTrans_RegenFanName_ = x.SimFlowEnergyTrans_RegenFanName_;
          this->SimFlowEnergyTrans_PerfModelType_ = x.SimFlowEnergyTrans_PerfModelType_;
          this->SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_ = x.SimFlowEnergyTrans_LeavDryBulbFuncEnterDryBulb_HumidRatioCurveName_;
          this->SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_ = x.SimFlowEnergyTrans_LeavDryBulbFuncAirVeloCurveName_;
          this->SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_ = x.SimFlowEnergyTrans_LeavHumidRatioFuncEnterDryBulb_HumidRatioCurveName_;
          this->SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_ = x.SimFlowEnergyTrans_LeavHumidRatioFuncAirVeloCurveName_;
          this->SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_ = x.SimFlowEnergyTrans_RegenEnergyFuncEnterDryBulb_HumidRatioCurveName_;
          this->SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_ = x.SimFlowEnergyTrans_RegenEnergyFuncAirVeloCurveName_;
          this->SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_ = x.SimFlowEnergyTrans_RegenVeloFuncEnterDryBulb_HumidRatioCurveName_;
          this->SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_ = x.SimFlowEnergyTrans_RegenVeloFuncAirVeloCurveName_;
          this->SimFlowEnergyTrans_NomRegenTemp_ = x.SimFlowEnergyTrans_NomRegenTemp_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_Dehumidifier_NoFans::
      ~SimFlowEnergyTransfer_Dehumidifier_NoFans ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

