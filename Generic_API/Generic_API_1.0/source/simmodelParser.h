// Copyright (C) 2012-2015 Institute of Energy Efficient Building E3D,
// RWTH Aachen University, Germany.
//
// This program was developed for the EnEff-BIM project. In EnEff-BIM, 
// a project participating in IEA Annex 60, translators between Building 
// Information Models (BIM) and Modelica are developed to support building
// and community energy performance simulation. This is accomplished through 
// extending existing standards for exchanging energy calculation data, and 
// through data representation formats such as the Industry Foundation Classes (IFC).
//
// This program is free software; you can redistribute it and/or modify it 
// under the terms of the GNU General Public License version 2 as published 
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, simmodel2c++ gives permission to 
// link this program with the XML data binding framework generated by the 
// Code Synthesis Tools CC, and distribute linked combinations including 
// the two. You must obey the GNU General Public License version 2 in all 
// respects for all of the code used. If you modify this copy of the program, 
// you may extend this exception to your version of the program, but you are 
// not obligated to do so. If you do not wish to do so, delete this exception 
// statement from your version.
//

#ifndef SIMMODELPARSER_H
#define SIMMODELPARSER_H

// include the head files
// for SimModel hierarchy
#include "hierarchy.h"

class simmodel_parser : sim_base
{
	//Q_OBJECT
public:
	simmodel_parser() {};
	~simmodel_parser() {};

	// load SimModel hierarchy
	void load_model_hierarchy(auto_ptr<SimModel>& ob_model);
	// load sim connections between HVAC components
	void load_sim_conns(auto_ptr<SimModel>& ob_model);
	//
	map<string, sim_base*>& get_component_list() { return id_map; }

	// for generic API
	// retrieve the root class of SimModel hierarchy
	sim_project& get_sim_project() { return sim_pro_mo; }
	// retrieve the connections in the system loop
	vector<sim_conns>& get_loop_connection_list() { return conns_vec; }
	// retrieve the loop connections index map
	//map<string, sim_conns*>&  get_loop_connection_map() { return loop_connection_map; }

	// inheritance ovrride API
	list<pair<string, string> >& get_prop_val() {}
	// save the modified propety values
	void save_prop_val(list<pair<string, string> >::iterator& _prop_it) {}
	// the number of gap parameters
	int get_gap() {}
	// retrieve the generic component name
	string get_com_name() {}
	// retrieve the simmodel element reference id
	string get_ref_id() {}
	// retrieve the loop connection assigned to the component
	void get_component_connection() {}
	// automated data type pass
	const char* datatype() {}

private:
	// generic API
	// sim_project* sim_pro_mo = new sim_pro_mo();

	//1. single simulation project model (in object model)
	sim_project sim_pro_mo;
	//2.1 simulation site model
	sim_site sim_site_mo;
	// 2.1.1 simulation building model
	sim_building sim_building_mo;
	//   2.1.1.1.1 space occupied: !temp
	sim_space_occupied sim_space_occupied_mo;
	// 2.1.2  simulation zone HVAC group
	sim_group sim_group_mo;
	//  2.1.2.1 simulation thermal zone
	sim_thermal_zone sim_thermal_zone_mo;
	// 2.1.3 simulation hot water system
	sim_hotwater_system sim_hw_sys_mo;
	//  2.1.3.1 simulation hot water loop control
	sim_hotwater_control sim_hw_ctl_mo;
	//   2.1.3.1.1 sim supply water temperature control
	sim_supplywater_temp_control sim_sw_temp_ctl_mo;
	//   2.1.3.1.2 sim dry bulb temperature sensor
	sim_temp_drybulb_sensor sim_temp_dbb_ssr_mo;
	//  2.1.3.2 sim hot water demand
	sim_hotwater_demand sim_hw_dmd_mo;
	//   2.1.3.2.1 sim flow energy transfer through convective heater water radiator
	sim_flwEngyTran_convectheater_water sim_flwEngyTran_convectheater_w_mo;
	//  2.1.3.3 sim hot water demand
	sim_hotwater_supply sim_hw_supy_mo;
	//   2.1.3.3.1 load sim flow mover for variable speed pump
	sim_flwMov_pump_varSpedRet sim_flwMov_pump_varSpedRet_mo;
	//   2.1.3.3.2 sim flow plant for hot wate boiler
	sim_flwPlt_hotwater_boiler sim_flwPlt_hotwater_boiler_mo;

	//2.2 simulation configuration model
	sim_configuration sim_config_mo;

	// HVAC component id list
	map<string, sim_base*> id_map;
	//! list of physical connections between HVAC components
	vector<sim_conns> conns_vec;
	// retrieve hosted component attached with outlet port
	string get_host_out_id(auto_ptr<SimModel>& ob_model, string _port_id);
	// retrieve hosted component attached with inlet port
	string get_host_in_id(auto_ptr<SimModel>& ob_model, string _port_id);
	// generic API
	// simmodel HVAC element id maps to the loop connections
	//map<string, sim_conns*> loop_connection_map;
};

#endif