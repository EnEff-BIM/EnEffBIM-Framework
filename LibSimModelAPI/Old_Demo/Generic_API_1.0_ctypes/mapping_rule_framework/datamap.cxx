// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "datamap.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Description (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Description (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::Description (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Description" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Description",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Description" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Description",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::ParameterName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ParameterName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::CoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::CoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::CoefficientName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CoefficientName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CoefficientName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      CoefficientName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CoefficientName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CoefficientName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetPropertyName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::TargetPropertyName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TargetPropertyName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetPropertyName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetPropertyName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TargetPropertyName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetPropertyName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetPropertyNameList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetPropertyNameList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::TargetPropertyNameList (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TargetPropertyNameList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetPropertyNameList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetPropertyNameList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TargetPropertyNameList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetPropertyNameList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::SourceComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
          ::namespaces::Sim::DataMap::SourceComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > (
            ::namespaces::Sim::DataMap::SourceComponentName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceComponentName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::RefString, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceComponentName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString >
      SourceComponentName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceComponentName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::RefString > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::RefString, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceComponentName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetComponentName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetComponentName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::TargetComponentName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TargetComponentName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetComponentName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetComponentName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TargetComponentName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetComponentName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLibraryName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::TargetLibraryName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::TargetLibraryName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TargetLibraryName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetLibraryName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      TargetLibraryName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TargetLibraryName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetLibraryName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::TargetLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::TargetLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::TargetLocation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TargetLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      TargetLocation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TargetLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TargetLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstance (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstance (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::RecordInstance (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RecordInstance" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordInstance",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstance (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RecordInstance" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordInstance",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordInstanceLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordInstanceLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::RecordInstanceLocation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RecordInstanceLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordInstanceLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordInstanceLocation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RecordInstanceLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordInstanceLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RecordLocation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::RecordLocation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::RecordLocation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RecordLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RecordLocation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RecordLocation" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RecordLocation",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::namespaces::Sim::DataMap::DefaultValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::namespaces::Sim::DataMap::DefaultValue (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DefaultValue" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DefaultValue",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::string >
      DefaultValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DefaultValue" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DefaultValue",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::DefaultValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::DefaultValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::DefaultValueList (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DefaultValueList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DefaultValueList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      DefaultValueList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DefaultValueList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DefaultValueList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RefValue (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RefValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::RefValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RefValue (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RefValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::RefValue (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
          ::namespaces::Sim::DataMap::RefValue (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > (
            ::namespaces::Sim::DataMap::RefValue (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RefValue" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::RefStringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RefValue",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList >
      RefValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RefValue" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::RefStringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::RefStringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RefValue",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyId (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::id > (
          ::namespaces::Sim::DataMap::PropertyId (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::id > (
            ::namespaces::Sim::DataMap::PropertyId (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PropertyId" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::id > r (
            ::xsd::cxx::tree::traits< ::xml_schema::id, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PropertyId",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::id >
      PropertyId (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PropertyId" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::id > r (
            ::xsd::cxx::tree::traits< ::xml_schema::id, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PropertyId",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::PropertyIdList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
          ::namespaces::Sim::DataMap::PropertyIdList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > (
            ::namespaces::Sim::DataMap::PropertyIdList (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PropertyIdList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::IdList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PropertyIdList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList >
      PropertyIdList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PropertyIdList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::IdList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::IdList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PropertyIdList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (const ::std::string& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (const ::std::string& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Value (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Value (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Value (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Value (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Value (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Value (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::namespaces::Sim::DataMap::Value (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (const ::xercesc::DOMDocument& doc,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::namespaces::Sim::DataMap::Value (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Value" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Value",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      Value (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Value" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Value",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueList (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueList (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
          ::namespaces::Sim::DataMap::ValueList (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > (
            ::namespaces::Sim::DataMap::ValueList (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ValueList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Map_DoubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList >
      ValueList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ValueList" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Map_DoubleList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Map_DoubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueList",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::IsReferenced (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::namespaces::Sim::DataMap::IsReferenced (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::namespaces::Sim::DataMap::IsReferenced (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IsReferenced" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsReferenced",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsReferenced (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IsReferenced" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsReferenced",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueType_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
          ::namespaces::Sim::DataMap::ValueType_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > (
            ::namespaces::Sim::DataMap::ValueType_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ValueType" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::ValueType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueType",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType >
      ValueType_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ValueType" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::ValueType > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::ValueType, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueType",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ValueFormat (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::ValueFormat (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::ValueFormat (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ValueFormat" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueFormat",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      ValueFormat (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ValueFormat" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ValueFormat",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Function (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Function (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Function (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Function (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Function (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Function (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
          ::namespaces::Sim::DataMap::Function (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > (
            ::namespaces::Sim::DataMap::Function (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Function" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Function",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList >
      Function (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Function" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::StringList > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::StringList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Function",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
          ::namespaces::Sim::DataMap::InputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > (
            ::namespaces::Sim::DataMap::InputParameter_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InputParameter" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::InputParameter, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputParameter",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter >
      InputParameter_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InputParameter" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::InputParameter > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::InputParameter, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputParameter",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::InputParameterName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InputParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputParameterName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InputParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficient_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
          ::namespaces::Sim::DataMap::InputCoefficient_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > (
            ::namespaces::Sim::DataMap::InputCoefficient_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InputCoefficient" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::InputCoefficient, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputCoefficient",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient >
      InputCoefficient_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InputCoefficient" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::InputCoefficient > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::InputCoefficient, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputCoefficient",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::InputCoefficientName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::InputCoefficientName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::InputCoefficientName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "InputCoefficientName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputCoefficientName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      InputCoefficientName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "InputCoefficientName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "InputCoefficientName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameter_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
          ::namespaces::Sim::DataMap::OutputParameter_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > (
            ::namespaces::Sim::DataMap::OutputParameter_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OutputParameter" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::OutputParameter, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OutputParameter",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter >
      OutputParameter_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OutputParameter" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::OutputParameter > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::OutputParameter, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OutputParameter",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::OutputParameterName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::OutputParameterName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::OutputParameterName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "OutputParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OutputParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      OutputParameterName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "OutputParameterName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "OutputParameterName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > (
            ::namespaces::Sim::DataMap::Property_Map_Conversion_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Conversion" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Conversion, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Conversion",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion >
      Property_Map_Conversion_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Conversion" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Conversion > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Conversion, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Conversion",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Property_Map_Conversion_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Conversion_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Conversion_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Conversion_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Conversion_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Conversion_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > (
            ::namespaces::Sim::DataMap::Property_Map_One2one_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_One2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_One2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_One2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one >
      Property_Map_One2one_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_One2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_One2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_One2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_One2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Property_Map_One2one_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_One2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_One2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_One2one_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_One2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_One2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > (
            ::namespaces::Sim::DataMap::Property_Map_Gap_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Gap" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Gap, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Gap",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap >
      Property_Map_Gap_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Gap" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Gap > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Gap, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Gap",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Property_Map_Gap_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Gap_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Gap_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Gap_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Gap_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Gap_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > (
            ::namespaces::Sim::DataMap::Property_Map_Many2one_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Many2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Many2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Many2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one >
      Property_Map_Many2one_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Many2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Many2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Many2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Many2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Property_Map_Many2one_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Many2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Many2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Many2one_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Many2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Many2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > (
            ::namespaces::Sim::DataMap::Property_Map_Combination_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Combination" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Combination, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Combination",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination >
      Property_Map_Combination_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Combination" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Property_Map_Combination > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Property_Map_Combination, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Combination",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (const ::std::string& u,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (const ::std::string& u,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (const ::std::string& u,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::std::istream& is,
                                     const ::std::string& sid,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Property_Map_Combination_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::xercesc::InputSource& i,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::xercesc::InputSource& i,
                                     ::xml_schema::error_handler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::xercesc::InputSource& i,
                                     ::xercesc::DOMErrorHandler& h,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (const ::xercesc::DOMDocument& doc,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Property_Map_Combination_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Property_Map_Combination_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Combination_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Property_Map_Combination_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                     ::xml_schema::flags f,
                                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Property_Map_Combination_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Property_Map_Combination_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > (
            ::namespaces::Sim::DataMap::Component_Map_One2one_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_One2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_One2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one >
      Component_Map_One2one_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_One2one" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2one > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_One2one, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2one",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2one_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Component_Map_One2one_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_One2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2one_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_One2one_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2one_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > (
            ::namespaces::Sim::DataMap::Component_Map_Many2One_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_Many2One" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_Many2One, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Many2One",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One >
      Component_Map_Many2One_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_Many2One" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Many2One > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_Many2One, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Many2One",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Component_Map_Many2One_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_Many2One_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Many2One_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Many2One_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_Many2One_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Many2One_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroup_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
          ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > (
            ::namespaces::Sim::DataMap::ComponentMappingGroup_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ComponentMappingGroup" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::ComponentMappingGroup, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ComponentMappingGroup",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup >
      ComponentMappingGroup_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ComponentMappingGroup" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::ComponentMappingGroup > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::ComponentMappingGroup, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ComponentMappingGroup",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::ComponentMappingGroupName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::ComponentMappingGroupName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::ComponentMappingGroupName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ComponentMappingGroupName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ComponentMappingGroupName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ComponentMappingGroupName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ComponentMappingGroupName" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ComponentMappingGroupName",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > (
            ::namespaces::Sim::DataMap::Component_Map_One2Many_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_One2Many" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_One2Many, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2Many",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many >
      Component_Map_One2Many_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_One2Many" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_One2Many > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_One2Many, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2Many",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Component_Map_One2Many_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_One2Many_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2Many_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_One2Many_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_One2Many_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_One2Many_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > (
            ::namespaces::Sim::DataMap::Component_Map_Gap_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_Gap" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_Gap, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Gap",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap >
      Component_Map_Gap_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_Gap" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Component_Map_Gap > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Component_Map_Gap, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Gap",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Component_Map_Gap_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::namespaces::Sim::DataMap::Component_Map_Gap_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Component_Map_Gap_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Gap_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Component_Map_Gap_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Component_Map_Gap_Name" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Component_Map_Gap_Name",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Multiple_Library_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
          ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > (
            ::namespaces::Sim::DataMap::Multiple_Library_Map_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Multiple_Library_Map" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Multiple_Library_Map, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Multiple_Library_Map",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map >
      Multiple_Library_Map_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Multiple_Library_Map" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Multiple_Library_Map > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Multiple_Library_Map, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Multiple_Library_Map",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::namespaces::Sim::DataMap::Data_Model_Map_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
          ::namespaces::Sim::DataMap::Data_Model_Map_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > (
            ::namespaces::Sim::DataMap::Data_Model_Map_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Data_Model_Map" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Data_Model_Map, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Data_Model_Map",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }

      ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map >
      Data_Model_Map_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Data_Model_Map" &&
            n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
        {
          ::std::auto_ptr< ::namespaces::Sim::DataMap::Data_Model_Map > r (
            ::xsd::cxx::tree::traits< ::namespaces::Sim::DataMap::Data_Model_Map, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Data_Model_Map",
          "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

