// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirInNodeName () const
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirInNodeName ()
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirOutNodeName () const
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirOutNodeName ()
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedWaterRemov_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedWaterRemov () const
      {
        return this->SimFlowCompEqmt_RatedWaterRemov_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedWaterRemov_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedWaterRemov ()
      {
        return this->SimFlowCompEqmt_RatedWaterRemov_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedWaterRemov (const SimFlowCompEqmt_RatedWaterRemov_type& x)
      {
        this->SimFlowCompEqmt_RatedWaterRemov_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedWaterRemov (const SimFlowCompEqmt_RatedWaterRemov_optional& x)
      {
        this->SimFlowCompEqmt_RatedWaterRemov_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedEnergyFactor_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedEnergyFactor () const
      {
        return this->SimFlowCompEqmt_RatedEnergyFactor_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedEnergyFactor_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedEnergyFactor ()
      {
        return this->SimFlowCompEqmt_RatedEnergyFactor_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedEnergyFactor (const SimFlowCompEqmt_RatedEnergyFactor_type& x)
      {
        this->SimFlowCompEqmt_RatedEnergyFactor_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedEnergyFactor (const SimFlowCompEqmt_RatedEnergyFactor_optional& x)
      {
        this->SimFlowCompEqmt_RatedEnergyFactor_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedAirFlowRate () const
      {
        return this->SimFlowCompEqmt_RatedAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_RatedAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedAirFlowRate ()
      {
        return this->SimFlowCompEqmt_RatedAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedAirFlowRate (const SimFlowCompEqmt_RatedAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_RatedAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_RatedAirFlowRate (const SimFlowCompEqmt_RatedAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_RatedAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_WaterRemovCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_WaterRemovCurveName () const
      {
        return this->SimFlowCompEqmt_WaterRemovCurveName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_WaterRemovCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_WaterRemovCurveName ()
      {
        return this->SimFlowCompEqmt_WaterRemovCurveName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_WaterRemovCurveName (const SimFlowCompEqmt_WaterRemovCurveName_type& x)
      {
        this->SimFlowCompEqmt_WaterRemovCurveName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_WaterRemovCurveName (const SimFlowCompEqmt_WaterRemovCurveName_optional& x)
      {
        this->SimFlowCompEqmt_WaterRemovCurveName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_WaterRemovCurveName (::std::auto_ptr< SimFlowCompEqmt_WaterRemovCurveName_type > x)
      {
        this->SimFlowCompEqmt_WaterRemovCurveName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_EnergyFactorCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_EnergyFactorCurveName () const
      {
        return this->SimFlowCompEqmt_EnergyFactorCurveName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_EnergyFactorCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_EnergyFactorCurveName ()
      {
        return this->SimFlowCompEqmt_EnergyFactorCurveName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_EnergyFactorCurveName (const SimFlowCompEqmt_EnergyFactorCurveName_type& x)
      {
        this->SimFlowCompEqmt_EnergyFactorCurveName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_EnergyFactorCurveName (const SimFlowCompEqmt_EnergyFactorCurveName_optional& x)
      {
        this->SimFlowCompEqmt_EnergyFactorCurveName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_EnergyFactorCurveName (::std::auto_ptr< SimFlowCompEqmt_EnergyFactorCurveName_type > x)
      {
        this->SimFlowCompEqmt_EnergyFactorCurveName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_PartLoadFractCorrelCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_PartLoadFractCorrelCurveName () const
      {
        return this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_PartLoadFractCorrelCurveName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_PartLoadFractCorrelCurveName ()
      {
        return this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_PartLoadFractCorrelCurveName (const SimFlowCompEqmt_PartLoadFractCorrelCurveName_type& x)
      {
        this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_PartLoadFractCorrelCurveName (const SimFlowCompEqmt_PartLoadFractCorrelCurveName_optional& x)
      {
        this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowCompEqmt_PartLoadFractCorrelCurveName_type > x)
      {
        this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp () const
      {
        return this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp ()
      {
        return this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp (const SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_type& x)
      {
        this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp (const SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_optional& x)
      {
        this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp () const
      {
        return this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp ()
      {
        return this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp (const SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_type& x)
      {
        this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp (const SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_optional& x)
      {
        this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_fCycleParasiticElecLoad_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_fCycleParasiticElecLoad () const
      {
        return this->SimFlowCompEqmt_fCycleParasiticElecLoad_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_fCycleParasiticElecLoad_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_fCycleParasiticElecLoad ()
      {
        return this->SimFlowCompEqmt_fCycleParasiticElecLoad_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_fCycleParasiticElecLoad (const SimFlowCompEqmt_fCycleParasiticElecLoad_type& x)
      {
        this->SimFlowCompEqmt_fCycleParasiticElecLoad_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_fCycleParasiticElecLoad (const SimFlowCompEqmt_fCycleParasiticElecLoad_optional& x)
      {
        this->SimFlowCompEqmt_fCycleParasiticElecLoad_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_CondsCollectionWaterStorageTankName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_CondsCollectionWaterStorageTankName () const
      {
        return this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::SimFlowCompEqmt_CondsCollectionWaterStorageTankName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_CondsCollectionWaterStorageTankName ()
      {
        return this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_CondsCollectionWaterStorageTankName (const SimFlowCompEqmt_CondsCollectionWaterStorageTankName_type& x)
      {
        this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_CondsCollectionWaterStorageTankName (const SimFlowCompEqmt_CondsCollectionWaterStorageTankName_optional& x)
      {
        this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompEqmt_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowCompEqmt_CondsCollectionWaterStorageTankName_type > x)
      {
        this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_RatedWaterRemov_ (this),
        SimFlowCompEqmt_RatedEnergyFactor_ (this),
        SimFlowCompEqmt_RatedAirFlowRate_ (this),
        SimFlowCompEqmt_WaterRemovCurveName_ (this),
        SimFlowCompEqmt_EnergyFactorCurveName_ (this),
        SimFlowCompEqmt_PartLoadFractCorrelCurveName_ (this),
        SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_ (this),
        SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_ (this),
        SimFlowCompEqmt_fCycleParasiticElecLoad_ (this),
        SimFlowCompEqmt_CondsCollectionWaterStorageTankName_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX (const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_AirInNodeName_ (x.SimFlowCompEqmt_AirInNodeName_, f, this),
        SimFlowCompEqmt_AirOutNodeName_ (x.SimFlowCompEqmt_AirOutNodeName_, f, this),
        SimFlowCompEqmt_RatedWaterRemov_ (x.SimFlowCompEqmt_RatedWaterRemov_, f, this),
        SimFlowCompEqmt_RatedEnergyFactor_ (x.SimFlowCompEqmt_RatedEnergyFactor_, f, this),
        SimFlowCompEqmt_RatedAirFlowRate_ (x.SimFlowCompEqmt_RatedAirFlowRate_, f, this),
        SimFlowCompEqmt_WaterRemovCurveName_ (x.SimFlowCompEqmt_WaterRemovCurveName_, f, this),
        SimFlowCompEqmt_EnergyFactorCurveName_ (x.SimFlowCompEqmt_EnergyFactorCurveName_, f, this),
        SimFlowCompEqmt_PartLoadFractCorrelCurveName_ (x.SimFlowCompEqmt_PartLoadFractCorrelCurveName_, f, this),
        SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_ (x.SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_, f, this),
        SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_ (x.SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_, f, this),
        SimFlowCompEqmt_fCycleParasiticElecLoad_ (x.SimFlowCompEqmt_fCycleParasiticElecLoad_, f, this),
        SimFlowCompEqmt_CondsCollectionWaterStorageTankName_ (x.SimFlowCompEqmt_CondsCollectionWaterStorageTankName_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_RatedWaterRemov_ (this),
        SimFlowCompEqmt_RatedEnergyFactor_ (this),
        SimFlowCompEqmt_RatedAirFlowRate_ (this),
        SimFlowCompEqmt_WaterRemovCurveName_ (this),
        SimFlowCompEqmt_EnergyFactorCurveName_ (this),
        SimFlowCompEqmt_PartLoadFractCorrelCurveName_ (this),
        SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_ (this),
        SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_ (this),
        SimFlowCompEqmt_fCycleParasiticElecLoad_ (this),
        SimFlowCompEqmt_CondsCollectionWaterStorageTankName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirInNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > r (
              SimFlowCompEqmt_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirInNodeName_)
            {
              this->SimFlowCompEqmt_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirOutNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > r (
              SimFlowCompEqmt_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirOutNodeName_)
            {
              this->SimFlowCompEqmt_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_RatedWaterRemov
          //
          if (n.name () == "SimFlowCompEqmt_RatedWaterRemov" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_RatedWaterRemov_)
            {
              this->SimFlowCompEqmt_RatedWaterRemov_.set (SimFlowCompEqmt_RatedWaterRemov_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_RatedEnergyFactor
          //
          if (n.name () == "SimFlowCompEqmt_RatedEnergyFactor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_RatedEnergyFactor_)
            {
              this->SimFlowCompEqmt_RatedEnergyFactor_.set (SimFlowCompEqmt_RatedEnergyFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_RatedAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_RatedAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_RatedAirFlowRate_)
            {
              this->SimFlowCompEqmt_RatedAirFlowRate_.set (SimFlowCompEqmt_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_WaterRemovCurveName
          //
          if (n.name () == "SimFlowCompEqmt_WaterRemovCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_WaterRemovCurveName_type > r (
              SimFlowCompEqmt_WaterRemovCurveName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_WaterRemovCurveName_)
            {
              this->SimFlowCompEqmt_WaterRemovCurveName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_EnergyFactorCurveName
          //
          if (n.name () == "SimFlowCompEqmt_EnergyFactorCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_EnergyFactorCurveName_type > r (
              SimFlowCompEqmt_EnergyFactorCurveName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_EnergyFactorCurveName_)
            {
              this->SimFlowCompEqmt_EnergyFactorCurveName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_PartLoadFractCorrelCurveName
          //
          if (n.name () == "SimFlowCompEqmt_PartLoadFractCorrelCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_PartLoadFractCorrelCurveName_type > r (
              SimFlowCompEqmt_PartLoadFractCorrelCurveName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_)
            {
              this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp
          //
          if (n.name () == "SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_)
            {
              this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_.set (SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp
          //
          if (n.name () == "SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_)
            {
              this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_.set (SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_fCycleParasiticElecLoad
          //
          if (n.name () == "SimFlowCompEqmt_fCycleParasiticElecLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_fCycleParasiticElecLoad_)
            {
              this->SimFlowCompEqmt_fCycleParasiticElecLoad_.set (SimFlowCompEqmt_fCycleParasiticElecLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CondsCollectionWaterStorageTankName
          //
          if (n.name () == "SimFlowCompEqmt_CondsCollectionWaterStorageTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CondsCollectionWaterStorageTankName_type > r (
              SimFlowCompEqmt_CondsCollectionWaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_)
            {
              this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX* SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX& SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_AirInNodeName_ = x.SimFlowCompEqmt_AirInNodeName_;
          this->SimFlowCompEqmt_AirOutNodeName_ = x.SimFlowCompEqmt_AirOutNodeName_;
          this->SimFlowCompEqmt_RatedWaterRemov_ = x.SimFlowCompEqmt_RatedWaterRemov_;
          this->SimFlowCompEqmt_RatedEnergyFactor_ = x.SimFlowCompEqmt_RatedEnergyFactor_;
          this->SimFlowCompEqmt_RatedAirFlowRate_ = x.SimFlowCompEqmt_RatedAirFlowRate_;
          this->SimFlowCompEqmt_WaterRemovCurveName_ = x.SimFlowCompEqmt_WaterRemovCurveName_;
          this->SimFlowCompEqmt_EnergyFactorCurveName_ = x.SimFlowCompEqmt_EnergyFactorCurveName_;
          this->SimFlowCompEqmt_PartLoadFractCorrelCurveName_ = x.SimFlowCompEqmt_PartLoadFractCorrelCurveName_;
          this->SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_ = x.SimFlowCompEqmt_MinDryBulbTempForDehumidifierOp_;
          this->SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_ = x.SimFlowCompEqmt_MaxDryBulbTempForDehumidifierOp_;
          this->SimFlowCompEqmt_fCycleParasiticElecLoad_ = x.SimFlowCompEqmt_fCycleParasiticElecLoad_;
          this->SimFlowCompEqmt_CondsCollectionWaterStorageTankName_ = x.SimFlowCompEqmt_CondsCollectionWaterStorageTankName_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_DehumidifierDX ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

