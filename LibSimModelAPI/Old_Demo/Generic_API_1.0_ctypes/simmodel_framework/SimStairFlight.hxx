// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_STAIR_FLIGHT_HXX
#define SIM_STAIR_FLIGHT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimStairFlight;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simbuildingelement.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimStairFlight: public ::namespaces::Sim::BuildingModel::SimBuildingElement
      {
        public:
        // Name
        //
        typedef ::xml_schema::string Name_type;
        typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
        typedef ::xsd::cxx::tree::traits< Name_type, char > Name_traits;

        const Name_optional&
        Name () const;

        Name_optional&
        Name ();

        void
        Name (const Name_type& x);

        void
        Name (const Name_optional& x);

        void
        Name (::std::auto_ptr< Name_type > p);

        // ConstructionType
        //
        typedef ::xml_schema::string ConstructionType_type;
        typedef ::xsd::cxx::tree::optional< ConstructionType_type > ConstructionType_optional;
        typedef ::xsd::cxx::tree::traits< ConstructionType_type, char > ConstructionType_traits;

        const ConstructionType_optional&
        ConstructionType () const;

        ConstructionType_optional&
        ConstructionType ();

        void
        ConstructionType (const ConstructionType_type& x);

        void
        ConstructionType (const ConstructionType_optional& x);

        void
        ConstructionType (::std::auto_ptr< ConstructionType_type > p);

        // StairFlightWidth
        //
        typedef ::xml_schema::double_ StairFlightWidth_type;
        typedef ::xsd::cxx::tree::optional< StairFlightWidth_type > StairFlightWidth_optional;
        typedef ::xsd::cxx::tree::traits< StairFlightWidth_type, char, ::xsd::cxx::tree::schema_type::double_ > StairFlightWidth_traits;

        const StairFlightWidth_optional&
        StairFlightWidth () const;

        StairFlightWidth_optional&
        StairFlightWidth ();

        void
        StairFlightWidth (const StairFlightWidth_type& x);

        void
        StairFlightWidth (const StairFlightWidth_optional& x);

        // StairFlightLength
        //
        typedef ::xml_schema::double_ StairFlightLength_type;
        typedef ::xsd::cxx::tree::optional< StairFlightLength_type > StairFlightLength_optional;
        typedef ::xsd::cxx::tree::traits< StairFlightLength_type, char, ::xsd::cxx::tree::schema_type::double_ > StairFlightLength_traits;

        const StairFlightLength_optional&
        StairFlightLength () const;

        StairFlightLength_optional&
        StairFlightLength ();

        void
        StairFlightLength (const StairFlightLength_type& x);

        void
        StairFlightLength (const StairFlightLength_optional& x);

        // StairFlightRise
        //
        typedef ::xml_schema::double_ StairFlightRise_type;
        typedef ::xsd::cxx::tree::optional< StairFlightRise_type > StairFlightRise_optional;
        typedef ::xsd::cxx::tree::traits< StairFlightRise_type, char, ::xsd::cxx::tree::schema_type::double_ > StairFlightRise_traits;

        const StairFlightRise_optional&
        StairFlightRise () const;

        StairFlightRise_optional&
        StairFlightRise ();

        void
        StairFlightRise (const StairFlightRise_type& x);

        void
        StairFlightRise (const StairFlightRise_optional& x);

        // StairFlightGrossArea_Treads
        //
        typedef ::xml_schema::double_ StairFlightGrossArea_Treads_type;
        typedef ::xsd::cxx::tree::optional< StairFlightGrossArea_Treads_type > StairFlightGrossArea_Treads_optional;
        typedef ::xsd::cxx::tree::traits< StairFlightGrossArea_Treads_type, char, ::xsd::cxx::tree::schema_type::double_ > StairFlightGrossArea_Treads_traits;

        const StairFlightGrossArea_Treads_optional&
        StairFlightGrossArea_Treads () const;

        StairFlightGrossArea_Treads_optional&
        StairFlightGrossArea_Treads ();

        void
        StairFlightGrossArea_Treads (const StairFlightGrossArea_Treads_type& x);

        void
        StairFlightGrossArea_Treads (const StairFlightGrossArea_Treads_optional& x);

        // StairFlightGrossArea_Risers
        //
        typedef ::xml_schema::double_ StairFlightGrossArea_Risers_type;
        typedef ::xsd::cxx::tree::optional< StairFlightGrossArea_Risers_type > StairFlightGrossArea_Risers_optional;
        typedef ::xsd::cxx::tree::traits< StairFlightGrossArea_Risers_type, char, ::xsd::cxx::tree::schema_type::double_ > StairFlightGrossArea_Risers_traits;

        const StairFlightGrossArea_Risers_optional&
        StairFlightGrossArea_Risers () const;

        StairFlightGrossArea_Risers_optional&
        StairFlightGrossArea_Risers ();

        void
        StairFlightGrossArea_Risers (const StairFlightGrossArea_Risers_type& x);

        void
        StairFlightGrossArea_Risers (const StairFlightGrossArea_Risers_optional& x);

        // ClassRef_UniFormat
        //
        typedef ::xml_schema::idref ClassRef_UniFormat_type;
        typedef ::xsd::cxx::tree::optional< ClassRef_UniFormat_type > ClassRef_UniFormat_optional;
        typedef ::xsd::cxx::tree::traits< ClassRef_UniFormat_type, char > ClassRef_UniFormat_traits;

        const ClassRef_UniFormat_optional&
        ClassRef_UniFormat () const;

        ClassRef_UniFormat_optional&
        ClassRef_UniFormat ();

        void
        ClassRef_UniFormat (const ClassRef_UniFormat_type& x);

        void
        ClassRef_UniFormat (const ClassRef_UniFormat_optional& x);

        void
        ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > p);

        // MaterialList
        //
        typedef ::xml_schema::idref MaterialList_type;
        typedef ::xsd::cxx::tree::optional< MaterialList_type > MaterialList_optional;
        typedef ::xsd::cxx::tree::traits< MaterialList_type, char > MaterialList_traits;

        const MaterialList_optional&
        MaterialList () const;

        MaterialList_optional&
        MaterialList ();

        void
        MaterialList (const MaterialList_type& x);

        void
        MaterialList (const MaterialList_optional& x);

        void
        MaterialList (::std::auto_ptr< MaterialList_type > p);

        // VoidsInStairFlight
        //
        typedef ::xml_schema::idrefs VoidsInStairFlight_type;
        typedef ::xsd::cxx::tree::optional< VoidsInStairFlight_type > VoidsInStairFlight_optional;
        typedef ::xsd::cxx::tree::traits< VoidsInStairFlight_type, char > VoidsInStairFlight_traits;

        const VoidsInStairFlight_optional&
        VoidsInStairFlight () const;

        VoidsInStairFlight_optional&
        VoidsInStairFlight ();

        void
        VoidsInStairFlight (const VoidsInStairFlight_type& x);

        void
        VoidsInStairFlight (const VoidsInStairFlight_optional& x);

        void
        VoidsInStairFlight (::std::auto_ptr< VoidsInStairFlight_type > p);

        // ConnectedSlabs
        //
        typedef ::xml_schema::idrefs ConnectedSlabs_type;
        typedef ::xsd::cxx::tree::optional< ConnectedSlabs_type > ConnectedSlabs_optional;
        typedef ::xsd::cxx::tree::traits< ConnectedSlabs_type, char > ConnectedSlabs_traits;

        const ConnectedSlabs_optional&
        ConnectedSlabs () const;

        ConnectedSlabs_optional&
        ConnectedSlabs ();

        void
        ConnectedSlabs (const ConnectedSlabs_type& x);

        void
        ConnectedSlabs (const ConnectedSlabs_optional& x);

        void
        ConnectedSlabs (::std::auto_ptr< ConnectedSlabs_type > p);

        // ConnectedWalls
        //
        typedef ::xml_schema::idrefs ConnectedWalls_type;
        typedef ::xsd::cxx::tree::optional< ConnectedWalls_type > ConnectedWalls_optional;
        typedef ::xsd::cxx::tree::traits< ConnectedWalls_type, char > ConnectedWalls_traits;

        const ConnectedWalls_optional&
        ConnectedWalls () const;

        ConnectedWalls_optional&
        ConnectedWalls ();

        void
        ConnectedWalls (const ConnectedWalls_type& x);

        void
        ConnectedWalls (const ConnectedWalls_optional& x);

        void
        ConnectedWalls (::std::auto_ptr< ConnectedWalls_type > p);

        // ContainingStair
        //
        typedef ::xml_schema::idref ContainingStair_type;
        typedef ::xsd::cxx::tree::optional< ContainingStair_type > ContainingStair_optional;
        typedef ::xsd::cxx::tree::traits< ContainingStair_type, char > ContainingStair_traits;

        const ContainingStair_optional&
        ContainingStair () const;

        ContainingStair_optional&
        ContainingStair ();

        void
        ContainingStair (const ContainingStair_type& x);

        void
        ContainingStair (const ContainingStair_optional& x);

        void
        ContainingStair (::std::auto_ptr< ContainingStair_type > p);

        // Representation
        //
        typedef ::xml_schema::idref Representation_type;
        typedef ::xsd::cxx::tree::optional< Representation_type > Representation_optional;
        typedef ::xsd::cxx::tree::traits< Representation_type, char > Representation_traits;

        const Representation_optional&
        Representation () const;

        Representation_optional&
        Representation ();

        void
        Representation (const Representation_type& x);

        void
        Representation (const Representation_optional& x);

        void
        Representation (::std::auto_ptr< Representation_type > p);

        // NumberOfRiser
        //
        typedef ::xml_schema::int_ NumberOfRiser_type;
        typedef ::xsd::cxx::tree::optional< NumberOfRiser_type > NumberOfRiser_optional;
        typedef ::xsd::cxx::tree::traits< NumberOfRiser_type, char > NumberOfRiser_traits;

        const NumberOfRiser_optional&
        NumberOfRiser () const;

        NumberOfRiser_optional&
        NumberOfRiser ();

        void
        NumberOfRiser (const NumberOfRiser_type& x);

        void
        NumberOfRiser (const NumberOfRiser_optional& x);

        // NumberOfTreads
        //
        typedef ::xml_schema::int_ NumberOfTreads_type;
        typedef ::xsd::cxx::tree::optional< NumberOfTreads_type > NumberOfTreads_optional;
        typedef ::xsd::cxx::tree::traits< NumberOfTreads_type, char > NumberOfTreads_traits;

        const NumberOfTreads_optional&
        NumberOfTreads () const;

        NumberOfTreads_optional&
        NumberOfTreads ();

        void
        NumberOfTreads (const NumberOfTreads_type& x);

        void
        NumberOfTreads (const NumberOfTreads_optional& x);

        // RiserHeight
        //
        typedef ::xml_schema::double_ RiserHeight_type;
        typedef ::xsd::cxx::tree::optional< RiserHeight_type > RiserHeight_optional;
        typedef ::xsd::cxx::tree::traits< RiserHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > RiserHeight_traits;

        const RiserHeight_optional&
        RiserHeight () const;

        RiserHeight_optional&
        RiserHeight ();

        void
        RiserHeight (const RiserHeight_type& x);

        void
        RiserHeight (const RiserHeight_optional& x);

        // TreadLength
        //
        typedef ::xml_schema::double_ TreadLength_type;
        typedef ::xsd::cxx::tree::optional< TreadLength_type > TreadLength_optional;
        typedef ::xsd::cxx::tree::traits< TreadLength_type, char, ::xsd::cxx::tree::schema_type::double_ > TreadLength_traits;

        const TreadLength_optional&
        TreadLength () const;

        TreadLength_optional&
        TreadLength ();

        void
        TreadLength (const TreadLength_type& x);

        void
        TreadLength (const TreadLength_optional& x);

        // Constructors.
        //
        SimStairFlight (const RefId_type&);

        SimStairFlight (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        SimStairFlight (const SimStairFlight& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

        virtual SimStairFlight*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimStairFlight&
        operator= (const SimStairFlight& x);

        virtual 
        ~SimStairFlight ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        Name_optional Name_;
        ConstructionType_optional ConstructionType_;
        StairFlightWidth_optional StairFlightWidth_;
        StairFlightLength_optional StairFlightLength_;
        StairFlightRise_optional StairFlightRise_;
        StairFlightGrossArea_Treads_optional StairFlightGrossArea_Treads_;
        StairFlightGrossArea_Risers_optional StairFlightGrossArea_Risers_;
        ClassRef_UniFormat_optional ClassRef_UniFormat_;
        MaterialList_optional MaterialList_;
        VoidsInStairFlight_optional VoidsInStairFlight_;
        ConnectedSlabs_optional ConnectedSlabs_;
        ConnectedWalls_optional ConnectedWalls_;
        ContainingStair_optional ContainingStair_;
        Representation_optional Representation_;
        NumberOfRiser_optional NumberOfRiser_;
        NumberOfTreads_optional NumberOfTreads_;
        RiserHeight_optional RiserHeight_;
        TreadLength_optional TreadLength_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_STAIR_FLIGHT_HXX
