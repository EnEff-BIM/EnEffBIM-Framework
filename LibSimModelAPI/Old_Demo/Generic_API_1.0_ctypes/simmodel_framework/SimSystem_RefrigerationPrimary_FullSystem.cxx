// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_RefrigerationPrimary_FullSystem.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationPrimary_FullSystem
      // 

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName () const
      {
        return this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName ()
      {
        return this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_type& x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (::std::auto_ptr< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigTransLoadOrTransLoadListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigTransLoadOrTransLoadListName () const
      {
        return this->SimSys_RefrigTransLoadOrTransLoadListName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigTransLoadOrTransLoadListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigTransLoadOrTransLoadListName ()
      {
        return this->SimSys_RefrigTransLoadOrTransLoadListName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigTransLoadOrTransLoadListName (const SimSys_RefrigTransLoadOrTransLoadListName_type& x)
      {
        this->SimSys_RefrigTransLoadOrTransLoadListName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigTransLoadOrTransLoadListName (const SimSys_RefrigTransLoadOrTransLoadListName_optional& x)
      {
        this->SimSys_RefrigTransLoadOrTransLoadListName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigTransLoadOrTransLoadListName (::std::auto_ptr< SimSys_RefrigTransLoadOrTransLoadListName_type > x)
      {
        this->SimSys_RefrigTransLoadOrTransLoadListName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigCndnsrName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCndnsrName () const
      {
        return this->SimSys_RefrigCndnsrName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigCndnsrName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCndnsrName ()
      {
        return this->SimSys_RefrigCndnsrName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCndnsrName (const SimSys_RefrigCndnsrName_type& x)
      {
        this->SimSys_RefrigCndnsrName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCndnsrName (const SimSys_RefrigCndnsrName_optional& x)
      {
        this->SimSys_RefrigCndnsrName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigCndnsrName (::std::auto_ptr< SimSys_RefrigCndnsrName_type > x)
      {
        this->SimSys_RefrigCndnsrName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_CompresrOrCompresrListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_CompresrOrCompresrListName () const
      {
        return this->SimSys_CompresrOrCompresrListName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_CompresrOrCompresrListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_CompresrOrCompresrListName ()
      {
        return this->SimSys_CompresrOrCompresrListName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_CompresrOrCompresrListName (const SimSys_CompresrOrCompresrListName_type& x)
      {
        this->SimSys_CompresrOrCompresrListName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_CompresrOrCompresrListName (const SimSys_CompresrOrCompresrListName_optional& x)
      {
        this->SimSys_CompresrOrCompresrListName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_CompresrOrCompresrListName (::std::auto_ptr< SimSys_CompresrOrCompresrListName_type > x)
      {
        this->SimSys_CompresrOrCompresrListName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_MinCondensTemp_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MinCondensTemp () const
      {
        return this->SimSys_MinCondensTemp_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_MinCondensTemp_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MinCondensTemp ()
      {
        return this->SimSys_MinCondensTemp_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MinCondensTemp (const SimSys_MinCondensTemp_type& x)
      {
        this->SimSys_MinCondensTemp_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MinCondensTemp (const SimSys_MinCondensTemp_optional& x)
      {
        this->SimSys_MinCondensTemp_ = x;
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigSysWorkingFluidType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigSysWorkingFluidType () const
      {
        return this->SimSys_RefrigSysWorkingFluidType_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_RefrigSysWorkingFluidType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigSysWorkingFluidType ()
      {
        return this->SimSys_RefrigSysWorkingFluidType_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigSysWorkingFluidType (const SimSys_RefrigSysWorkingFluidType_type& x)
      {
        this->SimSys_RefrigSysWorkingFluidType_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigSysWorkingFluidType (const SimSys_RefrigSysWorkingFluidType_optional& x)
      {
        this->SimSys_RefrigSysWorkingFluidType_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_RefrigSysWorkingFluidType (::std::auto_ptr< SimSys_RefrigSysWorkingFluidType_type > x)
      {
        this->SimSys_RefrigSysWorkingFluidType_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_SucTempContType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucTempContType () const
      {
        return this->SimSys_SucTempContType_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_SucTempContType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucTempContType ()
      {
        return this->SimSys_SucTempContType_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucTempContType (const SimSys_SucTempContType_type& x)
      {
        this->SimSys_SucTempContType_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucTempContType (const SimSys_SucTempContType_optional& x)
      {
        this->SimSys_SucTempContType_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucTempContType (::std::auto_ptr< SimSys_SucTempContType_type > x)
      {
        this->SimSys_SucTempContType_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_MechanicalSubCoolName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MechanicalSubCoolName () const
      {
        return this->SimSys_MechanicalSubCoolName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_MechanicalSubCoolName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MechanicalSubCoolName ()
      {
        return this->SimSys_MechanicalSubCoolName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MechanicalSubCoolName (const SimSys_MechanicalSubCoolName_type& x)
      {
        this->SimSys_MechanicalSubCoolName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MechanicalSubCoolName (const SimSys_MechanicalSubCoolName_optional& x)
      {
        this->SimSys_MechanicalSubCoolName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_MechanicalSubCoolName (::std::auto_ptr< SimSys_MechanicalSubCoolName_type > x)
      {
        this->SimSys_MechanicalSubCoolName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_LiquidSucHeatExchSubCoolName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_LiquidSucHeatExchSubCoolName () const
      {
        return this->SimSys_LiquidSucHeatExchSubCoolName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_LiquidSucHeatExchSubCoolName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_LiquidSucHeatExchSubCoolName ()
      {
        return this->SimSys_LiquidSucHeatExchSubCoolName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_LiquidSucHeatExchSubCoolName (const SimSys_LiquidSucHeatExchSubCoolName_type& x)
      {
        this->SimSys_LiquidSucHeatExchSubCoolName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_LiquidSucHeatExchSubCoolName (const SimSys_LiquidSucHeatExchSubCoolName_optional& x)
      {
        this->SimSys_LiquidSucHeatExchSubCoolName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_LiquidSucHeatExchSubCoolName (::std::auto_ptr< SimSys_LiquidSucHeatExchSubCoolName_type > x)
      {
        this->SimSys_LiquidSucHeatExchSubCoolName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_SumUASucPiping_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SumUASucPiping () const
      {
        return this->SimSys_SumUASucPiping_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_SumUASucPiping_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SumUASucPiping ()
      {
        return this->SimSys_SumUASucPiping_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SumUASucPiping (const SimSys_SumUASucPiping_type& x)
      {
        this->SimSys_SumUASucPiping_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SumUASucPiping (const SimSys_SumUASucPiping_optional& x)
      {
        this->SimSys_SumUASucPiping_ = x;
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_SucPipingZoneName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucPipingZoneName () const
      {
        return this->SimSys_SucPipingZoneName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_SucPipingZoneName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucPipingZoneName ()
      {
        return this->SimSys_SucPipingZoneName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucPipingZoneName (const SimSys_SucPipingZoneName_type& x)
      {
        this->SimSys_SucPipingZoneName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucPipingZoneName (const SimSys_SucPipingZoneName_optional& x)
      {
        this->SimSys_SucPipingZoneName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_SucPipingZoneName (::std::auto_ptr< SimSys_SucPipingZoneName_type > x)
      {
        this->SimSys_SucPipingZoneName_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_EndUseSubCat () const
      {
        return this->SimSys_EndUseSubCat_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_EndUseSubCat ()
      {
        return this->SimSys_EndUseSubCat_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_type& x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_optional& x)
      {
        this->SimSys_EndUseSubCat_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_EndUseSubCat (::std::auto_ptr< SimSys_EndUseSubCat_type > x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_NumberofCompressStages_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_NumberofCompressStages () const
      {
        return this->SimSys_NumberofCompressStages_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_NumberofCompressStages_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_NumberofCompressStages ()
      {
        return this->SimSys_NumberofCompressStages_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_NumberofCompressStages (const SimSys_NumberofCompressStages_type& x)
      {
        this->SimSys_NumberofCompressStages_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_NumberofCompressStages (const SimSys_NumberofCompressStages_optional& x)
      {
        this->SimSys_NumberofCompressStages_ = x;
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_IntercoolerType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_IntercoolerType () const
      {
        return this->SimSys_IntercoolerType_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_IntercoolerType_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_IntercoolerType ()
      {
        return this->SimSys_IntercoolerType_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_IntercoolerType (const SimSys_IntercoolerType_type& x)
      {
        this->SimSys_IntercoolerType_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_IntercoolerType (const SimSys_IntercoolerType_optional& x)
      {
        this->SimSys_IntercoolerType_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_IntercoolerType (::std::auto_ptr< SimSys_IntercoolerType_type > x)
      {
        this->SimSys_IntercoolerType_.set (x);
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_Shell_and_CoilIntercoolerEffectiveness_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_Shell_and_CoilIntercoolerEffectiveness () const
      {
        return this->SimSys_Shell_and_CoilIntercoolerEffectiveness_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_Shell_and_CoilIntercoolerEffectiveness_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_Shell_and_CoilIntercoolerEffectiveness ()
      {
        return this->SimSys_Shell_and_CoilIntercoolerEffectiveness_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_Shell_and_CoilIntercoolerEffectiveness (const SimSys_Shell_and_CoilIntercoolerEffectiveness_type& x)
      {
        this->SimSys_Shell_and_CoilIntercoolerEffectiveness_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_Shell_and_CoilIntercoolerEffectiveness (const SimSys_Shell_and_CoilIntercoolerEffectiveness_optional& x)
      {
        this->SimSys_Shell_and_CoilIntercoolerEffectiveness_ = x;
      }

      const SimSystem_RefrigerationPrimary_FullSystem::SimSys_High_StageCompressOrCompressListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_High_StageCompressOrCompressListName () const
      {
        return this->SimSys_High_StageCompressOrCompressListName_;
      }

      SimSystem_RefrigerationPrimary_FullSystem::SimSys_High_StageCompressOrCompressListName_optional& SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_High_StageCompressOrCompressListName ()
      {
        return this->SimSys_High_StageCompressOrCompressListName_;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_High_StageCompressOrCompressListName (const SimSys_High_StageCompressOrCompressListName_type& x)
      {
        this->SimSys_High_StageCompressOrCompressListName_.set (x);
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_High_StageCompressOrCompressListName (const SimSys_High_StageCompressOrCompressListName_optional& x)
      {
        this->SimSys_High_StageCompressOrCompressListName_ = x;
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      SimSys_High_StageCompressOrCompressListName (::std::auto_ptr< SimSys_High_StageCompressOrCompressListName_type > x)
      {
        this->SimSys_High_StageCompressOrCompressListName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationPrimary_FullSystem
      //

      SimSystem_RefrigerationPrimary_FullSystem::
      SimSystem_RefrigerationPrimary_FullSystem (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationPrimary (RefId),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (this),
        SimSys_RefrigTransLoadOrTransLoadListName_ (this),
        SimSys_RefrigCndnsrName_ (this),
        SimSys_CompresrOrCompresrListName_ (this),
        SimSys_MinCondensTemp_ (this),
        SimSys_RefrigSysWorkingFluidType_ (this),
        SimSys_SucTempContType_ (this),
        SimSys_MechanicalSubCoolName_ (this),
        SimSys_LiquidSucHeatExchSubCoolName_ (this),
        SimSys_SumUASucPiping_ (this),
        SimSys_SucPipingZoneName_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_NumberofCompressStages_ (this),
        SimSys_IntercoolerType_ (this),
        SimSys_Shell_and_CoilIntercoolerEffectiveness_ (this),
        SimSys_High_StageCompressOrCompressListName_ (this)
      {
      }

      SimSystem_RefrigerationPrimary_FullSystem::
      SimSystem_RefrigerationPrimary_FullSystem (const SimSystem_RefrigerationPrimary_FullSystem& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationPrimary (x, f, c),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (x.SimSys_RefrigCaseWalkinCaseAndWalkInListName_, f, this),
        SimSys_RefrigTransLoadOrTransLoadListName_ (x.SimSys_RefrigTransLoadOrTransLoadListName_, f, this),
        SimSys_RefrigCndnsrName_ (x.SimSys_RefrigCndnsrName_, f, this),
        SimSys_CompresrOrCompresrListName_ (x.SimSys_CompresrOrCompresrListName_, f, this),
        SimSys_MinCondensTemp_ (x.SimSys_MinCondensTemp_, f, this),
        SimSys_RefrigSysWorkingFluidType_ (x.SimSys_RefrigSysWorkingFluidType_, f, this),
        SimSys_SucTempContType_ (x.SimSys_SucTempContType_, f, this),
        SimSys_MechanicalSubCoolName_ (x.SimSys_MechanicalSubCoolName_, f, this),
        SimSys_LiquidSucHeatExchSubCoolName_ (x.SimSys_LiquidSucHeatExchSubCoolName_, f, this),
        SimSys_SumUASucPiping_ (x.SimSys_SumUASucPiping_, f, this),
        SimSys_SucPipingZoneName_ (x.SimSys_SucPipingZoneName_, f, this),
        SimSys_EndUseSubCat_ (x.SimSys_EndUseSubCat_, f, this),
        SimSys_NumberofCompressStages_ (x.SimSys_NumberofCompressStages_, f, this),
        SimSys_IntercoolerType_ (x.SimSys_IntercoolerType_, f, this),
        SimSys_Shell_and_CoilIntercoolerEffectiveness_ (x.SimSys_Shell_and_CoilIntercoolerEffectiveness_, f, this),
        SimSys_High_StageCompressOrCompressListName_ (x.SimSys_High_StageCompressOrCompressListName_, f, this)
      {
      }

      SimSystem_RefrigerationPrimary_FullSystem::
      SimSystem_RefrigerationPrimary_FullSystem (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationPrimary (e, f | ::xml_schema::flags::base, c),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (this),
        SimSys_RefrigTransLoadOrTransLoadListName_ (this),
        SimSys_RefrigCndnsrName_ (this),
        SimSys_CompresrOrCompresrListName_ (this),
        SimSys_MinCondensTemp_ (this),
        SimSys_RefrigSysWorkingFluidType_ (this),
        SimSys_SucTempContType_ (this),
        SimSys_MechanicalSubCoolName_ (this),
        SimSys_LiquidSucHeatExchSubCoolName_ (this),
        SimSys_SumUASucPiping_ (this),
        SimSys_SucPipingZoneName_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_NumberofCompressStages_ (this),
        SimSys_IntercoolerType_ (this),
        SimSys_Shell_and_CoilIntercoolerEffectiveness_ (this),
        SimSys_High_StageCompressOrCompressListName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_RefrigerationPrimary_FullSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSystem_RefrigerationPrimary::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_RefrigCaseWalkinCaseAndWalkInListName
          //
          if (n.name () == "SimSys_RefrigCaseWalkinCaseAndWalkInListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > r (
              SimSys_RefrigCaseWalkinCaseAndWalkInListName_traits::create (i, f, this));

            if (!this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_)
            {
              this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (r);
              continue;
            }
          }

          // SimSys_RefrigTransLoadOrTransLoadListName
          //
          if (n.name () == "SimSys_RefrigTransLoadOrTransLoadListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigTransLoadOrTransLoadListName_type > r (
              SimSys_RefrigTransLoadOrTransLoadListName_traits::create (i, f, this));

            if (!this->SimSys_RefrigTransLoadOrTransLoadListName_)
            {
              this->SimSys_RefrigTransLoadOrTransLoadListName_.set (r);
              continue;
            }
          }

          // SimSys_RefrigCndnsrName
          //
          if (n.name () == "SimSys_RefrigCndnsrName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigCndnsrName_type > r (
              SimSys_RefrigCndnsrName_traits::create (i, f, this));

            if (!this->SimSys_RefrigCndnsrName_)
            {
              this->SimSys_RefrigCndnsrName_.set (r);
              continue;
            }
          }

          // SimSys_CompresrOrCompresrListName
          //
          if (n.name () == "SimSys_CompresrOrCompresrListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CompresrOrCompresrListName_type > r (
              SimSys_CompresrOrCompresrListName_traits::create (i, f, this));

            if (!this->SimSys_CompresrOrCompresrListName_)
            {
              this->SimSys_CompresrOrCompresrListName_.set (r);
              continue;
            }
          }

          // SimSys_MinCondensTemp
          //
          if (n.name () == "SimSys_MinCondensTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_MinCondensTemp_)
            {
              this->SimSys_MinCondensTemp_.set (SimSys_MinCondensTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_RefrigSysWorkingFluidType
          //
          if (n.name () == "SimSys_RefrigSysWorkingFluidType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigSysWorkingFluidType_type > r (
              SimSys_RefrigSysWorkingFluidType_traits::create (i, f, this));

            if (!this->SimSys_RefrigSysWorkingFluidType_)
            {
              this->SimSys_RefrigSysWorkingFluidType_.set (r);
              continue;
            }
          }

          // SimSys_SucTempContType
          //
          if (n.name () == "SimSys_SucTempContType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_SucTempContType_type > r (
              SimSys_SucTempContType_traits::create (i, f, this));

            if (!this->SimSys_SucTempContType_)
            {
              this->SimSys_SucTempContType_.set (r);
              continue;
            }
          }

          // SimSys_MechanicalSubCoolName
          //
          if (n.name () == "SimSys_MechanicalSubCoolName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_MechanicalSubCoolName_type > r (
              SimSys_MechanicalSubCoolName_traits::create (i, f, this));

            if (!this->SimSys_MechanicalSubCoolName_)
            {
              this->SimSys_MechanicalSubCoolName_.set (r);
              continue;
            }
          }

          // SimSys_LiquidSucHeatExchSubCoolName
          //
          if (n.name () == "SimSys_LiquidSucHeatExchSubCoolName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LiquidSucHeatExchSubCoolName_type > r (
              SimSys_LiquidSucHeatExchSubCoolName_traits::create (i, f, this));

            if (!this->SimSys_LiquidSucHeatExchSubCoolName_)
            {
              this->SimSys_LiquidSucHeatExchSubCoolName_.set (r);
              continue;
            }
          }

          // SimSys_SumUASucPiping
          //
          if (n.name () == "SimSys_SumUASucPiping" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_SumUASucPiping_)
            {
              this->SimSys_SumUASucPiping_.set (SimSys_SumUASucPiping_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_SucPipingZoneName
          //
          if (n.name () == "SimSys_SucPipingZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_SucPipingZoneName_type > r (
              SimSys_SucPipingZoneName_traits::create (i, f, this));

            if (!this->SimSys_SucPipingZoneName_)
            {
              this->SimSys_SucPipingZoneName_.set (r);
              continue;
            }
          }

          // SimSys_EndUseSubCat
          //
          if (n.name () == "SimSys_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_EndUseSubCat_type > r (
              SimSys_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimSys_EndUseSubCat_)
            {
              this->SimSys_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimSys_NumberofCompressStages
          //
          if (n.name () == "SimSys_NumberofCompressStages" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_NumberofCompressStages_)
            {
              this->SimSys_NumberofCompressStages_.set (SimSys_NumberofCompressStages_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_IntercoolerType
          //
          if (n.name () == "SimSys_IntercoolerType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_IntercoolerType_type > r (
              SimSys_IntercoolerType_traits::create (i, f, this));

            if (!this->SimSys_IntercoolerType_)
            {
              this->SimSys_IntercoolerType_.set (r);
              continue;
            }
          }

          // SimSys_Shell_and_CoilIntercoolerEffectiveness
          //
          if (n.name () == "SimSys_Shell_and_CoilIntercoolerEffectiveness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_Shell_and_CoilIntercoolerEffectiveness_)
            {
              this->SimSys_Shell_and_CoilIntercoolerEffectiveness_.set (SimSys_Shell_and_CoilIntercoolerEffectiveness_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_High_StageCompressOrCompressListName
          //
          if (n.name () == "SimSys_High_StageCompressOrCompressListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_High_StageCompressOrCompressListName_type > r (
              SimSys_High_StageCompressOrCompressListName_traits::create (i, f, this));

            if (!this->SimSys_High_StageCompressOrCompressListName_)
            {
              this->SimSys_High_StageCompressOrCompressListName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSystem_RefrigerationPrimary_FullSystem* SimSystem_RefrigerationPrimary_FullSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_RefrigerationPrimary_FullSystem (*this, f, c);
      }

      SimSystem_RefrigerationPrimary_FullSystem& SimSystem_RefrigerationPrimary_FullSystem::
      operator= (const SimSystem_RefrigerationPrimary_FullSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationPrimary& > (*this) = x;
          this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_ = x.SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
          this->SimSys_RefrigTransLoadOrTransLoadListName_ = x.SimSys_RefrigTransLoadOrTransLoadListName_;
          this->SimSys_RefrigCndnsrName_ = x.SimSys_RefrigCndnsrName_;
          this->SimSys_CompresrOrCompresrListName_ = x.SimSys_CompresrOrCompresrListName_;
          this->SimSys_MinCondensTemp_ = x.SimSys_MinCondensTemp_;
          this->SimSys_RefrigSysWorkingFluidType_ = x.SimSys_RefrigSysWorkingFluidType_;
          this->SimSys_SucTempContType_ = x.SimSys_SucTempContType_;
          this->SimSys_MechanicalSubCoolName_ = x.SimSys_MechanicalSubCoolName_;
          this->SimSys_LiquidSucHeatExchSubCoolName_ = x.SimSys_LiquidSucHeatExchSubCoolName_;
          this->SimSys_SumUASucPiping_ = x.SimSys_SumUASucPiping_;
          this->SimSys_SucPipingZoneName_ = x.SimSys_SucPipingZoneName_;
          this->SimSys_EndUseSubCat_ = x.SimSys_EndUseSubCat_;
          this->SimSys_NumberofCompressStages_ = x.SimSys_NumberofCompressStages_;
          this->SimSys_IntercoolerType_ = x.SimSys_IntercoolerType_;
          this->SimSys_Shell_and_CoilIntercoolerEffectiveness_ = x.SimSys_Shell_and_CoilIntercoolerEffectiveness_;
          this->SimSys_High_StageCompressOrCompressListName_ = x.SimSys_High_StageCompressOrCompressListName_;
        }

        return *this;
      }

      SimSystem_RefrigerationPrimary_FullSystem::
      ~SimSystem_RefrigerationPrimary_FullSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

