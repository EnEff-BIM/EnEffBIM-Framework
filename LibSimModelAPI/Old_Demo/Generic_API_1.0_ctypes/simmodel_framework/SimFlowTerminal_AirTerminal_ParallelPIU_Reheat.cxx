// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_AirTerminal_ParallelPIU_Reheat.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_ParallelPIU_Reheat
      // 

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_AvailSchedName () const
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_AvailSchedName ()
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_type& x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_optional& x)
      {
        this->SimFlowTerm_AvailSchedName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_AvailSchedName (::std::auto_ptr< SimFlowTerm_AvailSchedName_type > x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_HotWaterOrSteamInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_HotWaterOrSteamInletNodeName () const
      {
        return this->SimFlowTerm_HotWaterOrSteamInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_HotWaterOrSteamInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_HotWaterOrSteamInletNodeName ()
      {
        return this->SimFlowTerm_HotWaterOrSteamInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_HotWaterOrSteamInletNodeName (const SimFlowTerm_HotWaterOrSteamInletNodeName_type& x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_HotWaterOrSteamInletNodeName (const SimFlowTerm_HotWaterOrSteamInletNodeName_optional& x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_HotWaterOrSteamInletNodeName (::std::auto_ptr< SimFlowTerm_HotWaterOrSteamInletNodeName_type > x)
      {
        this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilObjType_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilObjType () const
      {
        return this->SimFlowTerm_ReheatCoilObjType_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilObjType_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilObjType ()
      {
        return this->SimFlowTerm_ReheatCoilObjType_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilObjType (const SimFlowTerm_ReheatCoilObjType_type& x)
      {
        this->SimFlowTerm_ReheatCoilObjType_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilObjType (const SimFlowTerm_ReheatCoilObjType_optional& x)
      {
        this->SimFlowTerm_ReheatCoilObjType_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilObjType (::std::auto_ptr< SimFlowTerm_ReheatCoilObjType_type > x)
      {
        this->SimFlowTerm_ReheatCoilObjType_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilName () const
      {
        return this->SimFlowTerm_ReheatCoilName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilName ()
      {
        return this->SimFlowTerm_ReheatCoilName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilName (const SimFlowTerm_ReheatCoilName_type& x)
      {
        this->SimFlowTerm_ReheatCoilName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilName (const SimFlowTerm_ReheatCoilName_optional& x)
      {
        this->SimFlowTerm_ReheatCoilName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilName (::std::auto_ptr< SimFlowTerm_ReheatCoilName_type > x)
      {
        this->SimFlowTerm_ReheatCoilName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate () const
      {
        return this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate ()
      {
        return this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate (const SimFlowTerm_MaxHotWaterOrSteamFlowRate_type& x)
      {
        this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxHotWaterOrSteamFlowRate (const SimFlowTerm_MaxHotWaterOrSteamFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinHotWaterOrSteamFlowRate () const
      {
        return this->SimFlowTerm_MinHotWaterOrSteamFlowRate_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinHotWaterOrSteamFlowRate ()
      {
        return this->SimFlowTerm_MinHotWaterOrSteamFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinHotWaterOrSteamFlowRate (const SimFlowTerm_MinHotWaterOrSteamFlowRate_type& x)
      {
        this->SimFlowTerm_MinHotWaterOrSteamFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinHotWaterOrSteamFlowRate (const SimFlowTerm_MinHotWaterOrSteamFlowRate_optional& x)
      {
        this->SimFlowTerm_MinHotWaterOrSteamFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ConvergTol_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ConvergTol () const
      {
        return this->SimFlowTerm_ConvergTol_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ConvergTol_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ConvergTol ()
      {
        return this->SimFlowTerm_ConvergTol_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ConvergTol (const SimFlowTerm_ConvergTol_type& x)
      {
        this->SimFlowTerm_ConvergTol_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ConvergTol (const SimFlowTerm_ConvergTol_optional& x)
      {
        this->SimFlowTerm_ConvergTol_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_FanName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanName () const
      {
        return this->SimFlowTerm_FanName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_FanName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanName ()
      {
        return this->SimFlowTerm_FanName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanName (const SimFlowTerm_FanName_type& x)
      {
        this->SimFlowTerm_FanName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanName (const SimFlowTerm_FanName_optional& x)
      {
        this->SimFlowTerm_FanName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanName (::std::auto_ptr< SimFlowTerm_FanName_type > x)
      {
        this->SimFlowTerm_FanName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxPrimaryAirFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxPrimaryAirFlowRate () const
      {
        return this->SimFlowTerm_MaxPrimaryAirFlowRate_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxPrimaryAirFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxPrimaryAirFlowRate ()
      {
        return this->SimFlowTerm_MaxPrimaryAirFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxPrimaryAirFlowRate (const SimFlowTerm_MaxPrimaryAirFlowRate_type& x)
      {
        this->SimFlowTerm_MaxPrimaryAirFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxPrimaryAirFlowRate (const SimFlowTerm_MaxPrimaryAirFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxPrimaryAirFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MinPrimaryAirFlowFract_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinPrimaryAirFlowFract () const
      {
        return this->SimFlowTerm_MinPrimaryAirFlowFract_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MinPrimaryAirFlowFract_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinPrimaryAirFlowFract ()
      {
        return this->SimFlowTerm_MinPrimaryAirFlowFract_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinPrimaryAirFlowFract (const SimFlowTerm_MinPrimaryAirFlowFract_type& x)
      {
        this->SimFlowTerm_MinPrimaryAirFlowFract_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MinPrimaryAirFlowFract (const SimFlowTerm_MinPrimaryAirFlowFract_optional& x)
      {
        this->SimFlowTerm_MinPrimaryAirFlowFract_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_SupplyAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SupplyAirInletNodeName () const
      {
        return this->SimFlowTerm_SupplyAirInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_SupplyAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SupplyAirInletNodeName ()
      {
        return this->SimFlowTerm_SupplyAirInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SupplyAirInletNodeName (const SimFlowTerm_SupplyAirInletNodeName_type& x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SupplyAirInletNodeName (const SimFlowTerm_SupplyAirInletNodeName_optional& x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SupplyAirInletNodeName (::std::auto_ptr< SimFlowTerm_SupplyAirInletNodeName_type > x)
      {
        this->SimFlowTerm_SupplyAirInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_SecondAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SecondAirInletNodeName () const
      {
        return this->SimFlowTerm_SecondAirInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_SecondAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SecondAirInletNodeName ()
      {
        return this->SimFlowTerm_SecondAirInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SecondAirInletNodeName (const SimFlowTerm_SecondAirInletNodeName_type& x)
      {
        this->SimFlowTerm_SecondAirInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SecondAirInletNodeName (const SimFlowTerm_SecondAirInletNodeName_optional& x)
      {
        this->SimFlowTerm_SecondAirInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_SecondAirInletNodeName (::std::auto_ptr< SimFlowTerm_SecondAirInletNodeName_type > x)
      {
        this->SimFlowTerm_SecondAirInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_OutNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_OutNodeName () const
      {
        return this->SimFlowTerm_OutNodeName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_OutNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_OutNodeName ()
      {
        return this->SimFlowTerm_OutNodeName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_OutNodeName (const SimFlowTerm_OutNodeName_type& x)
      {
        this->SimFlowTerm_OutNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_OutNodeName (const SimFlowTerm_OutNodeName_optional& x)
      {
        this->SimFlowTerm_OutNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_OutNodeName (::std::auto_ptr< SimFlowTerm_OutNodeName_type > x)
      {
        this->SimFlowTerm_OutNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilAirInletNodeName () const
      {
        return this->SimFlowTerm_ReheatCoilAirInletNodeName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ReheatCoilAirInletNodeName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilAirInletNodeName ()
      {
        return this->SimFlowTerm_ReheatCoilAirInletNodeName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilAirInletNodeName (const SimFlowTerm_ReheatCoilAirInletNodeName_type& x)
      {
        this->SimFlowTerm_ReheatCoilAirInletNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilAirInletNodeName (const SimFlowTerm_ReheatCoilAirInletNodeName_optional& x)
      {
        this->SimFlowTerm_ReheatCoilAirInletNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ReheatCoilAirInletNodeName (::std::auto_ptr< SimFlowTerm_ReheatCoilAirInletNodeName_type > x)
      {
        this->SimFlowTerm_ReheatCoilAirInletNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ZoneMixerName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ZoneMixerName () const
      {
        return this->SimFlowTerm_ZoneMixerName_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_ZoneMixerName_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ZoneMixerName ()
      {
        return this->SimFlowTerm_ZoneMixerName_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ZoneMixerName (const SimFlowTerm_ZoneMixerName_type& x)
      {
        this->SimFlowTerm_ZoneMixerName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ZoneMixerName (const SimFlowTerm_ZoneMixerName_optional& x)
      {
        this->SimFlowTerm_ZoneMixerName_ = x;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_ZoneMixerName (::std::auto_ptr< SimFlowTerm_ZoneMixerName_type > x)
      {
        this->SimFlowTerm_ZoneMixerName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxSecondAirFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxSecondAirFlowRate () const
      {
        return this->SimFlowTerm_MaxSecondAirFlowRate_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_MaxSecondAirFlowRate_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxSecondAirFlowRate ()
      {
        return this->SimFlowTerm_MaxSecondAirFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxSecondAirFlowRate (const SimFlowTerm_MaxSecondAirFlowRate_type& x)
      {
        this->SimFlowTerm_MaxSecondAirFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_MaxSecondAirFlowRate (const SimFlowTerm_MaxSecondAirFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxSecondAirFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_FanOnFlowFract_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanOnFlowFract () const
      {
        return this->SimFlowTerm_FanOnFlowFract_;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::SimFlowTerm_FanOnFlowFract_optional& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanOnFlowFract ()
      {
        return this->SimFlowTerm_FanOnFlowFract_;
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanOnFlowFract (const SimFlowTerm_FanOnFlowFract_type& x)
      {
        this->SimFlowTerm_FanOnFlowFract_.set (x);
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerm_FanOnFlowFract (const SimFlowTerm_FanOnFlowFract_optional& x)
      {
        this->SimFlowTerm_FanOnFlowFract_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_ParallelPIU_Reheat
      //

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_AirTerminal (RefId),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (this),
        SimFlowTerm_ReheatCoilObjType_ (this),
        SimFlowTerm_ReheatCoilName_ (this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_ConvergTol_ (this),
        SimFlowTerm_FanName_ (this),
        SimFlowTerm_MaxPrimaryAirFlowRate_ (this),
        SimFlowTerm_MinPrimaryAirFlowFract_ (this),
        SimFlowTerm_SupplyAirInletNodeName_ (this),
        SimFlowTerm_SecondAirInletNodeName_ (this),
        SimFlowTerm_OutNodeName_ (this),
        SimFlowTerm_ReheatCoilAirInletNodeName_ (this),
        SimFlowTerm_ZoneMixerName_ (this),
        SimFlowTerm_MaxSecondAirFlowRate_ (this),
        SimFlowTerm_FanOnFlowFract_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat (const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat& x,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_AirTerminal (x, f, c),
        SimFlowTerm_AvailSchedName_ (x.SimFlowTerm_AvailSchedName_, f, this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (x.SimFlowTerm_HotWaterOrSteamInletNodeName_, f, this),
        SimFlowTerm_ReheatCoilObjType_ (x.SimFlowTerm_ReheatCoilObjType_, f, this),
        SimFlowTerm_ReheatCoilName_ (x.SimFlowTerm_ReheatCoilName_, f, this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (x.SimFlowTerm_MaxHotWaterOrSteamFlowRate_, f, this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (x.SimFlowTerm_MinHotWaterOrSteamFlowRate_, f, this),
        SimFlowTerm_ConvergTol_ (x.SimFlowTerm_ConvergTol_, f, this),
        SimFlowTerm_FanName_ (x.SimFlowTerm_FanName_, f, this),
        SimFlowTerm_MaxPrimaryAirFlowRate_ (x.SimFlowTerm_MaxPrimaryAirFlowRate_, f, this),
        SimFlowTerm_MinPrimaryAirFlowFract_ (x.SimFlowTerm_MinPrimaryAirFlowFract_, f, this),
        SimFlowTerm_SupplyAirInletNodeName_ (x.SimFlowTerm_SupplyAirInletNodeName_, f, this),
        SimFlowTerm_SecondAirInletNodeName_ (x.SimFlowTerm_SecondAirInletNodeName_, f, this),
        SimFlowTerm_OutNodeName_ (x.SimFlowTerm_OutNodeName_, f, this),
        SimFlowTerm_ReheatCoilAirInletNodeName_ (x.SimFlowTerm_ReheatCoilAirInletNodeName_, f, this),
        SimFlowTerm_ZoneMixerName_ (x.SimFlowTerm_ZoneMixerName_, f, this),
        SimFlowTerm_MaxSecondAirFlowRate_ (x.SimFlowTerm_MaxSecondAirFlowRate_, f, this),
        SimFlowTerm_FanOnFlowFract_ (x.SimFlowTerm_FanOnFlowFract_, f, this)
      {
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f,
                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_AirTerminal (e, f | ::xml_schema::flags::base, c),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_HotWaterOrSteamInletNodeName_ (this),
        SimFlowTerm_ReheatCoilObjType_ (this),
        SimFlowTerm_ReheatCoilName_ (this),
        SimFlowTerm_MaxHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_MinHotWaterOrSteamFlowRate_ (this),
        SimFlowTerm_ConvergTol_ (this),
        SimFlowTerm_FanName_ (this),
        SimFlowTerm_MaxPrimaryAirFlowRate_ (this),
        SimFlowTerm_MinPrimaryAirFlowFract_ (this),
        SimFlowTerm_SupplyAirInletNodeName_ (this),
        SimFlowTerm_SecondAirInletNodeName_ (this),
        SimFlowTerm_OutNodeName_ (this),
        SimFlowTerm_ReheatCoilAirInletNodeName_ (this),
        SimFlowTerm_ZoneMixerName_ (this),
        SimFlowTerm_MaxSecondAirFlowRate_ (this),
        SimFlowTerm_FanOnFlowFract_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowTerminal_AirTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowTerm_AvailSchedName
          //
          if (n.name () == "SimFlowTerm_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AvailSchedName_type > r (
              SimFlowTerm_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AvailSchedName_)
            {
              this->SimFlowTerm_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_HotWaterOrSteamInletNodeName
          //
          if (n.name () == "SimFlowTerm_HotWaterOrSteamInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HotWaterOrSteamInletNodeName_type > r (
              SimFlowTerm_HotWaterOrSteamInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_HotWaterOrSteamInletNodeName_)
            {
              this->SimFlowTerm_HotWaterOrSteamInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ReheatCoilObjType
          //
          if (n.name () == "SimFlowTerm_ReheatCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ReheatCoilObjType_type > r (
              SimFlowTerm_ReheatCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowTerm_ReheatCoilObjType_)
            {
              this->SimFlowTerm_ReheatCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ReheatCoilName
          //
          if (n.name () == "SimFlowTerm_ReheatCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ReheatCoilName_type > r (
              SimFlowTerm_ReheatCoilName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ReheatCoilName_)
            {
              this->SimFlowTerm_ReheatCoilName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_MaxHotWaterOrSteamFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxHotWaterOrSteamFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_)
            {
              this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_.set (SimFlowTerm_MaxHotWaterOrSteamFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MinHotWaterOrSteamFlowRate
          //
          if (n.name () == "SimFlowTerm_MinHotWaterOrSteamFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_MinHotWaterOrSteamFlowRate_)
            {
              this->SimFlowTerm_MinHotWaterOrSteamFlowRate_.set (SimFlowTerm_MinHotWaterOrSteamFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_ConvergTol
          //
          if (n.name () == "SimFlowTerm_ConvergTol" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_ConvergTol_)
            {
              this->SimFlowTerm_ConvergTol_.set (SimFlowTerm_ConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_FanName
          //
          if (n.name () == "SimFlowTerm_FanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_FanName_type > r (
              SimFlowTerm_FanName_traits::create (i, f, this));

            if (!this->SimFlowTerm_FanName_)
            {
              this->SimFlowTerm_FanName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_MaxPrimaryAirFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxPrimaryAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_MaxPrimaryAirFlowRate_)
            {
              this->SimFlowTerm_MaxPrimaryAirFlowRate_.set (SimFlowTerm_MaxPrimaryAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_MinPrimaryAirFlowFract
          //
          if (n.name () == "SimFlowTerm_MinPrimaryAirFlowFract" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_MinPrimaryAirFlowFract_)
            {
              this->SimFlowTerm_MinPrimaryAirFlowFract_.set (SimFlowTerm_MinPrimaryAirFlowFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_SupplyAirInletNodeName
          //
          if (n.name () == "SimFlowTerm_SupplyAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_SupplyAirInletNodeName_type > r (
              SimFlowTerm_SupplyAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_SupplyAirInletNodeName_)
            {
              this->SimFlowTerm_SupplyAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_SecondAirInletNodeName
          //
          if (n.name () == "SimFlowTerm_SecondAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_SecondAirInletNodeName_type > r (
              SimFlowTerm_SecondAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_SecondAirInletNodeName_)
            {
              this->SimFlowTerm_SecondAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_OutNodeName
          //
          if (n.name () == "SimFlowTerm_OutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_OutNodeName_type > r (
              SimFlowTerm_OutNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_OutNodeName_)
            {
              this->SimFlowTerm_OutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ReheatCoilAirInletNodeName
          //
          if (n.name () == "SimFlowTerm_ReheatCoilAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ReheatCoilAirInletNodeName_type > r (
              SimFlowTerm_ReheatCoilAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ReheatCoilAirInletNodeName_)
            {
              this->SimFlowTerm_ReheatCoilAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ZoneMixerName
          //
          if (n.name () == "SimFlowTerm_ZoneMixerName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ZoneMixerName_type > r (
              SimFlowTerm_ZoneMixerName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ZoneMixerName_)
            {
              this->SimFlowTerm_ZoneMixerName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_MaxSecondAirFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxSecondAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_MaxSecondAirFlowRate_)
            {
              this->SimFlowTerm_MaxSecondAirFlowRate_.set (SimFlowTerm_MaxSecondAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_FanOnFlowFract
          //
          if (n.name () == "SimFlowTerm_FanOnFlowFract" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_FanOnFlowFract_)
            {
              this->SimFlowTerm_FanOnFlowFract_.set (SimFlowTerm_FanOnFlowFract_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat* SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_AirTerminal_ParallelPIU_Reheat (*this, f, c);
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat& SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      operator= (const SimFlowTerminal_AirTerminal_ParallelPIU_Reheat& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowTerminal_AirTerminal& > (*this) = x;
          this->SimFlowTerm_AvailSchedName_ = x.SimFlowTerm_AvailSchedName_;
          this->SimFlowTerm_HotWaterOrSteamInletNodeName_ = x.SimFlowTerm_HotWaterOrSteamInletNodeName_;
          this->SimFlowTerm_ReheatCoilObjType_ = x.SimFlowTerm_ReheatCoilObjType_;
          this->SimFlowTerm_ReheatCoilName_ = x.SimFlowTerm_ReheatCoilName_;
          this->SimFlowTerm_MaxHotWaterOrSteamFlowRate_ = x.SimFlowTerm_MaxHotWaterOrSteamFlowRate_;
          this->SimFlowTerm_MinHotWaterOrSteamFlowRate_ = x.SimFlowTerm_MinHotWaterOrSteamFlowRate_;
          this->SimFlowTerm_ConvergTol_ = x.SimFlowTerm_ConvergTol_;
          this->SimFlowTerm_FanName_ = x.SimFlowTerm_FanName_;
          this->SimFlowTerm_MaxPrimaryAirFlowRate_ = x.SimFlowTerm_MaxPrimaryAirFlowRate_;
          this->SimFlowTerm_MinPrimaryAirFlowFract_ = x.SimFlowTerm_MinPrimaryAirFlowFract_;
          this->SimFlowTerm_SupplyAirInletNodeName_ = x.SimFlowTerm_SupplyAirInletNodeName_;
          this->SimFlowTerm_SecondAirInletNodeName_ = x.SimFlowTerm_SecondAirInletNodeName_;
          this->SimFlowTerm_OutNodeName_ = x.SimFlowTerm_OutNodeName_;
          this->SimFlowTerm_ReheatCoilAirInletNodeName_ = x.SimFlowTerm_ReheatCoilAirInletNodeName_;
          this->SimFlowTerm_ZoneMixerName_ = x.SimFlowTerm_ZoneMixerName_;
          this->SimFlowTerm_MaxSecondAirFlowRate_ = x.SimFlowTerm_MaxSecondAirFlowRate_;
          this->SimFlowTerm_FanOnFlowFract_ = x.SimFlowTerm_FanOnFlowFract_;
        }

        return *this;
      }

      SimFlowTerminal_AirTerminal_ParallelPIU_Reheat::
      ~SimFlowTerminal_AirTerminal_ParallelPIU_Reheat ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

