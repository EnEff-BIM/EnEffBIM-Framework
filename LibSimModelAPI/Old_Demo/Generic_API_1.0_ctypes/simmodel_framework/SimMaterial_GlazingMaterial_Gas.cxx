// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_Gas.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Gas
      // 

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_GasType_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GasType () const
      {
        return this->SimMaterial_GasType_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_GasType_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GasType ()
      {
        return this->SimMaterial_GasType_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GasType (const SimMaterial_GasType_type& x)
      {
        this->SimMaterial_GasType_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GasType (const SimMaterial_GasType_optional& x)
      {
        this->SimMaterial_GasType_ = x;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GasType (::std::auto_ptr< SimMaterial_GasType_type > x)
      {
        this->SimMaterial_GasType_.set (x);
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_CondCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefA () const
      {
        return this->SimMaterial_CondCoefA_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_CondCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefA ()
      {
        return this->SimMaterial_CondCoefA_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefA (const SimMaterial_CondCoefA_type& x)
      {
        this->SimMaterial_CondCoefA_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefA (const SimMaterial_CondCoefA_optional& x)
      {
        this->SimMaterial_CondCoefA_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_CondCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefB () const
      {
        return this->SimMaterial_CondCoefB_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_CondCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefB ()
      {
        return this->SimMaterial_CondCoefB_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefB (const SimMaterial_CondCoefB_type& x)
      {
        this->SimMaterial_CondCoefB_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_CondCoefB (const SimMaterial_CondCoefB_optional& x)
      {
        this->SimMaterial_CondCoefB_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_ConductivityCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ConductivityCoeffC () const
      {
        return this->SimMaterial_ConductivityCoeffC_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_ConductivityCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ConductivityCoeffC ()
      {
        return this->SimMaterial_ConductivityCoeffC_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ConductivityCoeffC (const SimMaterial_ConductivityCoeffC_type& x)
      {
        this->SimMaterial_ConductivityCoeffC_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ConductivityCoeffC (const SimMaterial_ConductivityCoeffC_optional& x)
      {
        this->SimMaterial_ConductivityCoeffC_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefA () const
      {
        return this->SimMaterial_ViscosityCoefA_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefA ()
      {
        return this->SimMaterial_ViscosityCoefA_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefA (const SimMaterial_ViscosityCoefA_type& x)
      {
        this->SimMaterial_ViscosityCoefA_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefA (const SimMaterial_ViscosityCoefA_optional& x)
      {
        this->SimMaterial_ViscosityCoefA_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefB () const
      {
        return this->SimMaterial_ViscosityCoefB_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefB ()
      {
        return this->SimMaterial_ViscosityCoefB_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefB (const SimMaterial_ViscosityCoefB_type& x)
      {
        this->SimMaterial_ViscosityCoefB_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoefB (const SimMaterial_ViscosityCoefB_optional& x)
      {
        this->SimMaterial_ViscosityCoefB_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoeffC () const
      {
        return this->SimMaterial_ViscosityCoeffC_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_ViscosityCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoeffC ()
      {
        return this->SimMaterial_ViscosityCoeffC_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoeffC (const SimMaterial_ViscosityCoeffC_type& x)
      {
        this->SimMaterial_ViscosityCoeffC_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_ViscosityCoeffC (const SimMaterial_ViscosityCoeffC_optional& x)
      {
        this->SimMaterial_ViscosityCoeffC_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefA () const
      {
        return this->SimMaterial_SpecificHeatCoefA_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoefA_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefA ()
      {
        return this->SimMaterial_SpecificHeatCoefA_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefA (const SimMaterial_SpecificHeatCoefA_type& x)
      {
        this->SimMaterial_SpecificHeatCoefA_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefA (const SimMaterial_SpecificHeatCoefA_optional& x)
      {
        this->SimMaterial_SpecificHeatCoefA_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefB () const
      {
        return this->SimMaterial_SpecificHeatCoefB_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoefB_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefB ()
      {
        return this->SimMaterial_SpecificHeatCoefB_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefB (const SimMaterial_SpecificHeatCoefB_type& x)
      {
        this->SimMaterial_SpecificHeatCoefB_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoefB (const SimMaterial_SpecificHeatCoefB_optional& x)
      {
        this->SimMaterial_SpecificHeatCoefB_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoeffC () const
      {
        return this->SimMaterial_SpecificHeatCoeffC_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatCoeffC_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoeffC ()
      {
        return this->SimMaterial_SpecificHeatCoeffC_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoeffC (const SimMaterial_SpecificHeatCoeffC_type& x)
      {
        this->SimMaterial_SpecificHeatCoeffC_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatCoeffC (const SimMaterial_SpecificHeatCoeffC_optional& x)
      {
        this->SimMaterial_SpecificHeatCoeffC_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_MolecularWeight_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_MolecularWeight () const
      {
        return this->SimMaterial_MolecularWeight_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_MolecularWeight_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_MolecularWeight ()
      {
        return this->SimMaterial_MolecularWeight_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_MolecularWeight (const SimMaterial_MolecularWeight_type& x)
      {
        this->SimMaterial_MolecularWeight_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_MolecularWeight (const SimMaterial_MolecularWeight_optional& x)
      {
        this->SimMaterial_MolecularWeight_ = x;
      }

      const SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatRatio_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatRatio () const
      {
        return this->SimMaterial_SpecificHeatRatio_;
      }

      SimMaterial_GlazingMaterial_Gas::SimMaterial_SpecificHeatRatio_optional& SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatRatio ()
      {
        return this->SimMaterial_SpecificHeatRatio_;
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatRatio (const SimMaterial_SpecificHeatRatio_type& x)
      {
        this->SimMaterial_SpecificHeatRatio_.set (x);
      }

      void SimMaterial_GlazingMaterial_Gas::
      SimMaterial_SpecificHeatRatio (const SimMaterial_SpecificHeatRatio_optional& x)
      {
        this->SimMaterial_SpecificHeatRatio_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Gas
      //

      SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GlazingMaterial_Gas (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_Thick_ (this),
        SimMaterial_GasType_ (this),
        SimMaterial_CondCoefA_ (this),
        SimMaterial_CondCoefB_ (this),
        SimMaterial_ConductivityCoeffC_ (this),
        SimMaterial_ViscosityCoefA_ (this),
        SimMaterial_ViscosityCoefB_ (this),
        SimMaterial_ViscosityCoeffC_ (this),
        SimMaterial_SpecificHeatCoefA_ (this),
        SimMaterial_SpecificHeatCoefB_ (this),
        SimMaterial_SpecificHeatCoeffC_ (this),
        SimMaterial_MolecularWeight_ (this),
        SimMaterial_SpecificHeatRatio_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GlazingMaterial_Gas (const SimMaterial_GlazingMaterial_Gas& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_GasType_ (x.SimMaterial_GasType_, f, this),
        SimMaterial_CondCoefA_ (x.SimMaterial_CondCoefA_, f, this),
        SimMaterial_CondCoefB_ (x.SimMaterial_CondCoefB_, f, this),
        SimMaterial_ConductivityCoeffC_ (x.SimMaterial_ConductivityCoeffC_, f, this),
        SimMaterial_ViscosityCoefA_ (x.SimMaterial_ViscosityCoefA_, f, this),
        SimMaterial_ViscosityCoefB_ (x.SimMaterial_ViscosityCoefB_, f, this),
        SimMaterial_ViscosityCoeffC_ (x.SimMaterial_ViscosityCoeffC_, f, this),
        SimMaterial_SpecificHeatCoefA_ (x.SimMaterial_SpecificHeatCoefA_, f, this),
        SimMaterial_SpecificHeatCoefB_ (x.SimMaterial_SpecificHeatCoefB_, f, this),
        SimMaterial_SpecificHeatCoeffC_ (x.SimMaterial_SpecificHeatCoeffC_, f, this),
        SimMaterial_MolecularWeight_ (x.SimMaterial_MolecularWeight_, f, this),
        SimMaterial_SpecificHeatRatio_ (x.SimMaterial_SpecificHeatRatio_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_Gas::
      SimMaterial_GlazingMaterial_Gas (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Thick_ (this),
        SimMaterial_GasType_ (this),
        SimMaterial_CondCoefA_ (this),
        SimMaterial_CondCoefB_ (this),
        SimMaterial_ConductivityCoeffC_ (this),
        SimMaterial_ViscosityCoefA_ (this),
        SimMaterial_ViscosityCoefB_ (this),
        SimMaterial_ViscosityCoeffC_ (this),
        SimMaterial_SpecificHeatCoefA_ (this),
        SimMaterial_SpecificHeatCoefB_ (this),
        SimMaterial_SpecificHeatCoeffC_ (this),
        SimMaterial_MolecularWeight_ (this),
        SimMaterial_SpecificHeatRatio_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_Gas::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_GasType
          //
          if (n.name () == "SimMaterial_GasType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_GasType_type > r (
              SimMaterial_GasType_traits::create (i, f, this));

            if (!this->SimMaterial_GasType_)
            {
              this->SimMaterial_GasType_.set (r);
              continue;
            }
          }

          // SimMaterial_CondCoefA
          //
          if (n.name () == "SimMaterial_CondCoefA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_CondCoefA_)
            {
              this->SimMaterial_CondCoefA_.set (SimMaterial_CondCoefA_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_CondCoefB
          //
          if (n.name () == "SimMaterial_CondCoefB" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_CondCoefB_)
            {
              this->SimMaterial_CondCoefB_.set (SimMaterial_CondCoefB_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ConductivityCoeffC
          //
          if (n.name () == "SimMaterial_ConductivityCoeffC" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_ConductivityCoeffC_)
            {
              this->SimMaterial_ConductivityCoeffC_.set (SimMaterial_ConductivityCoeffC_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ViscosityCoefA
          //
          if (n.name () == "SimMaterial_ViscosityCoefA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_ViscosityCoefA_)
            {
              this->SimMaterial_ViscosityCoefA_.set (SimMaterial_ViscosityCoefA_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ViscosityCoefB
          //
          if (n.name () == "SimMaterial_ViscosityCoefB" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_ViscosityCoefB_)
            {
              this->SimMaterial_ViscosityCoefB_.set (SimMaterial_ViscosityCoefB_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ViscosityCoeffC
          //
          if (n.name () == "SimMaterial_ViscosityCoeffC" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_ViscosityCoeffC_)
            {
              this->SimMaterial_ViscosityCoeffC_.set (SimMaterial_ViscosityCoeffC_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SpecificHeatCoefA
          //
          if (n.name () == "SimMaterial_SpecificHeatCoefA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SpecificHeatCoefA_)
            {
              this->SimMaterial_SpecificHeatCoefA_.set (SimMaterial_SpecificHeatCoefA_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SpecificHeatCoefB
          //
          if (n.name () == "SimMaterial_SpecificHeatCoefB" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SpecificHeatCoefB_)
            {
              this->SimMaterial_SpecificHeatCoefB_.set (SimMaterial_SpecificHeatCoefB_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SpecificHeatCoeffC
          //
          if (n.name () == "SimMaterial_SpecificHeatCoeffC" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SpecificHeatCoeffC_)
            {
              this->SimMaterial_SpecificHeatCoeffC_.set (SimMaterial_SpecificHeatCoeffC_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_MolecularWeight
          //
          if (n.name () == "SimMaterial_MolecularWeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_MolecularWeight_)
            {
              this->SimMaterial_MolecularWeight_.set (SimMaterial_MolecularWeight_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SpecificHeatRatio
          //
          if (n.name () == "SimMaterial_SpecificHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SpecificHeatRatio_)
            {
              this->SimMaterial_SpecificHeatRatio_.set (SimMaterial_SpecificHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_Gas* SimMaterial_GlazingMaterial_Gas::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_Gas (*this, f, c);
      }

      SimMaterial_GlazingMaterial_Gas& SimMaterial_GlazingMaterial_Gas::
      operator= (const SimMaterial_GlazingMaterial_Gas& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_GasType_ = x.SimMaterial_GasType_;
          this->SimMaterial_CondCoefA_ = x.SimMaterial_CondCoefA_;
          this->SimMaterial_CondCoefB_ = x.SimMaterial_CondCoefB_;
          this->SimMaterial_ConductivityCoeffC_ = x.SimMaterial_ConductivityCoeffC_;
          this->SimMaterial_ViscosityCoefA_ = x.SimMaterial_ViscosityCoefA_;
          this->SimMaterial_ViscosityCoefB_ = x.SimMaterial_ViscosityCoefB_;
          this->SimMaterial_ViscosityCoeffC_ = x.SimMaterial_ViscosityCoeffC_;
          this->SimMaterial_SpecificHeatCoefA_ = x.SimMaterial_SpecificHeatCoefA_;
          this->SimMaterial_SpecificHeatCoefB_ = x.SimMaterial_SpecificHeatCoefB_;
          this->SimMaterial_SpecificHeatCoeffC_ = x.SimMaterial_SpecificHeatCoeffC_;
          this->SimMaterial_MolecularWeight_ = x.SimMaterial_MolecularWeight_;
          this->SimMaterial_SpecificHeatRatio_ = x.SimMaterial_SpecificHeatRatio_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_Gas::
      ~SimMaterial_GlazingMaterial_Gas ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

