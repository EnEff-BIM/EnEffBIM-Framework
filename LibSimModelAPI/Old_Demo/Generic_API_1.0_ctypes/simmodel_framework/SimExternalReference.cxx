// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimExternalReference.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimExternalReference
      // 

      const SimExternalReference::Name_optional& SimExternalReference::
      Name () const
      {
        return this->Name_;
      }

      SimExternalReference::Name_optional& SimExternalReference::
      Name ()
      {
        return this->Name_;
      }

      void SimExternalReference::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimExternalReference::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimExternalReference::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimExternalReference::RelatedObjects_optional& SimExternalReference::
      RelatedObjects () const
      {
        return this->RelatedObjects_;
      }

      SimExternalReference::RelatedObjects_optional& SimExternalReference::
      RelatedObjects ()
      {
        return this->RelatedObjects_;
      }

      void SimExternalReference::
      RelatedObjects (const RelatedObjects_type& x)
      {
        this->RelatedObjects_.set (x);
      }

      void SimExternalReference::
      RelatedObjects (const RelatedObjects_optional& x)
      {
        this->RelatedObjects_ = x;
      }

      void SimExternalReference::
      RelatedObjects (::std::auto_ptr< RelatedObjects_type > x)
      {
        this->RelatedObjects_.set (x);
      }

      const SimExternalReference::DocumentID_optional& SimExternalReference::
      DocumentID () const
      {
        return this->DocumentID_;
      }

      SimExternalReference::DocumentID_optional& SimExternalReference::
      DocumentID ()
      {
        return this->DocumentID_;
      }

      void SimExternalReference::
      DocumentID (const DocumentID_type& x)
      {
        this->DocumentID_.set (x);
      }

      void SimExternalReference::
      DocumentID (const DocumentID_optional& x)
      {
        this->DocumentID_ = x;
      }

      void SimExternalReference::
      DocumentID (::std::auto_ptr< DocumentID_type > x)
      {
        this->DocumentID_.set (x);
      }

      const SimExternalReference::Purpose_optional& SimExternalReference::
      Purpose () const
      {
        return this->Purpose_;
      }

      SimExternalReference::Purpose_optional& SimExternalReference::
      Purpose ()
      {
        return this->Purpose_;
      }

      void SimExternalReference::
      Purpose (const Purpose_type& x)
      {
        this->Purpose_.set (x);
      }

      void SimExternalReference::
      Purpose (const Purpose_optional& x)
      {
        this->Purpose_ = x;
      }

      void SimExternalReference::
      Purpose (::std::auto_ptr< Purpose_type > x)
      {
        this->Purpose_.set (x);
      }

      const SimExternalReference::IntendedUse_optional& SimExternalReference::
      IntendedUse () const
      {
        return this->IntendedUse_;
      }

      SimExternalReference::IntendedUse_optional& SimExternalReference::
      IntendedUse ()
      {
        return this->IntendedUse_;
      }

      void SimExternalReference::
      IntendedUse (const IntendedUse_type& x)
      {
        this->IntendedUse_.set (x);
      }

      void SimExternalReference::
      IntendedUse (const IntendedUse_optional& x)
      {
        this->IntendedUse_ = x;
      }

      void SimExternalReference::
      IntendedUse (::std::auto_ptr< IntendedUse_type > x)
      {
        this->IntendedUse_.set (x);
      }

      const SimExternalReference::Scope_optional& SimExternalReference::
      Scope () const
      {
        return this->Scope_;
      }

      SimExternalReference::Scope_optional& SimExternalReference::
      Scope ()
      {
        return this->Scope_;
      }

      void SimExternalReference::
      Scope (const Scope_type& x)
      {
        this->Scope_.set (x);
      }

      void SimExternalReference::
      Scope (const Scope_optional& x)
      {
        this->Scope_ = x;
      }

      void SimExternalReference::
      Scope (::std::auto_ptr< Scope_type > x)
      {
        this->Scope_.set (x);
      }

      const SimExternalReference::Revision_optional& SimExternalReference::
      Revision () const
      {
        return this->Revision_;
      }

      SimExternalReference::Revision_optional& SimExternalReference::
      Revision ()
      {
        return this->Revision_;
      }

      void SimExternalReference::
      Revision (const Revision_type& x)
      {
        this->Revision_.set (x);
      }

      void SimExternalReference::
      Revision (const Revision_optional& x)
      {
        this->Revision_ = x;
      }

      void SimExternalReference::
      Revision (::std::auto_ptr< Revision_type > x)
      {
        this->Revision_.set (x);
      }

      const SimExternalReference::DocumentOwner_optional& SimExternalReference::
      DocumentOwner () const
      {
        return this->DocumentOwner_;
      }

      SimExternalReference::DocumentOwner_optional& SimExternalReference::
      DocumentOwner ()
      {
        return this->DocumentOwner_;
      }

      void SimExternalReference::
      DocumentOwner (const DocumentOwner_type& x)
      {
        this->DocumentOwner_.set (x);
      }

      void SimExternalReference::
      DocumentOwner (const DocumentOwner_optional& x)
      {
        this->DocumentOwner_ = x;
      }

      void SimExternalReference::
      DocumentOwner (::std::auto_ptr< DocumentOwner_type > x)
      {
        this->DocumentOwner_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimExternalReference
      //

      SimExternalReference::
      SimExternalReference (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (RefId),
        Name_ (this),
        RelatedObjects_ (this),
        DocumentID_ (this),
        Purpose_ (this),
        IntendedUse_ (this),
        Scope_ (this),
        Revision_ (this),
        DocumentOwner_ (this)
      {
      }

      SimExternalReference::
      SimExternalReference (const SimExternalReference& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (x, f, c),
        Name_ (x.Name_, f, this),
        RelatedObjects_ (x.RelatedObjects_, f, this),
        DocumentID_ (x.DocumentID_, f, this),
        Purpose_ (x.Purpose_, f, this),
        IntendedUse_ (x.IntendedUse_, f, this),
        Scope_ (x.Scope_, f, this),
        Revision_ (x.Revision_, f, this),
        DocumentOwner_ (x.DocumentOwner_, f, this)
      {
      }

      SimExternalReference::
      SimExternalReference (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        RelatedObjects_ (this),
        DocumentID_ (this),
        Purpose_ (this),
        IntendedUse_ (this),
        Scope_ (this),
        Revision_ (this),
        DocumentOwner_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimExternalReference::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimResourceObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // RelatedObjects
          //
          if (n.name () == "RelatedObjects" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< RelatedObjects_type > r (
              RelatedObjects_traits::create (i, f, this));

            if (!this->RelatedObjects_)
            {
              this->RelatedObjects_.set (r);
              continue;
            }
          }

          // DocumentID
          //
          if (n.name () == "DocumentID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< DocumentID_type > r (
              DocumentID_traits::create (i, f, this));

            if (!this->DocumentID_)
            {
              this->DocumentID_.set (r);
              continue;
            }
          }

          // Purpose
          //
          if (n.name () == "Purpose" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Purpose_type > r (
              Purpose_traits::create (i, f, this));

            if (!this->Purpose_)
            {
              this->Purpose_.set (r);
              continue;
            }
          }

          // IntendedUse
          //
          if (n.name () == "IntendedUse" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< IntendedUse_type > r (
              IntendedUse_traits::create (i, f, this));

            if (!this->IntendedUse_)
            {
              this->IntendedUse_.set (r);
              continue;
            }
          }

          // Scope
          //
          if (n.name () == "Scope" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Scope_type > r (
              Scope_traits::create (i, f, this));

            if (!this->Scope_)
            {
              this->Scope_.set (r);
              continue;
            }
          }

          // Revision
          //
          if (n.name () == "Revision" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Revision_type > r (
              Revision_traits::create (i, f, this));

            if (!this->Revision_)
            {
              this->Revision_.set (r);
              continue;
            }
          }

          // DocumentOwner
          //
          if (n.name () == "DocumentOwner" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< DocumentOwner_type > r (
              DocumentOwner_traits::create (i, f, this));

            if (!this->DocumentOwner_)
            {
              this->DocumentOwner_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimExternalReference* SimExternalReference::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimExternalReference (*this, f, c);
      }

      SimExternalReference& SimExternalReference::
      operator= (const SimExternalReference& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimResourceObject& > (*this) = x;
          this->Name_ = x.Name_;
          this->RelatedObjects_ = x.RelatedObjects_;
          this->DocumentID_ = x.DocumentID_;
          this->Purpose_ = x.Purpose_;
          this->IntendedUse_ = x.IntendedUse_;
          this->Scope_ = x.Scope_;
          this->Revision_ = x.Revision_;
          this->DocumentOwner_ = x.DocumentOwner_;
        }

        return *this;
      }

      SimExternalReference::
      ~SimExternalReference ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

