// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSimulationRun.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSimulationRun
      // 

      const SimSimulationRun::SimulationConfiguration_optional& SimSimulationRun::
      SimulationConfiguration () const
      {
        return this->SimulationConfiguration_;
      }

      SimSimulationRun::SimulationConfiguration_optional& SimSimulationRun::
      SimulationConfiguration ()
      {
        return this->SimulationConfiguration_;
      }

      void SimSimulationRun::
      SimulationConfiguration (const SimulationConfiguration_type& x)
      {
        this->SimulationConfiguration_.set (x);
      }

      void SimSimulationRun::
      SimulationConfiguration (const SimulationConfiguration_optional& x)
      {
        this->SimulationConfiguration_ = x;
      }

      void SimSimulationRun::
      SimulationConfiguration (::std::auto_ptr< SimulationConfiguration_type > x)
      {
        this->SimulationConfiguration_.set (x);
      }

      const SimSimulationRun::SimulationStatus_optional& SimSimulationRun::
      SimulationStatus () const
      {
        return this->SimulationStatus_;
      }

      SimSimulationRun::SimulationStatus_optional& SimSimulationRun::
      SimulationStatus ()
      {
        return this->SimulationStatus_;
      }

      void SimSimulationRun::
      SimulationStatus (const SimulationStatus_type& x)
      {
        this->SimulationStatus_.set (x);
      }

      void SimSimulationRun::
      SimulationStatus (const SimulationStatus_optional& x)
      {
        this->SimulationStatus_ = x;
      }

      void SimSimulationRun::
      SimulationStatus (::std::auto_ptr< SimulationStatus_type > x)
      {
        this->SimulationStatus_.set (x);
      }

      const SimSimulationRun::RunStartDateTime_optional& SimSimulationRun::
      RunStartDateTime () const
      {
        return this->RunStartDateTime_;
      }

      SimSimulationRun::RunStartDateTime_optional& SimSimulationRun::
      RunStartDateTime ()
      {
        return this->RunStartDateTime_;
      }

      void SimSimulationRun::
      RunStartDateTime (const RunStartDateTime_type& x)
      {
        this->RunStartDateTime_.set (x);
      }

      void SimSimulationRun::
      RunStartDateTime (const RunStartDateTime_optional& x)
      {
        this->RunStartDateTime_ = x;
      }

      const SimSimulationRun::RunEndDateTime_optional& SimSimulationRun::
      RunEndDateTime () const
      {
        return this->RunEndDateTime_;
      }

      SimSimulationRun::RunEndDateTime_optional& SimSimulationRun::
      RunEndDateTime ()
      {
        return this->RunEndDateTime_;
      }

      void SimSimulationRun::
      RunEndDateTime (const RunEndDateTime_type& x)
      {
        this->RunEndDateTime_.set (x);
      }

      void SimSimulationRun::
      RunEndDateTime (const RunEndDateTime_optional& x)
      {
        this->RunEndDateTime_ = x;
      }

      const SimSimulationRun::ResultsURL_optional& SimSimulationRun::
      ResultsURL () const
      {
        return this->ResultsURL_;
      }

      SimSimulationRun::ResultsURL_optional& SimSimulationRun::
      ResultsURL ()
      {
        return this->ResultsURL_;
      }

      void SimSimulationRun::
      ResultsURL (const ResultsURL_type& x)
      {
        this->ResultsURL_.set (x);
      }

      void SimSimulationRun::
      ResultsURL (const ResultsURL_optional& x)
      {
        this->ResultsURL_ = x;
      }

      void SimSimulationRun::
      ResultsURL (::std::auto_ptr< ResultsURL_type > x)
      {
        this->ResultsURL_.set (x);
      }

      const SimSimulationRun::SimulationProcessID_optional& SimSimulationRun::
      SimulationProcessID () const
      {
        return this->SimulationProcessID_;
      }

      SimSimulationRun::SimulationProcessID_optional& SimSimulationRun::
      SimulationProcessID ()
      {
        return this->SimulationProcessID_;
      }

      void SimSimulationRun::
      SimulationProcessID (const SimulationProcessID_type& x)
      {
        this->SimulationProcessID_.set (x);
      }

      void SimSimulationRun::
      SimulationProcessID (const SimulationProcessID_optional& x)
      {
        this->SimulationProcessID_ = x;
      }

      void SimSimulationRun::
      SimulationProcessID (::std::auto_ptr< SimulationProcessID_type > x)
      {
        this->SimulationProcessID_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSimulationRun
      //

      SimSimulationRun::
      SimSimulationRun (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (RefId),
        SimulationConfiguration_ (this),
        SimulationStatus_ (this),
        RunStartDateTime_ (this),
        RunEndDateTime_ (this),
        ResultsURL_ (this),
        SimulationProcessID_ (this)
      {
      }

      SimSimulationRun::
      SimSimulationRun (const SimSimulationRun& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (x, f, c),
        SimulationConfiguration_ (x.SimulationConfiguration_, f, this),
        SimulationStatus_ (x.SimulationStatus_, f, this),
        RunStartDateTime_ (x.RunStartDateTime_, f, this),
        RunEndDateTime_ (x.RunEndDateTime_, f, this),
        ResultsURL_ (x.ResultsURL_, f, this),
        SimulationProcessID_ (x.SimulationProcessID_, f, this)
      {
      }

      SimSimulationRun::
      SimSimulationRun (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (e, f | ::xml_schema::flags::base, c),
        SimulationConfiguration_ (this),
        SimulationStatus_ (this),
        RunStartDateTime_ (this),
        RunEndDateTime_ (this),
        ResultsURL_ (this),
        SimulationProcessID_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSimulationRun::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimResourceObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimulationConfiguration
          //
          if (n.name () == "SimulationConfiguration" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimulationConfiguration_type > r (
              SimulationConfiguration_traits::create (i, f, this));

            if (!this->SimulationConfiguration_)
            {
              this->SimulationConfiguration_.set (r);
              continue;
            }
          }

          // SimulationStatus
          //
          if (n.name () == "SimulationStatus" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimulationStatus_type > r (
              SimulationStatus_traits::create (i, f, this));

            if (!this->SimulationStatus_)
            {
              this->SimulationStatus_.set (r);
              continue;
            }
          }

          // RunStartDateTime
          //
          if (n.name () == "RunStartDateTime" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->RunStartDateTime_)
            {
              this->RunStartDateTime_.set (RunStartDateTime_traits::create (i, f, this));
              continue;
            }
          }

          // RunEndDateTime
          //
          if (n.name () == "RunEndDateTime" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->RunEndDateTime_)
            {
              this->RunEndDateTime_.set (RunEndDateTime_traits::create (i, f, this));
              continue;
            }
          }

          // ResultsURL
          //
          if (n.name () == "ResultsURL" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ResultsURL_type > r (
              ResultsURL_traits::create (i, f, this));

            if (!this->ResultsURL_)
            {
              this->ResultsURL_.set (r);
              continue;
            }
          }

          // SimulationProcessID
          //
          if (n.name () == "SimulationProcessID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimulationProcessID_type > r (
              SimulationProcessID_traits::create (i, f, this));

            if (!this->SimulationProcessID_)
            {
              this->SimulationProcessID_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSimulationRun* SimSimulationRun::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSimulationRun (*this, f, c);
      }

      SimSimulationRun& SimSimulationRun::
      operator= (const SimSimulationRun& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimResourceObject& > (*this) = x;
          this->SimulationConfiguration_ = x.SimulationConfiguration_;
          this->SimulationStatus_ = x.SimulationStatus_;
          this->RunStartDateTime_ = x.RunStartDateTime_;
          this->RunEndDateTime_ = x.RunEndDateTime_;
          this->ResultsURL_ = x.ResultsURL_;
          this->SimulationProcessID_ = x.SimulationProcessID_;
        }

        return *this;
      }

      SimSimulationRun::
      ~SimSimulationRun ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

