// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_OUTDOOR_AIR_UNIT_HXX
#define SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_OUTDOOR_AIR_UNIT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowcompoundeqmt_unitaryzoneeqmt.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8;
    }
  }
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit: public ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt
      {
        public:
        // SimFlowCompEqmt_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AvailSchedName_type > SimFlowCompEqmt_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AvailSchedName_type, char > SimFlowCompEqmt_AvailSchedName_traits;

        const SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName () const;

        SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName ();

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x);

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x);

        void
        SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > p);

        // SimFlowCompEqmt_OutdrAirSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_OutdrAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrAirSchedName_type > SimFlowCompEqmt_OutdrAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrAirSchedName_type, char > SimFlowCompEqmt_OutdrAirSchedName_traits;

        const SimFlowCompEqmt_OutdrAirSchedName_optional&
        SimFlowCompEqmt_OutdrAirSchedName () const;

        SimFlowCompEqmt_OutdrAirSchedName_optional&
        SimFlowCompEqmt_OutdrAirSchedName ();

        void
        SimFlowCompEqmt_OutdrAirSchedName (const SimFlowCompEqmt_OutdrAirSchedName_type& x);

        void
        SimFlowCompEqmt_OutdrAirSchedName (const SimFlowCompEqmt_OutdrAirSchedName_optional& x);

        void
        SimFlowCompEqmt_OutdrAirSchedName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirSchedName_type > p);

        // SimFlowCompEqmt_AvailMngrListName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_AvailMngrListName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AvailMngrListName_type > SimFlowCompEqmt_AvailMngrListName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AvailMngrListName_type, char > SimFlowCompEqmt_AvailMngrListName_traits;

        const SimFlowCompEqmt_AvailMngrListName_optional&
        SimFlowCompEqmt_AvailMngrListName () const;

        SimFlowCompEqmt_AvailMngrListName_optional&
        SimFlowCompEqmt_AvailMngrListName ();

        void
        SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_type& x);

        void
        SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_optional& x);

        void
        SimFlowCompEqmt_AvailMngrListName (::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > p);

        // SimFlowCompEqmt_ExhAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_ExhAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ExhAirFlowRate_type > SimFlowCompEqmt_ExhAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ExhAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_ExhAirFlowRate_traits;

        const SimFlowCompEqmt_ExhAirFlowRate_optional&
        SimFlowCompEqmt_ExhAirFlowRate () const;

        SimFlowCompEqmt_ExhAirFlowRate_optional&
        SimFlowCompEqmt_ExhAirFlowRate ();

        void
        SimFlowCompEqmt_ExhAirFlowRate (const SimFlowCompEqmt_ExhAirFlowRate_type& x);

        void
        SimFlowCompEqmt_ExhAirFlowRate (const SimFlowCompEqmt_ExhAirFlowRate_optional& x);

        // SimFlowCompEqmt_OutdrAirNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_OutdrAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrAirNodeName_type > SimFlowCompEqmt_OutdrAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrAirNodeName_type, char > SimFlowCompEqmt_OutdrAirNodeName_traits;

        const SimFlowCompEqmt_OutdrAirNodeName_optional&
        SimFlowCompEqmt_OutdrAirNodeName () const;

        SimFlowCompEqmt_OutdrAirNodeName_optional&
        SimFlowCompEqmt_OutdrAirNodeName ();

        void
        SimFlowCompEqmt_OutdrAirNodeName (const SimFlowCompEqmt_OutdrAirNodeName_type& x);

        void
        SimFlowCompEqmt_OutdrAirNodeName (const SimFlowCompEqmt_OutdrAirNodeName_optional& x);

        void
        SimFlowCompEqmt_OutdrAirNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirNodeName_type > p);

        // SimFlowCompEqmt_ZoneName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ZoneName_type > SimFlowCompEqmt_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ZoneName_type, char > SimFlowCompEqmt_ZoneName_traits;

        const SimFlowCompEqmt_ZoneName_optional&
        SimFlowCompEqmt_ZoneName () const;

        SimFlowCompEqmt_ZoneName_optional&
        SimFlowCompEqmt_ZoneName ();

        void
        SimFlowCompEqmt_ZoneName (const SimFlowCompEqmt_ZoneName_type& x);

        void
        SimFlowCompEqmt_ZoneName (const SimFlowCompEqmt_ZoneName_optional& x);

        void
        SimFlowCompEqmt_ZoneName (::std::auto_ptr< SimFlowCompEqmt_ZoneName_type > p);

        // SimFlowCompEqmt_OutdrAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_OutdrAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrAirFlowRate_type > SimFlowCompEqmt_OutdrAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_OutdrAirFlowRate_traits;

        const SimFlowCompEqmt_OutdrAirFlowRate_optional&
        SimFlowCompEqmt_OutdrAirFlowRate () const;

        SimFlowCompEqmt_OutdrAirFlowRate_optional&
        SimFlowCompEqmt_OutdrAirFlowRate ();

        void
        SimFlowCompEqmt_OutdrAirFlowRate (const SimFlowCompEqmt_OutdrAirFlowRate_type& x);

        void
        SimFlowCompEqmt_OutdrAirFlowRate (const SimFlowCompEqmt_OutdrAirFlowRate_optional& x);

        // SimFlowCompEqmt_SupplyFanName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_SupplyFanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyFanName_type > SimFlowCompEqmt_SupplyFanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyFanName_type, char > SimFlowCompEqmt_SupplyFanName_traits;

        const SimFlowCompEqmt_SupplyFanName_optional&
        SimFlowCompEqmt_SupplyFanName () const;

        SimFlowCompEqmt_SupplyFanName_optional&
        SimFlowCompEqmt_SupplyFanName ();

        void
        SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_type& x);

        void
        SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_optional& x);

        void
        SimFlowCompEqmt_SupplyFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > p);

        // SimFlowCompEqmt_SupplyFanPlacement
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplyFanPlacement_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyFanPlacement_type > SimFlowCompEqmt_SupplyFanPlacement_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyFanPlacement_type, char > SimFlowCompEqmt_SupplyFanPlacement_traits;

        const SimFlowCompEqmt_SupplyFanPlacement_optional&
        SimFlowCompEqmt_SupplyFanPlacement () const;

        SimFlowCompEqmt_SupplyFanPlacement_optional&
        SimFlowCompEqmt_SupplyFanPlacement ();

        void
        SimFlowCompEqmt_SupplyFanPlacement (const SimFlowCompEqmt_SupplyFanPlacement_type& x);

        void
        SimFlowCompEqmt_SupplyFanPlacement (const SimFlowCompEqmt_SupplyFanPlacement_optional& x);

        void
        SimFlowCompEqmt_SupplyFanPlacement (::std::auto_ptr< SimFlowCompEqmt_SupplyFanPlacement_type > p);

        // SimFlowCompEqmt_ExhFanName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_ExhFanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ExhFanName_type > SimFlowCompEqmt_ExhFanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ExhFanName_type, char > SimFlowCompEqmt_ExhFanName_traits;

        const SimFlowCompEqmt_ExhFanName_optional&
        SimFlowCompEqmt_ExhFanName () const;

        SimFlowCompEqmt_ExhFanName_optional&
        SimFlowCompEqmt_ExhFanName ();

        void
        SimFlowCompEqmt_ExhFanName (const SimFlowCompEqmt_ExhFanName_type& x);

        void
        SimFlowCompEqmt_ExhFanName (const SimFlowCompEqmt_ExhFanName_optional& x);

        void
        SimFlowCompEqmt_ExhFanName (::std::auto_ptr< SimFlowCompEqmt_ExhFanName_type > p);

        // SimFlowCompEqmt_ExhAirSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_ExhAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ExhAirSchedName_type > SimFlowCompEqmt_ExhAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ExhAirSchedName_type, char > SimFlowCompEqmt_ExhAirSchedName_traits;

        const SimFlowCompEqmt_ExhAirSchedName_optional&
        SimFlowCompEqmt_ExhAirSchedName () const;

        SimFlowCompEqmt_ExhAirSchedName_optional&
        SimFlowCompEqmt_ExhAirSchedName ();

        void
        SimFlowCompEqmt_ExhAirSchedName (const SimFlowCompEqmt_ExhAirSchedName_type& x);

        void
        SimFlowCompEqmt_ExhAirSchedName (const SimFlowCompEqmt_ExhAirSchedName_optional& x);

        void
        SimFlowCompEqmt_ExhAirSchedName (::std::auto_ptr< SimFlowCompEqmt_ExhAirSchedName_type > p);

        // SimFlowCompEqmt_UnitCntlType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_UnitCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_UnitCntlType_type > SimFlowCompEqmt_UnitCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_UnitCntlType_type, char > SimFlowCompEqmt_UnitCntlType_traits;

        const SimFlowCompEqmt_UnitCntlType_optional&
        SimFlowCompEqmt_UnitCntlType () const;

        SimFlowCompEqmt_UnitCntlType_optional&
        SimFlowCompEqmt_UnitCntlType ();

        void
        SimFlowCompEqmt_UnitCntlType (const SimFlowCompEqmt_UnitCntlType_type& x);

        void
        SimFlowCompEqmt_UnitCntlType (const SimFlowCompEqmt_UnitCntlType_optional& x);

        void
        SimFlowCompEqmt_UnitCntlType (::std::auto_ptr< SimFlowCompEqmt_UnitCntlType_type > p);

        // SimFlowCompEqmt_HighAirCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_HighAirCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HighAirCntlTempSchedName_type > SimFlowCompEqmt_HighAirCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HighAirCntlTempSchedName_type, char > SimFlowCompEqmt_HighAirCntlTempSchedName_traits;

        const SimFlowCompEqmt_HighAirCntlTempSchedName_optional&
        SimFlowCompEqmt_HighAirCntlTempSchedName () const;

        SimFlowCompEqmt_HighAirCntlTempSchedName_optional&
        SimFlowCompEqmt_HighAirCntlTempSchedName ();

        void
        SimFlowCompEqmt_HighAirCntlTempSchedName (const SimFlowCompEqmt_HighAirCntlTempSchedName_type& x);

        void
        SimFlowCompEqmt_HighAirCntlTempSchedName (const SimFlowCompEqmt_HighAirCntlTempSchedName_optional& x);

        void
        SimFlowCompEqmt_HighAirCntlTempSchedName (::std::auto_ptr< SimFlowCompEqmt_HighAirCntlTempSchedName_type > p);

        // SimFlowCompEqmt_LowAirCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_LowAirCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_LowAirCntlTempSchedName_type > SimFlowCompEqmt_LowAirCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_LowAirCntlTempSchedName_type, char > SimFlowCompEqmt_LowAirCntlTempSchedName_traits;

        const SimFlowCompEqmt_LowAirCntlTempSchedName_optional&
        SimFlowCompEqmt_LowAirCntlTempSchedName () const;

        SimFlowCompEqmt_LowAirCntlTempSchedName_optional&
        SimFlowCompEqmt_LowAirCntlTempSchedName ();

        void
        SimFlowCompEqmt_LowAirCntlTempSchedName (const SimFlowCompEqmt_LowAirCntlTempSchedName_type& x);

        void
        SimFlowCompEqmt_LowAirCntlTempSchedName (const SimFlowCompEqmt_LowAirCntlTempSchedName_optional& x);

        void
        SimFlowCompEqmt_LowAirCntlTempSchedName (::std::auto_ptr< SimFlowCompEqmt_LowAirCntlTempSchedName_type > p);

        // SimFlowCompEqmt_AirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_AirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AirOutletNodeName_type > SimFlowCompEqmt_AirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AirOutletNodeName_type, char > SimFlowCompEqmt_AirOutletNodeName_traits;

        const SimFlowCompEqmt_AirOutletNodeName_optional&
        SimFlowCompEqmt_AirOutletNodeName () const;

        SimFlowCompEqmt_AirOutletNodeName_optional&
        SimFlowCompEqmt_AirOutletNodeName ();

        void
        SimFlowCompEqmt_AirOutletNodeName (const SimFlowCompEqmt_AirOutletNodeName_type& x);

        void
        SimFlowCompEqmt_AirOutletNodeName (const SimFlowCompEqmt_AirOutletNodeName_optional& x);

        void
        SimFlowCompEqmt_AirOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutletNodeName_type > p);

        // SimFlowCompEqmt_SupplyFanOutletNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_SupplyFanOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SupplyFanOutletNodeName_type > SimFlowCompEqmt_SupplyFanOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SupplyFanOutletNodeName_type, char > SimFlowCompEqmt_SupplyFanOutletNodeName_traits;

        const SimFlowCompEqmt_SupplyFanOutletNodeName_optional&
        SimFlowCompEqmt_SupplyFanOutletNodeName () const;

        SimFlowCompEqmt_SupplyFanOutletNodeName_optional&
        SimFlowCompEqmt_SupplyFanOutletNodeName ();

        void
        SimFlowCompEqmt_SupplyFanOutletNodeName (const SimFlowCompEqmt_SupplyFanOutletNodeName_type& x);

        void
        SimFlowCompEqmt_SupplyFanOutletNodeName (const SimFlowCompEqmt_SupplyFanOutletNodeName_optional& x);

        void
        SimFlowCompEqmt_SupplyFanOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_SupplyFanOutletNodeName_type > p);

        // SimFlowCompEqmt_OutdrAirUnitListName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_OutdrAirUnitListName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrAirUnitListName_type > SimFlowCompEqmt_OutdrAirUnitListName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrAirUnitListName_type, char > SimFlowCompEqmt_OutdrAirUnitListName_traits;

        const SimFlowCompEqmt_OutdrAirUnitListName_optional&
        SimFlowCompEqmt_OutdrAirUnitListName () const;

        SimFlowCompEqmt_OutdrAirUnitListName_optional&
        SimFlowCompEqmt_OutdrAirUnitListName ();

        void
        SimFlowCompEqmt_OutdrAirUnitListName (const SimFlowCompEqmt_OutdrAirUnitListName_type& x);

        void
        SimFlowCompEqmt_OutdrAirUnitListName (const SimFlowCompEqmt_OutdrAirUnitListName_optional& x);

        void
        SimFlowCompEqmt_OutdrAirUnitListName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirUnitListName_type > p);

        // ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8
        //
        typedef ::namespaces::Sim::MepModel::ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_type;
        typedef ::xsd::cxx::tree::optional< ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_type > ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_optional;
        typedef ::xsd::cxx::tree::traits< ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_type, char > ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_traits;

        const ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_optional&
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 () const;

        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_optional&
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 ();

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 (const ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_type& x);

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 (const ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_optional& x);

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8 (::std::auto_ptr< ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_type > p);

        // ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8
        //
        typedef ::xml_schema::idrefs ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_type;
        typedef ::xsd::cxx::tree::optional< ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_type > ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_optional;
        typedef ::xsd::cxx::tree::traits< ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_type, char > ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_traits;

        const ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_optional&
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8 () const;

        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_optional&
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8 ();

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8 (const ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_type& x);

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8 (const ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_optional& x);

        void
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8 (::std::auto_ptr< ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_type > p);

        // Constructors.
        //
        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit (const RefId_type&);

        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit (const SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        virtual SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit&
        operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit& x);

        virtual 
        ~SimFlowCompoundEqmt_UnitaryZoneEqmt_OutdoorAirUnit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowCompEqmt_AvailSchedName_optional SimFlowCompEqmt_AvailSchedName_;
        SimFlowCompEqmt_OutdrAirSchedName_optional SimFlowCompEqmt_OutdrAirSchedName_;
        SimFlowCompEqmt_AvailMngrListName_optional SimFlowCompEqmt_AvailMngrListName_;
        SimFlowCompEqmt_ExhAirFlowRate_optional SimFlowCompEqmt_ExhAirFlowRate_;
        SimFlowCompEqmt_OutdrAirNodeName_optional SimFlowCompEqmt_OutdrAirNodeName_;
        SimFlowCompEqmt_ZoneName_optional SimFlowCompEqmt_ZoneName_;
        SimFlowCompEqmt_OutdrAirFlowRate_optional SimFlowCompEqmt_OutdrAirFlowRate_;
        SimFlowCompEqmt_SupplyFanName_optional SimFlowCompEqmt_SupplyFanName_;
        SimFlowCompEqmt_SupplyFanPlacement_optional SimFlowCompEqmt_SupplyFanPlacement_;
        SimFlowCompEqmt_ExhFanName_optional SimFlowCompEqmt_ExhFanName_;
        SimFlowCompEqmt_ExhAirSchedName_optional SimFlowCompEqmt_ExhAirSchedName_;
        SimFlowCompEqmt_UnitCntlType_optional SimFlowCompEqmt_UnitCntlType_;
        SimFlowCompEqmt_HighAirCntlTempSchedName_optional SimFlowCompEqmt_HighAirCntlTempSchedName_;
        SimFlowCompEqmt_LowAirCntlTempSchedName_optional SimFlowCompEqmt_LowAirCntlTempSchedName_;
        SimFlowCompEqmt_AirOutletNodeName_optional SimFlowCompEqmt_AirOutletNodeName_;
        SimFlowCompEqmt_SupplyFanOutletNodeName_optional SimFlowCompEqmt_SupplyFanOutletNodeName_;
        SimFlowCompEqmt_OutdrAirUnitListName_optional SimFlowCompEqmt_OutdrAirUnitListName_;
        ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_optional ZoneHvac_OutdrAirUnit_EquipList_ComponentObjectType_1_8_;
        ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_optional ZoneHvac_OutdrAirUnit_EquipList_ComponentName_1_8_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_OUTDOOR_AIR_UNIT_HXX
