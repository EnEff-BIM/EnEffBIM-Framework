// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_SolarDevice_SolarThermalAir.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarThermalAir
      // 

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_InNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_InNodeName () const
      {
        return this->SimFlowPlant_InNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_InNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_InNodeName ()
      {
        return this->SimFlowPlant_InNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_InNodeName (const SimFlowPlant_InNodeName_type& x)
      {
        this->SimFlowPlant_InNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_InNodeName (const SimFlowPlant_InNodeName_optional& x)
      {
        this->SimFlowPlant_InNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_InNodeName (::std::auto_ptr< SimFlowPlant_InNodeName_type > x)
      {
        this->SimFlowPlant_InNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_OutNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_OutNodeName () const
      {
        return this->SimFlowPlant_OutNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_OutNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_OutNodeName ()
      {
        return this->SimFlowPlant_OutNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_OutNodeName (const SimFlowPlant_OutNodeName_type& x)
      {
        this->SimFlowPlant_OutNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_OutNodeName (const SimFlowPlant_OutNodeName_optional& x)
      {
        this->SimFlowPlant_OutNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_OutNodeName (::std::auto_ptr< SimFlowPlant_OutNodeName_type > x)
      {
        this->SimFlowPlant_OutNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_BoundaryCondModelName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_BoundaryCondModelName () const
      {
        return this->SimFlowPlant_BoundaryCondModelName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_BoundaryCondModelName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_BoundaryCondModelName ()
      {
        return this->SimFlowPlant_BoundaryCondModelName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_BoundaryCondModelName (const SimFlowPlant_BoundaryCondModelName_type& x)
      {
        this->SimFlowPlant_BoundaryCondModelName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_BoundaryCondModelName (const SimFlowPlant_BoundaryCondModelName_optional& x)
      {
        this->SimFlowPlant_BoundaryCondModelName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_BoundaryCondModelName (::std::auto_ptr< SimFlowPlant_BoundaryCondModelName_type > x)
      {
        this->SimFlowPlant_BoundaryCondModelName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_AvailSchedName () const
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_AvailSchedName ()
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_type& x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_optional& x)
      {
        this->SimFlowPlant_AvailSchedName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_AvailSchedName (::std::auto_ptr< SimFlowPlant_AvailSchedName_type > x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SetpointNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SetpointNodeName () const
      {
        return this->SimFlowPlant_SetpointNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SetpointNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SetpointNodeName ()
      {
        return this->SimFlowPlant_SetpointNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SetpointNodeName (const SimFlowPlant_SetpointNodeName_type& x)
      {
        this->SimFlowPlant_SetpointNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SetpointNodeName (const SimFlowPlant_SetpointNodeName_optional& x)
      {
        this->SimFlowPlant_SetpointNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SetpointNodeName (::std::auto_ptr< SimFlowPlant_SetpointNodeName_type > x)
      {
        this->SimFlowPlant_SetpointNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_ZoneNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ZoneNodeName () const
      {
        return this->SimFlowPlant_ZoneNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_ZoneNodeName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ZoneNodeName ()
      {
        return this->SimFlowPlant_ZoneNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ZoneNodeName (const SimFlowPlant_ZoneNodeName_type& x)
      {
        this->SimFlowPlant_ZoneNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ZoneNodeName (const SimFlowPlant_ZoneNodeName_optional& x)
      {
        this->SimFlowPlant_ZoneNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ZoneNodeName (::std::auto_ptr< SimFlowPlant_ZoneNodeName_type > x)
      {
        this->SimFlowPlant_ZoneNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_FreeHeatingSetpointSchedName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_FreeHeatingSetpointSchedName () const
      {
        return this->SimFlowPlant_FreeHeatingSetpointSchedName_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_FreeHeatingSetpointSchedName_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_FreeHeatingSetpointSchedName ()
      {
        return this->SimFlowPlant_FreeHeatingSetpointSchedName_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_FreeHeatingSetpointSchedName (const SimFlowPlant_FreeHeatingSetpointSchedName_type& x)
      {
        this->SimFlowPlant_FreeHeatingSetpointSchedName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_FreeHeatingSetpointSchedName (const SimFlowPlant_FreeHeatingSetpointSchedName_optional& x)
      {
        this->SimFlowPlant_FreeHeatingSetpointSchedName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_FreeHeatingSetpointSchedName (::std::auto_ptr< SimFlowPlant_FreeHeatingSetpointSchedName_type > x)
      {
        this->SimFlowPlant_FreeHeatingSetpointSchedName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DiamPerfCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DiamPerfCollect () const
      {
        return this->SimFlowPlant_DiamPerfCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DiamPerfCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DiamPerfCollect ()
      {
        return this->SimFlowPlant_DiamPerfCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DiamPerfCollect (const SimFlowPlant_DiamPerfCollect_type& x)
      {
        this->SimFlowPlant_DiamPerfCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DiamPerfCollect (const SimFlowPlant_DiamPerfCollect_optional& x)
      {
        this->SimFlowPlant_DiamPerfCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DistBetweenPerfCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DistBetweenPerfCollect () const
      {
        return this->SimFlowPlant_DistBetweenPerfCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DistBetweenPerfCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DistBetweenPerfCollect ()
      {
        return this->SimFlowPlant_DistBetweenPerfCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DistBetweenPerfCollect (const SimFlowPlant_DistBetweenPerfCollect_type& x)
      {
        this->SimFlowPlant_DistBetweenPerfCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DistBetweenPerfCollect (const SimFlowPlant_DistBetweenPerfCollect_optional& x)
      {
        this->SimFlowPlant_DistBetweenPerfCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_ThermalEmisCollectSurf_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ThermalEmisCollectSurf () const
      {
        return this->SimFlowPlant_ThermalEmisCollectSurf_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_ThermalEmisCollectSurf_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ThermalEmisCollectSurf ()
      {
        return this->SimFlowPlant_ThermalEmisCollectSurf_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ThermalEmisCollectSurf (const SimFlowPlant_ThermalEmisCollectSurf_type& x)
      {
        this->SimFlowPlant_ThermalEmisCollectSurf_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_ThermalEmisCollectSurf (const SimFlowPlant_ThermalEmisCollectSurf_optional& x)
      {
        this->SimFlowPlant_ThermalEmisCollectSurf_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SolarAbsorbCollectSurf_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarAbsorbCollectSurf () const
      {
        return this->SimFlowPlant_SolarAbsorbCollectSurf_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SolarAbsorbCollectSurf_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarAbsorbCollectSurf ()
      {
        return this->SimFlowPlant_SolarAbsorbCollectSurf_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarAbsorbCollectSurf (const SimFlowPlant_SolarAbsorbCollectSurf_type& x)
      {
        this->SimFlowPlant_SolarAbsorbCollectSurf_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarAbsorbCollectSurf (const SimFlowPlant_SolarAbsorbCollectSurf_optional& x)
      {
        this->SimFlowPlant_SolarAbsorbCollectSurf_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecOverallHeightCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecOverallHeightCollect () const
      {
        return this->SimFlowPlant_EffecOverallHeightCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecOverallHeightCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecOverallHeightCollect ()
      {
        return this->SimFlowPlant_EffecOverallHeightCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecOverallHeightCollect (const SimFlowPlant_EffecOverallHeightCollect_type& x)
      {
        this->SimFlowPlant_EffecOverallHeightCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecOverallHeightCollect (const SimFlowPlant_EffecOverallHeightCollect_optional& x)
      {
        this->SimFlowPlant_EffecOverallHeightCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecGapThickPlenumBehindCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecGapThickPlenumBehindCollect () const
      {
        return this->SimFlowPlant_EffecGapThickPlenumBehindCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecGapThickPlenumBehindCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecGapThickPlenumBehindCollect ()
      {
        return this->SimFlowPlant_EffecGapThickPlenumBehindCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecGapThickPlenumBehindCollect (const SimFlowPlant_EffecGapThickPlenumBehindCollect_type& x)
      {
        this->SimFlowPlant_EffecGapThickPlenumBehindCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecGapThickPlenumBehindCollect (const SimFlowPlant_EffecGapThickPlenumBehindCollect_optional& x)
      {
        this->SimFlowPlant_EffecGapThickPlenumBehindCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect () const
      {
        return this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect ()
      {
        return this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect (const SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_type& x)
      {
        this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect (const SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_optional& x)
      {
        this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_HoleLayoutPatternForPitch_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HoleLayoutPatternForPitch () const
      {
        return this->SimFlowPlant_HoleLayoutPatternForPitch_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_HoleLayoutPatternForPitch_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HoleLayoutPatternForPitch ()
      {
        return this->SimFlowPlant_HoleLayoutPatternForPitch_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HoleLayoutPatternForPitch (const SimFlowPlant_HoleLayoutPatternForPitch_type& x)
      {
        this->SimFlowPlant_HoleLayoutPatternForPitch_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HoleLayoutPatternForPitch (const SimFlowPlant_HoleLayoutPatternForPitch_optional& x)
      {
        this->SimFlowPlant_HoleLayoutPatternForPitch_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HoleLayoutPatternForPitch (::std::auto_ptr< SimFlowPlant_HoleLayoutPatternForPitch_type > x)
      {
        this->SimFlowPlant_HoleLayoutPatternForPitch_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_HeatExchangeEffectCorrel_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HeatExchangeEffectCorrel () const
      {
        return this->SimFlowPlant_HeatExchangeEffectCorrel_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_HeatExchangeEffectCorrel_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HeatExchangeEffectCorrel ()
      {
        return this->SimFlowPlant_HeatExchangeEffectCorrel_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HeatExchangeEffectCorrel (const SimFlowPlant_HeatExchangeEffectCorrel_type& x)
      {
        this->SimFlowPlant_HeatExchangeEffectCorrel_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HeatExchangeEffectCorrel (const SimFlowPlant_HeatExchangeEffectCorrel_optional& x)
      {
        this->SimFlowPlant_HeatExchangeEffectCorrel_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_HeatExchangeEffectCorrel (::std::auto_ptr< SimFlowPlant_HeatExchangeEffectCorrel_type > x)
      {
        this->SimFlowPlant_HeatExchangeEffectCorrel_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea () const
      {
        return this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea ()
      {
        return this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea (const SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_type& x)
      {
        this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea (const SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_optional& x)
      {
        this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_RoughCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RoughCollect () const
      {
        return this->SimFlowPlant_RoughCollect_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_RoughCollect_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RoughCollect ()
      {
        return this->SimFlowPlant_RoughCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RoughCollect (const SimFlowPlant_RoughCollect_type& x)
      {
        this->SimFlowPlant_RoughCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RoughCollect (const SimFlowPlant_RoughCollect_optional& x)
      {
        this->SimFlowPlant_RoughCollect_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_RoughCollect (::std::auto_ptr< SimFlowPlant_RoughCollect_type > x)
      {
        this->SimFlowPlant_RoughCollect_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_CollectThick_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_CollectThick () const
      {
        return this->SimFlowPlant_CollectThick_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_CollectThick_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_CollectThick ()
      {
        return this->SimFlowPlant_CollectThick_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_CollectThick (const SimFlowPlant_CollectThick_type& x)
      {
        this->SimFlowPlant_CollectThick_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_CollectThick (const SimFlowPlant_CollectThick_optional& x)
      {
        this->SimFlowPlant_CollectThick_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffectForPerfWithRespectToWind_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffectForPerfWithRespectToWind () const
      {
        return this->SimFlowPlant_EffectForPerfWithRespectToWind_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_EffectForPerfWithRespectToWind_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffectForPerfWithRespectToWind ()
      {
        return this->SimFlowPlant_EffectForPerfWithRespectToWind_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffectForPerfWithRespectToWind (const SimFlowPlant_EffectForPerfWithRespectToWind_type& x)
      {
        this->SimFlowPlant_EffectForPerfWithRespectToWind_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_EffectForPerfWithRespectToWind (const SimFlowPlant_EffectForPerfWithRespectToWind_optional& x)
      {
        this->SimFlowPlant_EffectForPerfWithRespectToWind_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow () const
      {
        return this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow ()
      {
        return this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow (const SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_type& x)
      {
        this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow (const SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& x)
      {
        this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SurfName_1_10_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SurfName_1_10 () const
      {
        return this->SimFlowPlant_SurfName_1_10_;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::SimFlowPlant_SurfName_1_10_optional& SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SurfName_1_10 ()
      {
        return this->SimFlowPlant_SurfName_1_10_;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SurfName_1_10 (const SimFlowPlant_SurfName_1_10_type& x)
      {
        this->SimFlowPlant_SurfName_1_10_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SurfName_1_10 (const SimFlowPlant_SurfName_1_10_optional& x)
      {
        this->SimFlowPlant_SurfName_1_10_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SurfName_1_10 (::std::auto_ptr< SimFlowPlant_SurfName_1_10_type > x)
      {
        this->SimFlowPlant_SurfName_1_10_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarThermalAir
      //

      SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarDevice_SolarThermalAir (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (RefId),
        SimFlowPlant_InNodeName_ (this),
        SimFlowPlant_OutNodeName_ (this),
        SimFlowPlant_BoundaryCondModelName_ (this),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_SetpointNodeName_ (this),
        SimFlowPlant_ZoneNodeName_ (this),
        SimFlowPlant_FreeHeatingSetpointSchedName_ (this),
        SimFlowPlant_DiamPerfCollect_ (this),
        SimFlowPlant_DistBetweenPerfCollect_ (this),
        SimFlowPlant_ThermalEmisCollectSurf_ (this),
        SimFlowPlant_SolarAbsorbCollectSurf_ (this),
        SimFlowPlant_EffecOverallHeightCollect_ (this),
        SimFlowPlant_EffecGapThickPlenumBehindCollect_ (this),
        SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_ (this),
        SimFlowPlant_HoleLayoutPatternForPitch_ (this),
        SimFlowPlant_HeatExchangeEffectCorrel_ (this),
        SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_ (this),
        SimFlowPlant_RoughCollect_ (this),
        SimFlowPlant_CollectThick_ (this),
        SimFlowPlant_EffectForPerfWithRespectToWind_ (this),
        SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_ (this),
        SimFlowPlant_SurfName_1_10_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarDevice_SolarThermalAir (const SimFlowPlant_SolarDevice_SolarThermalAir& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (x, f, c),
        SimFlowPlant_InNodeName_ (x.SimFlowPlant_InNodeName_, f, this),
        SimFlowPlant_OutNodeName_ (x.SimFlowPlant_OutNodeName_, f, this),
        SimFlowPlant_BoundaryCondModelName_ (x.SimFlowPlant_BoundaryCondModelName_, f, this),
        SimFlowPlant_AvailSchedName_ (x.SimFlowPlant_AvailSchedName_, f, this),
        SimFlowPlant_SetpointNodeName_ (x.SimFlowPlant_SetpointNodeName_, f, this),
        SimFlowPlant_ZoneNodeName_ (x.SimFlowPlant_ZoneNodeName_, f, this),
        SimFlowPlant_FreeHeatingSetpointSchedName_ (x.SimFlowPlant_FreeHeatingSetpointSchedName_, f, this),
        SimFlowPlant_DiamPerfCollect_ (x.SimFlowPlant_DiamPerfCollect_, f, this),
        SimFlowPlant_DistBetweenPerfCollect_ (x.SimFlowPlant_DistBetweenPerfCollect_, f, this),
        SimFlowPlant_ThermalEmisCollectSurf_ (x.SimFlowPlant_ThermalEmisCollectSurf_, f, this),
        SimFlowPlant_SolarAbsorbCollectSurf_ (x.SimFlowPlant_SolarAbsorbCollectSurf_, f, this),
        SimFlowPlant_EffecOverallHeightCollect_ (x.SimFlowPlant_EffecOverallHeightCollect_, f, this),
        SimFlowPlant_EffecGapThickPlenumBehindCollect_ (x.SimFlowPlant_EffecGapThickPlenumBehindCollect_, f, this),
        SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_ (x.SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_, f, this),
        SimFlowPlant_HoleLayoutPatternForPitch_ (x.SimFlowPlant_HoleLayoutPatternForPitch_, f, this),
        SimFlowPlant_HeatExchangeEffectCorrel_ (x.SimFlowPlant_HeatExchangeEffectCorrel_, f, this),
        SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_ (x.SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_, f, this),
        SimFlowPlant_RoughCollect_ (x.SimFlowPlant_RoughCollect_, f, this),
        SimFlowPlant_CollectThick_ (x.SimFlowPlant_CollectThick_, f, this),
        SimFlowPlant_EffectForPerfWithRespectToWind_ (x.SimFlowPlant_EffectForPerfWithRespectToWind_, f, this),
        SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_ (x.SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_, f, this),
        SimFlowPlant_SurfName_1_10_ (x.SimFlowPlant_SurfName_1_10_, f, this)
      {
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::
      SimFlowPlant_SolarDevice_SolarThermalAir (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_InNodeName_ (this),
        SimFlowPlant_OutNodeName_ (this),
        SimFlowPlant_BoundaryCondModelName_ (this),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_SetpointNodeName_ (this),
        SimFlowPlant_ZoneNodeName_ (this),
        SimFlowPlant_FreeHeatingSetpointSchedName_ (this),
        SimFlowPlant_DiamPerfCollect_ (this),
        SimFlowPlant_DistBetweenPerfCollect_ (this),
        SimFlowPlant_ThermalEmisCollectSurf_ (this),
        SimFlowPlant_SolarAbsorbCollectSurf_ (this),
        SimFlowPlant_EffecOverallHeightCollect_ (this),
        SimFlowPlant_EffecGapThickPlenumBehindCollect_ (this),
        SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_ (this),
        SimFlowPlant_HoleLayoutPatternForPitch_ (this),
        SimFlowPlant_HeatExchangeEffectCorrel_ (this),
        SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_ (this),
        SimFlowPlant_RoughCollect_ (this),
        SimFlowPlant_CollectThick_ (this),
        SimFlowPlant_EffectForPerfWithRespectToWind_ (this),
        SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_ (this),
        SimFlowPlant_SurfName_1_10_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_SolarDevice_SolarThermalAir::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_InNodeName
          //
          if (n.name () == "SimFlowPlant_InNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_InNodeName_type > r (
              SimFlowPlant_InNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_InNodeName_)
            {
              this->SimFlowPlant_InNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_OutNodeName
          //
          if (n.name () == "SimFlowPlant_OutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_OutNodeName_type > r (
              SimFlowPlant_OutNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_OutNodeName_)
            {
              this->SimFlowPlant_OutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BoundaryCondModelName
          //
          if (n.name () == "SimFlowPlant_BoundaryCondModelName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BoundaryCondModelName_type > r (
              SimFlowPlant_BoundaryCondModelName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BoundaryCondModelName_)
            {
              this->SimFlowPlant_BoundaryCondModelName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AvailSchedName
          //
          if (n.name () == "SimFlowPlant_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AvailSchedName_type > r (
              SimFlowPlant_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AvailSchedName_)
            {
              this->SimFlowPlant_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SetpointNodeName
          //
          if (n.name () == "SimFlowPlant_SetpointNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SetpointNodeName_type > r (
              SimFlowPlant_SetpointNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SetpointNodeName_)
            {
              this->SimFlowPlant_SetpointNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ZoneNodeName
          //
          if (n.name () == "SimFlowPlant_ZoneNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ZoneNodeName_type > r (
              SimFlowPlant_ZoneNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ZoneNodeName_)
            {
              this->SimFlowPlant_ZoneNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_FreeHeatingSetpointSchedName
          //
          if (n.name () == "SimFlowPlant_FreeHeatingSetpointSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_FreeHeatingSetpointSchedName_type > r (
              SimFlowPlant_FreeHeatingSetpointSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_FreeHeatingSetpointSchedName_)
            {
              this->SimFlowPlant_FreeHeatingSetpointSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DiamPerfCollect
          //
          if (n.name () == "SimFlowPlant_DiamPerfCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DiamPerfCollect_)
            {
              this->SimFlowPlant_DiamPerfCollect_.set (SimFlowPlant_DiamPerfCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DistBetweenPerfCollect
          //
          if (n.name () == "SimFlowPlant_DistBetweenPerfCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DistBetweenPerfCollect_)
            {
              this->SimFlowPlant_DistBetweenPerfCollect_.set (SimFlowPlant_DistBetweenPerfCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ThermalEmisCollectSurf
          //
          if (n.name () == "SimFlowPlant_ThermalEmisCollectSurf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ThermalEmisCollectSurf_)
            {
              this->SimFlowPlant_ThermalEmisCollectSurf_.set (SimFlowPlant_ThermalEmisCollectSurf_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SolarAbsorbCollectSurf
          //
          if (n.name () == "SimFlowPlant_SolarAbsorbCollectSurf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_SolarAbsorbCollectSurf_)
            {
              this->SimFlowPlant_SolarAbsorbCollectSurf_.set (SimFlowPlant_SolarAbsorbCollectSurf_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EffecOverallHeightCollect
          //
          if (n.name () == "SimFlowPlant_EffecOverallHeightCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_EffecOverallHeightCollect_)
            {
              this->SimFlowPlant_EffecOverallHeightCollect_.set (SimFlowPlant_EffecOverallHeightCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EffecGapThickPlenumBehindCollect
          //
          if (n.name () == "SimFlowPlant_EffecGapThickPlenumBehindCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_EffecGapThickPlenumBehindCollect_)
            {
              this->SimFlowPlant_EffecGapThickPlenumBehindCollect_.set (SimFlowPlant_EffecGapThickPlenumBehindCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect
          //
          if (n.name () == "SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_)
            {
              this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_.set (SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HoleLayoutPatternForPitch
          //
          if (n.name () == "SimFlowPlant_HoleLayoutPatternForPitch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HoleLayoutPatternForPitch_type > r (
              SimFlowPlant_HoleLayoutPatternForPitch_traits::create (i, f, this));

            if (!this->SimFlowPlant_HoleLayoutPatternForPitch_)
            {
              this->SimFlowPlant_HoleLayoutPatternForPitch_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatExchangeEffectCorrel
          //
          if (n.name () == "SimFlowPlant_HeatExchangeEffectCorrel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatExchangeEffectCorrel_type > r (
              SimFlowPlant_HeatExchangeEffectCorrel_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatExchangeEffectCorrel_)
            {
              this->SimFlowPlant_HeatExchangeEffectCorrel_.set (r);
              continue;
            }
          }

          // SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea
          //
          if (n.name () == "SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_)
            {
              this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_.set (SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RoughCollect
          //
          if (n.name () == "SimFlowPlant_RoughCollect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_RoughCollect_type > r (
              SimFlowPlant_RoughCollect_traits::create (i, f, this));

            if (!this->SimFlowPlant_RoughCollect_)
            {
              this->SimFlowPlant_RoughCollect_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CollectThick
          //
          if (n.name () == "SimFlowPlant_CollectThick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CollectThick_)
            {
              this->SimFlowPlant_CollectThick_.set (SimFlowPlant_CollectThick_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EffectForPerfWithRespectToWind
          //
          if (n.name () == "SimFlowPlant_EffectForPerfWithRespectToWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_EffectForPerfWithRespectToWind_)
            {
              this->SimFlowPlant_EffectForPerfWithRespectToWind_.set (SimFlowPlant_EffectForPerfWithRespectToWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow
          //
          if (n.name () == "SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_)
            {
              this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_.set (SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SurfName_1_10
          //
          if (n.name () == "SimFlowPlant_SurfName_1_10" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SurfName_1_10_type > r (
              SimFlowPlant_SurfName_1_10_traits::create (i, f, this));

            if (!this->SimFlowPlant_SurfName_1_10_)
            {
              this->SimFlowPlant_SurfName_1_10_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_SolarDevice_SolarThermalAir* SimFlowPlant_SolarDevice_SolarThermalAir::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_SolarDevice_SolarThermalAir (*this, f, c);
      }

      SimFlowPlant_SolarDevice_SolarThermalAir& SimFlowPlant_SolarDevice_SolarThermalAir::
      operator= (const SimFlowPlant_SolarDevice_SolarThermalAir& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice& > (*this) = x;
          this->SimFlowPlant_InNodeName_ = x.SimFlowPlant_InNodeName_;
          this->SimFlowPlant_OutNodeName_ = x.SimFlowPlant_OutNodeName_;
          this->SimFlowPlant_BoundaryCondModelName_ = x.SimFlowPlant_BoundaryCondModelName_;
          this->SimFlowPlant_AvailSchedName_ = x.SimFlowPlant_AvailSchedName_;
          this->SimFlowPlant_SetpointNodeName_ = x.SimFlowPlant_SetpointNodeName_;
          this->SimFlowPlant_ZoneNodeName_ = x.SimFlowPlant_ZoneNodeName_;
          this->SimFlowPlant_FreeHeatingSetpointSchedName_ = x.SimFlowPlant_FreeHeatingSetpointSchedName_;
          this->SimFlowPlant_DiamPerfCollect_ = x.SimFlowPlant_DiamPerfCollect_;
          this->SimFlowPlant_DistBetweenPerfCollect_ = x.SimFlowPlant_DistBetweenPerfCollect_;
          this->SimFlowPlant_ThermalEmisCollectSurf_ = x.SimFlowPlant_ThermalEmisCollectSurf_;
          this->SimFlowPlant_SolarAbsorbCollectSurf_ = x.SimFlowPlant_SolarAbsorbCollectSurf_;
          this->SimFlowPlant_EffecOverallHeightCollect_ = x.SimFlowPlant_EffecOverallHeightCollect_;
          this->SimFlowPlant_EffecGapThickPlenumBehindCollect_ = x.SimFlowPlant_EffecGapThickPlenumBehindCollect_;
          this->SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_ = x.SimFlowPlant_EffecCrossSectionAreaPlenumBehindCollect_;
          this->SimFlowPlant_HoleLayoutPatternForPitch_ = x.SimFlowPlant_HoleLayoutPatternForPitch_;
          this->SimFlowPlant_HeatExchangeEffectCorrel_ = x.SimFlowPlant_HeatExchangeEffectCorrel_;
          this->SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_ = x.SimFlowPlant_RatioActCollectSurfAreaToProjSurfArea_;
          this->SimFlowPlant_RoughCollect_ = x.SimFlowPlant_RoughCollect_;
          this->SimFlowPlant_CollectThick_ = x.SimFlowPlant_CollectThick_;
          this->SimFlowPlant_EffectForPerfWithRespectToWind_ = x.SimFlowPlant_EffectForPerfWithRespectToWind_;
          this->SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_ = x.SimFlowPlant_DischargeCoefForOpngsBuoyancyDrivenFlow_;
          this->SimFlowPlant_SurfName_1_10_ = x.SimFlowPlant_SurfName_1_10_;
        }

        return *this;
      }

      SimFlowPlant_SolarDevice_SolarThermalAir::
      ~SimFlowPlant_SolarDevice_SolarThermalAir ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

