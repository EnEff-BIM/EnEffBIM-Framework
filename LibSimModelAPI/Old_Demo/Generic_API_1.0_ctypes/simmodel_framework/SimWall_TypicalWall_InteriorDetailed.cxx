// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWall_TypicalWall_InteriorDetailed.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWall_TypicalWall_InteriorDetailed
      // 

      const SimWall_TypicalWall_InteriorDetailed::SimWall_ConstructionName_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ConstructionName () const
      {
        return this->SimWall_ConstructionName_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_ConstructionName_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ConstructionName ()
      {
        return this->SimWall_ConstructionName_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ConstructionName (const SimWall_ConstructionName_type& x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ConstructionName (const SimWall_ConstructionName_optional& x)
      {
        this->SimWall_ConstructionName_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ConstructionName (::std::auto_ptr< SimWall_ConstructionName_type > x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_ZoneName_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ZoneName () const
      {
        return this->SimWall_ZoneName_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_ZoneName_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ZoneName ()
      {
        return this->SimWall_ZoneName_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ZoneName (const SimWall_ZoneName_type& x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ZoneName (const SimWall_ZoneName_optional& x)
      {
        this->SimWall_ZoneName_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ZoneName (::std::auto_ptr< SimWall_ZoneName_type > x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_OutsdBndCond_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCond () const
      {
        return this->SimWall_OutsdBndCond_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_OutsdBndCond_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCond ()
      {
        return this->SimWall_OutsdBndCond_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCond (const SimWall_OutsdBndCond_type& x)
      {
        this->SimWall_OutsdBndCond_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCond (const SimWall_OutsdBndCond_optional& x)
      {
        this->SimWall_OutsdBndCond_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCond (::std::auto_ptr< SimWall_OutsdBndCond_type > x)
      {
        this->SimWall_OutsdBndCond_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_OutsdBndCondObject_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCondObject () const
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_OutsdBndCondObject_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCondObject ()
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_type& x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_optional& x)
      {
        this->SimWall_OutsdBndCondObject_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_OutsdBndCondObject (::std::auto_ptr< SimWall_OutsdBndCondObject_type > x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_SunExposure_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_SunExposure () const
      {
        return this->SimWall_SunExposure_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_SunExposure_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_SunExposure ()
      {
        return this->SimWall_SunExposure_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_SunExposure (const SimWall_SunExposure_type& x)
      {
        this->SimWall_SunExposure_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_SunExposure (const SimWall_SunExposure_optional& x)
      {
        this->SimWall_SunExposure_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_SunExposure (::std::auto_ptr< SimWall_SunExposure_type > x)
      {
        this->SimWall_SunExposure_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_WindExposure_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_WindExposure () const
      {
        return this->SimWall_WindExposure_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_WindExposure_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_WindExposure ()
      {
        return this->SimWall_WindExposure_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_WindExposure (const SimWall_WindExposure_type& x)
      {
        this->SimWall_WindExposure_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_WindExposure (const SimWall_WindExposure_optional& x)
      {
        this->SimWall_WindExposure_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_WindExposure (::std::auto_ptr< SimWall_WindExposure_type > x)
      {
        this->SimWall_WindExposure_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_ViewFactToGnd_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ViewFactToGnd () const
      {
        return this->SimWall_ViewFactToGnd_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_ViewFactToGnd_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_ViewFactToGnd ()
      {
        return this->SimWall_ViewFactToGnd_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ViewFactToGnd (const SimWall_ViewFactToGnd_type& x)
      {
        this->SimWall_ViewFactToGnd_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_ViewFactToGnd (const SimWall_ViewFactToGnd_optional& x)
      {
        this->SimWall_ViewFactToGnd_ = x;
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_NumbVerts_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_NumbVerts () const
      {
        return this->SimWall_NumbVerts_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_NumbVerts_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_NumbVerts ()
      {
        return this->SimWall_NumbVerts_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_NumbVerts (const SimWall_NumbVerts_type& x)
      {
        this->SimWall_NumbVerts_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_NumbVerts (const SimWall_NumbVerts_optional& x)
      {
        this->SimWall_NumbVerts_ = x;
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_VertexXCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexXCoord_1_10 () const
      {
        return this->SimWall_VertexXCoord_1_10_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_VertexXCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexXCoord_1_10 ()
      {
        return this->SimWall_VertexXCoord_1_10_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexXCoord_1_10 (const SimWall_VertexXCoord_1_10_type& x)
      {
        this->SimWall_VertexXCoord_1_10_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexXCoord_1_10 (const SimWall_VertexXCoord_1_10_optional& x)
      {
        this->SimWall_VertexXCoord_1_10_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexXCoord_1_10 (::std::auto_ptr< SimWall_VertexXCoord_1_10_type > x)
      {
        this->SimWall_VertexXCoord_1_10_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_VertexYCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexYCoord_1_10 () const
      {
        return this->SimWall_VertexYCoord_1_10_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_VertexYCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexYCoord_1_10 ()
      {
        return this->SimWall_VertexYCoord_1_10_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexYCoord_1_10 (const SimWall_VertexYCoord_1_10_type& x)
      {
        this->SimWall_VertexYCoord_1_10_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexYCoord_1_10 (const SimWall_VertexYCoord_1_10_optional& x)
      {
        this->SimWall_VertexYCoord_1_10_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexYCoord_1_10 (::std::auto_ptr< SimWall_VertexYCoord_1_10_type > x)
      {
        this->SimWall_VertexYCoord_1_10_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SimWall_VertexZCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexZCoord_1_10 () const
      {
        return this->SimWall_VertexZCoord_1_10_;
      }

      SimWall_TypicalWall_InteriorDetailed::SimWall_VertexZCoord_1_10_optional& SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexZCoord_1_10 ()
      {
        return this->SimWall_VertexZCoord_1_10_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexZCoord_1_10 (const SimWall_VertexZCoord_1_10_type& x)
      {
        this->SimWall_VertexZCoord_1_10_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexZCoord_1_10 (const SimWall_VertexZCoord_1_10_optional& x)
      {
        this->SimWall_VertexZCoord_1_10_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SimWall_VertexZCoord_1_10 (::std::auto_ptr< SimWall_VertexZCoord_1_10_type > x)
      {
        this->SimWall_VertexZCoord_1_10_.set (x);
      }

      const SimWall_TypicalWall_InteriorDetailed::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_TypicalWall_InteriorDetailed::
      SurfProp_HeatTransAlg_MultSurf_SurfType () const
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      SimWall_TypicalWall_InteriorDetailed::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_TypicalWall_InteriorDetailed::
      SurfProp_HeatTransAlg_MultSurf_SurfType ()
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_type& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_optional& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x;
      }

      void SimWall_TypicalWall_InteriorDetailed::
      SurfProp_HeatTransAlg_MultSurf_SurfType (::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWall_TypicalWall_InteriorDetailed
      //

      SimWall_TypicalWall_InteriorDetailed::
      SimWall_TypicalWall_InteriorDetailed (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (RefId),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCond_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_SunExposure_ (this),
        SimWall_WindExposure_ (this),
        SimWall_ViewFactToGnd_ (this),
        SimWall_NumbVerts_ (this),
        SimWall_VertexXCoord_1_10_ (this),
        SimWall_VertexYCoord_1_10_ (this),
        SimWall_VertexZCoord_1_10_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this)
      {
      }

      SimWall_TypicalWall_InteriorDetailed::
      SimWall_TypicalWall_InteriorDetailed (const SimWall_TypicalWall_InteriorDetailed& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (x, f, c),
        SimWall_ConstructionName_ (x.SimWall_ConstructionName_, f, this),
        SimWall_ZoneName_ (x.SimWall_ZoneName_, f, this),
        SimWall_OutsdBndCond_ (x.SimWall_OutsdBndCond_, f, this),
        SimWall_OutsdBndCondObject_ (x.SimWall_OutsdBndCondObject_, f, this),
        SimWall_SunExposure_ (x.SimWall_SunExposure_, f, this),
        SimWall_WindExposure_ (x.SimWall_WindExposure_, f, this),
        SimWall_ViewFactToGnd_ (x.SimWall_ViewFactToGnd_, f, this),
        SimWall_NumbVerts_ (x.SimWall_NumbVerts_, f, this),
        SimWall_VertexXCoord_1_10_ (x.SimWall_VertexXCoord_1_10_, f, this),
        SimWall_VertexYCoord_1_10_ (x.SimWall_VertexYCoord_1_10_, f, this),
        SimWall_VertexZCoord_1_10_ (x.SimWall_VertexZCoord_1_10_, f, this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (x.SurfProp_HeatTransAlg_MultSurf_SurfType_, f, this)
      {
      }

      SimWall_TypicalWall_InteriorDetailed::
      SimWall_TypicalWall_InteriorDetailed (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (e, f | ::xml_schema::flags::base, c),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCond_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_SunExposure_ (this),
        SimWall_WindExposure_ (this),
        SimWall_ViewFactToGnd_ (this),
        SimWall_NumbVerts_ (this),
        SimWall_VertexXCoord_1_10_ (this),
        SimWall_VertexYCoord_1_10_ (this),
        SimWall_VertexZCoord_1_10_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWall_TypicalWall_InteriorDetailed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimWall_TypicalWall::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWall_ConstructionName
          //
          if (n.name () == "SimWall_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ConstructionName_type > r (
              SimWall_ConstructionName_traits::create (i, f, this));

            if (!this->SimWall_ConstructionName_)
            {
              this->SimWall_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWall_ZoneName
          //
          if (n.name () == "SimWall_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ZoneName_type > r (
              SimWall_ZoneName_traits::create (i, f, this));

            if (!this->SimWall_ZoneName_)
            {
              this->SimWall_ZoneName_.set (r);
              continue;
            }
          }

          // SimWall_OutsdBndCond
          //
          if (n.name () == "SimWall_OutsdBndCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_OutsdBndCond_type > r (
              SimWall_OutsdBndCond_traits::create (i, f, this));

            if (!this->SimWall_OutsdBndCond_)
            {
              this->SimWall_OutsdBndCond_.set (r);
              continue;
            }
          }

          // SimWall_OutsdBndCondObject
          //
          if (n.name () == "SimWall_OutsdBndCondObject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_OutsdBndCondObject_type > r (
              SimWall_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWall_OutsdBndCondObject_)
            {
              this->SimWall_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWall_SunExposure
          //
          if (n.name () == "SimWall_SunExposure" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_SunExposure_type > r (
              SimWall_SunExposure_traits::create (i, f, this));

            if (!this->SimWall_SunExposure_)
            {
              this->SimWall_SunExposure_.set (r);
              continue;
            }
          }

          // SimWall_WindExposure
          //
          if (n.name () == "SimWall_WindExposure" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_WindExposure_type > r (
              SimWall_WindExposure_traits::create (i, f, this));

            if (!this->SimWall_WindExposure_)
            {
              this->SimWall_WindExposure_.set (r);
              continue;
            }
          }

          // SimWall_ViewFactToGnd
          //
          if (n.name () == "SimWall_ViewFactToGnd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_ViewFactToGnd_)
            {
              this->SimWall_ViewFactToGnd_.set (SimWall_ViewFactToGnd_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_NumbVerts
          //
          if (n.name () == "SimWall_NumbVerts" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_NumbVerts_)
            {
              this->SimWall_NumbVerts_.set (SimWall_NumbVerts_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_VertexXCoord_1_10
          //
          if (n.name () == "SimWall_VertexXCoord_1_10" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_VertexXCoord_1_10_type > r (
              SimWall_VertexXCoord_1_10_traits::create (i, f, this));

            if (!this->SimWall_VertexXCoord_1_10_)
            {
              this->SimWall_VertexXCoord_1_10_.set (r);
              continue;
            }
          }

          // SimWall_VertexYCoord_1_10
          //
          if (n.name () == "SimWall_VertexYCoord_1_10" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_VertexYCoord_1_10_type > r (
              SimWall_VertexYCoord_1_10_traits::create (i, f, this));

            if (!this->SimWall_VertexYCoord_1_10_)
            {
              this->SimWall_VertexYCoord_1_10_.set (r);
              continue;
            }
          }

          // SimWall_VertexZCoord_1_10
          //
          if (n.name () == "SimWall_VertexZCoord_1_10" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_VertexZCoord_1_10_type > r (
              SimWall_VertexZCoord_1_10_traits::create (i, f, this));

            if (!this->SimWall_VertexZCoord_1_10_)
            {
              this->SimWall_VertexZCoord_1_10_.set (r);
              continue;
            }
          }

          // SurfProp_HeatTransAlg_MultSurf_SurfType
          //
          if (n.name () == "SurfProp_HeatTransAlg_MultSurf_SurfType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > r (
              SurfProp_HeatTransAlg_MultSurf_SurfType_traits::create (i, f, this));

            if (!this->SurfProp_HeatTransAlg_MultSurf_SurfType_)
            {
              this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWall_TypicalWall_InteriorDetailed* SimWall_TypicalWall_InteriorDetailed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWall_TypicalWall_InteriorDetailed (*this, f, c);
      }

      SimWall_TypicalWall_InteriorDetailed& SimWall_TypicalWall_InteriorDetailed::
      operator= (const SimWall_TypicalWall_InteriorDetailed& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimWall_TypicalWall& > (*this) = x;
          this->SimWall_ConstructionName_ = x.SimWall_ConstructionName_;
          this->SimWall_ZoneName_ = x.SimWall_ZoneName_;
          this->SimWall_OutsdBndCond_ = x.SimWall_OutsdBndCond_;
          this->SimWall_OutsdBndCondObject_ = x.SimWall_OutsdBndCondObject_;
          this->SimWall_SunExposure_ = x.SimWall_SunExposure_;
          this->SimWall_WindExposure_ = x.SimWall_WindExposure_;
          this->SimWall_ViewFactToGnd_ = x.SimWall_ViewFactToGnd_;
          this->SimWall_NumbVerts_ = x.SimWall_NumbVerts_;
          this->SimWall_VertexXCoord_1_10_ = x.SimWall_VertexXCoord_1_10_;
          this->SimWall_VertexYCoord_1_10_ = x.SimWall_VertexYCoord_1_10_;
          this->SimWall_VertexZCoord_1_10_ = x.SimWall_VertexZCoord_1_10_;
          this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x.SurfProp_HeatTransAlg_MultSurf_SurfType_;
        }

        return *this;
      }

      SimWall_TypicalWall_InteriorDetailed::
      ~SimWall_TypicalWall_InteriorDetailed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

