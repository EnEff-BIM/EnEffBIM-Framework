// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_Blind.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Blind
      // 

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatWidth_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatWidth () const
      {
        return this->SimMaterial_SlatWidth_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatWidth_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatWidth ()
      {
        return this->SimMaterial_SlatWidth_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_type& x)
      {
        this->SimMaterial_SlatWidth_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_optional& x)
      {
        this->SimMaterial_SlatWidth_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatThick_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatThick () const
      {
        return this->SimMaterial_SlatThick_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatThick_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatThick ()
      {
        return this->SimMaterial_SlatThick_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatThick (const SimMaterial_SlatThick_type& x)
      {
        this->SimMaterial_SlatThick_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatThick (const SimMaterial_SlatThick_optional& x)
      {
        this->SimMaterial_SlatThick_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatAngle () const
      {
        return this->SimMaterial_SlatAngle_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatAngle ()
      {
        return this->SimMaterial_SlatAngle_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_type& x)
      {
        this->SimMaterial_SlatAngle_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_optional& x)
      {
        this->SimMaterial_SlatAngle_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatCond_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatCond () const
      {
        return this->SimMaterial_SlatCond_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatCond_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatCond ()
      {
        return this->SimMaterial_SlatCond_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatCond (const SimMaterial_SlatCond_type& x)
      {
        this->SimMaterial_SlatCond_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatCond (const SimMaterial_SlatCond_optional& x)
      {
        this->SimMaterial_SlatCond_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatOrientation_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatOrientation () const
      {
        return this->SimMaterial_SlatOrientation_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatOrientation_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatOrientation ()
      {
        return this->SimMaterial_SlatOrientation_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatOrientation (const SimMaterial_SlatOrientation_type& x)
      {
        this->SimMaterial_SlatOrientation_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatOrientation (const SimMaterial_SlatOrientation_optional& x)
      {
        this->SimMaterial_SlatOrientation_ = x;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatOrientation (::std::auto_ptr< SimMaterial_SlatOrientation_type > x)
      {
        this->SimMaterial_SlatOrientation_.set (x);
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatSeparation_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatSeparation () const
      {
        return this->SimMaterial_SlatSeparation_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatSeparation_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatSeparation ()
      {
        return this->SimMaterial_SlatSeparation_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatSeparation (const SimMaterial_SlatSeparation_type& x)
      {
        this->SimMaterial_SlatSeparation_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatSeparation (const SimMaterial_SlatSeparation_optional& x)
      {
        this->SimMaterial_SlatSeparation_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatBeamSolarTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamSolarTrans () const
      {
        return this->SimMaterial_SlatBeamSolarTrans_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatBeamSolarTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamSolarTrans ()
      {
        return this->SimMaterial_SlatBeamSolarTrans_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamSolarTrans (const SimMaterial_SlatBeamSolarTrans_type& x)
      {
        this->SimMaterial_SlatBeamSolarTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamSolarTrans (const SimMaterial_SlatBeamSolarTrans_optional& x)
      {
        this->SimMaterial_SlatBeamSolarTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatBeamSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamSolarReflect () const
      {
        return this->SimMaterial_FrontSideSlatBeamSolarReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatBeamSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamSolarReflect ()
      {
        return this->SimMaterial_FrontSideSlatBeamSolarReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamSolarReflect (const SimMaterial_FrontSideSlatBeamSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatBeamSolarReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamSolarReflect (const SimMaterial_FrontSideSlatBeamSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeamSolarReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatBeamSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamSolarReflect () const
      {
        return this->SimMaterial_BackSideSlatBeamSolarReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatBeamSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamSolarReflect ()
      {
        return this->SimMaterial_BackSideSlatBeamSolarReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamSolarReflect (const SimMaterial_BackSideSlatBeamSolarReflect_type& x)
      {
        this->SimMaterial_BackSideSlatBeamSolarReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamSolarReflect (const SimMaterial_BackSideSlatBeamSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatBeamSolarReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatDiffuseSolarTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseSolarTrans () const
      {
        return this->SimMaterial_SlatDiffuseSolarTrans_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatDiffuseSolarTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseSolarTrans ()
      {
        return this->SimMaterial_SlatDiffuseSolarTrans_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseSolarTrans (const SimMaterial_SlatDiffuseSolarTrans_type& x)
      {
        this->SimMaterial_SlatDiffuseSolarTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseSolarTrans (const SimMaterial_SlatDiffuseSolarTrans_optional& x)
      {
        this->SimMaterial_SlatDiffuseSolarTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuseSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseSolarReflect () const
      {
        return this->SimMaterial_FrontSideSlatDiffuseSolarReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuseSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseSolarReflect ()
      {
        return this->SimMaterial_FrontSideSlatDiffuseSolarReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseSolarReflect (const SimMaterial_FrontSideSlatDiffuseSolarReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatDiffuseSolarReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseSolarReflect (const SimMaterial_FrontSideSlatDiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatDiffuseSolarReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuseSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseSolarReflect () const
      {
        return this->SimMaterial_BackSideSlatDiffuseSolarReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuseSolarReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseSolarReflect ()
      {
        return this->SimMaterial_BackSideSlatDiffuseSolarReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseSolarReflect (const SimMaterial_BackSideSlatDiffuseSolarReflect_type& x)
      {
        this->SimMaterial_BackSideSlatDiffuseSolarReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseSolarReflect (const SimMaterial_BackSideSlatDiffuseSolarReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatDiffuseSolarReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatBeamVisTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamVisTrans () const
      {
        return this->SimMaterial_SlatBeamVisTrans_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatBeamVisTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamVisTrans ()
      {
        return this->SimMaterial_SlatBeamVisTrans_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamVisTrans (const SimMaterial_SlatBeamVisTrans_type& x)
      {
        this->SimMaterial_SlatBeamVisTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatBeamVisTrans (const SimMaterial_SlatBeamVisTrans_optional& x)
      {
        this->SimMaterial_SlatBeamVisTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatBeamVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamVisReflect () const
      {
        return this->SimMaterial_FrontSideSlatBeamVisReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatBeamVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamVisReflect ()
      {
        return this->SimMaterial_FrontSideSlatBeamVisReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamVisReflect (const SimMaterial_FrontSideSlatBeamVisReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatBeamVisReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatBeamVisReflect (const SimMaterial_FrontSideSlatBeamVisReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatBeamVisReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatBeamVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamVisReflect () const
      {
        return this->SimMaterial_BackSideSlatBeamVisReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatBeamVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamVisReflect ()
      {
        return this->SimMaterial_BackSideSlatBeamVisReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamVisReflect (const SimMaterial_BackSideSlatBeamVisReflect_type& x)
      {
        this->SimMaterial_BackSideSlatBeamVisReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatBeamVisReflect (const SimMaterial_BackSideSlatBeamVisReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatBeamVisReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatDiffuseVisTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseVisTrans () const
      {
        return this->SimMaterial_SlatDiffuseVisTrans_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatDiffuseVisTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseVisTrans ()
      {
        return this->SimMaterial_SlatDiffuseVisTrans_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseVisTrans (const SimMaterial_SlatDiffuseVisTrans_type& x)
      {
        this->SimMaterial_SlatDiffuseVisTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatDiffuseVisTrans (const SimMaterial_SlatDiffuseVisTrans_optional& x)
      {
        this->SimMaterial_SlatDiffuseVisTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuseVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseVisReflect () const
      {
        return this->SimMaterial_FrontSideSlatDiffuseVisReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatDiffuseVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseVisReflect ()
      {
        return this->SimMaterial_FrontSideSlatDiffuseVisReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseVisReflect (const SimMaterial_FrontSideSlatDiffuseVisReflect_type& x)
      {
        this->SimMaterial_FrontSideSlatDiffuseVisReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatDiffuseVisReflect (const SimMaterial_FrontSideSlatDiffuseVisReflect_optional& x)
      {
        this->SimMaterial_FrontSideSlatDiffuseVisReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuseVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseVisReflect () const
      {
        return this->SimMaterial_BackSideSlatDiffuseVisReflect_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatDiffuseVisReflect_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseVisReflect ()
      {
        return this->SimMaterial_BackSideSlatDiffuseVisReflect_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseVisReflect (const SimMaterial_BackSideSlatDiffuseVisReflect_type& x)
      {
        this->SimMaterial_BackSideSlatDiffuseVisReflect_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatDiffuseVisReflect (const SimMaterial_BackSideSlatDiffuseVisReflect_optional& x)
      {
        this->SimMaterial_BackSideSlatDiffuseVisReflect_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatInfraredHemisphTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatInfraredHemisphTrans () const
      {
        return this->SimMaterial_SlatInfraredHemisphTrans_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_SlatInfraredHemisphTrans_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatInfraredHemisphTrans ()
      {
        return this->SimMaterial_SlatInfraredHemisphTrans_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatInfraredHemisphTrans (const SimMaterial_SlatInfraredHemisphTrans_type& x)
      {
        this->SimMaterial_SlatInfraredHemisphTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_SlatInfraredHemisphTrans (const SimMaterial_SlatInfraredHemisphTrans_optional& x)
      {
        this->SimMaterial_SlatInfraredHemisphTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredHemisphEmis () const
      {
        return this->SimMaterial_FrontSideSlatInfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_FrontSideSlatInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredHemisphEmis ()
      {
        return this->SimMaterial_FrontSideSlatInfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredHemisphEmis (const SimMaterial_FrontSideSlatInfraredHemisphEmis_type& x)
      {
        this->SimMaterial_FrontSideSlatInfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_FrontSideSlatInfraredHemisphEmis (const SimMaterial_FrontSideSlatInfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_FrontSideSlatInfraredHemisphEmis_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredHemisphEmis () const
      {
        return this->SimMaterial_BackSideSlatInfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BackSideSlatInfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredHemisphEmis ()
      {
        return this->SimMaterial_BackSideSlatInfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredHemisphEmis (const SimMaterial_BackSideSlatInfraredHemisphEmis_type& x)
      {
        this->SimMaterial_BackSideSlatInfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BackSideSlatInfraredHemisphEmis (const SimMaterial_BackSideSlatInfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_BackSideSlatInfraredHemisphEmis_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindToGlassDist_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindToGlassDist () const
      {
        return this->SimMaterial_BlindToGlassDist_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindToGlassDist_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindToGlassDist ()
      {
        return this->SimMaterial_BlindToGlassDist_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindToGlassDist (const SimMaterial_BlindToGlassDist_type& x)
      {
        this->SimMaterial_BlindToGlassDist_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindToGlassDist (const SimMaterial_BlindToGlassDist_optional& x)
      {
        this->SimMaterial_BlindToGlassDist_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindTopOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindTopOpngMult () const
      {
        return this->SimMaterial_BlindTopOpngMult_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindTopOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindTopOpngMult ()
      {
        return this->SimMaterial_BlindTopOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindTopOpngMult (const SimMaterial_BlindTopOpngMult_type& x)
      {
        this->SimMaterial_BlindTopOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindTopOpngMult (const SimMaterial_BlindTopOpngMult_optional& x)
      {
        this->SimMaterial_BlindTopOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindBotOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindBotOpngMult () const
      {
        return this->SimMaterial_BlindBotOpngMult_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindBotOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindBotOpngMult ()
      {
        return this->SimMaterial_BlindBotOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindBotOpngMult (const SimMaterial_BlindBotOpngMult_type& x)
      {
        this->SimMaterial_BlindBotOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindBotOpngMult (const SimMaterial_BlindBotOpngMult_optional& x)
      {
        this->SimMaterial_BlindBotOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindLeftSideOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindLeftSideOpngMult () const
      {
        return this->SimMaterial_BlindLeftSideOpngMult_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindLeftSideOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindLeftSideOpngMult ()
      {
        return this->SimMaterial_BlindLeftSideOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindLeftSideOpngMult (const SimMaterial_BlindLeftSideOpngMult_type& x)
      {
        this->SimMaterial_BlindLeftSideOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindLeftSideOpngMult (const SimMaterial_BlindLeftSideOpngMult_optional& x)
      {
        this->SimMaterial_BlindLeftSideOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindRightSideOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindRightSideOpngMult () const
      {
        return this->SimMaterial_BlindRightSideOpngMult_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_BlindRightSideOpngMult_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindRightSideOpngMult ()
      {
        return this->SimMaterial_BlindRightSideOpngMult_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindRightSideOpngMult (const SimMaterial_BlindRightSideOpngMult_type& x)
      {
        this->SimMaterial_BlindRightSideOpngMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_BlindRightSideOpngMult (const SimMaterial_BlindRightSideOpngMult_optional& x)
      {
        this->SimMaterial_BlindRightSideOpngMult_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_MinSlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MinSlatAngle () const
      {
        return this->SimMaterial_MinSlatAngle_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_MinSlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MinSlatAngle ()
      {
        return this->SimMaterial_MinSlatAngle_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MinSlatAngle (const SimMaterial_MinSlatAngle_type& x)
      {
        this->SimMaterial_MinSlatAngle_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MinSlatAngle (const SimMaterial_MinSlatAngle_optional& x)
      {
        this->SimMaterial_MinSlatAngle_ = x;
      }

      const SimMaterial_GlazingMaterial_Blind::SimMaterial_MaxSlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MaxSlatAngle () const
      {
        return this->SimMaterial_MaxSlatAngle_;
      }

      SimMaterial_GlazingMaterial_Blind::SimMaterial_MaxSlatAngle_optional& SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MaxSlatAngle ()
      {
        return this->SimMaterial_MaxSlatAngle_;
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MaxSlatAngle (const SimMaterial_MaxSlatAngle_type& x)
      {
        this->SimMaterial_MaxSlatAngle_.set (x);
      }

      void SimMaterial_GlazingMaterial_Blind::
      SimMaterial_MaxSlatAngle (const SimMaterial_MaxSlatAngle_optional& x)
      {
        this->SimMaterial_MaxSlatAngle_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_Blind
      //

      SimMaterial_GlazingMaterial_Blind::
      SimMaterial_GlazingMaterial_Blind (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatThick_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatCond_ (this),
        SimMaterial_SlatOrientation_ (this),
        SimMaterial_SlatSeparation_ (this),
        SimMaterial_SlatBeamSolarTrans_ (this),
        SimMaterial_FrontSideSlatBeamSolarReflect_ (this),
        SimMaterial_BackSideSlatBeamSolarReflect_ (this),
        SimMaterial_SlatDiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatDiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatDiffuseSolarReflect_ (this),
        SimMaterial_SlatBeamVisTrans_ (this),
        SimMaterial_FrontSideSlatBeamVisReflect_ (this),
        SimMaterial_BackSideSlatBeamVisReflect_ (this),
        SimMaterial_SlatDiffuseVisTrans_ (this),
        SimMaterial_FrontSideSlatDiffuseVisReflect_ (this),
        SimMaterial_BackSideSlatDiffuseVisReflect_ (this),
        SimMaterial_SlatInfraredHemisphTrans_ (this),
        SimMaterial_FrontSideSlatInfraredHemisphEmis_ (this),
        SimMaterial_BackSideSlatInfraredHemisphEmis_ (this),
        SimMaterial_BlindToGlassDist_ (this),
        SimMaterial_BlindTopOpngMult_ (this),
        SimMaterial_BlindBotOpngMult_ (this),
        SimMaterial_BlindLeftSideOpngMult_ (this),
        SimMaterial_BlindRightSideOpngMult_ (this),
        SimMaterial_MinSlatAngle_ (this),
        SimMaterial_MaxSlatAngle_ (this)
      {
      }

      SimMaterial_GlazingMaterial_Blind::
      SimMaterial_GlazingMaterial_Blind (const SimMaterial_GlazingMaterial_Blind& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_SlatWidth_ (x.SimMaterial_SlatWidth_, f, this),
        SimMaterial_SlatThick_ (x.SimMaterial_SlatThick_, f, this),
        SimMaterial_SlatAngle_ (x.SimMaterial_SlatAngle_, f, this),
        SimMaterial_SlatCond_ (x.SimMaterial_SlatCond_, f, this),
        SimMaterial_SlatOrientation_ (x.SimMaterial_SlatOrientation_, f, this),
        SimMaterial_SlatSeparation_ (x.SimMaterial_SlatSeparation_, f, this),
        SimMaterial_SlatBeamSolarTrans_ (x.SimMaterial_SlatBeamSolarTrans_, f, this),
        SimMaterial_FrontSideSlatBeamSolarReflect_ (x.SimMaterial_FrontSideSlatBeamSolarReflect_, f, this),
        SimMaterial_BackSideSlatBeamSolarReflect_ (x.SimMaterial_BackSideSlatBeamSolarReflect_, f, this),
        SimMaterial_SlatDiffuseSolarTrans_ (x.SimMaterial_SlatDiffuseSolarTrans_, f, this),
        SimMaterial_FrontSideSlatDiffuseSolarReflect_ (x.SimMaterial_FrontSideSlatDiffuseSolarReflect_, f, this),
        SimMaterial_BackSideSlatDiffuseSolarReflect_ (x.SimMaterial_BackSideSlatDiffuseSolarReflect_, f, this),
        SimMaterial_SlatBeamVisTrans_ (x.SimMaterial_SlatBeamVisTrans_, f, this),
        SimMaterial_FrontSideSlatBeamVisReflect_ (x.SimMaterial_FrontSideSlatBeamVisReflect_, f, this),
        SimMaterial_BackSideSlatBeamVisReflect_ (x.SimMaterial_BackSideSlatBeamVisReflect_, f, this),
        SimMaterial_SlatDiffuseVisTrans_ (x.SimMaterial_SlatDiffuseVisTrans_, f, this),
        SimMaterial_FrontSideSlatDiffuseVisReflect_ (x.SimMaterial_FrontSideSlatDiffuseVisReflect_, f, this),
        SimMaterial_BackSideSlatDiffuseVisReflect_ (x.SimMaterial_BackSideSlatDiffuseVisReflect_, f, this),
        SimMaterial_SlatInfraredHemisphTrans_ (x.SimMaterial_SlatInfraredHemisphTrans_, f, this),
        SimMaterial_FrontSideSlatInfraredHemisphEmis_ (x.SimMaterial_FrontSideSlatInfraredHemisphEmis_, f, this),
        SimMaterial_BackSideSlatInfraredHemisphEmis_ (x.SimMaterial_BackSideSlatInfraredHemisphEmis_, f, this),
        SimMaterial_BlindToGlassDist_ (x.SimMaterial_BlindToGlassDist_, f, this),
        SimMaterial_BlindTopOpngMult_ (x.SimMaterial_BlindTopOpngMult_, f, this),
        SimMaterial_BlindBotOpngMult_ (x.SimMaterial_BlindBotOpngMult_, f, this),
        SimMaterial_BlindLeftSideOpngMult_ (x.SimMaterial_BlindLeftSideOpngMult_, f, this),
        SimMaterial_BlindRightSideOpngMult_ (x.SimMaterial_BlindRightSideOpngMult_, f, this),
        SimMaterial_MinSlatAngle_ (x.SimMaterial_MinSlatAngle_, f, this),
        SimMaterial_MaxSlatAngle_ (x.SimMaterial_MaxSlatAngle_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_Blind::
      SimMaterial_GlazingMaterial_Blind (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatThick_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatCond_ (this),
        SimMaterial_SlatOrientation_ (this),
        SimMaterial_SlatSeparation_ (this),
        SimMaterial_SlatBeamSolarTrans_ (this),
        SimMaterial_FrontSideSlatBeamSolarReflect_ (this),
        SimMaterial_BackSideSlatBeamSolarReflect_ (this),
        SimMaterial_SlatDiffuseSolarTrans_ (this),
        SimMaterial_FrontSideSlatDiffuseSolarReflect_ (this),
        SimMaterial_BackSideSlatDiffuseSolarReflect_ (this),
        SimMaterial_SlatBeamVisTrans_ (this),
        SimMaterial_FrontSideSlatBeamVisReflect_ (this),
        SimMaterial_BackSideSlatBeamVisReflect_ (this),
        SimMaterial_SlatDiffuseVisTrans_ (this),
        SimMaterial_FrontSideSlatDiffuseVisReflect_ (this),
        SimMaterial_BackSideSlatDiffuseVisReflect_ (this),
        SimMaterial_SlatInfraredHemisphTrans_ (this),
        SimMaterial_FrontSideSlatInfraredHemisphEmis_ (this),
        SimMaterial_BackSideSlatInfraredHemisphEmis_ (this),
        SimMaterial_BlindToGlassDist_ (this),
        SimMaterial_BlindTopOpngMult_ (this),
        SimMaterial_BlindBotOpngMult_ (this),
        SimMaterial_BlindLeftSideOpngMult_ (this),
        SimMaterial_BlindRightSideOpngMult_ (this),
        SimMaterial_MinSlatAngle_ (this),
        SimMaterial_MaxSlatAngle_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_Blind::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_SlatWidth
          //
          if (n.name () == "SimMaterial_SlatWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatWidth_)
            {
              this->SimMaterial_SlatWidth_.set (SimMaterial_SlatWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatThick
          //
          if (n.name () == "SimMaterial_SlatThick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatThick_)
            {
              this->SimMaterial_SlatThick_.set (SimMaterial_SlatThick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatAngle
          //
          if (n.name () == "SimMaterial_SlatAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatAngle_)
            {
              this->SimMaterial_SlatAngle_.set (SimMaterial_SlatAngle_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatCond
          //
          if (n.name () == "SimMaterial_SlatCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatCond_)
            {
              this->SimMaterial_SlatCond_.set (SimMaterial_SlatCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatOrientation
          //
          if (n.name () == "SimMaterial_SlatOrientation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_SlatOrientation_type > r (
              SimMaterial_SlatOrientation_traits::create (i, f, this));

            if (!this->SimMaterial_SlatOrientation_)
            {
              this->SimMaterial_SlatOrientation_.set (r);
              continue;
            }
          }

          // SimMaterial_SlatSeparation
          //
          if (n.name () == "SimMaterial_SlatSeparation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatSeparation_)
            {
              this->SimMaterial_SlatSeparation_.set (SimMaterial_SlatSeparation_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatBeamSolarTrans
          //
          if (n.name () == "SimMaterial_SlatBeamSolarTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatBeamSolarTrans_)
            {
              this->SimMaterial_SlatBeamSolarTrans_.set (SimMaterial_SlatBeamSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeamSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeamSolarReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeamSolarReflect_)
            {
              this->SimMaterial_FrontSideSlatBeamSolarReflect_.set (SimMaterial_FrontSideSlatBeamSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeamSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatBeamSolarReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeamSolarReflect_)
            {
              this->SimMaterial_BackSideSlatBeamSolarReflect_.set (SimMaterial_BackSideSlatBeamSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatDiffuseSolarTrans
          //
          if (n.name () == "SimMaterial_SlatDiffuseSolarTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatDiffuseSolarTrans_)
            {
              this->SimMaterial_SlatDiffuseSolarTrans_.set (SimMaterial_SlatDiffuseSolarTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatDiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatDiffuseSolarReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatDiffuseSolarReflect_)
            {
              this->SimMaterial_FrontSideSlatDiffuseSolarReflect_.set (SimMaterial_FrontSideSlatDiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatDiffuseSolarReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatDiffuseSolarReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatDiffuseSolarReflect_)
            {
              this->SimMaterial_BackSideSlatDiffuseSolarReflect_.set (SimMaterial_BackSideSlatDiffuseSolarReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatBeamVisTrans
          //
          if (n.name () == "SimMaterial_SlatBeamVisTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatBeamVisTrans_)
            {
              this->SimMaterial_SlatBeamVisTrans_.set (SimMaterial_SlatBeamVisTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatBeamVisReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatBeamVisReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatBeamVisReflect_)
            {
              this->SimMaterial_FrontSideSlatBeamVisReflect_.set (SimMaterial_FrontSideSlatBeamVisReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatBeamVisReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatBeamVisReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatBeamVisReflect_)
            {
              this->SimMaterial_BackSideSlatBeamVisReflect_.set (SimMaterial_BackSideSlatBeamVisReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatDiffuseVisTrans
          //
          if (n.name () == "SimMaterial_SlatDiffuseVisTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatDiffuseVisTrans_)
            {
              this->SimMaterial_SlatDiffuseVisTrans_.set (SimMaterial_SlatDiffuseVisTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatDiffuseVisReflect
          //
          if (n.name () == "SimMaterial_FrontSideSlatDiffuseVisReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatDiffuseVisReflect_)
            {
              this->SimMaterial_FrontSideSlatDiffuseVisReflect_.set (SimMaterial_FrontSideSlatDiffuseVisReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatDiffuseVisReflect
          //
          if (n.name () == "SimMaterial_BackSideSlatDiffuseVisReflect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatDiffuseVisReflect_)
            {
              this->SimMaterial_BackSideSlatDiffuseVisReflect_.set (SimMaterial_BackSideSlatDiffuseVisReflect_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatInfraredHemisphTrans
          //
          if (n.name () == "SimMaterial_SlatInfraredHemisphTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatInfraredHemisphTrans_)
            {
              this->SimMaterial_SlatInfraredHemisphTrans_.set (SimMaterial_SlatInfraredHemisphTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontSideSlatInfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_FrontSideSlatInfraredHemisphEmis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontSideSlatInfraredHemisphEmis_)
            {
              this->SimMaterial_FrontSideSlatInfraredHemisphEmis_.set (SimMaterial_FrontSideSlatInfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackSideSlatInfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_BackSideSlatInfraredHemisphEmis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackSideSlatInfraredHemisphEmis_)
            {
              this->SimMaterial_BackSideSlatInfraredHemisphEmis_.set (SimMaterial_BackSideSlatInfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BlindToGlassDist
          //
          if (n.name () == "SimMaterial_BlindToGlassDist" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BlindToGlassDist_)
            {
              this->SimMaterial_BlindToGlassDist_.set (SimMaterial_BlindToGlassDist_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BlindTopOpngMult
          //
          if (n.name () == "SimMaterial_BlindTopOpngMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BlindTopOpngMult_)
            {
              this->SimMaterial_BlindTopOpngMult_.set (SimMaterial_BlindTopOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BlindBotOpngMult
          //
          if (n.name () == "SimMaterial_BlindBotOpngMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BlindBotOpngMult_)
            {
              this->SimMaterial_BlindBotOpngMult_.set (SimMaterial_BlindBotOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BlindLeftSideOpngMult
          //
          if (n.name () == "SimMaterial_BlindLeftSideOpngMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BlindLeftSideOpngMult_)
            {
              this->SimMaterial_BlindLeftSideOpngMult_.set (SimMaterial_BlindLeftSideOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BlindRightSideOpngMult
          //
          if (n.name () == "SimMaterial_BlindRightSideOpngMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BlindRightSideOpngMult_)
            {
              this->SimMaterial_BlindRightSideOpngMult_.set (SimMaterial_BlindRightSideOpngMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_MinSlatAngle
          //
          if (n.name () == "SimMaterial_MinSlatAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_MinSlatAngle_)
            {
              this->SimMaterial_MinSlatAngle_.set (SimMaterial_MinSlatAngle_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_MaxSlatAngle
          //
          if (n.name () == "SimMaterial_MaxSlatAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_MaxSlatAngle_)
            {
              this->SimMaterial_MaxSlatAngle_.set (SimMaterial_MaxSlatAngle_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_Blind* SimMaterial_GlazingMaterial_Blind::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_Blind (*this, f, c);
      }

      SimMaterial_GlazingMaterial_Blind& SimMaterial_GlazingMaterial_Blind::
      operator= (const SimMaterial_GlazingMaterial_Blind& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_SlatWidth_ = x.SimMaterial_SlatWidth_;
          this->SimMaterial_SlatThick_ = x.SimMaterial_SlatThick_;
          this->SimMaterial_SlatAngle_ = x.SimMaterial_SlatAngle_;
          this->SimMaterial_SlatCond_ = x.SimMaterial_SlatCond_;
          this->SimMaterial_SlatOrientation_ = x.SimMaterial_SlatOrientation_;
          this->SimMaterial_SlatSeparation_ = x.SimMaterial_SlatSeparation_;
          this->SimMaterial_SlatBeamSolarTrans_ = x.SimMaterial_SlatBeamSolarTrans_;
          this->SimMaterial_FrontSideSlatBeamSolarReflect_ = x.SimMaterial_FrontSideSlatBeamSolarReflect_;
          this->SimMaterial_BackSideSlatBeamSolarReflect_ = x.SimMaterial_BackSideSlatBeamSolarReflect_;
          this->SimMaterial_SlatDiffuseSolarTrans_ = x.SimMaterial_SlatDiffuseSolarTrans_;
          this->SimMaterial_FrontSideSlatDiffuseSolarReflect_ = x.SimMaterial_FrontSideSlatDiffuseSolarReflect_;
          this->SimMaterial_BackSideSlatDiffuseSolarReflect_ = x.SimMaterial_BackSideSlatDiffuseSolarReflect_;
          this->SimMaterial_SlatBeamVisTrans_ = x.SimMaterial_SlatBeamVisTrans_;
          this->SimMaterial_FrontSideSlatBeamVisReflect_ = x.SimMaterial_FrontSideSlatBeamVisReflect_;
          this->SimMaterial_BackSideSlatBeamVisReflect_ = x.SimMaterial_BackSideSlatBeamVisReflect_;
          this->SimMaterial_SlatDiffuseVisTrans_ = x.SimMaterial_SlatDiffuseVisTrans_;
          this->SimMaterial_FrontSideSlatDiffuseVisReflect_ = x.SimMaterial_FrontSideSlatDiffuseVisReflect_;
          this->SimMaterial_BackSideSlatDiffuseVisReflect_ = x.SimMaterial_BackSideSlatDiffuseVisReflect_;
          this->SimMaterial_SlatInfraredHemisphTrans_ = x.SimMaterial_SlatInfraredHemisphTrans_;
          this->SimMaterial_FrontSideSlatInfraredHemisphEmis_ = x.SimMaterial_FrontSideSlatInfraredHemisphEmis_;
          this->SimMaterial_BackSideSlatInfraredHemisphEmis_ = x.SimMaterial_BackSideSlatInfraredHemisphEmis_;
          this->SimMaterial_BlindToGlassDist_ = x.SimMaterial_BlindToGlassDist_;
          this->SimMaterial_BlindTopOpngMult_ = x.SimMaterial_BlindTopOpngMult_;
          this->SimMaterial_BlindBotOpngMult_ = x.SimMaterial_BlindBotOpngMult_;
          this->SimMaterial_BlindLeftSideOpngMult_ = x.SimMaterial_BlindLeftSideOpngMult_;
          this->SimMaterial_BlindRightSideOpngMult_ = x.SimMaterial_BlindRightSideOpngMult_;
          this->SimMaterial_MinSlatAngle_ = x.SimMaterial_MinSlatAngle_;
          this->SimMaterial_MaxSlatAngle_ = x.SimMaterial_MaxSlatAngle_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_Blind::
      ~SimMaterial_GlazingMaterial_Blind ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

