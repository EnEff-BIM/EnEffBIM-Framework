// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimPerformanceCurve_Mathematical_DoubleExponentialDecay.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceCurve_Mathematical_DoubleExponentialDecay
      // 

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_MinValX_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MinValX () const
      {
        return this->SimPerfCurve_MinValX_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_MinValX_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MinValX ()
      {
        return this->SimPerfCurve_MinValX_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MinValX (const SimPerfCurve_MinValX_type& x)
      {
        this->SimPerfCurve_MinValX_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MinValX (const SimPerfCurve_MinValX_optional& x)
      {
        this->SimPerfCurve_MinValX_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_MaxValX_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MaxValX () const
      {
        return this->SimPerfCurve_MaxValX_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_MaxValX_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MaxValX ()
      {
        return this->SimPerfCurve_MaxValX_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MaxValX (const SimPerfCurve_MaxValX_type& x)
      {
        this->SimPerfCurve_MaxValX_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_MaxValX (const SimPerfCurve_MaxValX_optional& x)
      {
        this->SimPerfCurve_MaxValX_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_OutputUnitType_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_OutputUnitType () const
      {
        return this->SimPerfCurve_OutputUnitType_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_OutputUnitType_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_OutputUnitType ()
      {
        return this->SimPerfCurve_OutputUnitType_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_OutputUnitType (const SimPerfCurve_OutputUnitType_type& x)
      {
        this->SimPerfCurve_OutputUnitType_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_OutputUnitType (const SimPerfCurve_OutputUnitType_optional& x)
      {
        this->SimPerfCurve_OutputUnitType_ = x;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_OutputUnitType (::std::auto_ptr< SimPerfCurve_OutputUnitType_type > x)
      {
        this->SimPerfCurve_OutputUnitType_.set (x);
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff1C1_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff1C1 () const
      {
        return this->SimPerfCurve_Coeff1C1_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff1C1_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff1C1 ()
      {
        return this->SimPerfCurve_Coeff1C1_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff1C1 (const SimPerfCurve_Coeff1C1_type& x)
      {
        this->SimPerfCurve_Coeff1C1_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff1C1 (const SimPerfCurve_Coeff1C1_optional& x)
      {
        this->SimPerfCurve_Coeff1C1_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff2C2_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff2C2 () const
      {
        return this->SimPerfCurve_Coeff2C2_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff2C2_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff2C2 ()
      {
        return this->SimPerfCurve_Coeff2C2_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff2C2 (const SimPerfCurve_Coeff2C2_type& x)
      {
        this->SimPerfCurve_Coeff2C2_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff2C2 (const SimPerfCurve_Coeff2C2_optional& x)
      {
        this->SimPerfCurve_Coeff2C2_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C3_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C3 () const
      {
        return this->SimPerfCurve_Coeff3C3_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C3_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C3 ()
      {
        return this->SimPerfCurve_Coeff3C3_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C3 (const SimPerfCurve_Coeff3C3_type& x)
      {
        this->SimPerfCurve_Coeff3C3_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C3 (const SimPerfCurve_Coeff3C3_optional& x)
      {
        this->SimPerfCurve_Coeff3C3_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C4_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C4 () const
      {
        return this->SimPerfCurve_Coeff3C4_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C4_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C4 ()
      {
        return this->SimPerfCurve_Coeff3C4_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C4 (const SimPerfCurve_Coeff3C4_type& x)
      {
        this->SimPerfCurve_Coeff3C4_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C4 (const SimPerfCurve_Coeff3C4_optional& x)
      {
        this->SimPerfCurve_Coeff3C4_ = x;
      }

      const SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C5_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C5 () const
      {
        return this->SimPerfCurve_Coeff3C5_;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::SimPerfCurve_Coeff3C5_optional& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C5 ()
      {
        return this->SimPerfCurve_Coeff3C5_;
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C5 (const SimPerfCurve_Coeff3C5_type& x)
      {
        this->SimPerfCurve_Coeff3C5_.set (x);
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerfCurve_Coeff3C5 (const SimPerfCurve_Coeff3C5_optional& x)
      {
        this->SimPerfCurve_Coeff3C5_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceCurve_Mathematical_DoubleExponentialDecay
      //

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (RefId),
        SimPerfCurve_MinValX_ (this),
        SimPerfCurve_MaxValX_ (this),
        SimPerfCurve_OutputUnitType_ (this),
        SimPerfCurve_Coeff1C1_ (this),
        SimPerfCurve_Coeff2C2_ (this),
        SimPerfCurve_Coeff3C3_ (this),
        SimPerfCurve_Coeff3C4_ (this),
        SimPerfCurve_Coeff3C5_ (this)
      {
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay (const SimPerformanceCurve_Mathematical_DoubleExponentialDecay& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (x, f, c),
        SimPerfCurve_MinValX_ (x.SimPerfCurve_MinValX_, f, this),
        SimPerfCurve_MaxValX_ (x.SimPerfCurve_MaxValX_, f, this),
        SimPerfCurve_OutputUnitType_ (x.SimPerfCurve_OutputUnitType_, f, this),
        SimPerfCurve_Coeff1C1_ (x.SimPerfCurve_Coeff1C1_, f, this),
        SimPerfCurve_Coeff2C2_ (x.SimPerfCurve_Coeff2C2_, f, this),
        SimPerfCurve_Coeff3C3_ (x.SimPerfCurve_Coeff3C3_, f, this),
        SimPerfCurve_Coeff3C4_ (x.SimPerfCurve_Coeff3C4_, f, this),
        SimPerfCurve_Coeff3C5_ (x.SimPerfCurve_Coeff3C5_, f, this)
      {
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      SimPerformanceCurve_Mathematical_DoubleExponentialDecay (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (e, f | ::xml_schema::flags::base, c),
        SimPerfCurve_MinValX_ (this),
        SimPerfCurve_MaxValX_ (this),
        SimPerfCurve_OutputUnitType_ (this),
        SimPerfCurve_Coeff1C1_ (this),
        SimPerfCurve_Coeff2C2_ (this),
        SimPerfCurve_Coeff3C3_ (this),
        SimPerfCurve_Coeff3C4_ (this),
        SimPerfCurve_Coeff3C5_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimPerfCurve_MinValX
          //
          if (n.name () == "SimPerfCurve_MinValX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MinValX_)
            {
              this->SimPerfCurve_MinValX_.set (SimPerfCurve_MinValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MaxValX
          //
          if (n.name () == "SimPerfCurve_MaxValX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MaxValX_)
            {
              this->SimPerfCurve_MaxValX_.set (SimPerfCurve_MaxValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_OutputUnitType
          //
          if (n.name () == "SimPerfCurve_OutputUnitType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerfCurve_OutputUnitType_type > r (
              SimPerfCurve_OutputUnitType_traits::create (i, f, this));

            if (!this->SimPerfCurve_OutputUnitType_)
            {
              this->SimPerfCurve_OutputUnitType_.set (r);
              continue;
            }
          }

          // SimPerfCurve_Coeff1C1
          //
          if (n.name () == "SimPerfCurve_Coeff1C1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coeff1C1_)
            {
              this->SimPerfCurve_Coeff1C1_.set (SimPerfCurve_Coeff1C1_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coeff2C2
          //
          if (n.name () == "SimPerfCurve_Coeff2C2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coeff2C2_)
            {
              this->SimPerfCurve_Coeff2C2_.set (SimPerfCurve_Coeff2C2_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coeff3C3
          //
          if (n.name () == "SimPerfCurve_Coeff3C3" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coeff3C3_)
            {
              this->SimPerfCurve_Coeff3C3_.set (SimPerfCurve_Coeff3C3_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coeff3C4
          //
          if (n.name () == "SimPerfCurve_Coeff3C4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coeff3C4_)
            {
              this->SimPerfCurve_Coeff3C4_.set (SimPerfCurve_Coeff3C4_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coeff3C5
          //
          if (n.name () == "SimPerfCurve_Coeff3C5" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coeff3C5_)
            {
              this->SimPerfCurve_Coeff3C5_.set (SimPerfCurve_Coeff3C5_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay* SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimPerformanceCurve_Mathematical_DoubleExponentialDecay (*this, f, c);
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay& SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      operator= (const SimPerformanceCurve_Mathematical_DoubleExponentialDecay& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical& > (*this) = x;
          this->SimPerfCurve_MinValX_ = x.SimPerfCurve_MinValX_;
          this->SimPerfCurve_MaxValX_ = x.SimPerfCurve_MaxValX_;
          this->SimPerfCurve_OutputUnitType_ = x.SimPerfCurve_OutputUnitType_;
          this->SimPerfCurve_Coeff1C1_ = x.SimPerfCurve_Coeff1C1_;
          this->SimPerfCurve_Coeff2C2_ = x.SimPerfCurve_Coeff2C2_;
          this->SimPerfCurve_Coeff3C3_ = x.SimPerfCurve_Coeff3C3_;
          this->SimPerfCurve_Coeff3C4_ = x.SimPerfCurve_Coeff3C4_;
          this->SimPerfCurve_Coeff3C5_ = x.SimPerfCurve_Coeff3C5_;
        }

        return *this;
      }

      SimPerformanceCurve_Mathematical_DoubleExponentialDecay::
      ~SimPerformanceCurve_Mathematical_DoubleExponentialDecay ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

