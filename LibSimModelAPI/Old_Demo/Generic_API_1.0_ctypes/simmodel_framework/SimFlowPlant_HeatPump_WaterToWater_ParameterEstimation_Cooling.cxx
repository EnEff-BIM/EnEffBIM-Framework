// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling
      // 

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_NomCap_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCap () const
      {
        return this->SimFlowPlant_NomCap_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_NomCap_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCap ()
      {
        return this->SimFlowPlant_NomCap_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x)
      {
        this->SimFlowPlant_NomCap_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x)
      {
        this->SimFlowPlant_NomCap_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MinPartLoadRatio () const
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MinPartLoadRatio ()
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MaxPartLoadRatio () const
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MaxPartLoadRatio ()
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_OptimumPartLoadRatio () const
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_OptimumPartLoadRatio ()
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_NomCOP_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCOP () const
      {
        return this->SimFlowPlant_NomCOP_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_NomCOP_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCOP ()
      {
        return this->SimFlowPlant_NomCOP_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCOP (const SimFlowPlant_NomCOP_type& x)
      {
        this->SimFlowPlant_NomCOP_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_NomCOP (const SimFlowPlant_NomCOP_optional& x)
      {
        this->SimFlowPlant_NomCOP_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideInletNodeName () const
      {
        return this->SimFlowPlant_SrcSideInletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideInletNodeName ()
      {
        return this->SimFlowPlant_SrcSideInletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideInletNodeName (const SimFlowPlant_SrcSideInletNodeName_type& x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideInletNodeName (const SimFlowPlant_SrcSideInletNodeName_optional& x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideInletNodeName (::std::auto_ptr< SimFlowPlant_SrcSideInletNodeName_type > x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideOutletNodeName () const
      {
        return this->SimFlowPlant_SrcSideOutletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideOutletNodeName ()
      {
        return this->SimFlowPlant_SrcSideOutletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideOutletNodeName (const SimFlowPlant_SrcSideOutletNodeName_type& x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideOutletNodeName (const SimFlowPlant_SrcSideOutletNodeName_optional& x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideOutletNodeName (::std::auto_ptr< SimFlowPlant_SrcSideOutletNodeName_type > x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideInletNodeName () const
      {
        return this->SimFlowPlant_LoadSideInletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideInletNodeName ()
      {
        return this->SimFlowPlant_LoadSideInletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideInletNodeName (const SimFlowPlant_LoadSideInletNodeName_type& x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideInletNodeName (const SimFlowPlant_LoadSideInletNodeName_optional& x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideInletNodeName (::std::auto_ptr< SimFlowPlant_LoadSideInletNodeName_type > x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideOutletNodeName () const
      {
        return this->SimFlowPlant_LoadSideOutletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideOutletNodeName ()
      {
        return this->SimFlowPlant_LoadSideOutletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideOutletNodeName (const SimFlowPlant_LoadSideOutletNodeName_type& x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideOutletNodeName (const SimFlowPlant_LoadSideOutletNodeName_optional& x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideOutletNodeName (::std::auto_ptr< SimFlowPlant_LoadSideOutletNodeName_type > x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CycleTime_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CycleTime () const
      {
        return this->SimFlowPlant_CycleTime_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CycleTime_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CycleTime ()
      {
        return this->SimFlowPlant_CycleTime_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CycleTime (const SimFlowPlant_CycleTime_type& x)
      {
        this->SimFlowPlant_CycleTime_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CycleTime (const SimFlowPlant_CycleTime_optional& x)
      {
        this->SimFlowPlant_CycleTime_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideFlowRate () const
      {
        return this->SimFlowPlant_LoadSideFlowRate_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideFlowRate ()
      {
        return this->SimFlowPlant_LoadSideFlowRate_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideFlowRate (const SimFlowPlant_LoadSideFlowRate_type& x)
      {
        this->SimFlowPlant_LoadSideFlowRate_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideFlowRate (const SimFlowPlant_LoadSideFlowRate_optional& x)
      {
        this->SimFlowPlant_LoadSideFlowRate_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideFlowRate () const
      {
        return this->SimFlowPlant_SrcSideFlowRate_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideFlowRate ()
      {
        return this->SimFlowPlant_SrcSideFlowRate_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideFlowRate (const SimFlowPlant_SrcSideFlowRate_type& x)
      {
        this->SimFlowPlant_SrcSideFlowRate_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideFlowRate (const SimFlowPlant_SrcSideFlowRate_optional& x)
      {
        this->SimFlowPlant_SrcSideFlowRate_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideHeatTransCoef_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideHeatTransCoef () const
      {
        return this->SimFlowPlant_LoadSideHeatTransCoef_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LoadSideHeatTransCoef_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideHeatTransCoef ()
      {
        return this->SimFlowPlant_LoadSideHeatTransCoef_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideHeatTransCoef (const SimFlowPlant_LoadSideHeatTransCoef_type& x)
      {
        this->SimFlowPlant_LoadSideHeatTransCoef_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LoadSideHeatTransCoef (const SimFlowPlant_LoadSideHeatTransCoef_optional& x)
      {
        this->SimFlowPlant_LoadSideHeatTransCoef_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideHeatTransCoef_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideHeatTransCoef () const
      {
        return this->SimFlowPlant_SrcSideHeatTransCoef_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_SrcSideHeatTransCoef_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideHeatTransCoef ()
      {
        return this->SimFlowPlant_SrcSideHeatTransCoef_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideHeatTransCoef (const SimFlowPlant_SrcSideHeatTransCoef_type& x)
      {
        this->SimFlowPlant_SrcSideHeatTransCoef_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_SrcSideHeatTransCoef (const SimFlowPlant_SrcSideHeatTransCoef_optional& x)
      {
        this->SimFlowPlant_SrcSideHeatTransCoef_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_PistonDisplacement_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_PistonDisplacement () const
      {
        return this->SimFlowPlant_PistonDisplacement_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_PistonDisplacement_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_PistonDisplacement ()
      {
        return this->SimFlowPlant_PistonDisplacement_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_PistonDisplacement (const SimFlowPlant_PistonDisplacement_type& x)
      {
        this->SimFlowPlant_PistonDisplacement_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_PistonDisplacement (const SimFlowPlant_PistonDisplacement_optional& x)
      {
        this->SimFlowPlant_PistonDisplacement_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CompClearanceFactor_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompClearanceFactor () const
      {
        return this->SimFlowPlant_CompClearanceFactor_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CompClearanceFactor_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompClearanceFactor ()
      {
        return this->SimFlowPlant_CompClearanceFactor_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompClearanceFactor (const SimFlowPlant_CompClearanceFactor_type& x)
      {
        this->SimFlowPlant_CompClearanceFactor_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompClearanceFactor (const SimFlowPlant_CompClearanceFactor_optional& x)
      {
        this->SimFlowPlant_CompClearanceFactor_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CompSuction_DischargePressureDrop_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompSuction_DischargePressureDrop () const
      {
        return this->SimFlowPlant_CompSuction_DischargePressureDrop_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_CompSuction_DischargePressureDrop_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompSuction_DischargePressureDrop ()
      {
        return this->SimFlowPlant_CompSuction_DischargePressureDrop_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompSuction_DischargePressureDrop (const SimFlowPlant_CompSuction_DischargePressureDrop_type& x)
      {
        this->SimFlowPlant_CompSuction_DischargePressureDrop_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_CompSuction_DischargePressureDrop (const SimFlowPlant_CompSuction_DischargePressureDrop_optional& x)
      {
        this->SimFlowPlant_CompSuction_DischargePressureDrop_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_Superheating_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_Superheating () const
      {
        return this->SimFlowPlant_Superheating_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_Superheating_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_Superheating ()
      {
        return this->SimFlowPlant_Superheating_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_Superheating (const SimFlowPlant_Superheating_type& x)
      {
        this->SimFlowPlant_Superheating_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_Superheating (const SimFlowPlant_Superheating_optional& x)
      {
        this->SimFlowPlant_Superheating_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_ConstPartElectromechanicalPwrLosses_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_ConstPartElectromechanicalPwrLosses () const
      {
        return this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_ConstPartElectromechanicalPwrLosses_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_ConstPartElectromechanicalPwrLosses ()
      {
        return this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_ConstPartElectromechanicalPwrLosses (const SimFlowPlant_ConstPartElectromechanicalPwrLosses_type& x)
      {
        this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_ConstPartElectromechanicalPwrLosses (const SimFlowPlant_ConstPartElectromechanicalPwrLosses_optional& x)
      {
        this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LossFactor_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LossFactor () const
      {
        return this->SimFlowPlant_LossFactor_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LossFactor_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LossFactor ()
      {
        return this->SimFlowPlant_LossFactor_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LossFactor (const SimFlowPlant_LossFactor_type& x)
      {
        this->SimFlowPlant_LossFactor_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LossFactor (const SimFlowPlant_LossFactor_optional& x)
      {
        this->SimFlowPlant_LossFactor_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_HighPressureCutf_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HighPressureCutf () const
      {
        return this->SimFlowPlant_HighPressureCutf_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_HighPressureCutf_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HighPressureCutf ()
      {
        return this->SimFlowPlant_HighPressureCutf_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HighPressureCutf (const SimFlowPlant_HighPressureCutf_type& x)
      {
        this->SimFlowPlant_HighPressureCutf_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HighPressureCutf (const SimFlowPlant_HighPressureCutf_optional& x)
      {
        this->SimFlowPlant_HighPressureCutf_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LowPressureCutf_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LowPressureCutf () const
      {
        return this->SimFlowPlant_LowPressureCutf_;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::SimFlowPlant_LowPressureCutf_optional& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LowPressureCutf ()
      {
        return this->SimFlowPlant_LowPressureCutf_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LowPressureCutf (const SimFlowPlant_LowPressureCutf_type& x)
      {
        this->SimFlowPlant_LowPressureCutf_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_LowPressureCutf (const SimFlowPlant_LowPressureCutf_optional& x)
      {
        this->SimFlowPlant_LowPressureCutf_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling
      //

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant_HeatPump (RefId),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_NomCOP_ (this),
        SimFlowPlant_SrcSideInletNodeName_ (this),
        SimFlowPlant_SrcSideOutletNodeName_ (this),
        SimFlowPlant_LoadSideInletNodeName_ (this),
        SimFlowPlant_LoadSideOutletNodeName_ (this),
        SimFlowPlant_CycleTime_ (this),
        SimFlowPlant_LoadSideFlowRate_ (this),
        SimFlowPlant_SrcSideFlowRate_ (this),
        SimFlowPlant_LoadSideHeatTransCoef_ (this),
        SimFlowPlant_SrcSideHeatTransCoef_ (this),
        SimFlowPlant_PistonDisplacement_ (this),
        SimFlowPlant_CompClearanceFactor_ (this),
        SimFlowPlant_CompSuction_DischargePressureDrop_ (this),
        SimFlowPlant_Superheating_ (this),
        SimFlowPlant_ConstPartElectromechanicalPwrLosses_ (this),
        SimFlowPlant_LossFactor_ (this),
        SimFlowPlant_HighPressureCutf_ (this),
        SimFlowPlant_LowPressureCutf_ (this)
      {
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling (const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling& x,
                                                                      ::xml_schema::flags f,
                                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_HeatPump (x, f, c),
        SimFlowPlant_NomCap_ (x.SimFlowPlant_NomCap_, f, this),
        SimFlowPlant_MinPartLoadRatio_ (x.SimFlowPlant_MinPartLoadRatio_, f, this),
        SimFlowPlant_MaxPartLoadRatio_ (x.SimFlowPlant_MaxPartLoadRatio_, f, this),
        SimFlowPlant_OptimumPartLoadRatio_ (x.SimFlowPlant_OptimumPartLoadRatio_, f, this),
        SimFlowPlant_NomCOP_ (x.SimFlowPlant_NomCOP_, f, this),
        SimFlowPlant_SrcSideInletNodeName_ (x.SimFlowPlant_SrcSideInletNodeName_, f, this),
        SimFlowPlant_SrcSideOutletNodeName_ (x.SimFlowPlant_SrcSideOutletNodeName_, f, this),
        SimFlowPlant_LoadSideInletNodeName_ (x.SimFlowPlant_LoadSideInletNodeName_, f, this),
        SimFlowPlant_LoadSideOutletNodeName_ (x.SimFlowPlant_LoadSideOutletNodeName_, f, this),
        SimFlowPlant_CycleTime_ (x.SimFlowPlant_CycleTime_, f, this),
        SimFlowPlant_LoadSideFlowRate_ (x.SimFlowPlant_LoadSideFlowRate_, f, this),
        SimFlowPlant_SrcSideFlowRate_ (x.SimFlowPlant_SrcSideFlowRate_, f, this),
        SimFlowPlant_LoadSideHeatTransCoef_ (x.SimFlowPlant_LoadSideHeatTransCoef_, f, this),
        SimFlowPlant_SrcSideHeatTransCoef_ (x.SimFlowPlant_SrcSideHeatTransCoef_, f, this),
        SimFlowPlant_PistonDisplacement_ (x.SimFlowPlant_PistonDisplacement_, f, this),
        SimFlowPlant_CompClearanceFactor_ (x.SimFlowPlant_CompClearanceFactor_, f, this),
        SimFlowPlant_CompSuction_DischargePressureDrop_ (x.SimFlowPlant_CompSuction_DischargePressureDrop_, f, this),
        SimFlowPlant_Superheating_ (x.SimFlowPlant_Superheating_, f, this),
        SimFlowPlant_ConstPartElectromechanicalPwrLosses_ (x.SimFlowPlant_ConstPartElectromechanicalPwrLosses_, f, this),
        SimFlowPlant_LossFactor_ (x.SimFlowPlant_LossFactor_, f, this),
        SimFlowPlant_HighPressureCutf_ (x.SimFlowPlant_HighPressureCutf_, f, this),
        SimFlowPlant_LowPressureCutf_ (x.SimFlowPlant_LowPressureCutf_, f, this)
      {
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling (const ::xercesc::DOMElement& e,
                                                                      ::xml_schema::flags f,
                                                                      ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_HeatPump (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_NomCOP_ (this),
        SimFlowPlant_SrcSideInletNodeName_ (this),
        SimFlowPlant_SrcSideOutletNodeName_ (this),
        SimFlowPlant_LoadSideInletNodeName_ (this),
        SimFlowPlant_LoadSideOutletNodeName_ (this),
        SimFlowPlant_CycleTime_ (this),
        SimFlowPlant_LoadSideFlowRate_ (this),
        SimFlowPlant_SrcSideFlowRate_ (this),
        SimFlowPlant_LoadSideHeatTransCoef_ (this),
        SimFlowPlant_SrcSideHeatTransCoef_ (this),
        SimFlowPlant_PistonDisplacement_ (this),
        SimFlowPlant_CompClearanceFactor_ (this),
        SimFlowPlant_CompSuction_DischargePressureDrop_ (this),
        SimFlowPlant_Superheating_ (this),
        SimFlowPlant_ConstPartElectromechanicalPwrLosses_ (this),
        SimFlowPlant_LossFactor_ (this),
        SimFlowPlant_HighPressureCutf_ (this),
        SimFlowPlant_LowPressureCutf_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant_HeatPump::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_NomCap
          //
          if (n.name () == "SimFlowPlant_NomCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NomCap_)
            {
              this->SimFlowPlant_NomCap_.set (SimFlowPlant_NomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MinPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MinPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MinPartLoadRatio_)
            {
              this->SimFlowPlant_MinPartLoadRatio_.set (SimFlowPlant_MinPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MaxPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MaxPartLoadRatio_)
            {
              this->SimFlowPlant_MaxPartLoadRatio_.set (SimFlowPlant_MaxPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_OptimumPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_OptimumPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_OptimumPartLoadRatio_)
            {
              this->SimFlowPlant_OptimumPartLoadRatio_.set (SimFlowPlant_OptimumPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NomCOP
          //
          if (n.name () == "SimFlowPlant_NomCOP" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NomCOP_)
            {
              this->SimFlowPlant_NomCOP_.set (SimFlowPlant_NomCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SrcSideInletNodeName
          //
          if (n.name () == "SimFlowPlant_SrcSideInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SrcSideInletNodeName_type > r (
              SimFlowPlant_SrcSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SrcSideInletNodeName_)
            {
              this->SimFlowPlant_SrcSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SrcSideOutletNodeName
          //
          if (n.name () == "SimFlowPlant_SrcSideOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SrcSideOutletNodeName_type > r (
              SimFlowPlant_SrcSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SrcSideOutletNodeName_)
            {
              this->SimFlowPlant_SrcSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_LoadSideInletNodeName
          //
          if (n.name () == "SimFlowPlant_LoadSideInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_LoadSideInletNodeName_type > r (
              SimFlowPlant_LoadSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_LoadSideInletNodeName_)
            {
              this->SimFlowPlant_LoadSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_LoadSideOutletNodeName
          //
          if (n.name () == "SimFlowPlant_LoadSideOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_LoadSideOutletNodeName_type > r (
              SimFlowPlant_LoadSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_LoadSideOutletNodeName_)
            {
              this->SimFlowPlant_LoadSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CycleTime
          //
          if (n.name () == "SimFlowPlant_CycleTime" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CycleTime_)
            {
              this->SimFlowPlant_CycleTime_.set (SimFlowPlant_CycleTime_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_LoadSideFlowRate
          //
          if (n.name () == "SimFlowPlant_LoadSideFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_LoadSideFlowRate_)
            {
              this->SimFlowPlant_LoadSideFlowRate_.set (SimFlowPlant_LoadSideFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SrcSideFlowRate
          //
          if (n.name () == "SimFlowPlant_SrcSideFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_SrcSideFlowRate_)
            {
              this->SimFlowPlant_SrcSideFlowRate_.set (SimFlowPlant_SrcSideFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_LoadSideHeatTransCoef
          //
          if (n.name () == "SimFlowPlant_LoadSideHeatTransCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_LoadSideHeatTransCoef_)
            {
              this->SimFlowPlant_LoadSideHeatTransCoef_.set (SimFlowPlant_LoadSideHeatTransCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SrcSideHeatTransCoef
          //
          if (n.name () == "SimFlowPlant_SrcSideHeatTransCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_SrcSideHeatTransCoef_)
            {
              this->SimFlowPlant_SrcSideHeatTransCoef_.set (SimFlowPlant_SrcSideHeatTransCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_PistonDisplacement
          //
          if (n.name () == "SimFlowPlant_PistonDisplacement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_PistonDisplacement_)
            {
              this->SimFlowPlant_PistonDisplacement_.set (SimFlowPlant_PistonDisplacement_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CompClearanceFactor
          //
          if (n.name () == "SimFlowPlant_CompClearanceFactor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CompClearanceFactor_)
            {
              this->SimFlowPlant_CompClearanceFactor_.set (SimFlowPlant_CompClearanceFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CompSuction_DischargePressureDrop
          //
          if (n.name () == "SimFlowPlant_CompSuction_DischargePressureDrop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CompSuction_DischargePressureDrop_)
            {
              this->SimFlowPlant_CompSuction_DischargePressureDrop_.set (SimFlowPlant_CompSuction_DischargePressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_Superheating
          //
          if (n.name () == "SimFlowPlant_Superheating" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_Superheating_)
            {
              this->SimFlowPlant_Superheating_.set (SimFlowPlant_Superheating_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ConstPartElectromechanicalPwrLosses
          //
          if (n.name () == "SimFlowPlant_ConstPartElectromechanicalPwrLosses" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_)
            {
              this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_.set (SimFlowPlant_ConstPartElectromechanicalPwrLosses_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_LossFactor
          //
          if (n.name () == "SimFlowPlant_LossFactor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_LossFactor_)
            {
              this->SimFlowPlant_LossFactor_.set (SimFlowPlant_LossFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HighPressureCutf
          //
          if (n.name () == "SimFlowPlant_HighPressureCutf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_HighPressureCutf_)
            {
              this->SimFlowPlant_HighPressureCutf_.set (SimFlowPlant_HighPressureCutf_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_LowPressureCutf
          //
          if (n.name () == "SimFlowPlant_LowPressureCutf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_LowPressureCutf_)
            {
              this->SimFlowPlant_LowPressureCutf_.set (SimFlowPlant_LowPressureCutf_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling* SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling (*this, f, c);
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling& SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      operator= (const SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant_HeatPump& > (*this) = x;
          this->SimFlowPlant_NomCap_ = x.SimFlowPlant_NomCap_;
          this->SimFlowPlant_MinPartLoadRatio_ = x.SimFlowPlant_MinPartLoadRatio_;
          this->SimFlowPlant_MaxPartLoadRatio_ = x.SimFlowPlant_MaxPartLoadRatio_;
          this->SimFlowPlant_OptimumPartLoadRatio_ = x.SimFlowPlant_OptimumPartLoadRatio_;
          this->SimFlowPlant_NomCOP_ = x.SimFlowPlant_NomCOP_;
          this->SimFlowPlant_SrcSideInletNodeName_ = x.SimFlowPlant_SrcSideInletNodeName_;
          this->SimFlowPlant_SrcSideOutletNodeName_ = x.SimFlowPlant_SrcSideOutletNodeName_;
          this->SimFlowPlant_LoadSideInletNodeName_ = x.SimFlowPlant_LoadSideInletNodeName_;
          this->SimFlowPlant_LoadSideOutletNodeName_ = x.SimFlowPlant_LoadSideOutletNodeName_;
          this->SimFlowPlant_CycleTime_ = x.SimFlowPlant_CycleTime_;
          this->SimFlowPlant_LoadSideFlowRate_ = x.SimFlowPlant_LoadSideFlowRate_;
          this->SimFlowPlant_SrcSideFlowRate_ = x.SimFlowPlant_SrcSideFlowRate_;
          this->SimFlowPlant_LoadSideHeatTransCoef_ = x.SimFlowPlant_LoadSideHeatTransCoef_;
          this->SimFlowPlant_SrcSideHeatTransCoef_ = x.SimFlowPlant_SrcSideHeatTransCoef_;
          this->SimFlowPlant_PistonDisplacement_ = x.SimFlowPlant_PistonDisplacement_;
          this->SimFlowPlant_CompClearanceFactor_ = x.SimFlowPlant_CompClearanceFactor_;
          this->SimFlowPlant_CompSuction_DischargePressureDrop_ = x.SimFlowPlant_CompSuction_DischargePressureDrop_;
          this->SimFlowPlant_Superheating_ = x.SimFlowPlant_Superheating_;
          this->SimFlowPlant_ConstPartElectromechanicalPwrLosses_ = x.SimFlowPlant_ConstPartElectromechanicalPwrLosses_;
          this->SimFlowPlant_LossFactor_ = x.SimFlowPlant_LossFactor_;
          this->SimFlowPlant_HighPressureCutf_ = x.SimFlowPlant_HighPressureCutf_;
          this->SimFlowPlant_LowPressureCutf_ = x.SimFlowPlant_LowPressureCutf_;
        }

        return *this;
      }

      SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling::
      ~SimFlowPlant_HeatPump_WaterToWater_ParameterEstimation_Cooling ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

