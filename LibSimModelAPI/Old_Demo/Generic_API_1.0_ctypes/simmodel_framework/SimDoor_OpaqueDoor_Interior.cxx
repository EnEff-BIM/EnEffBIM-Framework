// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDoor_OpaqueDoor_Interior.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_OpaqueDoor_Interior
      // 

      const SimDoor_OpaqueDoor_Interior::SimDoor_ConstructionName_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_ConstructionName () const
      {
        return this->SimDoor_ConstructionName_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_ConstructionName_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_ConstructionName ()
      {
        return this->SimDoor_ConstructionName_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_ConstructionName (const SimDoor_ConstructionName_type& x)
      {
        this->SimDoor_ConstructionName_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_ConstructionName (const SimDoor_ConstructionName_optional& x)
      {
        this->SimDoor_ConstructionName_ = x;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_ConstructionName (::std::auto_ptr< SimDoor_ConstructionName_type > x)
      {
        this->SimDoor_ConstructionName_.set (x);
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_BldgSurfName_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_BldgSurfName () const
      {
        return this->SimDoor_BldgSurfName_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_BldgSurfName_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_BldgSurfName ()
      {
        return this->SimDoor_BldgSurfName_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_BldgSurfName (const SimDoor_BldgSurfName_type& x)
      {
        this->SimDoor_BldgSurfName_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_BldgSurfName (const SimDoor_BldgSurfName_optional& x)
      {
        this->SimDoor_BldgSurfName_ = x;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_BldgSurfName (::std::auto_ptr< SimDoor_BldgSurfName_type > x)
      {
        this->SimDoor_BldgSurfName_.set (x);
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_OutsdBndCondObject_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_OutsdBndCondObject () const
      {
        return this->SimDoor_OutsdBndCondObject_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_OutsdBndCondObject_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_OutsdBndCondObject ()
      {
        return this->SimDoor_OutsdBndCondObject_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_OutsdBndCondObject (const SimDoor_OutsdBndCondObject_type& x)
      {
        this->SimDoor_OutsdBndCondObject_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_OutsdBndCondObject (const SimDoor_OutsdBndCondObject_optional& x)
      {
        this->SimDoor_OutsdBndCondObject_ = x;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_OutsdBndCondObject (::std::auto_ptr< SimDoor_OutsdBndCondObject_type > x)
      {
        this->SimDoor_OutsdBndCondObject_.set (x);
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_Mult_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Mult () const
      {
        return this->SimDoor_Mult_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_Mult_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Mult ()
      {
        return this->SimDoor_Mult_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Mult (const SimDoor_Mult_type& x)
      {
        this->SimDoor_Mult_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Mult (const SimDoor_Mult_optional& x)
      {
        this->SimDoor_Mult_ = x;
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_StartXCoord_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_StartXCoord () const
      {
        return this->SimDoor_StartXCoord_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_StartXCoord_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_StartXCoord ()
      {
        return this->SimDoor_StartXCoord_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_StartXCoord (const SimDoor_StartXCoord_type& x)
      {
        this->SimDoor_StartXCoord_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_StartXCoord (const SimDoor_StartXCoord_optional& x)
      {
        this->SimDoor_StartXCoord_ = x;
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_StartZCoord_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_StartZCoord () const
      {
        return this->SimDoor_StartZCoord_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_StartZCoord_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_StartZCoord ()
      {
        return this->SimDoor_StartZCoord_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_StartZCoord (const SimDoor_StartZCoord_type& x)
      {
        this->SimDoor_StartZCoord_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_StartZCoord (const SimDoor_StartZCoord_optional& x)
      {
        this->SimDoor_StartZCoord_ = x;
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_Length_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Length () const
      {
        return this->SimDoor_Length_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_Length_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Length ()
      {
        return this->SimDoor_Length_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Length (const SimDoor_Length_type& x)
      {
        this->SimDoor_Length_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Length (const SimDoor_Length_optional& x)
      {
        this->SimDoor_Length_ = x;
      }

      const SimDoor_OpaqueDoor_Interior::SimDoor_Ht_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Ht () const
      {
        return this->SimDoor_Ht_;
      }

      SimDoor_OpaqueDoor_Interior::SimDoor_Ht_optional& SimDoor_OpaqueDoor_Interior::
      SimDoor_Ht ()
      {
        return this->SimDoor_Ht_;
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Ht (const SimDoor_Ht_type& x)
      {
        this->SimDoor_Ht_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      SimDoor_Ht (const SimDoor_Ht_optional& x)
      {
        this->SimDoor_Ht_ = x;
      }

      const SimDoor_OpaqueDoor_Interior::Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& SimDoor_OpaqueDoor_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle () const
      {
        return this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
      }

      SimDoor_OpaqueDoor_Interior::Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& SimDoor_OpaqueDoor_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle ()
      {
        return this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
      }

      void SimDoor_OpaqueDoor_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type& x)
      {
        this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_.set (x);
      }

      void SimDoor_OpaqueDoor_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& x)
      {
        this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_OpaqueDoor_Interior
      //

      SimDoor_OpaqueDoor_Interior::
      SimDoor_OpaqueDoor_Interior (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimDoor_OpaqueDoor (RefId),
        SimDoor_ConstructionName_ (this),
        SimDoor_BldgSurfName_ (this),
        SimDoor_OutsdBndCondObject_ (this),
        SimDoor_Mult_ (this),
        SimDoor_StartXCoord_ (this),
        SimDoor_StartZCoord_ (this),
        SimDoor_Length_ (this),
        SimDoor_Ht_ (this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (this)
      {
      }

      SimDoor_OpaqueDoor_Interior::
      SimDoor_OpaqueDoor_Interior (const SimDoor_OpaqueDoor_Interior& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_OpaqueDoor (x, f, c),
        SimDoor_ConstructionName_ (x.SimDoor_ConstructionName_, f, this),
        SimDoor_BldgSurfName_ (x.SimDoor_BldgSurfName_, f, this),
        SimDoor_OutsdBndCondObject_ (x.SimDoor_OutsdBndCondObject_, f, this),
        SimDoor_Mult_ (x.SimDoor_Mult_, f, this),
        SimDoor_StartXCoord_ (x.SimDoor_StartXCoord_, f, this),
        SimDoor_StartZCoord_ (x.SimDoor_StartZCoord_, f, this),
        SimDoor_Length_ (x.SimDoor_Length_, f, this),
        SimDoor_Ht_ (x.SimDoor_Ht_, f, this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (x.Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_, f, this)
      {
      }

      SimDoor_OpaqueDoor_Interior::
      SimDoor_OpaqueDoor_Interior (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_OpaqueDoor (e, f | ::xml_schema::flags::base, c),
        SimDoor_ConstructionName_ (this),
        SimDoor_BldgSurfName_ (this),
        SimDoor_OutsdBndCondObject_ (this),
        SimDoor_Mult_ (this),
        SimDoor_StartXCoord_ (this),
        SimDoor_StartZCoord_ (this),
        SimDoor_Length_ (this),
        SimDoor_Ht_ (this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDoor_OpaqueDoor_Interior::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimDoor_OpaqueDoor::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimDoor_ConstructionName
          //
          if (n.name () == "SimDoor_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_ConstructionName_type > r (
              SimDoor_ConstructionName_traits::create (i, f, this));

            if (!this->SimDoor_ConstructionName_)
            {
              this->SimDoor_ConstructionName_.set (r);
              continue;
            }
          }

          // SimDoor_BldgSurfName
          //
          if (n.name () == "SimDoor_BldgSurfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_BldgSurfName_type > r (
              SimDoor_BldgSurfName_traits::create (i, f, this));

            if (!this->SimDoor_BldgSurfName_)
            {
              this->SimDoor_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimDoor_OutsdBndCondObject
          //
          if (n.name () == "SimDoor_OutsdBndCondObject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_OutsdBndCondObject_type > r (
              SimDoor_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimDoor_OutsdBndCondObject_)
            {
              this->SimDoor_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimDoor_Mult
          //
          if (n.name () == "SimDoor_Mult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Mult_)
            {
              this->SimDoor_Mult_.set (SimDoor_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_StartXCoord
          //
          if (n.name () == "SimDoor_StartXCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_StartXCoord_)
            {
              this->SimDoor_StartXCoord_.set (SimDoor_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_StartZCoord
          //
          if (n.name () == "SimDoor_StartZCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_StartZCoord_)
            {
              this->SimDoor_StartZCoord_.set (SimDoor_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_Length
          //
          if (n.name () == "SimDoor_Length" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Length_)
            {
              this->SimDoor_Length_.set (SimDoor_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_Ht
          //
          if (n.name () == "SimDoor_Ht" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Ht_)
            {
              this->SimDoor_Ht_.set (SimDoor_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle
          //
          if (n.name () == "Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_)
            {
              this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_.set (Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimDoor_OpaqueDoor_Interior* SimDoor_OpaqueDoor_Interior::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDoor_OpaqueDoor_Interior (*this, f, c);
      }

      SimDoor_OpaqueDoor_Interior& SimDoor_OpaqueDoor_Interior::
      operator= (const SimDoor_OpaqueDoor_Interior& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimDoor_OpaqueDoor& > (*this) = x;
          this->SimDoor_ConstructionName_ = x.SimDoor_ConstructionName_;
          this->SimDoor_BldgSurfName_ = x.SimDoor_BldgSurfName_;
          this->SimDoor_OutsdBndCondObject_ = x.SimDoor_OutsdBndCondObject_;
          this->SimDoor_Mult_ = x.SimDoor_Mult_;
          this->SimDoor_StartXCoord_ = x.SimDoor_StartXCoord_;
          this->SimDoor_StartZCoord_ = x.SimDoor_StartZCoord_;
          this->SimDoor_Length_ = x.SimDoor_Length_;
          this->SimDoor_Ht_ = x.SimDoor_Ht_;
          this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ = x.Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
        }

        return *this;
      }

      SimDoor_OpaqueDoor_Interior::
      ~SimDoor_OpaqueDoor_Interior ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

