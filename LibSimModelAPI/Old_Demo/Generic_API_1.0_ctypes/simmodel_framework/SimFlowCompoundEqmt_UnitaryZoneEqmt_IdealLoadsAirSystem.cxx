// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_ZoneSupAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneSupAirNodeName () const
      {
        return this->SimFlowCompEqmt_ZoneSupAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_ZoneSupAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneSupAirNodeName ()
      {
        return this->SimFlowCompEqmt_ZoneSupAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneSupAirNodeName (const SimFlowCompEqmt_ZoneSupAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_ZoneSupAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneSupAirNodeName (const SimFlowCompEqmt_ZoneSupAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_ZoneSupAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneSupAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ZoneSupAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_ZoneSupAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_ZoneExhaustAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneExhaustAirNodeName () const
      {
        return this->SimFlowCompEqmt_ZoneExhaustAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_ZoneExhaustAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneExhaustAirNodeName ()
      {
        return this->SimFlowCompEqmt_ZoneExhaustAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneExhaustAirNodeName (const SimFlowCompEqmt_ZoneExhaustAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_ZoneExhaustAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneExhaustAirNodeName (const SimFlowCompEqmt_ZoneExhaustAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_ZoneExhaustAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_ZoneExhaustAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ZoneExhaustAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_ZoneExhaustAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirTemp () const
      {
        return this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirTemp ()
      {
        return this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirTemp (const SimFlowCompEqmt_MaxHeatingSupplyAirTemp_type& x)
      {
        this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirTemp (const SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional& x)
      {
        this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MinCoolSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirTemp () const
      {
        return this->SimFlowCompEqmt_MinCoolSupplyAirTemp_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MinCoolSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirTemp ()
      {
        return this->SimFlowCompEqmt_MinCoolSupplyAirTemp_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirTemp (const SimFlowCompEqmt_MinCoolSupplyAirTemp_type& x)
      {
        this->SimFlowCompEqmt_MinCoolSupplyAirTemp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirTemp (const SimFlowCompEqmt_MinCoolSupplyAirTemp_optional& x)
      {
        this->SimFlowCompEqmt_MinCoolSupplyAirTemp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio () const
      {
        return this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio ()
      {
        return this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio (const SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_type& x)
      {
        this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio (const SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional& x)
      {
        this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirHumdRatio () const
      {
        return this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirHumdRatio ()
      {
        return this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirHumdRatio (const SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_type& x)
      {
        this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MinCoolSupplyAirHumdRatio (const SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional& x)
      {
        this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatingLimit_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingLimit () const
      {
        return this->SimFlowCompEqmt_HeatingLimit_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatingLimit_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingLimit ()
      {
        return this->SimFlowCompEqmt_HeatingLimit_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingLimit (const SimFlowCompEqmt_HeatingLimit_type& x)
      {
        this->SimFlowCompEqmt_HeatingLimit_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingLimit (const SimFlowCompEqmt_HeatingLimit_optional& x)
      {
        this->SimFlowCompEqmt_HeatingLimit_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingLimit (::std::auto_ptr< SimFlowCompEqmt_HeatingLimit_type > x)
      {
        this->SimFlowCompEqmt_HeatingLimit_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxHeatingAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxHeatingAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxHeatingAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingAirFlowRate (const SimFlowCompEqmt_MaxHeatingAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxHeatingAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxHeatingAirFlowRate (const SimFlowCompEqmt_MaxHeatingAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxHeatingAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxSensHeatingCap_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxSensHeatingCap () const
      {
        return this->SimFlowCompEqmt_MaxSensHeatingCap_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxSensHeatingCap_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxSensHeatingCap ()
      {
        return this->SimFlowCompEqmt_MaxSensHeatingCap_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxSensHeatingCap (const SimFlowCompEqmt_MaxSensHeatingCap_type& x)
      {
        this->SimFlowCompEqmt_MaxSensHeatingCap_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxSensHeatingCap (const SimFlowCompEqmt_MaxSensHeatingCap_optional& x)
      {
        this->SimFlowCompEqmt_MaxSensHeatingCap_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolLimit_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolLimit () const
      {
        return this->SimFlowCompEqmt_CoolLimit_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolLimit_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolLimit ()
      {
        return this->SimFlowCompEqmt_CoolLimit_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolLimit (const SimFlowCompEqmt_CoolLimit_type& x)
      {
        this->SimFlowCompEqmt_CoolLimit_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolLimit (const SimFlowCompEqmt_CoolLimit_optional& x)
      {
        this->SimFlowCompEqmt_CoolLimit_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolLimit (::std::auto_ptr< SimFlowCompEqmt_CoolLimit_type > x)
      {
        this->SimFlowCompEqmt_CoolLimit_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxCoolAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxCoolAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxCoolAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxCoolAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxCoolAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxCoolAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxCoolAirFlowRate (const SimFlowCompEqmt_MaxCoolAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxCoolAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxCoolAirFlowRate (const SimFlowCompEqmt_MaxCoolAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxCoolAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxTotalCoolCap_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxTotalCoolCap () const
      {
        return this->SimFlowCompEqmt_MaxTotalCoolCap_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_MaxTotalCoolCap_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxTotalCoolCap ()
      {
        return this->SimFlowCompEqmt_MaxTotalCoolCap_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxTotalCoolCap (const SimFlowCompEqmt_MaxTotalCoolCap_type& x)
      {
        this->SimFlowCompEqmt_MaxTotalCoolCap_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_MaxTotalCoolCap (const SimFlowCompEqmt_MaxTotalCoolCap_optional& x)
      {
        this->SimFlowCompEqmt_MaxTotalCoolCap_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatingAvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingAvailSchedName () const
      {
        return this->SimFlowCompEqmt_HeatingAvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatingAvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingAvailSchedName ()
      {
        return this->SimFlowCompEqmt_HeatingAvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingAvailSchedName (const SimFlowCompEqmt_HeatingAvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_HeatingAvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingAvailSchedName (const SimFlowCompEqmt_HeatingAvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_HeatingAvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatingAvailSchedName (::std::auto_ptr< SimFlowCompEqmt_HeatingAvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_HeatingAvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolAvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolAvailSchedName () const
      {
        return this->SimFlowCompEqmt_CoolAvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolAvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolAvailSchedName ()
      {
        return this->SimFlowCompEqmt_CoolAvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolAvailSchedName (const SimFlowCompEqmt_CoolAvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_CoolAvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolAvailSchedName (const SimFlowCompEqmt_CoolAvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_CoolAvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolAvailSchedName (::std::auto_ptr< SimFlowCompEqmt_CoolAvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_CoolAvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DehumidCntlType () const
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DehumidCntlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DehumidCntlType ()
      {
        return this->SimFlowCompEqmt_DehumidCntlType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_type& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_optional& x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DehumidCntlType (::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > x)
      {
        this->SimFlowCompEqmt_DehumidCntlType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolSensHeatRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolSensHeatRatio () const
      {
        return this->SimFlowCompEqmt_CoolSensHeatRatio_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_CoolSensHeatRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolSensHeatRatio ()
      {
        return this->SimFlowCompEqmt_CoolSensHeatRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolSensHeatRatio (const SimFlowCompEqmt_CoolSensHeatRatio_type& x)
      {
        this->SimFlowCompEqmt_CoolSensHeatRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_CoolSensHeatRatio (const SimFlowCompEqmt_CoolSensHeatRatio_optional& x)
      {
        this->SimFlowCompEqmt_CoolSensHeatRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HumdCtrlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HumdCtrlType () const
      {
        return this->SimFlowCompEqmt_HumdCtrlType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HumdCtrlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HumdCtrlType ()
      {
        return this->SimFlowCompEqmt_HumdCtrlType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HumdCtrlType (const SimFlowCompEqmt_HumdCtrlType_type& x)
      {
        this->SimFlowCompEqmt_HumdCtrlType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HumdCtrlType (const SimFlowCompEqmt_HumdCtrlType_optional& x)
      {
        this->SimFlowCompEqmt_HumdCtrlType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HumdCtrlType (::std::auto_ptr< SimFlowCompEqmt_HumdCtrlType_type > x)
      {
        this->SimFlowCompEqmt_HumdCtrlType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DesignSpecOutdrAirObjName () const
      {
        return this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DesignSpecOutdrAirObjName ()
      {
        return this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DesignSpecOutdrAirObjName (const SimFlowCompEqmt_DesignSpecOutdrAirObjName_type& x)
      {
        this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DesignSpecOutdrAirObjName (const SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional& x)
      {
        this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DesignSpecOutdrAirObjName (::std::auto_ptr< SimFlowCompEqmt_DesignSpecOutdrAirObjName_type > x)
      {
        this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_OutdrAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdrAirInletNodeName () const
      {
        return this->SimFlowCompEqmt_OutdrAirInletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_OutdrAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdrAirInletNodeName ()
      {
        return this->SimFlowCompEqmt_OutdrAirInletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdrAirInletNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirInletNodeName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DemandCtrlledVentilationType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DemandCtrlledVentilationType () const
      {
        return this->SimFlowCompEqmt_DemandCtrlledVentilationType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_DemandCtrlledVentilationType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DemandCtrlledVentilationType ()
      {
        return this->SimFlowCompEqmt_DemandCtrlledVentilationType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DemandCtrlledVentilationType (const SimFlowCompEqmt_DemandCtrlledVentilationType_type& x)
      {
        this->SimFlowCompEqmt_DemandCtrlledVentilationType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DemandCtrlledVentilationType (const SimFlowCompEqmt_DemandCtrlledVentilationType_optional& x)
      {
        this->SimFlowCompEqmt_DemandCtrlledVentilationType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_DemandCtrlledVentilationType (::std::auto_ptr< SimFlowCompEqmt_DemandCtrlledVentilationType_type > x)
      {
        this->SimFlowCompEqmt_DemandCtrlledVentilationType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_OutdoorAirEconomizerType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdoorAirEconomizerType () const
      {
        return this->SimFlowCompEqmt_OutdoorAirEconomizerType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_OutdoorAirEconomizerType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdoorAirEconomizerType ()
      {
        return this->SimFlowCompEqmt_OutdoorAirEconomizerType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdoorAirEconomizerType (const SimFlowCompEqmt_OutdoorAirEconomizerType_type& x)
      {
        this->SimFlowCompEqmt_OutdoorAirEconomizerType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdoorAirEconomizerType (const SimFlowCompEqmt_OutdoorAirEconomizerType_optional& x)
      {
        this->SimFlowCompEqmt_OutdoorAirEconomizerType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_OutdoorAirEconomizerType (::std::auto_ptr< SimFlowCompEqmt_OutdoorAirEconomizerType_type > x)
      {
        this->SimFlowCompEqmt_OutdoorAirEconomizerType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatRecovType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatRecovType () const
      {
        return this->SimFlowCompEqmt_HeatRecovType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_HeatRecovType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatRecovType ()
      {
        return this->SimFlowCompEqmt_HeatRecovType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatRecovType (const SimFlowCompEqmt_HeatRecovType_type& x)
      {
        this->SimFlowCompEqmt_HeatRecovType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatRecovType (const SimFlowCompEqmt_HeatRecovType_optional& x)
      {
        this->SimFlowCompEqmt_HeatRecovType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_HeatRecovType (::std::auto_ptr< SimFlowCompEqmt_HeatRecovType_type > x)
      {
        this->SimFlowCompEqmt_HeatRecovType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_SensHeatRecovEffect_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_SensHeatRecovEffect () const
      {
        return this->SimFlowCompEqmt_SensHeatRecovEffect_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_SensHeatRecovEffect_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_SensHeatRecovEffect ()
      {
        return this->SimFlowCompEqmt_SensHeatRecovEffect_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_SensHeatRecovEffect (const SimFlowCompEqmt_SensHeatRecovEffect_type& x)
      {
        this->SimFlowCompEqmt_SensHeatRecovEffect_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_SensHeatRecovEffect (const SimFlowCompEqmt_SensHeatRecovEffect_optional& x)
      {
        this->SimFlowCompEqmt_SensHeatRecovEffect_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_LatentHeatRecovEffect_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_LatentHeatRecovEffect () const
      {
        return this->SimFlowCompEqmt_LatentHeatRecovEffect_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::SimFlowCompEqmt_LatentHeatRecovEffect_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_LatentHeatRecovEffect ()
      {
        return this->SimFlowCompEqmt_LatentHeatRecovEffect_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_LatentHeatRecovEffect (const SimFlowCompEqmt_LatentHeatRecovEffect_type& x)
      {
        this->SimFlowCompEqmt_LatentHeatRecovEffect_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompEqmt_LatentHeatRecovEffect (const SimFlowCompEqmt_LatentHeatRecovEffect_optional& x)
      {
        this->SimFlowCompEqmt_LatentHeatRecovEffect_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_ZoneSupAirNodeName_ (this),
        SimFlowCompEqmt_ZoneExhaustAirNodeName_ (this),
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp_ (this),
        SimFlowCompEqmt_MinCoolSupplyAirTemp_ (this),
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_ (this),
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_ (this),
        SimFlowCompEqmt_HeatingLimit_ (this),
        SimFlowCompEqmt_MaxHeatingAirFlowRate_ (this),
        SimFlowCompEqmt_MaxSensHeatingCap_ (this),
        SimFlowCompEqmt_CoolLimit_ (this),
        SimFlowCompEqmt_MaxCoolAirFlowRate_ (this),
        SimFlowCompEqmt_MaxTotalCoolCap_ (this),
        SimFlowCompEqmt_HeatingAvailSchedName_ (this),
        SimFlowCompEqmt_CoolAvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_CoolSensHeatRatio_ (this),
        SimFlowCompEqmt_HumdCtrlType_ (this),
        SimFlowCompEqmt_DesignSpecOutdrAirObjName_ (this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (this),
        SimFlowCompEqmt_DemandCtrlledVentilationType_ (this),
        SimFlowCompEqmt_OutdoorAirEconomizerType_ (this),
        SimFlowCompEqmt_HeatRecovType_ (this),
        SimFlowCompEqmt_SensHeatRecovEffect_ (this),
        SimFlowCompEqmt_LatentHeatRecovEffect_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_ZoneSupAirNodeName_ (x.SimFlowCompEqmt_ZoneSupAirNodeName_, f, this),
        SimFlowCompEqmt_ZoneExhaustAirNodeName_ (x.SimFlowCompEqmt_ZoneExhaustAirNodeName_, f, this),
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp_ (x.SimFlowCompEqmt_MaxHeatingSupplyAirTemp_, f, this),
        SimFlowCompEqmt_MinCoolSupplyAirTemp_ (x.SimFlowCompEqmt_MinCoolSupplyAirTemp_, f, this),
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_ (x.SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_, f, this),
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_ (x.SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_, f, this),
        SimFlowCompEqmt_HeatingLimit_ (x.SimFlowCompEqmt_HeatingLimit_, f, this),
        SimFlowCompEqmt_MaxHeatingAirFlowRate_ (x.SimFlowCompEqmt_MaxHeatingAirFlowRate_, f, this),
        SimFlowCompEqmt_MaxSensHeatingCap_ (x.SimFlowCompEqmt_MaxSensHeatingCap_, f, this),
        SimFlowCompEqmt_CoolLimit_ (x.SimFlowCompEqmt_CoolLimit_, f, this),
        SimFlowCompEqmt_MaxCoolAirFlowRate_ (x.SimFlowCompEqmt_MaxCoolAirFlowRate_, f, this),
        SimFlowCompEqmt_MaxTotalCoolCap_ (x.SimFlowCompEqmt_MaxTotalCoolCap_, f, this),
        SimFlowCompEqmt_HeatingAvailSchedName_ (x.SimFlowCompEqmt_HeatingAvailSchedName_, f, this),
        SimFlowCompEqmt_CoolAvailSchedName_ (x.SimFlowCompEqmt_CoolAvailSchedName_, f, this),
        SimFlowCompEqmt_DehumidCntlType_ (x.SimFlowCompEqmt_DehumidCntlType_, f, this),
        SimFlowCompEqmt_CoolSensHeatRatio_ (x.SimFlowCompEqmt_CoolSensHeatRatio_, f, this),
        SimFlowCompEqmt_HumdCtrlType_ (x.SimFlowCompEqmt_HumdCtrlType_, f, this),
        SimFlowCompEqmt_DesignSpecOutdrAirObjName_ (x.SimFlowCompEqmt_DesignSpecOutdrAirObjName_, f, this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (x.SimFlowCompEqmt_OutdrAirInletNodeName_, f, this),
        SimFlowCompEqmt_DemandCtrlledVentilationType_ (x.SimFlowCompEqmt_DemandCtrlledVentilationType_, f, this),
        SimFlowCompEqmt_OutdoorAirEconomizerType_ (x.SimFlowCompEqmt_OutdoorAirEconomizerType_, f, this),
        SimFlowCompEqmt_HeatRecovType_ (x.SimFlowCompEqmt_HeatRecovType_, f, this),
        SimFlowCompEqmt_SensHeatRecovEffect_ (x.SimFlowCompEqmt_SensHeatRecovEffect_, f, this),
        SimFlowCompEqmt_LatentHeatRecovEffect_ (x.SimFlowCompEqmt_LatentHeatRecovEffect_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_ZoneSupAirNodeName_ (this),
        SimFlowCompEqmt_ZoneExhaustAirNodeName_ (this),
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp_ (this),
        SimFlowCompEqmt_MinCoolSupplyAirTemp_ (this),
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_ (this),
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_ (this),
        SimFlowCompEqmt_HeatingLimit_ (this),
        SimFlowCompEqmt_MaxHeatingAirFlowRate_ (this),
        SimFlowCompEqmt_MaxSensHeatingCap_ (this),
        SimFlowCompEqmt_CoolLimit_ (this),
        SimFlowCompEqmt_MaxCoolAirFlowRate_ (this),
        SimFlowCompEqmt_MaxTotalCoolCap_ (this),
        SimFlowCompEqmt_HeatingAvailSchedName_ (this),
        SimFlowCompEqmt_CoolAvailSchedName_ (this),
        SimFlowCompEqmt_DehumidCntlType_ (this),
        SimFlowCompEqmt_CoolSensHeatRatio_ (this),
        SimFlowCompEqmt_HumdCtrlType_ (this),
        SimFlowCompEqmt_DesignSpecOutdrAirObjName_ (this),
        SimFlowCompEqmt_OutdrAirInletNodeName_ (this),
        SimFlowCompEqmt_DemandCtrlledVentilationType_ (this),
        SimFlowCompEqmt_OutdoorAirEconomizerType_ (this),
        SimFlowCompEqmt_HeatRecovType_ (this),
        SimFlowCompEqmt_SensHeatRecovEffect_ (this),
        SimFlowCompEqmt_LatentHeatRecovEffect_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_ZoneSupAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_ZoneSupAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_ZoneSupAirNodeName_type > r (
              SimFlowCompEqmt_ZoneSupAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_ZoneSupAirNodeName_)
            {
              this->SimFlowCompEqmt_ZoneSupAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_ZoneExhaustAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_ZoneExhaustAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_ZoneExhaustAirNodeName_type > r (
              SimFlowCompEqmt_ZoneExhaustAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_ZoneExhaustAirNodeName_)
            {
              this->SimFlowCompEqmt_ZoneExhaustAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxHeatingSupplyAirTemp
          //
          if (n.name () == "SimFlowCompEqmt_MaxHeatingSupplyAirTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_)
            {
              this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_.set (SimFlowCompEqmt_MaxHeatingSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MinCoolSupplyAirTemp
          //
          if (n.name () == "SimFlowCompEqmt_MinCoolSupplyAirTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinCoolSupplyAirTemp_)
            {
              this->SimFlowCompEqmt_MinCoolSupplyAirTemp_.set (SimFlowCompEqmt_MinCoolSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio
          //
          if (n.name () == "SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_)
            {
              this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_.set (SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MinCoolSupplyAirHumdRatio
          //
          if (n.name () == "SimFlowCompEqmt_MinCoolSupplyAirHumdRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_)
            {
              this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_.set (SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingLimit
          //
          if (n.name () == "SimFlowCompEqmt_HeatingLimit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingLimit_type > r (
              SimFlowCompEqmt_HeatingLimit_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingLimit_)
            {
              this->SimFlowCompEqmt_HeatingLimit_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxHeatingAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxHeatingAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxHeatingAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxHeatingAirFlowRate_.set (SimFlowCompEqmt_MaxHeatingAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSensHeatingCap
          //
          if (n.name () == "SimFlowCompEqmt_MaxSensHeatingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSensHeatingCap_)
            {
              this->SimFlowCompEqmt_MaxSensHeatingCap_.set (SimFlowCompEqmt_MaxSensHeatingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CoolLimit
          //
          if (n.name () == "SimFlowCompEqmt_CoolLimit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolLimit_type > r (
              SimFlowCompEqmt_CoolLimit_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolLimit_)
            {
              this->SimFlowCompEqmt_CoolLimit_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxCoolAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxCoolAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxCoolAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxCoolAirFlowRate_.set (SimFlowCompEqmt_MaxCoolAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxTotalCoolCap
          //
          if (n.name () == "SimFlowCompEqmt_MaxTotalCoolCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxTotalCoolCap_)
            {
              this->SimFlowCompEqmt_MaxTotalCoolCap_.set (SimFlowCompEqmt_MaxTotalCoolCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingAvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_HeatingAvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingAvailSchedName_type > r (
              SimFlowCompEqmt_HeatingAvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingAvailSchedName_)
            {
              this->SimFlowCompEqmt_HeatingAvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolAvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_CoolAvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolAvailSchedName_type > r (
              SimFlowCompEqmt_CoolAvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolAvailSchedName_)
            {
              this->SimFlowCompEqmt_CoolAvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DehumidCntlType
          //
          if (n.name () == "SimFlowCompEqmt_DehumidCntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > r (
              SimFlowCompEqmt_DehumidCntlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DehumidCntlType_)
            {
              this->SimFlowCompEqmt_DehumidCntlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolSensHeatRatio
          //
          if (n.name () == "SimFlowCompEqmt_CoolSensHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_CoolSensHeatRatio_)
            {
              this->SimFlowCompEqmt_CoolSensHeatRatio_.set (SimFlowCompEqmt_CoolSensHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HumdCtrlType
          //
          if (n.name () == "SimFlowCompEqmt_HumdCtrlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HumdCtrlType_type > r (
              SimFlowCompEqmt_HumdCtrlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HumdCtrlType_)
            {
              this->SimFlowCompEqmt_HumdCtrlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DesignSpecOutdrAirObjName
          //
          if (n.name () == "SimFlowCompEqmt_DesignSpecOutdrAirObjName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DesignSpecOutdrAirObjName_type > r (
              SimFlowCompEqmt_DesignSpecOutdrAirObjName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_)
            {
              this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirInletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirInletNodeName_type > r (
              SimFlowCompEqmt_OutdrAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirInletNodeName_)
            {
              this->SimFlowCompEqmt_OutdrAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_DemandCtrlledVentilationType
          //
          if (n.name () == "SimFlowCompEqmt_DemandCtrlledVentilationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_DemandCtrlledVentilationType_type > r (
              SimFlowCompEqmt_DemandCtrlledVentilationType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_DemandCtrlledVentilationType_)
            {
              this->SimFlowCompEqmt_DemandCtrlledVentilationType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdoorAirEconomizerType
          //
          if (n.name () == "SimFlowCompEqmt_OutdoorAirEconomizerType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdoorAirEconomizerType_type > r (
              SimFlowCompEqmt_OutdoorAirEconomizerType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdoorAirEconomizerType_)
            {
              this->SimFlowCompEqmt_OutdoorAirEconomizerType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatRecovType
          //
          if (n.name () == "SimFlowCompEqmt_HeatRecovType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatRecovType_type > r (
              SimFlowCompEqmt_HeatRecovType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatRecovType_)
            {
              this->SimFlowCompEqmt_HeatRecovType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SensHeatRecovEffect
          //
          if (n.name () == "SimFlowCompEqmt_SensHeatRecovEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_SensHeatRecovEffect_)
            {
              this->SimFlowCompEqmt_SensHeatRecovEffect_.set (SimFlowCompEqmt_SensHeatRecovEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_LatentHeatRecovEffect
          //
          if (n.name () == "SimFlowCompEqmt_LatentHeatRecovEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_LatentHeatRecovEffect_)
            {
              this->SimFlowCompEqmt_LatentHeatRecovEffect_.set (SimFlowCompEqmt_LatentHeatRecovEffect_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem* SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem& SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_ZoneSupAirNodeName_ = x.SimFlowCompEqmt_ZoneSupAirNodeName_;
          this->SimFlowCompEqmt_ZoneExhaustAirNodeName_ = x.SimFlowCompEqmt_ZoneExhaustAirNodeName_;
          this->SimFlowCompEqmt_MaxHeatingSupplyAirTemp_ = x.SimFlowCompEqmt_MaxHeatingSupplyAirTemp_;
          this->SimFlowCompEqmt_MinCoolSupplyAirTemp_ = x.SimFlowCompEqmt_MinCoolSupplyAirTemp_;
          this->SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_ = x.SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_;
          this->SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_ = x.SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_;
          this->SimFlowCompEqmt_HeatingLimit_ = x.SimFlowCompEqmt_HeatingLimit_;
          this->SimFlowCompEqmt_MaxHeatingAirFlowRate_ = x.SimFlowCompEqmt_MaxHeatingAirFlowRate_;
          this->SimFlowCompEqmt_MaxSensHeatingCap_ = x.SimFlowCompEqmt_MaxSensHeatingCap_;
          this->SimFlowCompEqmt_CoolLimit_ = x.SimFlowCompEqmt_CoolLimit_;
          this->SimFlowCompEqmt_MaxCoolAirFlowRate_ = x.SimFlowCompEqmt_MaxCoolAirFlowRate_;
          this->SimFlowCompEqmt_MaxTotalCoolCap_ = x.SimFlowCompEqmt_MaxTotalCoolCap_;
          this->SimFlowCompEqmt_HeatingAvailSchedName_ = x.SimFlowCompEqmt_HeatingAvailSchedName_;
          this->SimFlowCompEqmt_CoolAvailSchedName_ = x.SimFlowCompEqmt_CoolAvailSchedName_;
          this->SimFlowCompEqmt_DehumidCntlType_ = x.SimFlowCompEqmt_DehumidCntlType_;
          this->SimFlowCompEqmt_CoolSensHeatRatio_ = x.SimFlowCompEqmt_CoolSensHeatRatio_;
          this->SimFlowCompEqmt_HumdCtrlType_ = x.SimFlowCompEqmt_HumdCtrlType_;
          this->SimFlowCompEqmt_DesignSpecOutdrAirObjName_ = x.SimFlowCompEqmt_DesignSpecOutdrAirObjName_;
          this->SimFlowCompEqmt_OutdrAirInletNodeName_ = x.SimFlowCompEqmt_OutdrAirInletNodeName_;
          this->SimFlowCompEqmt_DemandCtrlledVentilationType_ = x.SimFlowCompEqmt_DemandCtrlledVentilationType_;
          this->SimFlowCompEqmt_OutdoorAirEconomizerType_ = x.SimFlowCompEqmt_OutdoorAirEconomizerType_;
          this->SimFlowCompEqmt_HeatRecovType_ = x.SimFlowCompEqmt_HeatRecovType_;
          this->SimFlowCompEqmt_SensHeatRecovEffect_ = x.SimFlowCompEqmt_SensHeatRecovEffect_;
          this->SimFlowCompEqmt_LatentHeatRecovEffect_ = x.SimFlowCompEqmt_LatentHeatRecovEffect_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

