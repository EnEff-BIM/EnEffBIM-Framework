// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXTWO_SPEED_HXX
#define SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXTWO_SPEED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_coolingcoildx.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed: public ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX
      {
        public:
        // SimFlowEnergyTrans_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailSchedName_type > SimFlowEnergyTrans_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailSchedName_type, char > SimFlowEnergyTrans_AvailSchedName_traits;

        const SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName () const;

        SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName ();

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x);

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x);

        void
        SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > p);

        // SimFlowEnergyTrans_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirInNodeName_type > SimFlowEnergyTrans_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirInNodeName_type, char > SimFlowEnergyTrans_AirInNodeName_traits;

        const SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName () const;

        SimFlowEnergyTrans_AirInNodeName_optional&
        SimFlowEnergyTrans_AirInNodeName ();

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x);

        void
        SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > p);

        // SimFlowEnergyTrans_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AirOutNodeName_type > SimFlowEnergyTrans_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AirOutNodeName_type, char > SimFlowEnergyTrans_AirOutNodeName_traits;

        const SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName () const;

        SimFlowEnergyTrans_AirOutNodeName_optional&
        SimFlowEnergyTrans_AirOutNodeName ();

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x);

        void
        SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > p);

        // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type, char > SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits;

        const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional&
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const;

        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional&
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ();

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x);

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x);

        void
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > p);

        // SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type, char > SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_traits;

        const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName () const;

        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName ();

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type, char > SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_traits;

        const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional&
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName () const;

        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional&
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName ();

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > p);

        // SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type, char > SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_traits;

        const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional&
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName () const;

        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional&
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName ();

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type, char > SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_traits;

        const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional&
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName () const;

        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional&
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName ();

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > p);

        // SimFlowEnergyTrans_PartLoadFractCorrelCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type, char > SimFlowEnergyTrans_PartLoadFractCorrelCurveName_traits;

        const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional&
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName () const;

        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional&
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName ();

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type& x);

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& x);

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > p);

        // SimFlowEnergyTrans_CondAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondAirInletNodeName_type > SimFlowEnergyTrans_CondAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondAirInletNodeName_type, char > SimFlowEnergyTrans_CondAirInletNodeName_traits;

        const SimFlowEnergyTrans_CondAirInletNodeName_optional&
        SimFlowEnergyTrans_CondAirInletNodeName () const;

        SimFlowEnergyTrans_CondAirInletNodeName_optional&
        SimFlowEnergyTrans_CondAirInletNodeName ();

        void
        SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CondAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > p);

        // SimFlowEnergyTrans_CondType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondType_type > SimFlowEnergyTrans_CondType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondType_type, char > SimFlowEnergyTrans_CondType_traits;

        const SimFlowEnergyTrans_CondType_optional&
        SimFlowEnergyTrans_CondType () const;

        SimFlowEnergyTrans_CondType_optional&
        SimFlowEnergyTrans_CondType ();

        void
        SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_type& x);

        void
        SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_optional& x);

        void
        SimFlowEnergyTrans_CondType (::std::auto_ptr< SimFlowEnergyTrans_CondType_type > p);

        // SimFlowEnergyTrans_SupWaterStoTankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_SupWaterStoTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SupWaterStoTankName_type > SimFlowEnergyTrans_SupWaterStoTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SupWaterStoTankName_type, char > SimFlowEnergyTrans_SupWaterStoTankName_traits;

        const SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName () const;

        SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName ();

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > p);

        // SimFlowEnergyTrans_BasinHeatCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_BasinHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatCap_type > SimFlowEnergyTrans_BasinHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_BasinHeatCap_traits;

        const SimFlowEnergyTrans_BasinHeatCap_optional&
        SimFlowEnergyTrans_BasinHeatCap () const;

        SimFlowEnergyTrans_BasinHeatCap_optional&
        SimFlowEnergyTrans_BasinHeatCap ();

        void
        SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_type& x);

        void
        SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_optional& x);

        // SimFlowEnergyTrans_BasinHeatSetpointTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_BasinHeatSetpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatSetpointTemp_type > SimFlowEnergyTrans_BasinHeatSetpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatSetpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_BasinHeatSetpointTemp_traits;

        const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional&
        SimFlowEnergyTrans_BasinHeatSetpointTemp () const;

        SimFlowEnergyTrans_BasinHeatSetpointTemp_optional&
        SimFlowEnergyTrans_BasinHeatSetpointTemp ();

        void
        SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_type& x);

        void
        SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& x);

        // SimFlowEnergyTrans_BasinHeatOperatSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_BasinHeatOperatSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > SimFlowEnergyTrans_BasinHeatOperatSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BasinHeatOperatSchedName_type, char > SimFlowEnergyTrans_BasinHeatOperatSchedName_traits;

        const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional&
        SimFlowEnergyTrans_BasinHeatOperatSchedName () const;

        SimFlowEnergyTrans_BasinHeatOperatSchedName_optional&
        SimFlowEnergyTrans_BasinHeatOperatSchedName ();

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_type& x);

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& x);

        void
        SimFlowEnergyTrans_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > p);

        // SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_type > SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_traits;

        const SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional&
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap () const;

        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional&
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap ();

        void
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_type& x);

        void
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional& x);

        // SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_type > SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_traits;

        const SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio () const;

        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio ();

        void
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_type& x);

        void
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional& x);

        // SimFlowEnergyTrans_RatedHighSpeedCOP
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedHighSpeedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedHighSpeedCOP_type > SimFlowEnergyTrans_RatedHighSpeedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedHighSpeedCOP_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedHighSpeedCOP_traits;

        const SimFlowEnergyTrans_RatedHighSpeedCOP_optional&
        SimFlowEnergyTrans_RatedHighSpeedCOP () const;

        SimFlowEnergyTrans_RatedHighSpeedCOP_optional&
        SimFlowEnergyTrans_RatedHighSpeedCOP ();

        void
        SimFlowEnergyTrans_RatedHighSpeedCOP (const SimFlowEnergyTrans_RatedHighSpeedCOP_type& x);

        void
        SimFlowEnergyTrans_RatedHighSpeedCOP (const SimFlowEnergyTrans_RatedHighSpeedCOP_optional& x);

        // SimFlowEnergyTrans_RatedHighSpeedAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_type > SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_traits;

        const SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate () const;

        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate ();

        void
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate (const SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate (const SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional& x);

        // SimFlowEnergyTrans_UnitInternalStaticAirPressure
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_UnitInternalStaticAirPressure_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_UnitInternalStaticAirPressure_type > SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_UnitInternalStaticAirPressure_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_UnitInternalStaticAirPressure_traits;

        const SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional&
        SimFlowEnergyTrans_UnitInternalStaticAirPressure () const;

        SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional&
        SimFlowEnergyTrans_UnitInternalStaticAirPressure ();

        void
        SimFlowEnergyTrans_UnitInternalStaticAirPressure (const SimFlowEnergyTrans_UnitInternalStaticAirPressure_type& x);

        void
        SimFlowEnergyTrans_UnitInternalStaticAirPressure (const SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional& x);

        // SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_type > SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_traits;

        const SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional&
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap () const;

        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional&
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap ();

        void
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_type& x);

        void
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap (const SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional& x);

        // SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_type > SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_traits;

        const SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio () const;

        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio ();

        void
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_type& x);

        void
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio (const SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional& x);

        // SimFlowEnergyTrans_RatedLowSpeedCOP
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedLowSpeedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedLowSpeedCOP_type > SimFlowEnergyTrans_RatedLowSpeedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedLowSpeedCOP_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedLowSpeedCOP_traits;

        const SimFlowEnergyTrans_RatedLowSpeedCOP_optional&
        SimFlowEnergyTrans_RatedLowSpeedCOP () const;

        SimFlowEnergyTrans_RatedLowSpeedCOP_optional&
        SimFlowEnergyTrans_RatedLowSpeedCOP ();

        void
        SimFlowEnergyTrans_RatedLowSpeedCOP (const SimFlowEnergyTrans_RatedLowSpeedCOP_type& x);

        void
        SimFlowEnergyTrans_RatedLowSpeedCOP (const SimFlowEnergyTrans_RatedLowSpeedCOP_optional& x);

        // SimFlowEnergyTrans_RatedLowSpeedAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_type > SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_traits;

        const SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate () const;

        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate ();

        void
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate (const SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate (const SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional& x);

        // SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type > SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type, char > SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_traits;

        const SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName () const;

        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName ();

        void
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type > SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type, char > SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_traits;

        const SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional&
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName () const;

        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional&
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName ();

        void
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_HighSpeedEvapCondEffect
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedEvapCondEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedEvapCondEffect_type > SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedEvapCondEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedEvapCondEffect_traits;

        const SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondEffect () const;

        SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondEffect ();

        void
        SimFlowEnergyTrans_HighSpeedEvapCondEffect (const SimFlowEnergyTrans_HighSpeedEvapCondEffect_type& x);

        void
        SimFlowEnergyTrans_HighSpeedEvapCondEffect (const SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional& x);

        // SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_type > SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_traits;

        const SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate () const;

        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate ();

        void
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional& x);

        // SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_type > SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_traits;

        const SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump () const;

        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional&
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump ();

        void
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_type& x);

        void
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional& x);

        // SimFlowEnergyTrans_LowSpeedEvapCondEffect
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedEvapCondEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedEvapCondEffect_type > SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedEvapCondEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedEvapCondEffect_traits;

        const SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondEffect () const;

        SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondEffect ();

        void
        SimFlowEnergyTrans_LowSpeedEvapCondEffect (const SimFlowEnergyTrans_LowSpeedEvapCondEffect_type& x);

        void
        SimFlowEnergyTrans_LowSpeedEvapCondEffect (const SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional& x);

        // SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_type > SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_traits;

        const SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate () const;

        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate ();

        void
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate (const SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional& x);

        // SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_type > SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_traits;

        const SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump () const;

        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional&
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump ();

        void
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_type& x);

        void
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional& x);

        // Constructors.
        //
        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const RefId_type&);

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const ::xercesc::DOMElement& e,
                                                                      ::xml_schema::flags f = 0,
                                                                      ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed& x,
                                                                      ::xml_schema::flags f = 0,
                                                                      ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed&
        operator= (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed& x);

        virtual 
        ~SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoSpeed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_AvailSchedName_optional SimFlowEnergyTrans_AvailSchedName_;
        SimFlowEnergyTrans_AirInNodeName_optional SimFlowEnergyTrans_AirInNodeName_;
        SimFlowEnergyTrans_AirOutNodeName_optional SimFlowEnergyTrans_AirOutNodeName_;
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
        SimFlowEnergyTrans_CondAirInletNodeName_optional SimFlowEnergyTrans_CondAirInletNodeName_;
        SimFlowEnergyTrans_CondType_optional SimFlowEnergyTrans_CondType_;
        SimFlowEnergyTrans_SupWaterStoTankName_optional SimFlowEnergyTrans_SupWaterStoTankName_;
        SimFlowEnergyTrans_BasinHeatCap_optional SimFlowEnergyTrans_BasinHeatCap_;
        SimFlowEnergyTrans_BasinHeatSetpointTemp_optional SimFlowEnergyTrans_BasinHeatSetpointTemp_;
        SimFlowEnergyTrans_BasinHeatOperatSchedName_optional SimFlowEnergyTrans_BasinHeatOperatSchedName_;
        SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_optional SimFlowEnergyTrans_RatedHighSpeedTotalCoolingCap_;
        SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_optional SimFlowEnergyTrans_RatedHighSpeedSensHeatRatio_;
        SimFlowEnergyTrans_RatedHighSpeedCOP_optional SimFlowEnergyTrans_RatedHighSpeedCOP_;
        SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_optional SimFlowEnergyTrans_RatedHighSpeedAirFlowRate_;
        SimFlowEnergyTrans_UnitInternalStaticAirPressure_optional SimFlowEnergyTrans_UnitInternalStaticAirPressure_;
        SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_optional SimFlowEnergyTrans_RatedLowSpeedTotalCoolingCap_;
        SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_optional SimFlowEnergyTrans_RatedLowSpeedSensHeatRatio_;
        SimFlowEnergyTrans_RatedLowSpeedCOP_optional SimFlowEnergyTrans_RatedLowSpeedCOP_;
        SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_optional SimFlowEnergyTrans_RatedLowSpeedAirFlowRate_;
        SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_optional SimFlowEnergyTrans_LowSpeedTotalCoolingCapFuncTempCurveName_;
        SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_optional SimFlowEnergyTrans_LowSpeedEnergyInputRatioFuncTempCurveName_;
        SimFlowEnergyTrans_HighSpeedEvapCondEffect_optional SimFlowEnergyTrans_HighSpeedEvapCondEffect_;
        SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_optional SimFlowEnergyTrans_HighSpeedEvapCondAirFlowRate_;
        SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_optional SimFlowEnergyTrans_HighSpeedEvapCondPumpRatedPwrConsump_;
        SimFlowEnergyTrans_LowSpeedEvapCondEffect_optional SimFlowEnergyTrans_LowSpeedEvapCondEffect_;
        SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_optional SimFlowEnergyTrans_LowSpeedEvapCondAirFlowRate_;
        SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_optional SimFlowEnergyTrans_LowSpeedEvapCondPumpRatedPwrConsump_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_DX_COIL_AIR_COOLING_DXTWO_SPEED_HXX
