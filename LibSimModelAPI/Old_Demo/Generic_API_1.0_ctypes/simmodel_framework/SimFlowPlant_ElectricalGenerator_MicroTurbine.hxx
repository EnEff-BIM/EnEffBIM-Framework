// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_TURBINE_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_TURBINE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_MicroTurbine;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_MicroTurbine: public ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_FuelType
        //
        typedef ::xml_schema::string SimFlowPlant_FuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelType_type > SimFlowPlant_FuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelType_type, char > SimFlowPlant_FuelType_traits;

        const SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType () const;

        SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType ();

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_type& x);

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_optional& x);

        void
        SimFlowPlant_FuelType (::std::auto_ptr< SimFlowPlant_FuelType_type > p);

        // SimFlowPlant_FuelHigherHeatingVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_FuelHigherHeatingVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelHigherHeatingVal_type > SimFlowPlant_FuelHigherHeatingVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelHigherHeatingVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FuelHigherHeatingVal_traits;

        const SimFlowPlant_FuelHigherHeatingVal_optional&
        SimFlowPlant_FuelHigherHeatingVal () const;

        SimFlowPlant_FuelHigherHeatingVal_optional&
        SimFlowPlant_FuelHigherHeatingVal ();

        void
        SimFlowPlant_FuelHigherHeatingVal (const SimFlowPlant_FuelHigherHeatingVal_type& x);

        void
        SimFlowPlant_FuelHigherHeatingVal (const SimFlowPlant_FuelHigherHeatingVal_optional& x);

        // SimFlowPlant_RefElecPwrOutput
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefElecPwrOutput_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefElecPwrOutput_type > SimFlowPlant_RefElecPwrOutput_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefElecPwrOutput_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefElecPwrOutput_traits;

        const SimFlowPlant_RefElecPwrOutput_optional&
        SimFlowPlant_RefElecPwrOutput () const;

        SimFlowPlant_RefElecPwrOutput_optional&
        SimFlowPlant_RefElecPwrOutput ();

        void
        SimFlowPlant_RefElecPwrOutput (const SimFlowPlant_RefElecPwrOutput_type& x);

        void
        SimFlowPlant_RefElecPwrOutput (const SimFlowPlant_RefElecPwrOutput_optional& x);

        // SimFlowPlant_MinFullLoadElecPwrOutput
        //
        typedef ::xml_schema::double_ SimFlowPlant_MinFullLoadElecPwrOutput_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MinFullLoadElecPwrOutput_type > SimFlowPlant_MinFullLoadElecPwrOutput_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MinFullLoadElecPwrOutput_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MinFullLoadElecPwrOutput_traits;

        const SimFlowPlant_MinFullLoadElecPwrOutput_optional&
        SimFlowPlant_MinFullLoadElecPwrOutput () const;

        SimFlowPlant_MinFullLoadElecPwrOutput_optional&
        SimFlowPlant_MinFullLoadElecPwrOutput ();

        void
        SimFlowPlant_MinFullLoadElecPwrOutput (const SimFlowPlant_MinFullLoadElecPwrOutput_type& x);

        void
        SimFlowPlant_MinFullLoadElecPwrOutput (const SimFlowPlant_MinFullLoadElecPwrOutput_optional& x);

        // SimFlowPlant_MaxFullLoadElecPwrOutput
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxFullLoadElecPwrOutput_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxFullLoadElecPwrOutput_type > SimFlowPlant_MaxFullLoadElecPwrOutput_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxFullLoadElecPwrOutput_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxFullLoadElecPwrOutput_traits;

        const SimFlowPlant_MaxFullLoadElecPwrOutput_optional&
        SimFlowPlant_MaxFullLoadElecPwrOutput () const;

        SimFlowPlant_MaxFullLoadElecPwrOutput_optional&
        SimFlowPlant_MaxFullLoadElecPwrOutput ();

        void
        SimFlowPlant_MaxFullLoadElecPwrOutput (const SimFlowPlant_MaxFullLoadElecPwrOutput_type& x);

        void
        SimFlowPlant_MaxFullLoadElecPwrOutput (const SimFlowPlant_MaxFullLoadElecPwrOutput_optional& x);

        // SimFlowPlant_RefElecEffUsingLowHeatingVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefElecEffUsingLowHeatingVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefElecEffUsingLowHeatingVal_type > SimFlowPlant_RefElecEffUsingLowHeatingVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefElecEffUsingLowHeatingVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefElecEffUsingLowHeatingVal_traits;

        const SimFlowPlant_RefElecEffUsingLowHeatingVal_optional&
        SimFlowPlant_RefElecEffUsingLowHeatingVal () const;

        SimFlowPlant_RefElecEffUsingLowHeatingVal_optional&
        SimFlowPlant_RefElecEffUsingLowHeatingVal ();

        void
        SimFlowPlant_RefElecEffUsingLowHeatingVal (const SimFlowPlant_RefElecEffUsingLowHeatingVal_type& x);

        void
        SimFlowPlant_RefElecEffUsingLowHeatingVal (const SimFlowPlant_RefElecEffUsingLowHeatingVal_optional& x);

        // SimFlowPlant_RefCombustAirInletTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCombustAirInletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCombustAirInletTemp_type > SimFlowPlant_RefCombustAirInletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCombustAirInletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCombustAirInletTemp_traits;

        const SimFlowPlant_RefCombustAirInletTemp_optional&
        SimFlowPlant_RefCombustAirInletTemp () const;

        SimFlowPlant_RefCombustAirInletTemp_optional&
        SimFlowPlant_RefCombustAirInletTemp ();

        void
        SimFlowPlant_RefCombustAirInletTemp (const SimFlowPlant_RefCombustAirInletTemp_type& x);

        void
        SimFlowPlant_RefCombustAirInletTemp (const SimFlowPlant_RefCombustAirInletTemp_optional& x);

        // SimFlowPlant_RefCombustAirInletHumidRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefCombustAirInletHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefCombustAirInletHumidRatio_type > SimFlowPlant_RefCombustAirInletHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefCombustAirInletHumidRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefCombustAirInletHumidRatio_traits;

        const SimFlowPlant_RefCombustAirInletHumidRatio_optional&
        SimFlowPlant_RefCombustAirInletHumidRatio () const;

        SimFlowPlant_RefCombustAirInletHumidRatio_optional&
        SimFlowPlant_RefCombustAirInletHumidRatio ();

        void
        SimFlowPlant_RefCombustAirInletHumidRatio (const SimFlowPlant_RefCombustAirInletHumidRatio_type& x);

        void
        SimFlowPlant_RefCombustAirInletHumidRatio (const SimFlowPlant_RefCombustAirInletHumidRatio_optional& x);

        // SimFlowPlant_RefElev
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefElev_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefElev_type > SimFlowPlant_RefElev_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefElev_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefElev_traits;

        const SimFlowPlant_RefElev_optional&
        SimFlowPlant_RefElev () const;

        SimFlowPlant_RefElev_optional&
        SimFlowPlant_RefElev ();

        void
        SimFlowPlant_RefElev (const SimFlowPlant_RefElev_type& x);

        void
        SimFlowPlant_RefElev (const SimFlowPlant_RefElev_optional& x);

        // SimFlowPlant_ElecPwrFuncTemp_ElevCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_type > SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_type, char > SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_traits;

        const SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_optional&
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName () const;

        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_optional&
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName ();

        void
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName (const SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_type& x);

        void
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName (const SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_optional& x);

        void
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName (::std::auto_ptr< SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_type > p);

        // SimFlowPlant_ElecEffFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ElecEffFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ElecEffFuncTempCurveName_type > SimFlowPlant_ElecEffFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ElecEffFuncTempCurveName_type, char > SimFlowPlant_ElecEffFuncTempCurveName_traits;

        const SimFlowPlant_ElecEffFuncTempCurveName_optional&
        SimFlowPlant_ElecEffFuncTempCurveName () const;

        SimFlowPlant_ElecEffFuncTempCurveName_optional&
        SimFlowPlant_ElecEffFuncTempCurveName ();

        void
        SimFlowPlant_ElecEffFuncTempCurveName (const SimFlowPlant_ElecEffFuncTempCurveName_type& x);

        void
        SimFlowPlant_ElecEffFuncTempCurveName (const SimFlowPlant_ElecEffFuncTempCurveName_optional& x);

        void
        SimFlowPlant_ElecEffFuncTempCurveName (::std::auto_ptr< SimFlowPlant_ElecEffFuncTempCurveName_type > p);

        // SimFlowPlant_ElecEffFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_type > SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_type, char > SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName () const;

        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName (const SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName (const SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_type > p);

        // SimFlowPlant_FuelLowHeatingVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_FuelLowHeatingVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelLowHeatingVal_type > SimFlowPlant_FuelLowHeatingVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelLowHeatingVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FuelLowHeatingVal_traits;

        const SimFlowPlant_FuelLowHeatingVal_optional&
        SimFlowPlant_FuelLowHeatingVal () const;

        SimFlowPlant_FuelLowHeatingVal_optional&
        SimFlowPlant_FuelLowHeatingVal ();

        void
        SimFlowPlant_FuelLowHeatingVal (const SimFlowPlant_FuelLowHeatingVal_type& x);

        void
        SimFlowPlant_FuelLowHeatingVal (const SimFlowPlant_FuelLowHeatingVal_optional& x);

        // SimFlowPlant_StandbyPwr
        //
        typedef ::xml_schema::double_ SimFlowPlant_StandbyPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StandbyPwr_type > SimFlowPlant_StandbyPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StandbyPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StandbyPwr_traits;

        const SimFlowPlant_StandbyPwr_optional&
        SimFlowPlant_StandbyPwr () const;

        SimFlowPlant_StandbyPwr_optional&
        SimFlowPlant_StandbyPwr ();

        void
        SimFlowPlant_StandbyPwr (const SimFlowPlant_StandbyPwr_type& x);

        void
        SimFlowPlant_StandbyPwr (const SimFlowPlant_StandbyPwr_optional& x);

        // SimFlowPlant_AncilPwr
        //
        typedef ::xml_schema::double_ SimFlowPlant_AncilPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AncilPwr_type > SimFlowPlant_AncilPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AncilPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_AncilPwr_traits;

        const SimFlowPlant_AncilPwr_optional&
        SimFlowPlant_AncilPwr () const;

        SimFlowPlant_AncilPwr_optional&
        SimFlowPlant_AncilPwr ();

        void
        SimFlowPlant_AncilPwr (const SimFlowPlant_AncilPwr_type& x);

        void
        SimFlowPlant_AncilPwr (const SimFlowPlant_AncilPwr_optional& x);

        // SimFlowPlant_AncilPwrFuncFuelInputCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_AncilPwrFuncFuelInputCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AncilPwrFuncFuelInputCurveName_type > SimFlowPlant_AncilPwrFuncFuelInputCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AncilPwrFuncFuelInputCurveName_type, char > SimFlowPlant_AncilPwrFuncFuelInputCurveName_traits;

        const SimFlowPlant_AncilPwrFuncFuelInputCurveName_optional&
        SimFlowPlant_AncilPwrFuncFuelInputCurveName () const;

        SimFlowPlant_AncilPwrFuncFuelInputCurveName_optional&
        SimFlowPlant_AncilPwrFuncFuelInputCurveName ();

        void
        SimFlowPlant_AncilPwrFuncFuelInputCurveName (const SimFlowPlant_AncilPwrFuncFuelInputCurveName_type& x);

        void
        SimFlowPlant_AncilPwrFuncFuelInputCurveName (const SimFlowPlant_AncilPwrFuncFuelInputCurveName_optional& x);

        void
        SimFlowPlant_AncilPwrFuncFuelInputCurveName (::std::auto_ptr< SimFlowPlant_AncilPwrFuncFuelInputCurveName_type > p);

        // SimFlowPlant_HeatRecovWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterInletNodeName_type > SimFlowPlant_HeatRecovWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterInletNodeName_type, char > SimFlowPlant_HeatRecovWaterInletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName () const;

        SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterInletNodeName_type > p);

        // SimFlowPlant_HeatRecovWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterOutletNodeName_type > SimFlowPlant_HeatRecovWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterOutletNodeName_type, char > SimFlowPlant_HeatRecovWaterOutletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName () const;

        SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterOutletNodeName_type > p);

        // SimFlowPlant_RefThermalEffUsingLowHeatVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefThermalEffUsingLowHeatVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefThermalEffUsingLowHeatVal_type > SimFlowPlant_RefThermalEffUsingLowHeatVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefThermalEffUsingLowHeatVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefThermalEffUsingLowHeatVal_traits;

        const SimFlowPlant_RefThermalEffUsingLowHeatVal_optional&
        SimFlowPlant_RefThermalEffUsingLowHeatVal () const;

        SimFlowPlant_RefThermalEffUsingLowHeatVal_optional&
        SimFlowPlant_RefThermalEffUsingLowHeatVal ();

        void
        SimFlowPlant_RefThermalEffUsingLowHeatVal (const SimFlowPlant_RefThermalEffUsingLowHeatVal_type& x);

        void
        SimFlowPlant_RefThermalEffUsingLowHeatVal (const SimFlowPlant_RefThermalEffUsingLowHeatVal_optional& x);

        // SimFlowPlant_RefInletWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefInletWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefInletWaterTemp_type > SimFlowPlant_RefInletWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefInletWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefInletWaterTemp_traits;

        const SimFlowPlant_RefInletWaterTemp_optional&
        SimFlowPlant_RefInletWaterTemp () const;

        SimFlowPlant_RefInletWaterTemp_optional&
        SimFlowPlant_RefInletWaterTemp ();

        void
        SimFlowPlant_RefInletWaterTemp (const SimFlowPlant_RefInletWaterTemp_type& x);

        void
        SimFlowPlant_RefInletWaterTemp (const SimFlowPlant_RefInletWaterTemp_optional& x);

        // SimFlowPlant_HeatRecovWaterFlowOperatMode
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterFlowOperatMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterFlowOperatMode_type > SimFlowPlant_HeatRecovWaterFlowOperatMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterFlowOperatMode_type, char > SimFlowPlant_HeatRecovWaterFlowOperatMode_traits;

        const SimFlowPlant_HeatRecovWaterFlowOperatMode_optional&
        SimFlowPlant_HeatRecovWaterFlowOperatMode () const;

        SimFlowPlant_HeatRecovWaterFlowOperatMode_optional&
        SimFlowPlant_HeatRecovWaterFlowOperatMode ();

        void
        SimFlowPlant_HeatRecovWaterFlowOperatMode (const SimFlowPlant_HeatRecovWaterFlowOperatMode_type& x);

        void
        SimFlowPlant_HeatRecovWaterFlowOperatMode (const SimFlowPlant_HeatRecovWaterFlowOperatMode_optional& x);

        void
        SimFlowPlant_HeatRecovWaterFlowOperatMode (::std::auto_ptr< SimFlowPlant_HeatRecovWaterFlowOperatMode_type > p);

        // SimFlowPlant_RefHeatRecovWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefHeatRecovWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefHeatRecovWaterFlowRate_type > SimFlowPlant_RefHeatRecovWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefHeatRecovWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefHeatRecovWaterFlowRate_traits;

        const SimFlowPlant_RefHeatRecovWaterFlowRate_optional&
        SimFlowPlant_RefHeatRecovWaterFlowRate () const;

        SimFlowPlant_RefHeatRecovWaterFlowRate_optional&
        SimFlowPlant_RefHeatRecovWaterFlowRate ();

        void
        SimFlowPlant_RefHeatRecovWaterFlowRate (const SimFlowPlant_RefHeatRecovWaterFlowRate_type& x);

        void
        SimFlowPlant_RefHeatRecovWaterFlowRate (const SimFlowPlant_RefHeatRecovWaterFlowRate_optional& x);

        // SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_type > SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_type, char > SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_traits;

        const SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_optional&
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName () const;

        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_optional&
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName ();

        void
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName (const SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_type& x);

        void
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName (const SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_type > p);

        // SimFlowPlant_ThermalEffFuncTemp_ElevCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_type > SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_type, char > SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_traits;

        const SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_optional&
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName () const;

        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_optional&
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName ();

        void
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName (const SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_type& x);

        void
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName (const SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_optional& x);

        void
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName (::std::auto_ptr< SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_type > p);

        // SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_type > SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_type, char > SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName () const;

        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName (const SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName (const SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_type > p);

        // SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_type > SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_type, char > SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_traits;

        const SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName () const;

        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName ();

        void
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName (const SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_type& x);

        void
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName (const SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_optional& x);

        void
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName (::std::auto_ptr< SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_type > p);

        // SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_type > SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_type, char > SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_traits;

        const SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName () const;

        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_optional&
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName ();

        void
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName (const SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_type& x);

        void
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName (const SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_optional& x);

        void
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName (::std::auto_ptr< SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_type > p);

        // SimFlowPlant_MinHeatRecovWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_MinHeatRecovWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MinHeatRecovWaterFlowRate_type > SimFlowPlant_MinHeatRecovWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MinHeatRecovWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MinHeatRecovWaterFlowRate_traits;

        const SimFlowPlant_MinHeatRecovWaterFlowRate_optional&
        SimFlowPlant_MinHeatRecovWaterFlowRate () const;

        SimFlowPlant_MinHeatRecovWaterFlowRate_optional&
        SimFlowPlant_MinHeatRecovWaterFlowRate ();

        void
        SimFlowPlant_MinHeatRecovWaterFlowRate (const SimFlowPlant_MinHeatRecovWaterFlowRate_type& x);

        void
        SimFlowPlant_MinHeatRecovWaterFlowRate (const SimFlowPlant_MinHeatRecovWaterFlowRate_optional& x);

        // SimFlowPlant_MaxHeatRecovWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxHeatRecovWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxHeatRecovWaterFlowRate_type > SimFlowPlant_MaxHeatRecovWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxHeatRecovWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxHeatRecovWaterFlowRate_traits;

        const SimFlowPlant_MaxHeatRecovWaterFlowRate_optional&
        SimFlowPlant_MaxHeatRecovWaterFlowRate () const;

        SimFlowPlant_MaxHeatRecovWaterFlowRate_optional&
        SimFlowPlant_MaxHeatRecovWaterFlowRate ();

        void
        SimFlowPlant_MaxHeatRecovWaterFlowRate (const SimFlowPlant_MaxHeatRecovWaterFlowRate_type& x);

        void
        SimFlowPlant_MaxHeatRecovWaterFlowRate (const SimFlowPlant_MaxHeatRecovWaterFlowRate_optional& x);

        // SimFlowPlant_MaxHeatRecovWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxHeatRecovWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxHeatRecovWaterTemp_type > SimFlowPlant_MaxHeatRecovWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxHeatRecovWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxHeatRecovWaterTemp_traits;

        const SimFlowPlant_MaxHeatRecovWaterTemp_optional&
        SimFlowPlant_MaxHeatRecovWaterTemp () const;

        SimFlowPlant_MaxHeatRecovWaterTemp_optional&
        SimFlowPlant_MaxHeatRecovWaterTemp ();

        void
        SimFlowPlant_MaxHeatRecovWaterTemp (const SimFlowPlant_MaxHeatRecovWaterTemp_type& x);

        void
        SimFlowPlant_MaxHeatRecovWaterTemp (const SimFlowPlant_MaxHeatRecovWaterTemp_optional& x);

        // SimFlowPlant_CombustAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CombustAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CombustAirInletNodeName_type > SimFlowPlant_CombustAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CombustAirInletNodeName_type, char > SimFlowPlant_CombustAirInletNodeName_traits;

        const SimFlowPlant_CombustAirInletNodeName_optional&
        SimFlowPlant_CombustAirInletNodeName () const;

        SimFlowPlant_CombustAirInletNodeName_optional&
        SimFlowPlant_CombustAirInletNodeName ();

        void
        SimFlowPlant_CombustAirInletNodeName (const SimFlowPlant_CombustAirInletNodeName_type& x);

        void
        SimFlowPlant_CombustAirInletNodeName (const SimFlowPlant_CombustAirInletNodeName_optional& x);

        void
        SimFlowPlant_CombustAirInletNodeName (::std::auto_ptr< SimFlowPlant_CombustAirInletNodeName_type > p);

        // SimFlowPlant_CombustAirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CombustAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CombustAirOutletNodeName_type > SimFlowPlant_CombustAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CombustAirOutletNodeName_type, char > SimFlowPlant_CombustAirOutletNodeName_traits;

        const SimFlowPlant_CombustAirOutletNodeName_optional&
        SimFlowPlant_CombustAirOutletNodeName () const;

        SimFlowPlant_CombustAirOutletNodeName_optional&
        SimFlowPlant_CombustAirOutletNodeName ();

        void
        SimFlowPlant_CombustAirOutletNodeName (const SimFlowPlant_CombustAirOutletNodeName_type& x);

        void
        SimFlowPlant_CombustAirOutletNodeName (const SimFlowPlant_CombustAirOutletNodeName_optional& x);

        void
        SimFlowPlant_CombustAirOutletNodeName (::std::auto_ptr< SimFlowPlant_CombustAirOutletNodeName_type > p);

        // SimFlowPlant_RefExhAirMassFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_RefExhAirMassFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RefExhAirMassFlowRate_type > SimFlowPlant_RefExhAirMassFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RefExhAirMassFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RefExhAirMassFlowRate_traits;

        const SimFlowPlant_RefExhAirMassFlowRate_optional&
        SimFlowPlant_RefExhAirMassFlowRate () const;

        SimFlowPlant_RefExhAirMassFlowRate_optional&
        SimFlowPlant_RefExhAirMassFlowRate ();

        void
        SimFlowPlant_RefExhAirMassFlowRate (const SimFlowPlant_RefExhAirMassFlowRate_type& x);

        void
        SimFlowPlant_RefExhAirMassFlowRate (const SimFlowPlant_RefExhAirMassFlowRate_optional& x);

        // SimFlowPlant_ExhAirFlowRateFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ExhAirFlowRateFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhAirFlowRateFuncTempCurveName_type > SimFlowPlant_ExhAirFlowRateFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhAirFlowRateFuncTempCurveName_type, char > SimFlowPlant_ExhAirFlowRateFuncTempCurveName_traits;

        const SimFlowPlant_ExhAirFlowRateFuncTempCurveName_optional&
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName () const;

        SimFlowPlant_ExhAirFlowRateFuncTempCurveName_optional&
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName ();

        void
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName (const SimFlowPlant_ExhAirFlowRateFuncTempCurveName_type& x);

        void
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName (const SimFlowPlant_ExhAirFlowRateFuncTempCurveName_optional& x);

        void
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName (::std::auto_ptr< SimFlowPlant_ExhAirFlowRateFuncTempCurveName_type > p);

        // SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_type > SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_type, char > SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName () const;

        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName (const SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName (const SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_type > p);

        // SimFlowPlant_NomExhAirOutletTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomExhAirOutletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomExhAirOutletTemp_type > SimFlowPlant_NomExhAirOutletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomExhAirOutletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomExhAirOutletTemp_traits;

        const SimFlowPlant_NomExhAirOutletTemp_optional&
        SimFlowPlant_NomExhAirOutletTemp () const;

        SimFlowPlant_NomExhAirOutletTemp_optional&
        SimFlowPlant_NomExhAirOutletTemp ();

        void
        SimFlowPlant_NomExhAirOutletTemp (const SimFlowPlant_NomExhAirOutletTemp_type& x);

        void
        SimFlowPlant_NomExhAirOutletTemp (const SimFlowPlant_NomExhAirOutletTemp_optional& x);

        // SimFlowPlant_ExhAirTempFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ExhAirTempFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhAirTempFuncTempCurveName_type > SimFlowPlant_ExhAirTempFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhAirTempFuncTempCurveName_type, char > SimFlowPlant_ExhAirTempFuncTempCurveName_traits;

        const SimFlowPlant_ExhAirTempFuncTempCurveName_optional&
        SimFlowPlant_ExhAirTempFuncTempCurveName () const;

        SimFlowPlant_ExhAirTempFuncTempCurveName_optional&
        SimFlowPlant_ExhAirTempFuncTempCurveName ();

        void
        SimFlowPlant_ExhAirTempFuncTempCurveName (const SimFlowPlant_ExhAirTempFuncTempCurveName_type& x);

        void
        SimFlowPlant_ExhAirTempFuncTempCurveName (const SimFlowPlant_ExhAirTempFuncTempCurveName_optional& x);

        void
        SimFlowPlant_ExhAirTempFuncTempCurveName (::std::auto_ptr< SimFlowPlant_ExhAirTempFuncTempCurveName_type > p);

        // SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_type > SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_type, char > SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_traits;

        const SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName () const;

        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_optional&
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName ();

        void
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName (const SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_type& x);

        void
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName (const SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_optional& x);

        void
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_type > p);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_MicroTurbine (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_MicroTurbine (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_MicroTurbine (const SimFlowPlant_ElectricalGenerator_MicroTurbine& x,
                                                       ::xml_schema::flags f = 0,
                                                       ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_MicroTurbine*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_MicroTurbine&
        operator= (const SimFlowPlant_ElectricalGenerator_MicroTurbine& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_MicroTurbine ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_FuelType_optional SimFlowPlant_FuelType_;
        SimFlowPlant_FuelHigherHeatingVal_optional SimFlowPlant_FuelHigherHeatingVal_;
        SimFlowPlant_RefElecPwrOutput_optional SimFlowPlant_RefElecPwrOutput_;
        SimFlowPlant_MinFullLoadElecPwrOutput_optional SimFlowPlant_MinFullLoadElecPwrOutput_;
        SimFlowPlant_MaxFullLoadElecPwrOutput_optional SimFlowPlant_MaxFullLoadElecPwrOutput_;
        SimFlowPlant_RefElecEffUsingLowHeatingVal_optional SimFlowPlant_RefElecEffUsingLowHeatingVal_;
        SimFlowPlant_RefCombustAirInletTemp_optional SimFlowPlant_RefCombustAirInletTemp_;
        SimFlowPlant_RefCombustAirInletHumidRatio_optional SimFlowPlant_RefCombustAirInletHumidRatio_;
        SimFlowPlant_RefElev_optional SimFlowPlant_RefElev_;
        SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_optional SimFlowPlant_ElecPwrFuncTemp_ElevCurveName_;
        SimFlowPlant_ElecEffFuncTempCurveName_optional SimFlowPlant_ElecEffFuncTempCurveName_;
        SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_optional SimFlowPlant_ElecEffFuncPartLoadRatioCurveName_;
        SimFlowPlant_FuelLowHeatingVal_optional SimFlowPlant_FuelLowHeatingVal_;
        SimFlowPlant_StandbyPwr_optional SimFlowPlant_StandbyPwr_;
        SimFlowPlant_AncilPwr_optional SimFlowPlant_AncilPwr_;
        SimFlowPlant_AncilPwrFuncFuelInputCurveName_optional SimFlowPlant_AncilPwrFuncFuelInputCurveName_;
        SimFlowPlant_HeatRecovWaterInletNodeName_optional SimFlowPlant_HeatRecovWaterInletNodeName_;
        SimFlowPlant_HeatRecovWaterOutletNodeName_optional SimFlowPlant_HeatRecovWaterOutletNodeName_;
        SimFlowPlant_RefThermalEffUsingLowHeatVal_optional SimFlowPlant_RefThermalEffUsingLowHeatVal_;
        SimFlowPlant_RefInletWaterTemp_optional SimFlowPlant_RefInletWaterTemp_;
        SimFlowPlant_HeatRecovWaterFlowOperatMode_optional SimFlowPlant_HeatRecovWaterFlowOperatMode_;
        SimFlowPlant_RefHeatRecovWaterFlowRate_optional SimFlowPlant_RefHeatRecovWaterFlowRate_;
        SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_optional SimFlowPlant_HeatRecovWaterFlowRateFuncTemp_PwrCurveName_;
        SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_optional SimFlowPlant_ThermalEffFuncTemp_ElevCurveName_;
        SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_optional SimFlowPlant_HeatRecovRateFuncPartLoadRatioCurveName_;
        SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_optional SimFlowPlant_HeatRecovRateFuncInletWaterTempCurveName_;
        SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_optional SimFlowPlant_HeatRecovRateFuncWaterFlowRateCurveName_;
        SimFlowPlant_MinHeatRecovWaterFlowRate_optional SimFlowPlant_MinHeatRecovWaterFlowRate_;
        SimFlowPlant_MaxHeatRecovWaterFlowRate_optional SimFlowPlant_MaxHeatRecovWaterFlowRate_;
        SimFlowPlant_MaxHeatRecovWaterTemp_optional SimFlowPlant_MaxHeatRecovWaterTemp_;
        SimFlowPlant_CombustAirInletNodeName_optional SimFlowPlant_CombustAirInletNodeName_;
        SimFlowPlant_CombustAirOutletNodeName_optional SimFlowPlant_CombustAirOutletNodeName_;
        SimFlowPlant_RefExhAirMassFlowRate_optional SimFlowPlant_RefExhAirMassFlowRate_;
        SimFlowPlant_ExhAirFlowRateFuncTempCurveName_optional SimFlowPlant_ExhAirFlowRateFuncTempCurveName_;
        SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_optional SimFlowPlant_ExhAirFlowRateFuncPartLoadRatioCurveName_;
        SimFlowPlant_NomExhAirOutletTemp_optional SimFlowPlant_NomExhAirOutletTemp_;
        SimFlowPlant_ExhAirTempFuncTempCurveName_optional SimFlowPlant_ExhAirTempFuncTempCurveName_;
        SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_optional SimFlowPlant_ExhAirTempFuncPartLoadRatioCurveName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_TURBINE_HXX
