// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SIMULATION_PARAMETERS_HVAC_DESIGN_AIR_LOOP_SIZING_HXX
#define SIM_SIMULATION_PARAMETERS_HVAC_DESIGN_AIR_LOOP_SIZING_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimSimulationParameters_HvacDesign_AirLoopSizing;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simsimulationparameters_hvacdesign.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimSimulationParameters_HvacDesign_AirLoopSizing: public ::namespaces::Sim::ResourcesGeneral::SimSimulationParameters_HvacDesign
      {
        public:
        // SimSimParams_CoolDesignAirFlowMethod
        //
        typedef ::xml_schema::string SimSimParams_CoolDesignAirFlowMethod_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CoolDesignAirFlowMethod_type > SimSimParams_CoolDesignAirFlowMethod_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CoolDesignAirFlowMethod_type, char > SimSimParams_CoolDesignAirFlowMethod_traits;

        const SimSimParams_CoolDesignAirFlowMethod_optional&
        SimSimParams_CoolDesignAirFlowMethod () const;

        SimSimParams_CoolDesignAirFlowMethod_optional&
        SimSimParams_CoolDesignAirFlowMethod ();

        void
        SimSimParams_CoolDesignAirFlowMethod (const SimSimParams_CoolDesignAirFlowMethod_type& x);

        void
        SimSimParams_CoolDesignAirFlowMethod (const SimSimParams_CoolDesignAirFlowMethod_optional& x);

        void
        SimSimParams_CoolDesignAirFlowMethod (::std::auto_ptr< SimSimParams_CoolDesignAirFlowMethod_type > p);

        // SimSimParams_CoolDesignAirFlowRate
        //
        typedef ::xml_schema::double_ SimSimParams_CoolDesignAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CoolDesignAirFlowRate_type > SimSimParams_CoolDesignAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CoolDesignAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_CoolDesignAirFlowRate_traits;

        const SimSimParams_CoolDesignAirFlowRate_optional&
        SimSimParams_CoolDesignAirFlowRate () const;

        SimSimParams_CoolDesignAirFlowRate_optional&
        SimSimParams_CoolDesignAirFlowRate ();

        void
        SimSimParams_CoolDesignAirFlowRate (const SimSimParams_CoolDesignAirFlowRate_type& x);

        void
        SimSimParams_CoolDesignAirFlowRate (const SimSimParams_CoolDesignAirFlowRate_optional& x);

        // SimSimParams_HeatDesignAirFlowMethod
        //
        typedef ::xml_schema::string SimSimParams_HeatDesignAirFlowMethod_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_HeatDesignAirFlowMethod_type > SimSimParams_HeatDesignAirFlowMethod_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_HeatDesignAirFlowMethod_type, char > SimSimParams_HeatDesignAirFlowMethod_traits;

        const SimSimParams_HeatDesignAirFlowMethod_optional&
        SimSimParams_HeatDesignAirFlowMethod () const;

        SimSimParams_HeatDesignAirFlowMethod_optional&
        SimSimParams_HeatDesignAirFlowMethod ();

        void
        SimSimParams_HeatDesignAirFlowMethod (const SimSimParams_HeatDesignAirFlowMethod_type& x);

        void
        SimSimParams_HeatDesignAirFlowMethod (const SimSimParams_HeatDesignAirFlowMethod_optional& x);

        void
        SimSimParams_HeatDesignAirFlowMethod (::std::auto_ptr< SimSimParams_HeatDesignAirFlowMethod_type > p);

        // SimSimParams_HeatDesignAirFlowRate
        //
        typedef ::xml_schema::double_ SimSimParams_HeatDesignAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_HeatDesignAirFlowRate_type > SimSimParams_HeatDesignAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_HeatDesignAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_HeatDesignAirFlowRate_traits;

        const SimSimParams_HeatDesignAirFlowRate_optional&
        SimSimParams_HeatDesignAirFlowRate () const;

        SimSimParams_HeatDesignAirFlowRate_optional&
        SimSimParams_HeatDesignAirFlowRate ();

        void
        SimSimParams_HeatDesignAirFlowRate (const SimSimParams_HeatDesignAirFlowRate_type& x);

        void
        SimSimParams_HeatDesignAirFlowRate (const SimSimParams_HeatDesignAirFlowRate_optional& x);

        // SimSimParams_AirLoopName
        //
        typedef ::xml_schema::idref SimSimParams_AirLoopName_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_AirLoopName_type > SimSimParams_AirLoopName_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_AirLoopName_type, char > SimSimParams_AirLoopName_traits;

        const SimSimParams_AirLoopName_optional&
        SimSimParams_AirLoopName () const;

        SimSimParams_AirLoopName_optional&
        SimSimParams_AirLoopName ();

        void
        SimSimParams_AirLoopName (const SimSimParams_AirLoopName_type& x);

        void
        SimSimParams_AirLoopName (const SimSimParams_AirLoopName_optional& x);

        void
        SimSimParams_AirLoopName (::std::auto_ptr< SimSimParams_AirLoopName_type > p);

        // SimSimParams_TypeOfLoadToSizeOn
        //
        typedef ::xml_schema::string SimSimParams_TypeOfLoadToSizeOn_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_TypeOfLoadToSizeOn_type > SimSimParams_TypeOfLoadToSizeOn_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_TypeOfLoadToSizeOn_type, char > SimSimParams_TypeOfLoadToSizeOn_traits;

        const SimSimParams_TypeOfLoadToSizeOn_optional&
        SimSimParams_TypeOfLoadToSizeOn () const;

        SimSimParams_TypeOfLoadToSizeOn_optional&
        SimSimParams_TypeOfLoadToSizeOn ();

        void
        SimSimParams_TypeOfLoadToSizeOn (const SimSimParams_TypeOfLoadToSizeOn_type& x);

        void
        SimSimParams_TypeOfLoadToSizeOn (const SimSimParams_TypeOfLoadToSizeOn_optional& x);

        void
        SimSimParams_TypeOfLoadToSizeOn (::std::auto_ptr< SimSimParams_TypeOfLoadToSizeOn_type > p);

        // SimSimParams_DesignOutdoorAirFlowRate
        //
        typedef ::xml_schema::double_ SimSimParams_DesignOutdoorAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_DesignOutdoorAirFlowRate_type > SimSimParams_DesignOutdoorAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_DesignOutdoorAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_DesignOutdoorAirFlowRate_traits;

        const SimSimParams_DesignOutdoorAirFlowRate_optional&
        SimSimParams_DesignOutdoorAirFlowRate () const;

        SimSimParams_DesignOutdoorAirFlowRate_optional&
        SimSimParams_DesignOutdoorAirFlowRate ();

        void
        SimSimParams_DesignOutdoorAirFlowRate (const SimSimParams_DesignOutdoorAirFlowRate_type& x);

        void
        SimSimParams_DesignOutdoorAirFlowRate (const SimSimParams_DesignOutdoorAirFlowRate_optional& x);

        // SimSimParams_MinSystemAirFlowRatio
        //
        typedef ::xml_schema::double_ SimSimParams_MinSystemAirFlowRatio_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_MinSystemAirFlowRatio_type > SimSimParams_MinSystemAirFlowRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_MinSystemAirFlowRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_MinSystemAirFlowRatio_traits;

        const SimSimParams_MinSystemAirFlowRatio_optional&
        SimSimParams_MinSystemAirFlowRatio () const;

        SimSimParams_MinSystemAirFlowRatio_optional&
        SimSimParams_MinSystemAirFlowRatio ();

        void
        SimSimParams_MinSystemAirFlowRatio (const SimSimParams_MinSystemAirFlowRatio_type& x);

        void
        SimSimParams_MinSystemAirFlowRatio (const SimSimParams_MinSystemAirFlowRatio_optional& x);

        // SimSimParams_PreheatDesignTemp
        //
        typedef ::xml_schema::double_ SimSimParams_PreheatDesignTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_PreheatDesignTemp_type > SimSimParams_PreheatDesignTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_PreheatDesignTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_PreheatDesignTemp_traits;

        const SimSimParams_PreheatDesignTemp_optional&
        SimSimParams_PreheatDesignTemp () const;

        SimSimParams_PreheatDesignTemp_optional&
        SimSimParams_PreheatDesignTemp ();

        void
        SimSimParams_PreheatDesignTemp (const SimSimParams_PreheatDesignTemp_type& x);

        void
        SimSimParams_PreheatDesignTemp (const SimSimParams_PreheatDesignTemp_optional& x);

        // SimSimParams_PreheatDesignHumidRatio
        //
        typedef ::xml_schema::double_ SimSimParams_PreheatDesignHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_PreheatDesignHumidRatio_type > SimSimParams_PreheatDesignHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_PreheatDesignHumidRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_PreheatDesignHumidRatio_traits;

        const SimSimParams_PreheatDesignHumidRatio_optional&
        SimSimParams_PreheatDesignHumidRatio () const;

        SimSimParams_PreheatDesignHumidRatio_optional&
        SimSimParams_PreheatDesignHumidRatio ();

        void
        SimSimParams_PreheatDesignHumidRatio (const SimSimParams_PreheatDesignHumidRatio_type& x);

        void
        SimSimParams_PreheatDesignHumidRatio (const SimSimParams_PreheatDesignHumidRatio_optional& x);

        // SimSimParams_PrecoolDesignTemp
        //
        typedef ::xml_schema::double_ SimSimParams_PrecoolDesignTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_PrecoolDesignTemp_type > SimSimParams_PrecoolDesignTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_PrecoolDesignTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_PrecoolDesignTemp_traits;

        const SimSimParams_PrecoolDesignTemp_optional&
        SimSimParams_PrecoolDesignTemp () const;

        SimSimParams_PrecoolDesignTemp_optional&
        SimSimParams_PrecoolDesignTemp ();

        void
        SimSimParams_PrecoolDesignTemp (const SimSimParams_PrecoolDesignTemp_type& x);

        void
        SimSimParams_PrecoolDesignTemp (const SimSimParams_PrecoolDesignTemp_optional& x);

        // SimSimParams_PrecoolDesignHumidRatio
        //
        typedef ::xml_schema::double_ SimSimParams_PrecoolDesignHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_PrecoolDesignHumidRatio_type > SimSimParams_PrecoolDesignHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_PrecoolDesignHumidRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_PrecoolDesignHumidRatio_traits;

        const SimSimParams_PrecoolDesignHumidRatio_optional&
        SimSimParams_PrecoolDesignHumidRatio () const;

        SimSimParams_PrecoolDesignHumidRatio_optional&
        SimSimParams_PrecoolDesignHumidRatio ();

        void
        SimSimParams_PrecoolDesignHumidRatio (const SimSimParams_PrecoolDesignHumidRatio_type& x);

        void
        SimSimParams_PrecoolDesignHumidRatio (const SimSimParams_PrecoolDesignHumidRatio_optional& x);

        // SimSimParams_CentCoolDesignSupplyAirTemp
        //
        typedef ::xml_schema::double_ SimSimParams_CentCoolDesignSupplyAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CentCoolDesignSupplyAirTemp_type > SimSimParams_CentCoolDesignSupplyAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CentCoolDesignSupplyAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_CentCoolDesignSupplyAirTemp_traits;

        const SimSimParams_CentCoolDesignSupplyAirTemp_optional&
        SimSimParams_CentCoolDesignSupplyAirTemp () const;

        SimSimParams_CentCoolDesignSupplyAirTemp_optional&
        SimSimParams_CentCoolDesignSupplyAirTemp ();

        void
        SimSimParams_CentCoolDesignSupplyAirTemp (const SimSimParams_CentCoolDesignSupplyAirTemp_type& x);

        void
        SimSimParams_CentCoolDesignSupplyAirTemp (const SimSimParams_CentCoolDesignSupplyAirTemp_optional& x);

        // SimSimParams_CentHeatDesignSupplyAirTemp
        //
        typedef ::xml_schema::double_ SimSimParams_CentHeatDesignSupplyAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CentHeatDesignSupplyAirTemp_type > SimSimParams_CentHeatDesignSupplyAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CentHeatDesignSupplyAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_CentHeatDesignSupplyAirTemp_traits;

        const SimSimParams_CentHeatDesignSupplyAirTemp_optional&
        SimSimParams_CentHeatDesignSupplyAirTemp () const;

        SimSimParams_CentHeatDesignSupplyAirTemp_optional&
        SimSimParams_CentHeatDesignSupplyAirTemp ();

        void
        SimSimParams_CentHeatDesignSupplyAirTemp (const SimSimParams_CentHeatDesignSupplyAirTemp_type& x);

        void
        SimSimParams_CentHeatDesignSupplyAirTemp (const SimSimParams_CentHeatDesignSupplyAirTemp_optional& x);

        // SimSimParams_SizingOption
        //
        typedef ::xml_schema::string SimSimParams_SizingOption_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_SizingOption_type > SimSimParams_SizingOption_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_SizingOption_type, char > SimSimParams_SizingOption_traits;

        const SimSimParams_SizingOption_optional&
        SimSimParams_SizingOption () const;

        SimSimParams_SizingOption_optional&
        SimSimParams_SizingOption ();

        void
        SimSimParams_SizingOption (const SimSimParams_SizingOption_type& x);

        void
        SimSimParams_SizingOption (const SimSimParams_SizingOption_optional& x);

        void
        SimSimParams_SizingOption (::std::auto_ptr< SimSimParams_SizingOption_type > p);

        // SimSimParams_100PctOutdoorAirInCool
        //
        typedef ::xml_schema::string SimSimParams_100PctOutdoorAirInCool_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_100PctOutdoorAirInCool_type > SimSimParams_100PctOutdoorAirInCool_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_100PctOutdoorAirInCool_type, char > SimSimParams_100PctOutdoorAirInCool_traits;

        const SimSimParams_100PctOutdoorAirInCool_optional&
        SimSimParams_100PctOutdoorAirInCool () const;

        SimSimParams_100PctOutdoorAirInCool_optional&
        SimSimParams_100PctOutdoorAirInCool ();

        void
        SimSimParams_100PctOutdoorAirInCool (const SimSimParams_100PctOutdoorAirInCool_type& x);

        void
        SimSimParams_100PctOutdoorAirInCool (const SimSimParams_100PctOutdoorAirInCool_optional& x);

        void
        SimSimParams_100PctOutdoorAirInCool (::std::auto_ptr< SimSimParams_100PctOutdoorAirInCool_type > p);

        // SimSimParams_100PctOutdoorAirInHeat
        //
        typedef ::xml_schema::string SimSimParams_100PctOutdoorAirInHeat_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_100PctOutdoorAirInHeat_type > SimSimParams_100PctOutdoorAirInHeat_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_100PctOutdoorAirInHeat_type, char > SimSimParams_100PctOutdoorAirInHeat_traits;

        const SimSimParams_100PctOutdoorAirInHeat_optional&
        SimSimParams_100PctOutdoorAirInHeat () const;

        SimSimParams_100PctOutdoorAirInHeat_optional&
        SimSimParams_100PctOutdoorAirInHeat ();

        void
        SimSimParams_100PctOutdoorAirInHeat (const SimSimParams_100PctOutdoorAirInHeat_type& x);

        void
        SimSimParams_100PctOutdoorAirInHeat (const SimSimParams_100PctOutdoorAirInHeat_optional& x);

        void
        SimSimParams_100PctOutdoorAirInHeat (::std::auto_ptr< SimSimParams_100PctOutdoorAirInHeat_type > p);

        // SimSimParams_CentCoolDesignSupplyAirHumidRatio
        //
        typedef ::xml_schema::double_ SimSimParams_CentCoolDesignSupplyAirHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CentCoolDesignSupplyAirHumidRatio_type > SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CentCoolDesignSupplyAirHumidRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_CentCoolDesignSupplyAirHumidRatio_traits;

        const SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional&
        SimSimParams_CentCoolDesignSupplyAirHumidRatio () const;

        SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional&
        SimSimParams_CentCoolDesignSupplyAirHumidRatio ();

        void
        SimSimParams_CentCoolDesignSupplyAirHumidRatio (const SimSimParams_CentCoolDesignSupplyAirHumidRatio_type& x);

        void
        SimSimParams_CentCoolDesignSupplyAirHumidRatio (const SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional& x);

        // SimSimParams_CentHeatDesignSupplyAirHumidRatio
        //
        typedef ::xml_schema::double_ SimSimParams_CentHeatDesignSupplyAirHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_CentHeatDesignSupplyAirHumidRatio_type > SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_CentHeatDesignSupplyAirHumidRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_CentHeatDesignSupplyAirHumidRatio_traits;

        const SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional&
        SimSimParams_CentHeatDesignSupplyAirHumidRatio () const;

        SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional&
        SimSimParams_CentHeatDesignSupplyAirHumidRatio ();

        void
        SimSimParams_CentHeatDesignSupplyAirHumidRatio (const SimSimParams_CentHeatDesignSupplyAirHumidRatio_type& x);

        void
        SimSimParams_CentHeatDesignSupplyAirHumidRatio (const SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional& x);

        // SimSimParams_SystemOutdrAirMethod
        //
        typedef ::xml_schema::string SimSimParams_SystemOutdrAirMethod_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_SystemOutdrAirMethod_type > SimSimParams_SystemOutdrAirMethod_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_SystemOutdrAirMethod_type, char > SimSimParams_SystemOutdrAirMethod_traits;

        const SimSimParams_SystemOutdrAirMethod_optional&
        SimSimParams_SystemOutdrAirMethod () const;

        SimSimParams_SystemOutdrAirMethod_optional&
        SimSimParams_SystemOutdrAirMethod ();

        void
        SimSimParams_SystemOutdrAirMethod (const SimSimParams_SystemOutdrAirMethod_type& x);

        void
        SimSimParams_SystemOutdrAirMethod (const SimSimParams_SystemOutdrAirMethod_optional& x);

        void
        SimSimParams_SystemOutdrAirMethod (::std::auto_ptr< SimSimParams_SystemOutdrAirMethod_type > p);

        // SimSimParams_ZoneMaxOutdoorAirFraction
        //
        typedef ::xml_schema::double_ SimSimParams_ZoneMaxOutdoorAirFraction_type;
        typedef ::xsd::cxx::tree::optional< SimSimParams_ZoneMaxOutdoorAirFraction_type > SimSimParams_ZoneMaxOutdoorAirFraction_optional;
        typedef ::xsd::cxx::tree::traits< SimSimParams_ZoneMaxOutdoorAirFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSimParams_ZoneMaxOutdoorAirFraction_traits;

        const SimSimParams_ZoneMaxOutdoorAirFraction_optional&
        SimSimParams_ZoneMaxOutdoorAirFraction () const;

        SimSimParams_ZoneMaxOutdoorAirFraction_optional&
        SimSimParams_ZoneMaxOutdoorAirFraction ();

        void
        SimSimParams_ZoneMaxOutdoorAirFraction (const SimSimParams_ZoneMaxOutdoorAirFraction_type& x);

        void
        SimSimParams_ZoneMaxOutdoorAirFraction (const SimSimParams_ZoneMaxOutdoorAirFraction_optional& x);

        // Constructors.
        //
        SimSimulationParameters_HvacDesign_AirLoopSizing (const RefId_type&);

        SimSimulationParameters_HvacDesign_AirLoopSizing (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f = 0,
                                                          ::xml_schema::container* c = 0);

        SimSimulationParameters_HvacDesign_AirLoopSizing (const SimSimulationParameters_HvacDesign_AirLoopSizing& x,
                                                          ::xml_schema::flags f = 0,
                                                          ::xml_schema::container* c = 0);

        virtual SimSimulationParameters_HvacDesign_AirLoopSizing*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSimulationParameters_HvacDesign_AirLoopSizing&
        operator= (const SimSimulationParameters_HvacDesign_AirLoopSizing& x);

        virtual 
        ~SimSimulationParameters_HvacDesign_AirLoopSizing ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimSimParams_CoolDesignAirFlowMethod_optional SimSimParams_CoolDesignAirFlowMethod_;
        SimSimParams_CoolDesignAirFlowRate_optional SimSimParams_CoolDesignAirFlowRate_;
        SimSimParams_HeatDesignAirFlowMethod_optional SimSimParams_HeatDesignAirFlowMethod_;
        SimSimParams_HeatDesignAirFlowRate_optional SimSimParams_HeatDesignAirFlowRate_;
        SimSimParams_AirLoopName_optional SimSimParams_AirLoopName_;
        SimSimParams_TypeOfLoadToSizeOn_optional SimSimParams_TypeOfLoadToSizeOn_;
        SimSimParams_DesignOutdoorAirFlowRate_optional SimSimParams_DesignOutdoorAirFlowRate_;
        SimSimParams_MinSystemAirFlowRatio_optional SimSimParams_MinSystemAirFlowRatio_;
        SimSimParams_PreheatDesignTemp_optional SimSimParams_PreheatDesignTemp_;
        SimSimParams_PreheatDesignHumidRatio_optional SimSimParams_PreheatDesignHumidRatio_;
        SimSimParams_PrecoolDesignTemp_optional SimSimParams_PrecoolDesignTemp_;
        SimSimParams_PrecoolDesignHumidRatio_optional SimSimParams_PrecoolDesignHumidRatio_;
        SimSimParams_CentCoolDesignSupplyAirTemp_optional SimSimParams_CentCoolDesignSupplyAirTemp_;
        SimSimParams_CentHeatDesignSupplyAirTemp_optional SimSimParams_CentHeatDesignSupplyAirTemp_;
        SimSimParams_SizingOption_optional SimSimParams_SizingOption_;
        SimSimParams_100PctOutdoorAirInCool_optional SimSimParams_100PctOutdoorAirInCool_;
        SimSimParams_100PctOutdoorAirInHeat_optional SimSimParams_100PctOutdoorAirInHeat_;
        SimSimParams_CentCoolDesignSupplyAirHumidRatio_optional SimSimParams_CentCoolDesignSupplyAirHumidRatio_;
        SimSimParams_CentHeatDesignSupplyAirHumidRatio_optional SimSimParams_CentHeatDesignSupplyAirHumidRatio_;
        SimSimParams_SystemOutdrAirMethod_optional SimSimParams_SystemOutdrAirMethod_;
        SimSimParams_ZoneMaxOutdoorAirFraction_optional SimSimParams_ZoneMaxOutdoorAirFraction_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SIMULATION_PARAMETERS_HVAC_DESIGN_AIR_LOOP_SIZING_HXX
