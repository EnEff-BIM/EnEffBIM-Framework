// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW
      // 

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed () const
      {
        return this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed ()
      {
        return this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed (const SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed (const SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_FanPwrAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtHighFanSpeed () const
      {
        return this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_FanPwrAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtHighFanSpeed ()
      {
        return this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtHighFanSpeed (const SimFlowEnergyTrans_FanPwrAtHighFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtHighFanSpeed (const SimFlowEnergyTrans_FanPwrAtHighFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed () const
      {
        return this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed ()
      {
        return this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed (const SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed (const SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_FanPwrAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtLowFanSpeed () const
      {
        return this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_FanPwrAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtLowFanSpeed ()
      {
        return this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtLowFanSpeed (const SimFlowEnergyTrans_FanPwrAtLowFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_FanPwrAtLowFanSpeed (const SimFlowEnergyTrans_FanPwrAtLowFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed () const
      {
        return this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed ()
      {
        return this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed (const SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed (const SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed () const
      {
        return this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed ()
      {
        return this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed (const SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_type& x)
      {
        this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed (const SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_optional& x)
      {
        this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap () const
      {
        return this->SimFlowEnergyTrans_HighSpeedNomCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap ()
      {
        return this->SimFlowEnergyTrans_HighSpeedNomCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap (const SimFlowEnergyTrans_HighSpeedNomCap_type& x)
      {
        this->SimFlowEnergyTrans_HighSpeedNomCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap (const SimFlowEnergyTrans_HighSpeedNomCap_optional& x)
      {
        this->SimFlowEnergyTrans_HighSpeedNomCap_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap () const
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap ()
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap (const SimFlowEnergyTrans_LowSpeedNomCap_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap (const SimFlowEnergyTrans_LowSpeedNomCap_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCap_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW
      //

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_FluidCooler (RefId),
        SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_FanPwrAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_FanPwrAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_FluidCooler (x, f, c),
        SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_ (x.SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_, f, this),
        SimFlowEnergyTrans_FanPwrAtHighFanSpeed_ (x.SimFlowEnergyTrans_FanPwrAtHighFanSpeed_, f, this),
        SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_ (x.SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_, f, this),
        SimFlowEnergyTrans_FanPwrAtLowFanSpeed_ (x.SimFlowEnergyTrans_FanPwrAtLowFanSpeed_, f, this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_ (x.SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_, f, this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_ (x.SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_, f, this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (x.SimFlowEnergyTrans_HighSpeedNomCap_, f, this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (x.SimFlowEnergyTrans_LowSpeedNomCap_, f, this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_FluidCooler (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_FanPwrAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_FanPwrAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_ (this),
        SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_ (this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_FluidCooler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_)
            {
              this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_.set (SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_FanPwrAtHighFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_FanPwrAtHighFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_)
            {
              this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_.set (SimFlowEnergyTrans_FanPwrAtHighFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_)
            {
              this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_.set (SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_FanPwrAtLowFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_FanPwrAtLowFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_)
            {
              this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_.set (SimFlowEnergyTrans_FanPwrAtLowFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_)
            {
              this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_.set (SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed
          //
          if (n.name () == "SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_)
            {
              this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_.set (SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighSpeedNomCap
          //
          if (n.name () == "SimFlowEnergyTrans_HighSpeedNomCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighSpeedNomCap_)
            {
              this->SimFlowEnergyTrans_HighSpeedNomCap_.set (SimFlowEnergyTrans_HighSpeedNomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedNomCap
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedNomCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedNomCap_)
            {
              this->SimFlowEnergyTrans_LowSpeedNomCap_.set (SimFlowEnergyTrans_LowSpeedNomCap_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW* SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (*this, f, c);
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      operator= (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_FluidCooler& > (*this) = x;
          this->SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_ = x.SimFlowEnergyTrans_AirFlowRateAtHighFanSpeed_;
          this->SimFlowEnergyTrans_FanPwrAtHighFanSpeed_ = x.SimFlowEnergyTrans_FanPwrAtHighFanSpeed_;
          this->SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_ = x.SimFlowEnergyTrans_AirFlowRateAtLowFanSpeed_;
          this->SimFlowEnergyTrans_FanPwrAtLowFanSpeed_ = x.SimFlowEnergyTrans_FanPwrAtLowFanSpeed_;
          this->SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_ = x.SimFlowEnergyTrans_UFactorTimesAreaValAtHighFanSpeed_;
          this->SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_ = x.SimFlowEnergyTrans_UFactorTimesAreaValAtLowFanSpeed_;
          this->SimFlowEnergyTrans_HighSpeedNomCap_ = x.SimFlowEnergyTrans_HighSpeedNomCap_;
          this->SimFlowEnergyTrans_LowSpeedNomCap_ = x.SimFlowEnergyTrans_LowSpeedNomCap_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      ~SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

