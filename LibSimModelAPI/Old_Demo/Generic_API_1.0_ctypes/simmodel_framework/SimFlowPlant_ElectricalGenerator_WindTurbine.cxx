// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ElectricalGenerator_WindTurbine.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_WindTurbine
      // 

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AvailSchedName () const
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_AvailSchedName_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AvailSchedName ()
      {
        return this->SimFlowPlant_AvailSchedName_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_type& x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_optional& x)
      {
        this->SimFlowPlant_AvailSchedName_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AvailSchedName (::std::auto_ptr< SimFlowPlant_AvailSchedName_type > x)
      {
        this->SimFlowPlant_AvailSchedName_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RotorType_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorType () const
      {
        return this->SimFlowPlant_RotorType_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RotorType_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorType ()
      {
        return this->SimFlowPlant_RotorType_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorType (const SimFlowPlant_RotorType_type& x)
      {
        this->SimFlowPlant_RotorType_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorType (const SimFlowPlant_RotorType_optional& x)
      {
        this->SimFlowPlant_RotorType_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorType (::std::auto_ptr< SimFlowPlant_RotorType_type > x)
      {
        this->SimFlowPlant_RotorType_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_PwrCntl_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PwrCntl () const
      {
        return this->SimFlowPlant_PwrCntl_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_PwrCntl_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PwrCntl ()
      {
        return this->SimFlowPlant_PwrCntl_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PwrCntl (const SimFlowPlant_PwrCntl_type& x)
      {
        this->SimFlowPlant_PwrCntl_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PwrCntl (const SimFlowPlant_PwrCntl_optional& x)
      {
        this->SimFlowPlant_PwrCntl_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PwrCntl (::std::auto_ptr< SimFlowPlant_PwrCntl_type > x)
      {
        this->SimFlowPlant_PwrCntl_.set (x);
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedRotorSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedRotorSpeed () const
      {
        return this->SimFlowPlant_RatedRotorSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedRotorSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedRotorSpeed ()
      {
        return this->SimFlowPlant_RatedRotorSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedRotorSpeed (const SimFlowPlant_RatedRotorSpeed_type& x)
      {
        this->SimFlowPlant_RatedRotorSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedRotorSpeed (const SimFlowPlant_RatedRotorSpeed_optional& x)
      {
        this->SimFlowPlant_RatedRotorSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RotorDiam_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorDiam () const
      {
        return this->SimFlowPlant_RotorDiam_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RotorDiam_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorDiam ()
      {
        return this->SimFlowPlant_RotorDiam_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorDiam (const SimFlowPlant_RotorDiam_type& x)
      {
        this->SimFlowPlant_RotorDiam_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RotorDiam (const SimFlowPlant_RotorDiam_optional& x)
      {
        this->SimFlowPlant_RotorDiam_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_OverallHeight_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_OverallHeight () const
      {
        return this->SimFlowPlant_OverallHeight_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_OverallHeight_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_OverallHeight ()
      {
        return this->SimFlowPlant_OverallHeight_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_OverallHeight (const SimFlowPlant_OverallHeight_type& x)
      {
        this->SimFlowPlant_OverallHeight_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_OverallHeight (const SimFlowPlant_OverallHeight_optional& x)
      {
        this->SimFlowPlant_OverallHeight_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_NumBlades_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_NumBlades () const
      {
        return this->SimFlowPlant_NumBlades_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_NumBlades_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_NumBlades ()
      {
        return this->SimFlowPlant_NumBlades_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_NumBlades (const SimFlowPlant_NumBlades_type& x)
      {
        this->SimFlowPlant_NumBlades_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_NumBlades (const SimFlowPlant_NumBlades_optional& x)
      {
        this->SimFlowPlant_NumBlades_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedPwr_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedPwr () const
      {
        return this->SimFlowPlant_RatedPwr_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedPwr_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedPwr ()
      {
        return this->SimFlowPlant_RatedPwr_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedPwr (const SimFlowPlant_RatedPwr_type& x)
      {
        this->SimFlowPlant_RatedPwr_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedPwr (const SimFlowPlant_RatedPwr_optional& x)
      {
        this->SimFlowPlant_RatedPwr_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedWindSpeed () const
      {
        return this->SimFlowPlant_RatedWindSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_RatedWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedWindSpeed ()
      {
        return this->SimFlowPlant_RatedWindSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedWindSpeed (const SimFlowPlant_RatedWindSpeed_type& x)
      {
        this->SimFlowPlant_RatedWindSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_RatedWindSpeed (const SimFlowPlant_RatedWindSpeed_optional& x)
      {
        this->SimFlowPlant_RatedWindSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_CutWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutWindSpeed () const
      {
        return this->SimFlowPlant_CutWindSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_CutWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutWindSpeed ()
      {
        return this->SimFlowPlant_CutWindSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutWindSpeed (const SimFlowPlant_CutWindSpeed_type& x)
      {
        this->SimFlowPlant_CutWindSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutWindSpeed (const SimFlowPlant_CutWindSpeed_optional& x)
      {
        this->SimFlowPlant_CutWindSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_CutOutWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutOutWindSpeed () const
      {
        return this->SimFlowPlant_CutOutWindSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_CutOutWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutOutWindSpeed ()
      {
        return this->SimFlowPlant_CutOutWindSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutOutWindSpeed (const SimFlowPlant_CutOutWindSpeed_type& x)
      {
        this->SimFlowPlant_CutOutWindSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_CutOutWindSpeed (const SimFlowPlant_CutOutWindSpeed_optional& x)
      {
        this->SimFlowPlant_CutOutWindSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_FractSysEff_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_FractSysEff () const
      {
        return this->SimFlowPlant_FractSysEff_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_FractSysEff_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_FractSysEff ()
      {
        return this->SimFlowPlant_FractSysEff_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_FractSysEff (const SimFlowPlant_FractSysEff_type& x)
      {
        this->SimFlowPlant_FractSysEff_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_FractSysEff (const SimFlowPlant_FractSysEff_optional& x)
      {
        this->SimFlowPlant_FractSysEff_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_MaxTipSpeedRatio_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxTipSpeedRatio () const
      {
        return this->SimFlowPlant_MaxTipSpeedRatio_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_MaxTipSpeedRatio_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxTipSpeedRatio ()
      {
        return this->SimFlowPlant_MaxTipSpeedRatio_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxTipSpeedRatio (const SimFlowPlant_MaxTipSpeedRatio_type& x)
      {
        this->SimFlowPlant_MaxTipSpeedRatio_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxTipSpeedRatio (const SimFlowPlant_MaxTipSpeedRatio_optional& x)
      {
        this->SimFlowPlant_MaxTipSpeedRatio_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_MaxPwrCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxPwrCoef () const
      {
        return this->SimFlowPlant_MaxPwrCoef_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_MaxPwrCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxPwrCoef ()
      {
        return this->SimFlowPlant_MaxPwrCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxPwrCoef (const SimFlowPlant_MaxPwrCoef_type& x)
      {
        this->SimFlowPlant_MaxPwrCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_MaxPwrCoef (const SimFlowPlant_MaxPwrCoef_optional& x)
      {
        this->SimFlowPlant_MaxPwrCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_AnnualLocalAverageWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AnnualLocalAverageWindSpeed () const
      {
        return this->SimFlowPlant_AnnualLocalAverageWindSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_AnnualLocalAverageWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AnnualLocalAverageWindSpeed ()
      {
        return this->SimFlowPlant_AnnualLocalAverageWindSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AnnualLocalAverageWindSpeed (const SimFlowPlant_AnnualLocalAverageWindSpeed_type& x)
      {
        this->SimFlowPlant_AnnualLocalAverageWindSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_AnnualLocalAverageWindSpeed (const SimFlowPlant_AnnualLocalAverageWindSpeed_optional& x)
      {
        this->SimFlowPlant_AnnualLocalAverageWindSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_HeightForLocalAverageWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_HeightForLocalAverageWindSpeed () const
      {
        return this->SimFlowPlant_HeightForLocalAverageWindSpeed_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_HeightForLocalAverageWindSpeed_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_HeightForLocalAverageWindSpeed ()
      {
        return this->SimFlowPlant_HeightForLocalAverageWindSpeed_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_HeightForLocalAverageWindSpeed (const SimFlowPlant_HeightForLocalAverageWindSpeed_type& x)
      {
        this->SimFlowPlant_HeightForLocalAverageWindSpeed_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_HeightForLocalAverageWindSpeed (const SimFlowPlant_HeightForLocalAverageWindSpeed_optional& x)
      {
        this->SimFlowPlant_HeightForLocalAverageWindSpeed_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeChordArea_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeChordArea () const
      {
        return this->SimFlowPlant_BladeChordArea_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeChordArea_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeChordArea ()
      {
        return this->SimFlowPlant_BladeChordArea_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeChordArea (const SimFlowPlant_BladeChordArea_type& x)
      {
        this->SimFlowPlant_BladeChordArea_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeChordArea (const SimFlowPlant_BladeChordArea_optional& x)
      {
        this->SimFlowPlant_BladeChordArea_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeDragCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeDragCoef () const
      {
        return this->SimFlowPlant_BladeDragCoef_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeDragCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeDragCoef ()
      {
        return this->SimFlowPlant_BladeDragCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeDragCoef (const SimFlowPlant_BladeDragCoef_type& x)
      {
        this->SimFlowPlant_BladeDragCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeDragCoef (const SimFlowPlant_BladeDragCoef_optional& x)
      {
        this->SimFlowPlant_BladeDragCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeLiftCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeLiftCoef () const
      {
        return this->SimFlowPlant_BladeLiftCoef_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_BladeLiftCoef_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeLiftCoef ()
      {
        return this->SimFlowPlant_BladeLiftCoef_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeLiftCoef (const SimFlowPlant_BladeLiftCoef_type& x)
      {
        this->SimFlowPlant_BladeLiftCoef_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_BladeLiftCoef (const SimFlowPlant_BladeLiftCoef_optional& x)
      {
        this->SimFlowPlant_BladeLiftCoef_ = x;
      }

      const SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_PowerCoeffC_1_6_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PowerCoeffC_1_6 () const
      {
        return this->SimFlowPlant_PowerCoeffC_1_6_;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::SimFlowPlant_PowerCoeffC_1_6_optional& SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PowerCoeffC_1_6 ()
      {
        return this->SimFlowPlant_PowerCoeffC_1_6_;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PowerCoeffC_1_6 (const SimFlowPlant_PowerCoeffC_1_6_type& x)
      {
        this->SimFlowPlant_PowerCoeffC_1_6_.set (x);
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PowerCoeffC_1_6 (const SimFlowPlant_PowerCoeffC_1_6_optional& x)
      {
        this->SimFlowPlant_PowerCoeffC_1_6_ = x;
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_PowerCoeffC_1_6 (::std::auto_ptr< SimFlowPlant_PowerCoeffC_1_6_type > x)
      {
        this->SimFlowPlant_PowerCoeffC_1_6_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_ElectricalGenerator_WindTurbine
      //

      SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_ElectricalGenerator_WindTurbine (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator (RefId),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_RotorType_ (this),
        SimFlowPlant_PwrCntl_ (this),
        SimFlowPlant_RatedRotorSpeed_ (this),
        SimFlowPlant_RotorDiam_ (this),
        SimFlowPlant_OverallHeight_ (this),
        SimFlowPlant_NumBlades_ (this),
        SimFlowPlant_RatedPwr_ (this),
        SimFlowPlant_RatedWindSpeed_ (this),
        SimFlowPlant_CutWindSpeed_ (this),
        SimFlowPlant_CutOutWindSpeed_ (this),
        SimFlowPlant_FractSysEff_ (this),
        SimFlowPlant_MaxTipSpeedRatio_ (this),
        SimFlowPlant_MaxPwrCoef_ (this),
        SimFlowPlant_AnnualLocalAverageWindSpeed_ (this),
        SimFlowPlant_HeightForLocalAverageWindSpeed_ (this),
        SimFlowPlant_BladeChordArea_ (this),
        SimFlowPlant_BladeDragCoef_ (this),
        SimFlowPlant_BladeLiftCoef_ (this),
        SimFlowPlant_PowerCoeffC_1_6_ (this)
      {
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_ElectricalGenerator_WindTurbine (const SimFlowPlant_ElectricalGenerator_WindTurbine& x,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator (x, f, c),
        SimFlowPlant_AvailSchedName_ (x.SimFlowPlant_AvailSchedName_, f, this),
        SimFlowPlant_RotorType_ (x.SimFlowPlant_RotorType_, f, this),
        SimFlowPlant_PwrCntl_ (x.SimFlowPlant_PwrCntl_, f, this),
        SimFlowPlant_RatedRotorSpeed_ (x.SimFlowPlant_RatedRotorSpeed_, f, this),
        SimFlowPlant_RotorDiam_ (x.SimFlowPlant_RotorDiam_, f, this),
        SimFlowPlant_OverallHeight_ (x.SimFlowPlant_OverallHeight_, f, this),
        SimFlowPlant_NumBlades_ (x.SimFlowPlant_NumBlades_, f, this),
        SimFlowPlant_RatedPwr_ (x.SimFlowPlant_RatedPwr_, f, this),
        SimFlowPlant_RatedWindSpeed_ (x.SimFlowPlant_RatedWindSpeed_, f, this),
        SimFlowPlant_CutWindSpeed_ (x.SimFlowPlant_CutWindSpeed_, f, this),
        SimFlowPlant_CutOutWindSpeed_ (x.SimFlowPlant_CutOutWindSpeed_, f, this),
        SimFlowPlant_FractSysEff_ (x.SimFlowPlant_FractSysEff_, f, this),
        SimFlowPlant_MaxTipSpeedRatio_ (x.SimFlowPlant_MaxTipSpeedRatio_, f, this),
        SimFlowPlant_MaxPwrCoef_ (x.SimFlowPlant_MaxPwrCoef_, f, this),
        SimFlowPlant_AnnualLocalAverageWindSpeed_ (x.SimFlowPlant_AnnualLocalAverageWindSpeed_, f, this),
        SimFlowPlant_HeightForLocalAverageWindSpeed_ (x.SimFlowPlant_HeightForLocalAverageWindSpeed_, f, this),
        SimFlowPlant_BladeChordArea_ (x.SimFlowPlant_BladeChordArea_, f, this),
        SimFlowPlant_BladeDragCoef_ (x.SimFlowPlant_BladeDragCoef_, f, this),
        SimFlowPlant_BladeLiftCoef_ (x.SimFlowPlant_BladeLiftCoef_, f, this),
        SimFlowPlant_PowerCoeffC_1_6_ (x.SimFlowPlant_PowerCoeffC_1_6_, f, this)
      {
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::
      SimFlowPlant_ElectricalGenerator_WindTurbine (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f,
                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_AvailSchedName_ (this),
        SimFlowPlant_RotorType_ (this),
        SimFlowPlant_PwrCntl_ (this),
        SimFlowPlant_RatedRotorSpeed_ (this),
        SimFlowPlant_RotorDiam_ (this),
        SimFlowPlant_OverallHeight_ (this),
        SimFlowPlant_NumBlades_ (this),
        SimFlowPlant_RatedPwr_ (this),
        SimFlowPlant_RatedWindSpeed_ (this),
        SimFlowPlant_CutWindSpeed_ (this),
        SimFlowPlant_CutOutWindSpeed_ (this),
        SimFlowPlant_FractSysEff_ (this),
        SimFlowPlant_MaxTipSpeedRatio_ (this),
        SimFlowPlant_MaxPwrCoef_ (this),
        SimFlowPlant_AnnualLocalAverageWindSpeed_ (this),
        SimFlowPlant_HeightForLocalAverageWindSpeed_ (this),
        SimFlowPlant_BladeChordArea_ (this),
        SimFlowPlant_BladeDragCoef_ (this),
        SimFlowPlant_BladeLiftCoef_ (this),
        SimFlowPlant_PowerCoeffC_1_6_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ElectricalGenerator_WindTurbine::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_AvailSchedName
          //
          if (n.name () == "SimFlowPlant_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AvailSchedName_type > r (
              SimFlowPlant_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AvailSchedName_)
            {
              this->SimFlowPlant_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_RotorType
          //
          if (n.name () == "SimFlowPlant_RotorType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_RotorType_type > r (
              SimFlowPlant_RotorType_traits::create (i, f, this));

            if (!this->SimFlowPlant_RotorType_)
            {
              this->SimFlowPlant_RotorType_.set (r);
              continue;
            }
          }

          // SimFlowPlant_PwrCntl
          //
          if (n.name () == "SimFlowPlant_PwrCntl" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PwrCntl_type > r (
              SimFlowPlant_PwrCntl_traits::create (i, f, this));

            if (!this->SimFlowPlant_PwrCntl_)
            {
              this->SimFlowPlant_PwrCntl_.set (r);
              continue;
            }
          }

          // SimFlowPlant_RatedRotorSpeed
          //
          if (n.name () == "SimFlowPlant_RatedRotorSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_RatedRotorSpeed_)
            {
              this->SimFlowPlant_RatedRotorSpeed_.set (SimFlowPlant_RatedRotorSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RotorDiam
          //
          if (n.name () == "SimFlowPlant_RotorDiam" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_RotorDiam_)
            {
              this->SimFlowPlant_RotorDiam_.set (SimFlowPlant_RotorDiam_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_OverallHeight
          //
          if (n.name () == "SimFlowPlant_OverallHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_OverallHeight_)
            {
              this->SimFlowPlant_OverallHeight_.set (SimFlowPlant_OverallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NumBlades
          //
          if (n.name () == "SimFlowPlant_NumBlades" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NumBlades_)
            {
              this->SimFlowPlant_NumBlades_.set (SimFlowPlant_NumBlades_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RatedPwr
          //
          if (n.name () == "SimFlowPlant_RatedPwr" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_RatedPwr_)
            {
              this->SimFlowPlant_RatedPwr_.set (SimFlowPlant_RatedPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RatedWindSpeed
          //
          if (n.name () == "SimFlowPlant_RatedWindSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_RatedWindSpeed_)
            {
              this->SimFlowPlant_RatedWindSpeed_.set (SimFlowPlant_RatedWindSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CutWindSpeed
          //
          if (n.name () == "SimFlowPlant_CutWindSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CutWindSpeed_)
            {
              this->SimFlowPlant_CutWindSpeed_.set (SimFlowPlant_CutWindSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CutOutWindSpeed
          //
          if (n.name () == "SimFlowPlant_CutOutWindSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_CutOutWindSpeed_)
            {
              this->SimFlowPlant_CutOutWindSpeed_.set (SimFlowPlant_CutOutWindSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FractSysEff
          //
          if (n.name () == "SimFlowPlant_FractSysEff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_FractSysEff_)
            {
              this->SimFlowPlant_FractSysEff_.set (SimFlowPlant_FractSysEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxTipSpeedRatio
          //
          if (n.name () == "SimFlowPlant_MaxTipSpeedRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MaxTipSpeedRatio_)
            {
              this->SimFlowPlant_MaxTipSpeedRatio_.set (SimFlowPlant_MaxTipSpeedRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxPwrCoef
          //
          if (n.name () == "SimFlowPlant_MaxPwrCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MaxPwrCoef_)
            {
              this->SimFlowPlant_MaxPwrCoef_.set (SimFlowPlant_MaxPwrCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_AnnualLocalAverageWindSpeed
          //
          if (n.name () == "SimFlowPlant_AnnualLocalAverageWindSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_AnnualLocalAverageWindSpeed_)
            {
              this->SimFlowPlant_AnnualLocalAverageWindSpeed_.set (SimFlowPlant_AnnualLocalAverageWindSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HeightForLocalAverageWindSpeed
          //
          if (n.name () == "SimFlowPlant_HeightForLocalAverageWindSpeed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_HeightForLocalAverageWindSpeed_)
            {
              this->SimFlowPlant_HeightForLocalAverageWindSpeed_.set (SimFlowPlant_HeightForLocalAverageWindSpeed_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BladeChordArea
          //
          if (n.name () == "SimFlowPlant_BladeChordArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_BladeChordArea_)
            {
              this->SimFlowPlant_BladeChordArea_.set (SimFlowPlant_BladeChordArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BladeDragCoef
          //
          if (n.name () == "SimFlowPlant_BladeDragCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_BladeDragCoef_)
            {
              this->SimFlowPlant_BladeDragCoef_.set (SimFlowPlant_BladeDragCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BladeLiftCoef
          //
          if (n.name () == "SimFlowPlant_BladeLiftCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_BladeLiftCoef_)
            {
              this->SimFlowPlant_BladeLiftCoef_.set (SimFlowPlant_BladeLiftCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_PowerCoeffC_1_6
          //
          if (n.name () == "SimFlowPlant_PowerCoeffC_1_6" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PowerCoeffC_1_6_type > r (
              SimFlowPlant_PowerCoeffC_1_6_traits::create (i, f, this));

            if (!this->SimFlowPlant_PowerCoeffC_1_6_)
            {
              this->SimFlowPlant_PowerCoeffC_1_6_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine* SimFlowPlant_ElectricalGenerator_WindTurbine::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ElectricalGenerator_WindTurbine (*this, f, c);
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine& SimFlowPlant_ElectricalGenerator_WindTurbine::
      operator= (const SimFlowPlant_ElectricalGenerator_WindTurbine& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator& > (*this) = x;
          this->SimFlowPlant_AvailSchedName_ = x.SimFlowPlant_AvailSchedName_;
          this->SimFlowPlant_RotorType_ = x.SimFlowPlant_RotorType_;
          this->SimFlowPlant_PwrCntl_ = x.SimFlowPlant_PwrCntl_;
          this->SimFlowPlant_RatedRotorSpeed_ = x.SimFlowPlant_RatedRotorSpeed_;
          this->SimFlowPlant_RotorDiam_ = x.SimFlowPlant_RotorDiam_;
          this->SimFlowPlant_OverallHeight_ = x.SimFlowPlant_OverallHeight_;
          this->SimFlowPlant_NumBlades_ = x.SimFlowPlant_NumBlades_;
          this->SimFlowPlant_RatedPwr_ = x.SimFlowPlant_RatedPwr_;
          this->SimFlowPlant_RatedWindSpeed_ = x.SimFlowPlant_RatedWindSpeed_;
          this->SimFlowPlant_CutWindSpeed_ = x.SimFlowPlant_CutWindSpeed_;
          this->SimFlowPlant_CutOutWindSpeed_ = x.SimFlowPlant_CutOutWindSpeed_;
          this->SimFlowPlant_FractSysEff_ = x.SimFlowPlant_FractSysEff_;
          this->SimFlowPlant_MaxTipSpeedRatio_ = x.SimFlowPlant_MaxTipSpeedRatio_;
          this->SimFlowPlant_MaxPwrCoef_ = x.SimFlowPlant_MaxPwrCoef_;
          this->SimFlowPlant_AnnualLocalAverageWindSpeed_ = x.SimFlowPlant_AnnualLocalAverageWindSpeed_;
          this->SimFlowPlant_HeightForLocalAverageWindSpeed_ = x.SimFlowPlant_HeightForLocalAverageWindSpeed_;
          this->SimFlowPlant_BladeChordArea_ = x.SimFlowPlant_BladeChordArea_;
          this->SimFlowPlant_BladeDragCoef_ = x.SimFlowPlant_BladeDragCoef_;
          this->SimFlowPlant_BladeLiftCoef_ = x.SimFlowPlant_BladeLiftCoef_;
          this->SimFlowPlant_PowerCoeffC_1_6_ = x.SimFlowPlant_PowerCoeffC_1_6_;
        }

        return *this;
      }

      SimFlowPlant_ElectricalGenerator_WindTurbine::
      ~SimFlowPlant_ElectricalGenerator_WindTurbine ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

