// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_TypicalWindow_Interior.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_Interior
      // 

      const SimWindow_TypicalWindow_Interior::WindowTypeTag_optional& SimWindow_TypicalWindow_Interior::
      WindowTypeTag () const
      {
        return this->WindowTypeTag_;
      }

      SimWindow_TypicalWindow_Interior::WindowTypeTag_optional& SimWindow_TypicalWindow_Interior::
      WindowTypeTag ()
      {
        return this->WindowTypeTag_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowTypeTag (const WindowTypeTag_type& x)
      {
        this->WindowTypeTag_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowTypeTag (const WindowTypeTag_optional& x)
      {
        this->WindowTypeTag_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowTypeTag (::std::auto_ptr< WindowTypeTag_type > x)
      {
        this->WindowTypeTag_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::WindowOperationType_optional& SimWindow_TypicalWindow_Interior::
      WindowOperationType () const
      {
        return this->WindowOperationType_;
      }

      SimWindow_TypicalWindow_Interior::WindowOperationType_optional& SimWindow_TypicalWindow_Interior::
      WindowOperationType ()
      {
        return this->WindowOperationType_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowOperationType (const WindowOperationType_type& x)
      {
        this->WindowOperationType_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowOperationType (const WindowOperationType_optional& x)
      {
        this->WindowOperationType_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowOperationType (::std::auto_ptr< WindowOperationType_type > x)
      {
        this->WindowOperationType_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::WindowConstructionType_optional& SimWindow_TypicalWindow_Interior::
      WindowConstructionType () const
      {
        return this->WindowConstructionType_;
      }

      SimWindow_TypicalWindow_Interior::WindowConstructionType_optional& SimWindow_TypicalWindow_Interior::
      WindowConstructionType ()
      {
        return this->WindowConstructionType_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowConstructionType (const WindowConstructionType_type& x)
      {
        this->WindowConstructionType_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowConstructionType (const WindowConstructionType_optional& x)
      {
        this->WindowConstructionType_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowConstructionType (::std::auto_ptr< WindowConstructionType_type > x)
      {
        this->WindowConstructionType_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::WindowIsExternal_optional& SimWindow_TypicalWindow_Interior::
      WindowIsExternal () const
      {
        return this->WindowIsExternal_;
      }

      SimWindow_TypicalWindow_Interior::WindowIsExternal_optional& SimWindow_TypicalWindow_Interior::
      WindowIsExternal ()
      {
        return this->WindowIsExternal_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowIsExternal (const WindowIsExternal_type& x)
      {
        this->WindowIsExternal_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowIsExternal (const WindowIsExternal_optional& x)
      {
        this->WindowIsExternal_ = x;
      }

      const SimWindow_TypicalWindow_Interior::CompositeThermalTransmittance_optional& SimWindow_TypicalWindow_Interior::
      CompositeThermalTransmittance () const
      {
        return this->CompositeThermalTransmittance_;
      }

      SimWindow_TypicalWindow_Interior::CompositeThermalTransmittance_optional& SimWindow_TypicalWindow_Interior::
      CompositeThermalTransmittance ()
      {
        return this->CompositeThermalTransmittance_;
      }

      void SimWindow_TypicalWindow_Interior::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_type& x)
      {
        this->CompositeThermalTransmittance_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_optional& x)
      {
        this->CompositeThermalTransmittance_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowHeight_optional& SimWindow_TypicalWindow_Interior::
      WindowHeight () const
      {
        return this->WindowHeight_;
      }

      SimWindow_TypicalWindow_Interior::WindowHeight_optional& SimWindow_TypicalWindow_Interior::
      WindowHeight ()
      {
        return this->WindowHeight_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowHeight (const WindowHeight_type& x)
      {
        this->WindowHeight_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowHeight (const WindowHeight_optional& x)
      {
        this->WindowHeight_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowWidth_optional& SimWindow_TypicalWindow_Interior::
      WindowWidth () const
      {
        return this->WindowWidth_;
      }

      SimWindow_TypicalWindow_Interior::WindowWidth_optional& SimWindow_TypicalWindow_Interior::
      WindowWidth ()
      {
        return this->WindowWidth_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowWidth (const WindowWidth_type& x)
      {
        this->WindowWidth_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowWidth (const WindowWidth_optional& x)
      {
        this->WindowWidth_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowArea_optional& SimWindow_TypicalWindow_Interior::
      WindowArea () const
      {
        return this->WindowArea_;
      }

      SimWindow_TypicalWindow_Interior::WindowArea_optional& SimWindow_TypicalWindow_Interior::
      WindowArea ()
      {
        return this->WindowArea_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowArea (const WindowArea_type& x)
      {
        this->WindowArea_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowArea (const WindowArea_optional& x)
      {
        this->WindowArea_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowPerimeter_optional& SimWindow_TypicalWindow_Interior::
      WindowPerimeter () const
      {
        return this->WindowPerimeter_;
      }

      SimWindow_TypicalWindow_Interior::WindowPerimeter_optional& SimWindow_TypicalWindow_Interior::
      WindowPerimeter ()
      {
        return this->WindowPerimeter_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowPerimeter (const WindowPerimeter_type& x)
      {
        this->WindowPerimeter_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowPerimeter (const WindowPerimeter_optional& x)
      {
        this->WindowPerimeter_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowFrameDepth_optional& SimWindow_TypicalWindow_Interior::
      WindowFrameDepth () const
      {
        return this->WindowFrameDepth_;
      }

      SimWindow_TypicalWindow_Interior::WindowFrameDepth_optional& SimWindow_TypicalWindow_Interior::
      WindowFrameDepth ()
      {
        return this->WindowFrameDepth_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowFrameDepth (const WindowFrameDepth_type& x)
      {
        this->WindowFrameDepth_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowFrameDepth (const WindowFrameDepth_optional& x)
      {
        this->WindowFrameDepth_ = x;
      }

      const SimWindow_TypicalWindow_Interior::WindowFrameThickness_optional& SimWindow_TypicalWindow_Interior::
      WindowFrameThickness () const
      {
        return this->WindowFrameThickness_;
      }

      SimWindow_TypicalWindow_Interior::WindowFrameThickness_optional& SimWindow_TypicalWindow_Interior::
      WindowFrameThickness ()
      {
        return this->WindowFrameThickness_;
      }

      void SimWindow_TypicalWindow_Interior::
      WindowFrameThickness (const WindowFrameThickness_type& x)
      {
        this->WindowFrameThickness_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      WindowFrameThickness (const WindowFrameThickness_optional& x)
      {
        this->WindowFrameThickness_ = x;
      }

      const SimWindow_TypicalWindow_Interior::ClassRef_UniFormat_optional& SimWindow_TypicalWindow_Interior::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimWindow_TypicalWindow_Interior::ClassRef_UniFormat_optional& SimWindow_TypicalWindow_Interior::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimWindow_TypicalWindow_Interior::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::MaterialList_optional& SimWindow_TypicalWindow_Interior::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimWindow_TypicalWindow_Interior::MaterialList_optional& SimWindow_TypicalWindow_Interior::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimWindow_TypicalWindow_Interior::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::VoidsInWindow_optional& SimWindow_TypicalWindow_Interior::
      VoidsInWindow () const
      {
        return this->VoidsInWindow_;
      }

      SimWindow_TypicalWindow_Interior::VoidsInWindow_optional& SimWindow_TypicalWindow_Interior::
      VoidsInWindow ()
      {
        return this->VoidsInWindow_;
      }

      void SimWindow_TypicalWindow_Interior::
      VoidsInWindow (const VoidsInWindow_type& x)
      {
        this->VoidsInWindow_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      VoidsInWindow (const VoidsInWindow_optional& x)
      {
        this->VoidsInWindow_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      VoidsInWindow (::std::auto_ptr< VoidsInWindow_type > x)
      {
        this->VoidsInWindow_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::OpeningFilledByWindow_optional& SimWindow_TypicalWindow_Interior::
      OpeningFilledByWindow () const
      {
        return this->OpeningFilledByWindow_;
      }

      SimWindow_TypicalWindow_Interior::OpeningFilledByWindow_optional& SimWindow_TypicalWindow_Interior::
      OpeningFilledByWindow ()
      {
        return this->OpeningFilledByWindow_;
      }

      void SimWindow_TypicalWindow_Interior::
      OpeningFilledByWindow (const OpeningFilledByWindow_type& x)
      {
        this->OpeningFilledByWindow_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      OpeningFilledByWindow (const OpeningFilledByWindow_optional& x)
      {
        this->OpeningFilledByWindow_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      OpeningFilledByWindow (::std::auto_ptr< OpeningFilledByWindow_type > x)
      {
        this->OpeningFilledByWindow_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_ConstructionName_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_ConstructionName () const
      {
        return this->SimWindow_ConstructionName_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_ConstructionName_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_ConstructionName ()
      {
        return this->SimWindow_ConstructionName_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_type& x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_optional& x)
      {
        this->SimWindow_ConstructionName_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_ConstructionName (::std::auto_ptr< SimWindow_ConstructionName_type > x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_BldgSurfName_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_BldgSurfName () const
      {
        return this->SimWindow_BldgSurfName_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_BldgSurfName_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_BldgSurfName ()
      {
        return this->SimWindow_BldgSurfName_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_type& x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_optional& x)
      {
        this->SimWindow_BldgSurfName_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_BldgSurfName (::std::auto_ptr< SimWindow_BldgSurfName_type > x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_OutsdBndCondObject_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_OutsdBndCondObject () const
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_OutsdBndCondObject_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_OutsdBndCondObject ()
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_type& x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_optional& x)
      {
        this->SimWindow_OutsdBndCondObject_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_OutsdBndCondObject (::std::auto_ptr< SimWindow_OutsdBndCondObject_type > x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_Mult_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Mult () const
      {
        return this->SimWindow_Mult_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_Mult_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Mult ()
      {
        return this->SimWindow_Mult_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Mult (const SimWindow_Mult_type& x)
      {
        this->SimWindow_Mult_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Mult (const SimWindow_Mult_optional& x)
      {
        this->SimWindow_Mult_ = x;
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_StartXCoord_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_StartXCoord () const
      {
        return this->SimWindow_StartXCoord_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_StartXCoord_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_StartXCoord ()
      {
        return this->SimWindow_StartXCoord_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_StartXCoord (const SimWindow_StartXCoord_type& x)
      {
        this->SimWindow_StartXCoord_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_StartXCoord (const SimWindow_StartXCoord_optional& x)
      {
        this->SimWindow_StartXCoord_ = x;
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_StartZCoord_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_StartZCoord () const
      {
        return this->SimWindow_StartZCoord_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_StartZCoord_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_StartZCoord ()
      {
        return this->SimWindow_StartZCoord_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_StartZCoord (const SimWindow_StartZCoord_type& x)
      {
        this->SimWindow_StartZCoord_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_StartZCoord (const SimWindow_StartZCoord_optional& x)
      {
        this->SimWindow_StartZCoord_ = x;
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_Length_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Length () const
      {
        return this->SimWindow_Length_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_Length_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Length ()
      {
        return this->SimWindow_Length_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Length (const SimWindow_Length_type& x)
      {
        this->SimWindow_Length_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Length (const SimWindow_Length_optional& x)
      {
        this->SimWindow_Length_ = x;
      }

      const SimWindow_TypicalWindow_Interior::SimWindow_Ht_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Ht () const
      {
        return this->SimWindow_Ht_;
      }

      SimWindow_TypicalWindow_Interior::SimWindow_Ht_optional& SimWindow_TypicalWindow_Interior::
      SimWindow_Ht ()
      {
        return this->SimWindow_Ht_;
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Ht (const SimWindow_Ht_type& x)
      {
        this->SimWindow_Ht_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      SimWindow_Ht (const SimWindow_Ht_optional& x)
      {
        this->SimWindow_Ht_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x;
      }

      const SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle () const
      {
        return this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
      }

      SimWindow_TypicalWindow_Interior::Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle ()
      {
        return this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_type& x)
      {
        this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_.set (x);
      }

      void SimWindow_TypicalWindow_Interior::
      Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle (const Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_optional& x)
      {
        this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_Interior
      //

      SimWindow_TypicalWindow_Interior::
      SimWindow_TypicalWindow_Interior (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (RefId),
        WindowTypeTag_ (this),
        WindowOperationType_ (this),
        WindowConstructionType_ (this),
        WindowIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        WindowHeight_ (this),
        WindowWidth_ (this),
        WindowArea_ (this),
        WindowPerimeter_ (this),
        WindowFrameDepth_ (this),
        WindowFrameThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInWindow_ (this),
        OpeningFilledByWindow_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_Mult_ (this),
        SimWindow_StartXCoord_ (this),
        SimWindow_StartZCoord_ (this),
        SimWindow_Length_ (this),
        SimWindow_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (this)
      {
      }

      SimWindow_TypicalWindow_Interior::
      SimWindow_TypicalWindow_Interior (const SimWindow_TypicalWindow_Interior& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (x, f, c),
        WindowTypeTag_ (x.WindowTypeTag_, f, this),
        WindowOperationType_ (x.WindowOperationType_, f, this),
        WindowConstructionType_ (x.WindowConstructionType_, f, this),
        WindowIsExternal_ (x.WindowIsExternal_, f, this),
        CompositeThermalTransmittance_ (x.CompositeThermalTransmittance_, f, this),
        WindowHeight_ (x.WindowHeight_, f, this),
        WindowWidth_ (x.WindowWidth_, f, this),
        WindowArea_ (x.WindowArea_, f, this),
        WindowPerimeter_ (x.WindowPerimeter_, f, this),
        WindowFrameDepth_ (x.WindowFrameDepth_, f, this),
        WindowFrameThickness_ (x.WindowFrameThickness_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        VoidsInWindow_ (x.VoidsInWindow_, f, this),
        OpeningFilledByWindow_ (x.OpeningFilledByWindow_, f, this),
        SimWindow_ConstructionName_ (x.SimWindow_ConstructionName_, f, this),
        SimWindow_BldgSurfName_ (x.SimWindow_BldgSurfName_, f, this),
        SimWindow_OutsdBndCondObject_ (x.SimWindow_OutsdBndCondObject_, f, this),
        SimWindow_Mult_ (x.SimWindow_Mult_, f, this),
        SimWindow_StartXCoord_ (x.SimWindow_StartXCoord_, f, this),
        SimWindow_StartZCoord_ (x.SimWindow_StartZCoord_, f, this),
        SimWindow_Length_ (x.SimWindow_Length_, f, this),
        SimWindow_Ht_ (x.SimWindow_Ht_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_, f, this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_, f, this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_, f, this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_, f, this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_, f, this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (x.Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_, f, this)
      {
      }

      SimWindow_TypicalWindow_Interior::
      SimWindow_TypicalWindow_Interior (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (e, f | ::xml_schema::flags::base, c),
        WindowTypeTag_ (this),
        WindowOperationType_ (this),
        WindowConstructionType_ (this),
        WindowIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        WindowHeight_ (this),
        WindowWidth_ (this),
        WindowArea_ (this),
        WindowPerimeter_ (this),
        WindowFrameDepth_ (this),
        WindowFrameThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInWindow_ (this),
        OpeningFilledByWindow_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_Mult_ (this),
        SimWindow_StartXCoord_ (this),
        SimWindow_StartZCoord_ (this),
        SimWindow_Length_ (this),
        SimWindow_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this),
        Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_TypicalWindow_Interior::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // WindowTypeTag
          //
          if (n.name () == "WindowTypeTag" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowTypeTag_type > r (
              WindowTypeTag_traits::create (i, f, this));

            if (!this->WindowTypeTag_)
            {
              this->WindowTypeTag_.set (r);
              continue;
            }
          }

          // WindowOperationType
          //
          if (n.name () == "WindowOperationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowOperationType_type > r (
              WindowOperationType_traits::create (i, f, this));

            if (!this->WindowOperationType_)
            {
              this->WindowOperationType_.set (r);
              continue;
            }
          }

          // WindowConstructionType
          //
          if (n.name () == "WindowConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowConstructionType_type > r (
              WindowConstructionType_traits::create (i, f, this));

            if (!this->WindowConstructionType_)
            {
              this->WindowConstructionType_.set (r);
              continue;
            }
          }

          // WindowIsExternal
          //
          if (n.name () == "WindowIsExternal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowIsExternal_)
            {
              this->WindowIsExternal_.set (WindowIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTransmittance
          //
          if (n.name () == "CompositeThermalTransmittance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->CompositeThermalTransmittance_)
            {
              this->CompositeThermalTransmittance_.set (CompositeThermalTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // WindowHeight
          //
          if (n.name () == "WindowHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowHeight_)
            {
              this->WindowHeight_.set (WindowHeight_traits::create (i, f, this));
              continue;
            }
          }

          // WindowWidth
          //
          if (n.name () == "WindowWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowWidth_)
            {
              this->WindowWidth_.set (WindowWidth_traits::create (i, f, this));
              continue;
            }
          }

          // WindowArea
          //
          if (n.name () == "WindowArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowArea_)
            {
              this->WindowArea_.set (WindowArea_traits::create (i, f, this));
              continue;
            }
          }

          // WindowPerimeter
          //
          if (n.name () == "WindowPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowPerimeter_)
            {
              this->WindowPerimeter_.set (WindowPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // WindowFrameDepth
          //
          if (n.name () == "WindowFrameDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowFrameDepth_)
            {
              this->WindowFrameDepth_.set (WindowFrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // WindowFrameThickness
          //
          if (n.name () == "WindowFrameThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowFrameThickness_)
            {
              this->WindowFrameThickness_.set (WindowFrameThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // VoidsInWindow
          //
          if (n.name () == "VoidsInWindow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VoidsInWindow_type > r (
              VoidsInWindow_traits::create (i, f, this));

            if (!this->VoidsInWindow_)
            {
              this->VoidsInWindow_.set (r);
              continue;
            }
          }

          // OpeningFilledByWindow
          //
          if (n.name () == "OpeningFilledByWindow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< OpeningFilledByWindow_type > r (
              OpeningFilledByWindow_traits::create (i, f, this));

            if (!this->OpeningFilledByWindow_)
            {
              this->OpeningFilledByWindow_.set (r);
              continue;
            }
          }

          // SimWindow_ConstructionName
          //
          if (n.name () == "SimWindow_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ConstructionName_type > r (
              SimWindow_ConstructionName_traits::create (i, f, this));

            if (!this->SimWindow_ConstructionName_)
            {
              this->SimWindow_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWindow_BldgSurfName
          //
          if (n.name () == "SimWindow_BldgSurfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_BldgSurfName_type > r (
              SimWindow_BldgSurfName_traits::create (i, f, this));

            if (!this->SimWindow_BldgSurfName_)
            {
              this->SimWindow_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimWindow_OutsdBndCondObject
          //
          if (n.name () == "SimWindow_OutsdBndCondObject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_OutsdBndCondObject_type > r (
              SimWindow_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWindow_OutsdBndCondObject_)
            {
              this->SimWindow_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWindow_Mult
          //
          if (n.name () == "SimWindow_Mult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_Mult_)
            {
              this->SimWindow_Mult_.set (SimWindow_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_StartXCoord
          //
          if (n.name () == "SimWindow_StartXCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_StartXCoord_)
            {
              this->SimWindow_StartXCoord_.set (SimWindow_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_StartZCoord
          //
          if (n.name () == "SimWindow_StartZCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_StartZCoord_)
            {
              this->SimWindow_StartZCoord_.set (SimWindow_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_Length
          //
          if (n.name () == "SimWindow_Length" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_Length_)
            {
              this->SimWindow_Length_.set (SimWindow_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_Ht
          //
          if (n.name () == "SimWindow_Ht" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_Ht_)
            {
              this->SimWindow_Ht_.set (SimWindow_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > r (
              Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_)
            {
              this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_)
            {
              this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_)
            {
              this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_)
            {
              this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_DischargeCoef
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_DischargeCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_)
            {
              this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle
          //
          if (n.name () == "Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_)
            {
              this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_.set (Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWindow_TypicalWindow_Interior* SimWindow_TypicalWindow_Interior::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_TypicalWindow_Interior (*this, f, c);
      }

      SimWindow_TypicalWindow_Interior& SimWindow_TypicalWindow_Interior::
      operator= (const SimWindow_TypicalWindow_Interior& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow& > (*this) = x;
          this->WindowTypeTag_ = x.WindowTypeTag_;
          this->WindowOperationType_ = x.WindowOperationType_;
          this->WindowConstructionType_ = x.WindowConstructionType_;
          this->WindowIsExternal_ = x.WindowIsExternal_;
          this->CompositeThermalTransmittance_ = x.CompositeThermalTransmittance_;
          this->WindowHeight_ = x.WindowHeight_;
          this->WindowWidth_ = x.WindowWidth_;
          this->WindowArea_ = x.WindowArea_;
          this->WindowPerimeter_ = x.WindowPerimeter_;
          this->WindowFrameDepth_ = x.WindowFrameDepth_;
          this->WindowFrameThickness_ = x.WindowFrameThickness_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->VoidsInWindow_ = x.VoidsInWindow_;
          this->OpeningFilledByWindow_ = x.OpeningFilledByWindow_;
          this->SimWindow_ConstructionName_ = x.SimWindow_ConstructionName_;
          this->SimWindow_BldgSurfName_ = x.SimWindow_BldgSurfName_;
          this->SimWindow_OutsdBndCondObject_ = x.SimWindow_OutsdBndCondObject_;
          this->SimWindow_Mult_ = x.SimWindow_Mult_;
          this->SimWindow_StartXCoord_ = x.SimWindow_StartXCoord_;
          this->SimWindow_StartZCoord_ = x.SimWindow_StartZCoord_;
          this->SimWindow_Length_ = x.SimWindow_Length_;
          this->SimWindow_Ht_ = x.SimWindow_Ht_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
          this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
          this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
          this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
          this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
          this->Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_ = x.Airflow_MZone_Comp_HorzOpng_SlopingPlaneAngle_;
        }

        return *this;
      }

      SimWindow_TypicalWindow_Interior::
      ~SimWindow_TypicalWindow_Interior ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

