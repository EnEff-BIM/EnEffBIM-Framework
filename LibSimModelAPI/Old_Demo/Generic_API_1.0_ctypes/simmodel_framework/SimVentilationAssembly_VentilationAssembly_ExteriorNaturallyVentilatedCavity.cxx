// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity
      // 

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_BoundaryCondModelName_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_BoundaryCondModelName () const
      {
        return this->SimVentilationAssembly_BoundaryCondModelName_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_BoundaryCondModelName_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_BoundaryCondModelName ()
      {
        return this->SimVentilationAssembly_BoundaryCondModelName_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_BoundaryCondModelName (const SimVentilationAssembly_BoundaryCondModelName_type& x)
      {
        this->SimVentilationAssembly_BoundaryCondModelName_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_BoundaryCondModelName (const SimVentilationAssembly_BoundaryCondModelName_optional& x)
      {
        this->SimVentilationAssembly_BoundaryCondModelName_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_BoundaryCondModelName (::std::auto_ptr< SimVentilationAssembly_BoundaryCondModelName_type > x)
      {
        this->SimVentilationAssembly_BoundaryCondModelName_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_AreaFractOpngs_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_AreaFractOpngs () const
      {
        return this->SimVentilationAssembly_AreaFractOpngs_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_AreaFractOpngs_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_AreaFractOpngs ()
      {
        return this->SimVentilationAssembly_AreaFractOpngs_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_AreaFractOpngs (const SimVentilationAssembly_AreaFractOpngs_type& x)
      {
        this->SimVentilationAssembly_AreaFractOpngs_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_AreaFractOpngs (const SimVentilationAssembly_AreaFractOpngs_optional& x)
      {
        this->SimVentilationAssembly_AreaFractOpngs_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_ThermalEmisExtBaffleMatl_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_ThermalEmisExtBaffleMatl () const
      {
        return this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_ThermalEmisExtBaffleMatl_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_ThermalEmisExtBaffleMatl ()
      {
        return this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_ThermalEmisExtBaffleMatl (const SimVentilationAssembly_ThermalEmisExtBaffleMatl_type& x)
      {
        this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_ThermalEmisExtBaffleMatl (const SimVentilationAssembly_ThermalEmisExtBaffleMatl_optional& x)
      {
        this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_SolarAbsorbExtBaffle_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SolarAbsorbExtBaffle () const
      {
        return this->SimVentilationAssembly_SolarAbsorbExtBaffle_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_SolarAbsorbExtBaffle_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SolarAbsorbExtBaffle ()
      {
        return this->SimVentilationAssembly_SolarAbsorbExtBaffle_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SolarAbsorbExtBaffle (const SimVentilationAssembly_SolarAbsorbExtBaffle_type& x)
      {
        this->SimVentilationAssembly_SolarAbsorbExtBaffle_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SolarAbsorbExtBaffle (const SimVentilationAssembly_SolarAbsorbExtBaffle_optional& x)
      {
        this->SimVentilationAssembly_SolarAbsorbExtBaffle_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent () const
      {
        return this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent ()
      {
        return this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent (const SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_type& x)
      {
        this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent (const SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_optional& x)
      {
        this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_EffecThickCavityBehindExtBaffle_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffecThickCavityBehindExtBaffle () const
      {
        return this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_EffecThickCavityBehindExtBaffle_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffecThickCavityBehindExtBaffle ()
      {
        return this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffecThickCavityBehindExtBaffle (const SimVentilationAssembly_EffecThickCavityBehindExtBaffle_type& x)
      {
        this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffecThickCavityBehindExtBaffle (const SimVentilationAssembly_EffecThickCavityBehindExtBaffle_optional& x)
      {
        this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RatioActSurfAreaToProjSurfArea () const
      {
        return this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RatioActSurfAreaToProjSurfArea ()
      {
        return this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RatioActSurfAreaToProjSurfArea (const SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_type& x)
      {
        this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RatioActSurfAreaToProjSurfArea (const SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_optional& x)
      {
        this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_RoughExtSurf_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RoughExtSurf () const
      {
        return this->SimVentilationAssembly_RoughExtSurf_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_RoughExtSurf_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RoughExtSurf ()
      {
        return this->SimVentilationAssembly_RoughExtSurf_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RoughExtSurf (const SimVentilationAssembly_RoughExtSurf_type& x)
      {
        this->SimVentilationAssembly_RoughExtSurf_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RoughExtSurf (const SimVentilationAssembly_RoughExtSurf_optional& x)
      {
        this->SimVentilationAssembly_RoughExtSurf_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_RoughExtSurf (::std::auto_ptr< SimVentilationAssembly_RoughExtSurf_type > x)
      {
        this->SimVentilationAssembly_RoughExtSurf_.set (x);
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_EffectForPerfWithRespectToWind_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffectForPerfWithRespectToWind () const
      {
        return this->SimVentilationAssembly_EffectForPerfWithRespectToWind_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_EffectForPerfWithRespectToWind_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffectForPerfWithRespectToWind ()
      {
        return this->SimVentilationAssembly_EffectForPerfWithRespectToWind_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffectForPerfWithRespectToWind (const SimVentilationAssembly_EffectForPerfWithRespectToWind_type& x)
      {
        this->SimVentilationAssembly_EffectForPerfWithRespectToWind_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_EffectForPerfWithRespectToWind (const SimVentilationAssembly_EffectForPerfWithRespectToWind_optional& x)
      {
        this->SimVentilationAssembly_EffectForPerfWithRespectToWind_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow () const
      {
        return this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow ()
      {
        return this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow (const SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_type& x)
      {
        this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow (const SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_optional& x)
      {
        this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_ = x;
      }

      const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_SurfName_1_10_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SurfName_1_10 () const
      {
        return this->SimVentilationAssembly_SurfName_1_10_;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::SimVentilationAssembly_SurfName_1_10_optional& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SurfName_1_10 ()
      {
        return this->SimVentilationAssembly_SurfName_1_10_;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SurfName_1_10 (const SimVentilationAssembly_SurfName_1_10_type& x)
      {
        this->SimVentilationAssembly_SurfName_1_10_.set (x);
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SurfName_1_10 (const SimVentilationAssembly_SurfName_1_10_optional& x)
      {
        this->SimVentilationAssembly_SurfName_1_10_ = x;
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_SurfName_1_10 (::std::auto_ptr< SimVentilationAssembly_SurfName_1_10_type > x)
      {
        this->SimVentilationAssembly_SurfName_1_10_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity
      //

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimVentilationAssembly_VentilationAssembly (RefId),
        SimVentilationAssembly_BoundaryCondModelName_ (this),
        SimVentilationAssembly_AreaFractOpngs_ (this),
        SimVentilationAssembly_ThermalEmisExtBaffleMatl_ (this),
        SimVentilationAssembly_SolarAbsorbExtBaffle_ (this),
        SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_ (this),
        SimVentilationAssembly_EffecThickCavityBehindExtBaffle_ (this),
        SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_ (this),
        SimVentilationAssembly_RoughExtSurf_ (this),
        SimVentilationAssembly_EffectForPerfWithRespectToWind_ (this),
        SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_ (this),
        SimVentilationAssembly_SurfName_1_10_ (this)
      {
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity (const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity& x,
                                                                                    ::xml_schema::flags f,
                                                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimVentilationAssembly_VentilationAssembly (x, f, c),
        SimVentilationAssembly_BoundaryCondModelName_ (x.SimVentilationAssembly_BoundaryCondModelName_, f, this),
        SimVentilationAssembly_AreaFractOpngs_ (x.SimVentilationAssembly_AreaFractOpngs_, f, this),
        SimVentilationAssembly_ThermalEmisExtBaffleMatl_ (x.SimVentilationAssembly_ThermalEmisExtBaffleMatl_, f, this),
        SimVentilationAssembly_SolarAbsorbExtBaffle_ (x.SimVentilationAssembly_SolarAbsorbExtBaffle_, f, this),
        SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_ (x.SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_, f, this),
        SimVentilationAssembly_EffecThickCavityBehindExtBaffle_ (x.SimVentilationAssembly_EffecThickCavityBehindExtBaffle_, f, this),
        SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_ (x.SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_, f, this),
        SimVentilationAssembly_RoughExtSurf_ (x.SimVentilationAssembly_RoughExtSurf_, f, this),
        SimVentilationAssembly_EffectForPerfWithRespectToWind_ (x.SimVentilationAssembly_EffectForPerfWithRespectToWind_, f, this),
        SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_ (x.SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_, f, this),
        SimVentilationAssembly_SurfName_1_10_ (x.SimVentilationAssembly_SurfName_1_10_, f, this)
      {
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity (const ::xercesc::DOMElement& e,
                                                                                    ::xml_schema::flags f,
                                                                                    ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimVentilationAssembly_VentilationAssembly (e, f | ::xml_schema::flags::base, c),
        SimVentilationAssembly_BoundaryCondModelName_ (this),
        SimVentilationAssembly_AreaFractOpngs_ (this),
        SimVentilationAssembly_ThermalEmisExtBaffleMatl_ (this),
        SimVentilationAssembly_SolarAbsorbExtBaffle_ (this),
        SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_ (this),
        SimVentilationAssembly_EffecThickCavityBehindExtBaffle_ (this),
        SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_ (this),
        SimVentilationAssembly_RoughExtSurf_ (this),
        SimVentilationAssembly_EffectForPerfWithRespectToWind_ (this),
        SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_ (this),
        SimVentilationAssembly_SurfName_1_10_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimVentilationAssembly_VentilationAssembly::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimVentilationAssembly_BoundaryCondModelName
          //
          if (n.name () == "SimVentilationAssembly_BoundaryCondModelName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_BoundaryCondModelName_type > r (
              SimVentilationAssembly_BoundaryCondModelName_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_BoundaryCondModelName_)
            {
              this->SimVentilationAssembly_BoundaryCondModelName_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_AreaFractOpngs
          //
          if (n.name () == "SimVentilationAssembly_AreaFractOpngs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_AreaFractOpngs_)
            {
              this->SimVentilationAssembly_AreaFractOpngs_.set (SimVentilationAssembly_AreaFractOpngs_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_ThermalEmisExtBaffleMatl
          //
          if (n.name () == "SimVentilationAssembly_ThermalEmisExtBaffleMatl" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_)
            {
              this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_.set (SimVentilationAssembly_ThermalEmisExtBaffleMatl_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_SolarAbsorbExtBaffle
          //
          if (n.name () == "SimVentilationAssembly_SolarAbsorbExtBaffle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_SolarAbsorbExtBaffle_)
            {
              this->SimVentilationAssembly_SolarAbsorbExtBaffle_.set (SimVentilationAssembly_SolarAbsorbExtBaffle_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent
          //
          if (n.name () == "SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_)
            {
              this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_.set (SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_EffecThickCavityBehindExtBaffle
          //
          if (n.name () == "SimVentilationAssembly_EffecThickCavityBehindExtBaffle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_)
            {
              this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_.set (SimVentilationAssembly_EffecThickCavityBehindExtBaffle_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_RatioActSurfAreaToProjSurfArea
          //
          if (n.name () == "SimVentilationAssembly_RatioActSurfAreaToProjSurfArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_)
            {
              this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_.set (SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_RoughExtSurf
          //
          if (n.name () == "SimVentilationAssembly_RoughExtSurf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_RoughExtSurf_type > r (
              SimVentilationAssembly_RoughExtSurf_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_RoughExtSurf_)
            {
              this->SimVentilationAssembly_RoughExtSurf_.set (r);
              continue;
            }
          }

          // SimVentilationAssembly_EffectForPerfWithRespectToWind
          //
          if (n.name () == "SimVentilationAssembly_EffectForPerfWithRespectToWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_EffectForPerfWithRespectToWind_)
            {
              this->SimVentilationAssembly_EffectForPerfWithRespectToWind_.set (SimVentilationAssembly_EffectForPerfWithRespectToWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow
          //
          if (n.name () == "SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_)
            {
              this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_.set (SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimVentilationAssembly_SurfName_1_10
          //
          if (n.name () == "SimVentilationAssembly_SurfName_1_10" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimVentilationAssembly_SurfName_1_10_type > r (
              SimVentilationAssembly_SurfName_1_10_traits::create (i, f, this));

            if (!this->SimVentilationAssembly_SurfName_1_10_)
            {
              this->SimVentilationAssembly_SurfName_1_10_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity* SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity (*this, f, c);
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity& SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      operator= (const SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimVentilationAssembly_VentilationAssembly& > (*this) = x;
          this->SimVentilationAssembly_BoundaryCondModelName_ = x.SimVentilationAssembly_BoundaryCondModelName_;
          this->SimVentilationAssembly_AreaFractOpngs_ = x.SimVentilationAssembly_AreaFractOpngs_;
          this->SimVentilationAssembly_ThermalEmisExtBaffleMatl_ = x.SimVentilationAssembly_ThermalEmisExtBaffleMatl_;
          this->SimVentilationAssembly_SolarAbsorbExtBaffle_ = x.SimVentilationAssembly_SolarAbsorbExtBaffle_;
          this->SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_ = x.SimVentilationAssembly_HeightScaleForBuoyancyDrivenVent_;
          this->SimVentilationAssembly_EffecThickCavityBehindExtBaffle_ = x.SimVentilationAssembly_EffecThickCavityBehindExtBaffle_;
          this->SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_ = x.SimVentilationAssembly_RatioActSurfAreaToProjSurfArea_;
          this->SimVentilationAssembly_RoughExtSurf_ = x.SimVentilationAssembly_RoughExtSurf_;
          this->SimVentilationAssembly_EffectForPerfWithRespectToWind_ = x.SimVentilationAssembly_EffectForPerfWithRespectToWind_;
          this->SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_ = x.SimVentilationAssembly_DischargeCoefForOpngsBuoyancyDrivenFlow_;
          this->SimVentilationAssembly_SurfName_1_10_ = x.SimVentilationAssembly_SurfName_1_10_;
        }

        return *this;
      }

      SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity::
      ~SimVentilationAssembly_VentilationAssembly_ExteriorNaturallyVentilatedCavity ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

