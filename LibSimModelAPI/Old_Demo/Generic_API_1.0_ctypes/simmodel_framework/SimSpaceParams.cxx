// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpaceParams.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSpaceParams
      // 

      const SimSpaceParams::SpaceNumber_optional& SimSpaceParams::
      SpaceNumber () const
      {
        return this->SpaceNumber_;
      }

      SimSpaceParams::SpaceNumber_optional& SimSpaceParams::
      SpaceNumber ()
      {
        return this->SpaceNumber_;
      }

      void SimSpaceParams::
      SpaceNumber (const SpaceNumber_type& x)
      {
        this->SpaceNumber_.set (x);
      }

      void SimSpaceParams::
      SpaceNumber (const SpaceNumber_optional& x)
      {
        this->SpaceNumber_ = x;
      }

      void SimSpaceParams::
      SpaceNumber (::std::auto_ptr< SpaceNumber_type > x)
      {
        this->SpaceNumber_.set (x);
      }

      const SimSpaceParams::SpaceName_optional& SimSpaceParams::
      SpaceName () const
      {
        return this->SpaceName_;
      }

      SimSpaceParams::SpaceName_optional& SimSpaceParams::
      SpaceName ()
      {
        return this->SpaceName_;
      }

      void SimSpaceParams::
      SpaceName (const SpaceName_type& x)
      {
        this->SpaceName_.set (x);
      }

      void SimSpaceParams::
      SpaceName (const SpaceName_optional& x)
      {
        this->SpaceName_ = x;
      }

      void SimSpaceParams::
      SpaceName (::std::auto_ptr< SpaceName_type > x)
      {
        this->SpaceName_.set (x);
      }

      const SimSpaceParams::FlipX_optional& SimSpaceParams::
      FlipX () const
      {
        return this->FlipX_;
      }

      SimSpaceParams::FlipX_optional& SimSpaceParams::
      FlipX ()
      {
        return this->FlipX_;
      }

      void SimSpaceParams::
      FlipX (const FlipX_type& x)
      {
        this->FlipX_.set (x);
      }

      void SimSpaceParams::
      FlipX (const FlipX_optional& x)
      {
        this->FlipX_ = x;
      }

      const SimSpaceParams::FlipY_optional& SimSpaceParams::
      FlipY () const
      {
        return this->FlipY_;
      }

      SimSpaceParams::FlipY_optional& SimSpaceParams::
      FlipY ()
      {
        return this->FlipY_;
      }

      void SimSpaceParams::
      FlipY (const FlipY_type& x)
      {
        this->FlipY_.set (x);
      }

      void SimSpaceParams::
      FlipY (const FlipY_optional& x)
      {
        this->FlipY_ = x;
      }

      const SimSpaceParams::DimensionX_optional& SimSpaceParams::
      DimensionX () const
      {
        return this->DimensionX_;
      }

      SimSpaceParams::DimensionX_optional& SimSpaceParams::
      DimensionX ()
      {
        return this->DimensionX_;
      }

      void SimSpaceParams::
      DimensionX (const DimensionX_type& x)
      {
        this->DimensionX_.set (x);
      }

      void SimSpaceParams::
      DimensionX (const DimensionX_optional& x)
      {
        this->DimensionX_ = x;
      }

      const SimSpaceParams::DimensionY_optional& SimSpaceParams::
      DimensionY () const
      {
        return this->DimensionY_;
      }

      SimSpaceParams::DimensionY_optional& SimSpaceParams::
      DimensionY ()
      {
        return this->DimensionY_;
      }

      void SimSpaceParams::
      DimensionY (const DimensionY_type& x)
      {
        this->DimensionY_.set (x);
      }

      void SimSpaceParams::
      DimensionY (const DimensionY_optional& x)
      {
        this->DimensionY_ = x;
      }

      const SimSpaceParams::DimensionZ_optional& SimSpaceParams::
      DimensionZ () const
      {
        return this->DimensionZ_;
      }

      SimSpaceParams::DimensionZ_optional& SimSpaceParams::
      DimensionZ ()
      {
        return this->DimensionZ_;
      }

      void SimSpaceParams::
      DimensionZ (const DimensionZ_type& x)
      {
        this->DimensionZ_.set (x);
      }

      void SimSpaceParams::
      DimensionZ (const DimensionZ_optional& x)
      {
        this->DimensionZ_ = x;
      }

      const SimSpaceParams::Height_optional& SimSpaceParams::
      Height () const
      {
        return this->Height_;
      }

      SimSpaceParams::Height_optional& SimSpaceParams::
      Height ()
      {
        return this->Height_;
      }

      void SimSpaceParams::
      Height (const Height_type& x)
      {
        this->Height_.set (x);
      }

      void SimSpaceParams::
      Height (const Height_optional& x)
      {
        this->Height_ = x;
      }

      const SimSpaceParams::BaseElevation_optional& SimSpaceParams::
      BaseElevation () const
      {
        return this->BaseElevation_;
      }

      SimSpaceParams::BaseElevation_optional& SimSpaceParams::
      BaseElevation ()
      {
        return this->BaseElevation_;
      }

      void SimSpaceParams::
      BaseElevation (const BaseElevation_type& x)
      {
        this->BaseElevation_.set (x);
      }

      void SimSpaceParams::
      BaseElevation (const BaseElevation_optional& x)
      {
        this->BaseElevation_ = x;
      }

      const SimSpaceParams::DegreeOfNormal_optional& SimSpaceParams::
      DegreeOfNormal () const
      {
        return this->DegreeOfNormal_;
      }

      SimSpaceParams::DegreeOfNormal_optional& SimSpaceParams::
      DegreeOfNormal ()
      {
        return this->DegreeOfNormal_;
      }

      void SimSpaceParams::
      DegreeOfNormal (const DegreeOfNormal_type& x)
      {
        this->DegreeOfNormal_.set (x);
      }

      void SimSpaceParams::
      DegreeOfNormal (const DegreeOfNormal_optional& x)
      {
        this->DegreeOfNormal_ = x;
      }

      const SimSpaceParams::IsPerimeterSpace_optional& SimSpaceParams::
      IsPerimeterSpace () const
      {
        return this->IsPerimeterSpace_;
      }

      SimSpaceParams::IsPerimeterSpace_optional& SimSpaceParams::
      IsPerimeterSpace ()
      {
        return this->IsPerimeterSpace_;
      }

      void SimSpaceParams::
      IsPerimeterSpace (const IsPerimeterSpace_type& x)
      {
        this->IsPerimeterSpace_.set (x);
      }

      void SimSpaceParams::
      IsPerimeterSpace (const IsPerimeterSpace_optional& x)
      {
        this->IsPerimeterSpace_ = x;
      }

      const SimSpaceParams::SpaceType_optional& SimSpaceParams::
      SpaceType () const
      {
        return this->SpaceType_;
      }

      SimSpaceParams::SpaceType_optional& SimSpaceParams::
      SpaceType ()
      {
        return this->SpaceType_;
      }

      void SimSpaceParams::
      SpaceType (const SpaceType_type& x)
      {
        this->SpaceType_.set (x);
      }

      void SimSpaceParams::
      SpaceType (const SpaceType_optional& x)
      {
        this->SpaceType_ = x;
      }

      void SimSpaceParams::
      SpaceType (::std::auto_ptr< SpaceType_type > x)
      {
        this->SpaceType_.set (x);
      }

      const SimSpaceParams::ProfilePath_optional& SimSpaceParams::
      ProfilePath () const
      {
        return this->ProfilePath_;
      }

      SimSpaceParams::ProfilePath_optional& SimSpaceParams::
      ProfilePath ()
      {
        return this->ProfilePath_;
      }

      void SimSpaceParams::
      ProfilePath (const ProfilePath_type& x)
      {
        this->ProfilePath_.set (x);
      }

      void SimSpaceParams::
      ProfilePath (const ProfilePath_optional& x)
      {
        this->ProfilePath_ = x;
      }

      void SimSpaceParams::
      ProfilePath (::std::auto_ptr< ProfilePath_type > x)
      {
        this->ProfilePath_.set (x);
      }

      const SimSpaceParams::VoidProfilePaths_optional& SimSpaceParams::
      VoidProfilePaths () const
      {
        return this->VoidProfilePaths_;
      }

      SimSpaceParams::VoidProfilePaths_optional& SimSpaceParams::
      VoidProfilePaths ()
      {
        return this->VoidProfilePaths_;
      }

      void SimSpaceParams::
      VoidProfilePaths (const VoidProfilePaths_type& x)
      {
        this->VoidProfilePaths_.set (x);
      }

      void SimSpaceParams::
      VoidProfilePaths (const VoidProfilePaths_optional& x)
      {
        this->VoidProfilePaths_ = x;
      }

      void SimSpaceParams::
      VoidProfilePaths (::std::auto_ptr< VoidProfilePaths_type > x)
      {
        this->VoidProfilePaths_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSpaceParams
      //

      SimSpaceParams::
      SimSpaceParams (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (RefId),
        SpaceNumber_ (this),
        SpaceName_ (this),
        FlipX_ (this),
        FlipY_ (this),
        DimensionX_ (this),
        DimensionY_ (this),
        DimensionZ_ (this),
        Height_ (this),
        BaseElevation_ (this),
        DegreeOfNormal_ (this),
        IsPerimeterSpace_ (this),
        SpaceType_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
      }

      SimSpaceParams::
      SimSpaceParams (const SimSpaceParams& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (x, f, c),
        SpaceNumber_ (x.SpaceNumber_, f, this),
        SpaceName_ (x.SpaceName_, f, this),
        FlipX_ (x.FlipX_, f, this),
        FlipY_ (x.FlipY_, f, this),
        DimensionX_ (x.DimensionX_, f, this),
        DimensionY_ (x.DimensionY_, f, this),
        DimensionZ_ (x.DimensionZ_, f, this),
        Height_ (x.Height_, f, this),
        BaseElevation_ (x.BaseElevation_, f, this),
        DegreeOfNormal_ (x.DegreeOfNormal_, f, this),
        IsPerimeterSpace_ (x.IsPerimeterSpace_, f, this),
        SpaceType_ (x.SpaceType_, f, this),
        ProfilePath_ (x.ProfilePath_, f, this),
        VoidProfilePaths_ (x.VoidProfilePaths_, f, this)
      {
      }

      SimSpaceParams::
      SimSpaceParams (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        SpaceNumber_ (this),
        SpaceName_ (this),
        FlipX_ (this),
        FlipY_ (this),
        DimensionX_ (this),
        DimensionY_ (this),
        DimensionZ_ (this),
        Height_ (this),
        BaseElevation_ (this),
        DegreeOfNormal_ (this),
        IsPerimeterSpace_ (this),
        SpaceType_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpaceParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SpaceNumber
          //
          if (n.name () == "SpaceNumber" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceNumber_type > r (
              SpaceNumber_traits::create (i, f, this));

            if (!this->SpaceNumber_)
            {
              this->SpaceNumber_.set (r);
              continue;
            }
          }

          // SpaceName
          //
          if (n.name () == "SpaceName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceName_type > r (
              SpaceName_traits::create (i, f, this));

            if (!this->SpaceName_)
            {
              this->SpaceName_.set (r);
              continue;
            }
          }

          // FlipX
          //
          if (n.name () == "FlipX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->FlipX_)
            {
              this->FlipX_.set (FlipX_traits::create (i, f, this));
              continue;
            }
          }

          // FlipY
          //
          if (n.name () == "FlipY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->FlipY_)
            {
              this->FlipY_.set (FlipY_traits::create (i, f, this));
              continue;
            }
          }

          // DimensionX
          //
          if (n.name () == "DimensionX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DimensionX_)
            {
              this->DimensionX_.set (DimensionX_traits::create (i, f, this));
              continue;
            }
          }

          // DimensionY
          //
          if (n.name () == "DimensionY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DimensionY_)
            {
              this->DimensionY_.set (DimensionY_traits::create (i, f, this));
              continue;
            }
          }

          // DimensionZ
          //
          if (n.name () == "DimensionZ" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DimensionZ_)
            {
              this->DimensionZ_.set (DimensionZ_traits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Height_)
            {
              this->Height_.set (Height_traits::create (i, f, this));
              continue;
            }
          }

          // BaseElevation
          //
          if (n.name () == "BaseElevation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->BaseElevation_)
            {
              this->BaseElevation_.set (BaseElevation_traits::create (i, f, this));
              continue;
            }
          }

          // DegreeOfNormal
          //
          if (n.name () == "DegreeOfNormal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DegreeOfNormal_)
            {
              this->DegreeOfNormal_.set (DegreeOfNormal_traits::create (i, f, this));
              continue;
            }
          }

          // IsPerimeterSpace
          //
          if (n.name () == "IsPerimeterSpace" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->IsPerimeterSpace_)
            {
              this->IsPerimeterSpace_.set (IsPerimeterSpace_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceType
          //
          if (n.name () == "SpaceType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SpaceType_type > r (
              SpaceType_traits::create (i, f, this));

            if (!this->SpaceType_)
            {
              this->SpaceType_.set (r);
              continue;
            }
          }

          // ProfilePath
          //
          if (n.name () == "ProfilePath" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ProfilePath_type > r (
              ProfilePath_traits::create (i, f, this));

            if (!this->ProfilePath_)
            {
              this->ProfilePath_.set (r);
              continue;
            }
          }

          // VoidProfilePaths
          //
          if (n.name () == "VoidProfilePaths" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< VoidProfilePaths_type > r (
              VoidProfilePaths_traits::create (i, f, this));

            if (!this->VoidProfilePaths_)
            {
              this->VoidProfilePaths_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSpaceParams* SimSpaceParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpaceParams (*this, f, c);
      }

      SimSpaceParams& SimSpaceParams::
      operator= (const SimSpaceParams& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams& > (*this) = x;
          this->SpaceNumber_ = x.SpaceNumber_;
          this->SpaceName_ = x.SpaceName_;
          this->FlipX_ = x.FlipX_;
          this->FlipY_ = x.FlipY_;
          this->DimensionX_ = x.DimensionX_;
          this->DimensionY_ = x.DimensionY_;
          this->DimensionZ_ = x.DimensionZ_;
          this->Height_ = x.Height_;
          this->BaseElevation_ = x.BaseElevation_;
          this->DegreeOfNormal_ = x.DegreeOfNormal_;
          this->IsPerimeterSpace_ = x.IsPerimeterSpace_;
          this->SpaceType_ = x.SpaceType_;
          this->ProfilePath_ = x.ProfilePath_;
          this->VoidProfilePaths_ = x.VoidProfilePaths_;
        }

        return *this;
      }

      SimSpaceParams::
      ~SimSpaceParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

