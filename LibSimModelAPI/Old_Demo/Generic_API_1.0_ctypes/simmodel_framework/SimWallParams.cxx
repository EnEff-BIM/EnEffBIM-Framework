// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWallParams.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimWallParams
      // 

      const SimWallParams::Thickness_optional& SimWallParams::
      Thickness () const
      {
        return this->Thickness_;
      }

      SimWallParams::Thickness_optional& SimWallParams::
      Thickness ()
      {
        return this->Thickness_;
      }

      void SimWallParams::
      Thickness (const Thickness_type& x)
      {
        this->Thickness_.set (x);
      }

      void SimWallParams::
      Thickness (const Thickness_optional& x)
      {
        this->Thickness_ = x;
      }

      const SimWallParams::Length_optional& SimWallParams::
      Length () const
      {
        return this->Length_;
      }

      SimWallParams::Length_optional& SimWallParams::
      Length ()
      {
        return this->Length_;
      }

      void SimWallParams::
      Length (const Length_type& x)
      {
        this->Length_.set (x);
      }

      void SimWallParams::
      Length (const Length_optional& x)
      {
        this->Length_ = x;
      }

      const SimWallParams::Height_optional& SimWallParams::
      Height () const
      {
        return this->Height_;
      }

      SimWallParams::Height_optional& SimWallParams::
      Height ()
      {
        return this->Height_;
      }

      void SimWallParams::
      Height (const Height_type& x)
      {
        this->Height_.set (x);
      }

      void SimWallParams::
      Height (const Height_optional& x)
      {
        this->Height_ = x;
      }

      const SimWallParams::BaseElevation_optional& SimWallParams::
      BaseElevation () const
      {
        return this->BaseElevation_;
      }

      SimWallParams::BaseElevation_optional& SimWallParams::
      BaseElevation ()
      {
        return this->BaseElevation_;
      }

      void SimWallParams::
      BaseElevation (const BaseElevation_type& x)
      {
        this->BaseElevation_.set (x);
      }

      void SimWallParams::
      BaseElevation (const BaseElevation_optional& x)
      {
        this->BaseElevation_ = x;
      }

      const SimWallParams::RefLinePosition_optional& SimWallParams::
      RefLinePosition () const
      {
        return this->RefLinePosition_;
      }

      SimWallParams::RefLinePosition_optional& SimWallParams::
      RefLinePosition ()
      {
        return this->RefLinePosition_;
      }

      void SimWallParams::
      RefLinePosition (const RefLinePosition_type& x)
      {
        this->RefLinePosition_.set (x);
      }

      void SimWallParams::
      RefLinePosition (const RefLinePosition_optional& x)
      {
        this->RefLinePosition_ = x;
      }

      void SimWallParams::
      RefLinePosition (::std::auto_ptr< RefLinePosition_type > x)
      {
        this->RefLinePosition_.set (x);
      }

      const SimWallParams::RefLinePath_optional& SimWallParams::
      RefLinePath () const
      {
        return this->RefLinePath_;
      }

      SimWallParams::RefLinePath_optional& SimWallParams::
      RefLinePath ()
      {
        return this->RefLinePath_;
      }

      void SimWallParams::
      RefLinePath (const RefLinePath_type& x)
      {
        this->RefLinePath_.set (x);
      }

      void SimWallParams::
      RefLinePath (const RefLinePath_optional& x)
      {
        this->RefLinePath_ = x;
      }

      void SimWallParams::
      RefLinePath (::std::auto_ptr< RefLinePath_type > x)
      {
        this->RefLinePath_.set (x);
      }

      const SimWallParams::DegreeOfNormal_optional& SimWallParams::
      DegreeOfNormal () const
      {
        return this->DegreeOfNormal_;
      }

      SimWallParams::DegreeOfNormal_optional& SimWallParams::
      DegreeOfNormal ()
      {
        return this->DegreeOfNormal_;
      }

      void SimWallParams::
      DegreeOfNormal (const DegreeOfNormal_type& x)
      {
        this->DegreeOfNormal_.set (x);
      }

      void SimWallParams::
      DegreeOfNormal (const DegreeOfNormal_optional& x)
      {
        this->DegreeOfNormal_ = x;
      }

      const SimWallParams::CompassNsewDirection_optional& SimWallParams::
      CompassNsewDirection () const
      {
        return this->CompassNsewDirection_;
      }

      SimWallParams::CompassNsewDirection_optional& SimWallParams::
      CompassNsewDirection ()
      {
        return this->CompassNsewDirection_;
      }

      void SimWallParams::
      CompassNsewDirection (const CompassNsewDirection_type& x)
      {
        this->CompassNsewDirection_.set (x);
      }

      void SimWallParams::
      CompassNsewDirection (const CompassNsewDirection_optional& x)
      {
        this->CompassNsewDirection_ = x;
      }

      void SimWallParams::
      CompassNsewDirection (::std::auto_ptr< CompassNsewDirection_type > x)
      {
        this->CompassNsewDirection_.set (x);
      }

      const SimWallParams::WallIsExternal_optional& SimWallParams::
      WallIsExternal () const
      {
        return this->WallIsExternal_;
      }

      SimWallParams::WallIsExternal_optional& SimWallParams::
      WallIsExternal ()
      {
        return this->WallIsExternal_;
      }

      void SimWallParams::
      WallIsExternal (const WallIsExternal_type& x)
      {
        this->WallIsExternal_.set (x);
      }

      void SimWallParams::
      WallIsExternal (const WallIsExternal_optional& x)
      {
        this->WallIsExternal_ = x;
      }

      const SimWallParams::Justify_optional& SimWallParams::
      Justify () const
      {
        return this->Justify_;
      }

      SimWallParams::Justify_optional& SimWallParams::
      Justify ()
      {
        return this->Justify_;
      }

      void SimWallParams::
      Justify (const Justify_type& x)
      {
        this->Justify_.set (x);
      }

      void SimWallParams::
      Justify (const Justify_optional& x)
      {
        this->Justify_ = x;
      }

      const SimWallParams::ContainedWinArrayParams_optional& SimWallParams::
      ContainedWinArrayParams () const
      {
        return this->ContainedWinArrayParams_;
      }

      SimWallParams::ContainedWinArrayParams_optional& SimWallParams::
      ContainedWinArrayParams ()
      {
        return this->ContainedWinArrayParams_;
      }

      void SimWallParams::
      ContainedWinArrayParams (const ContainedWinArrayParams_type& x)
      {
        this->ContainedWinArrayParams_.set (x);
      }

      void SimWallParams::
      ContainedWinArrayParams (const ContainedWinArrayParams_optional& x)
      {
        this->ContainedWinArrayParams_ = x;
      }

      void SimWallParams::
      ContainedWinArrayParams (::std::auto_ptr< ContainedWinArrayParams_type > x)
      {
        this->ContainedWinArrayParams_.set (x);
      }

      const SimWallParams::ContainedWindowParams_optional& SimWallParams::
      ContainedWindowParams () const
      {
        return this->ContainedWindowParams_;
      }

      SimWallParams::ContainedWindowParams_optional& SimWallParams::
      ContainedWindowParams ()
      {
        return this->ContainedWindowParams_;
      }

      void SimWallParams::
      ContainedWindowParams (const ContainedWindowParams_type& x)
      {
        this->ContainedWindowParams_.set (x);
      }

      void SimWallParams::
      ContainedWindowParams (const ContainedWindowParams_optional& x)
      {
        this->ContainedWindowParams_ = x;
      }

      void SimWallParams::
      ContainedWindowParams (::std::auto_ptr< ContainedWindowParams_type > x)
      {
        this->ContainedWindowParams_.set (x);
      }

      const SimWallParams::ContainedDoorArrayParams_optional& SimWallParams::
      ContainedDoorArrayParams () const
      {
        return this->ContainedDoorArrayParams_;
      }

      SimWallParams::ContainedDoorArrayParams_optional& SimWallParams::
      ContainedDoorArrayParams ()
      {
        return this->ContainedDoorArrayParams_;
      }

      void SimWallParams::
      ContainedDoorArrayParams (const ContainedDoorArrayParams_type& x)
      {
        this->ContainedDoorArrayParams_.set (x);
      }

      void SimWallParams::
      ContainedDoorArrayParams (const ContainedDoorArrayParams_optional& x)
      {
        this->ContainedDoorArrayParams_ = x;
      }

      void SimWallParams::
      ContainedDoorArrayParams (::std::auto_ptr< ContainedDoorArrayParams_type > x)
      {
        this->ContainedDoorArrayParams_.set (x);
      }

      const SimWallParams::ContainedDoorParams_optional& SimWallParams::
      ContainedDoorParams () const
      {
        return this->ContainedDoorParams_;
      }

      SimWallParams::ContainedDoorParams_optional& SimWallParams::
      ContainedDoorParams ()
      {
        return this->ContainedDoorParams_;
      }

      void SimWallParams::
      ContainedDoorParams (const ContainedDoorParams_type& x)
      {
        this->ContainedDoorParams_.set (x);
      }

      void SimWallParams::
      ContainedDoorParams (const ContainedDoorParams_optional& x)
      {
        this->ContainedDoorParams_ = x;
      }

      void SimWallParams::
      ContainedDoorParams (::std::auto_ptr< ContainedDoorParams_type > x)
      {
        this->ContainedDoorParams_.set (x);
      }

      const SimWallParams::ProfilePath_optional& SimWallParams::
      ProfilePath () const
      {
        return this->ProfilePath_;
      }

      SimWallParams::ProfilePath_optional& SimWallParams::
      ProfilePath ()
      {
        return this->ProfilePath_;
      }

      void SimWallParams::
      ProfilePath (const ProfilePath_type& x)
      {
        this->ProfilePath_.set (x);
      }

      void SimWallParams::
      ProfilePath (const ProfilePath_optional& x)
      {
        this->ProfilePath_ = x;
      }

      void SimWallParams::
      ProfilePath (::std::auto_ptr< ProfilePath_type > x)
      {
        this->ProfilePath_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimWallParams
      //

      SimWallParams::
      SimWallParams (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (RefId),
        Thickness_ (this),
        Length_ (this),
        Height_ (this),
        BaseElevation_ (this),
        RefLinePosition_ (this),
        RefLinePath_ (this),
        DegreeOfNormal_ (this),
        CompassNsewDirection_ (this),
        WallIsExternal_ (this),
        Justify_ (this),
        ContainedWinArrayParams_ (this),
        ContainedWindowParams_ (this),
        ContainedDoorArrayParams_ (this),
        ContainedDoorParams_ (this),
        ProfilePath_ (this)
      {
      }

      SimWallParams::
      SimWallParams (const SimWallParams& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (x, f, c),
        Thickness_ (x.Thickness_, f, this),
        Length_ (x.Length_, f, this),
        Height_ (x.Height_, f, this),
        BaseElevation_ (x.BaseElevation_, f, this),
        RefLinePosition_ (x.RefLinePosition_, f, this),
        RefLinePath_ (x.RefLinePath_, f, this),
        DegreeOfNormal_ (x.DegreeOfNormal_, f, this),
        CompassNsewDirection_ (x.CompassNsewDirection_, f, this),
        WallIsExternal_ (x.WallIsExternal_, f, this),
        Justify_ (x.Justify_, f, this),
        ContainedWinArrayParams_ (x.ContainedWinArrayParams_, f, this),
        ContainedWindowParams_ (x.ContainedWindowParams_, f, this),
        ContainedDoorArrayParams_ (x.ContainedDoorArrayParams_, f, this),
        ContainedDoorParams_ (x.ContainedDoorParams_, f, this),
        ProfilePath_ (x.ProfilePath_, f, this)
      {
      }

      SimWallParams::
      SimWallParams (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        Thickness_ (this),
        Length_ (this),
        Height_ (this),
        BaseElevation_ (this),
        RefLinePosition_ (this),
        RefLinePath_ (this),
        DegreeOfNormal_ (this),
        CompassNsewDirection_ (this),
        WallIsExternal_ (this),
        Justify_ (this),
        ContainedWinArrayParams_ (this),
        ContainedWindowParams_ (this),
        ContainedDoorArrayParams_ (this),
        ContainedDoorParams_ (this),
        ProfilePath_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWallParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Thickness
          //
          if (n.name () == "Thickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Thickness_)
            {
              this->Thickness_.set (Thickness_traits::create (i, f, this));
              continue;
            }
          }

          // Length
          //
          if (n.name () == "Length" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Length_)
            {
              this->Length_.set (Length_traits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Height_)
            {
              this->Height_.set (Height_traits::create (i, f, this));
              continue;
            }
          }

          // BaseElevation
          //
          if (n.name () == "BaseElevation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->BaseElevation_)
            {
              this->BaseElevation_.set (BaseElevation_traits::create (i, f, this));
              continue;
            }
          }

          // RefLinePosition
          //
          if (n.name () == "RefLinePosition" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< RefLinePosition_type > r (
              RefLinePosition_traits::create (i, f, this));

            if (!this->RefLinePosition_)
            {
              this->RefLinePosition_.set (r);
              continue;
            }
          }

          // RefLinePath
          //
          if (n.name () == "RefLinePath" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< RefLinePath_type > r (
              RefLinePath_traits::create (i, f, this));

            if (!this->RefLinePath_)
            {
              this->RefLinePath_.set (r);
              continue;
            }
          }

          // DegreeOfNormal
          //
          if (n.name () == "DegreeOfNormal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DegreeOfNormal_)
            {
              this->DegreeOfNormal_.set (DegreeOfNormal_traits::create (i, f, this));
              continue;
            }
          }

          // CompassNsewDirection
          //
          if (n.name () == "CompassNsewDirection" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< CompassNsewDirection_type > r (
              CompassNsewDirection_traits::create (i, f, this));

            if (!this->CompassNsewDirection_)
            {
              this->CompassNsewDirection_.set (r);
              continue;
            }
          }

          // WallIsExternal
          //
          if (n.name () == "WallIsExternal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WallIsExternal_)
            {
              this->WallIsExternal_.set (WallIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // Justify
          //
          if (n.name () == "Justify" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Justify_)
            {
              this->Justify_.set (Justify_traits::create (i, f, this));
              continue;
            }
          }

          // ContainedWinArrayParams
          //
          if (n.name () == "ContainedWinArrayParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedWinArrayParams_type > r (
              ContainedWinArrayParams_traits::create (i, f, this));

            if (!this->ContainedWinArrayParams_)
            {
              this->ContainedWinArrayParams_.set (r);
              continue;
            }
          }

          // ContainedWindowParams
          //
          if (n.name () == "ContainedWindowParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedWindowParams_type > r (
              ContainedWindowParams_traits::create (i, f, this));

            if (!this->ContainedWindowParams_)
            {
              this->ContainedWindowParams_.set (r);
              continue;
            }
          }

          // ContainedDoorArrayParams
          //
          if (n.name () == "ContainedDoorArrayParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedDoorArrayParams_type > r (
              ContainedDoorArrayParams_traits::create (i, f, this));

            if (!this->ContainedDoorArrayParams_)
            {
              this->ContainedDoorArrayParams_.set (r);
              continue;
            }
          }

          // ContainedDoorParams
          //
          if (n.name () == "ContainedDoorParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedDoorParams_type > r (
              ContainedDoorParams_traits::create (i, f, this));

            if (!this->ContainedDoorParams_)
            {
              this->ContainedDoorParams_.set (r);
              continue;
            }
          }

          // ProfilePath
          //
          if (n.name () == "ProfilePath" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ProfilePath_type > r (
              ProfilePath_traits::create (i, f, this));

            if (!this->ProfilePath_)
            {
              this->ProfilePath_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWallParams* SimWallParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWallParams (*this, f, c);
      }

      SimWallParams& SimWallParams::
      operator= (const SimWallParams& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams& > (*this) = x;
          this->Thickness_ = x.Thickness_;
          this->Length_ = x.Length_;
          this->Height_ = x.Height_;
          this->BaseElevation_ = x.BaseElevation_;
          this->RefLinePosition_ = x.RefLinePosition_;
          this->RefLinePath_ = x.RefLinePath_;
          this->DegreeOfNormal_ = x.DegreeOfNormal_;
          this->CompassNsewDirection_ = x.CompassNsewDirection_;
          this->WallIsExternal_ = x.WallIsExternal_;
          this->Justify_ = x.Justify_;
          this->ContainedWinArrayParams_ = x.ContainedWinArrayParams_;
          this->ContainedWindowParams_ = x.ContainedWindowParams_;
          this->ContainedDoorArrayParams_ = x.ContainedDoorArrayParams_;
          this->ContainedDoorParams_ = x.ContainedDoorParams_;
          this->ProfilePath_ = x.ProfilePath_;
        }

        return *this;
      }

      SimWallParams::
      ~SimWallParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

