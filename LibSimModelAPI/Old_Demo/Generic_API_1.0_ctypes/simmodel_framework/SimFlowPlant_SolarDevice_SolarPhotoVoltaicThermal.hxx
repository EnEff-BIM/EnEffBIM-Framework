// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_SOLAR_DEVICE_SOLAR_PHOTO_VOLTAIC_THERMAL_HXX
#define SIM_FLOW_PLANT_SOLAR_DEVICE_SOLAR_PHOTO_VOLTAIC_THERMAL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_solardevice.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal: public ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice
      {
        public:
        // ActiveAreaRatio
        //
        typedef ::xml_schema::double_ ActiveAreaRatio_type;
        typedef ::xsd::cxx::tree::optional< ActiveAreaRatio_type > ActiveAreaRatio_optional;
        typedef ::xsd::cxx::tree::traits< ActiveAreaRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > ActiveAreaRatio_traits;

        const ActiveAreaRatio_optional&
        ActiveAreaRatio () const;

        ActiveAreaRatio_optional&
        ActiveAreaRatio ();

        void
        ActiveAreaRatio (const ActiveAreaRatio_type& x);

        void
        ActiveAreaRatio (const ActiveAreaRatio_optional& x);

        // DCtoACConversionEfficiency
        //
        typedef ::xml_schema::double_ DCtoACConversionEfficiency_type;
        typedef ::xsd::cxx::tree::optional< DCtoACConversionEfficiency_type > DCtoACConversionEfficiency_optional;
        typedef ::xsd::cxx::tree::traits< DCtoACConversionEfficiency_type, char, ::xsd::cxx::tree::schema_type::double_ > DCtoACConversionEfficiency_traits;

        const DCtoACConversionEfficiency_optional&
        DCtoACConversionEfficiency () const;

        DCtoACConversionEfficiency_optional&
        DCtoACConversionEfficiency ();

        void
        DCtoACConversionEfficiency (const DCtoACConversionEfficiency_type& x);

        void
        DCtoACConversionEfficiency (const DCtoACConversionEfficiency_optional& x);

        // PhotovoltaicSurfaceIntegration
        //
        typedef ::xml_schema::string PhotovoltaicSurfaceIntegration_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicSurfaceIntegration_type > PhotovoltaicSurfaceIntegration_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicSurfaceIntegration_type, char > PhotovoltaicSurfaceIntegration_traits;

        const PhotovoltaicSurfaceIntegration_optional&
        PhotovoltaicSurfaceIntegration () const;

        PhotovoltaicSurfaceIntegration_optional&
        PhotovoltaicSurfaceIntegration ();

        void
        PhotovoltaicSurfaceIntegration (const PhotovoltaicSurfaceIntegration_type& x);

        void
        PhotovoltaicSurfaceIntegration (const PhotovoltaicSurfaceIntegration_optional& x);

        void
        PhotovoltaicSurfaceIntegration (::std::auto_ptr< PhotovoltaicSurfaceIntegration_type > p);

        // PhotovoltaicCellEfficiency
        //
        typedef ::xml_schema::double_ PhotovoltaicCellEfficiency_type;
        typedef ::xsd::cxx::tree::optional< PhotovoltaicCellEfficiency_type > PhotovoltaicCellEfficiency_optional;
        typedef ::xsd::cxx::tree::traits< PhotovoltaicCellEfficiency_type, char, ::xsd::cxx::tree::schema_type::double_ > PhotovoltaicCellEfficiency_traits;

        const PhotovoltaicCellEfficiency_optional&
        PhotovoltaicCellEfficiency () const;

        PhotovoltaicCellEfficiency_optional&
        PhotovoltaicCellEfficiency ();

        void
        PhotovoltaicCellEfficiency (const PhotovoltaicCellEfficiency_type& x);

        void
        PhotovoltaicCellEfficiency (const PhotovoltaicCellEfficiency_optional& x);

        // SimFlowPlant_SurfName
        //
        typedef ::xml_schema::idref SimFlowPlant_SurfName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SurfName_type > SimFlowPlant_SurfName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SurfName_type, char > SimFlowPlant_SurfName_traits;

        const SimFlowPlant_SurfName_optional&
        SimFlowPlant_SurfName () const;

        SimFlowPlant_SurfName_optional&
        SimFlowPlant_SurfName ();

        void
        SimFlowPlant_SurfName (const SimFlowPlant_SurfName_type& x);

        void
        SimFlowPlant_SurfName (const SimFlowPlant_SurfName_optional& x);

        void
        SimFlowPlant_SurfName (::std::auto_ptr< SimFlowPlant_SurfName_type > p);

        // SimFlowPlant_PhotovoltaicThermalModelPerfName
        //
        typedef ::xml_schema::idref SimFlowPlant_PhotovoltaicThermalModelPerfName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PhotovoltaicThermalModelPerfName_type > SimFlowPlant_PhotovoltaicThermalModelPerfName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PhotovoltaicThermalModelPerfName_type, char > SimFlowPlant_PhotovoltaicThermalModelPerfName_traits;

        const SimFlowPlant_PhotovoltaicThermalModelPerfName_optional&
        SimFlowPlant_PhotovoltaicThermalModelPerfName () const;

        SimFlowPlant_PhotovoltaicThermalModelPerfName_optional&
        SimFlowPlant_PhotovoltaicThermalModelPerfName ();

        void
        SimFlowPlant_PhotovoltaicThermalModelPerfName (const SimFlowPlant_PhotovoltaicThermalModelPerfName_type& x);

        void
        SimFlowPlant_PhotovoltaicThermalModelPerfName (const SimFlowPlant_PhotovoltaicThermalModelPerfName_optional& x);

        void
        SimFlowPlant_PhotovoltaicThermalModelPerfName (::std::auto_ptr< SimFlowPlant_PhotovoltaicThermalModelPerfName_type > p);

        // SimFlowPlant_PhotovoltaicName
        //
        typedef ::xml_schema::idref SimFlowPlant_PhotovoltaicName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PhotovoltaicName_type > SimFlowPlant_PhotovoltaicName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PhotovoltaicName_type, char > SimFlowPlant_PhotovoltaicName_traits;

        const SimFlowPlant_PhotovoltaicName_optional&
        SimFlowPlant_PhotovoltaicName () const;

        SimFlowPlant_PhotovoltaicName_optional&
        SimFlowPlant_PhotovoltaicName ();

        void
        SimFlowPlant_PhotovoltaicName (const SimFlowPlant_PhotovoltaicName_type& x);

        void
        SimFlowPlant_PhotovoltaicName (const SimFlowPlant_PhotovoltaicName_optional& x);

        void
        SimFlowPlant_PhotovoltaicName (::std::auto_ptr< SimFlowPlant_PhotovoltaicName_type > p);

        // SimFlowPlant_ThermalWorkingFluidType
        //
        typedef ::xml_schema::string SimFlowPlant_ThermalWorkingFluidType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ThermalWorkingFluidType_type > SimFlowPlant_ThermalWorkingFluidType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ThermalWorkingFluidType_type, char > SimFlowPlant_ThermalWorkingFluidType_traits;

        const SimFlowPlant_ThermalWorkingFluidType_optional&
        SimFlowPlant_ThermalWorkingFluidType () const;

        SimFlowPlant_ThermalWorkingFluidType_optional&
        SimFlowPlant_ThermalWorkingFluidType ();

        void
        SimFlowPlant_ThermalWorkingFluidType (const SimFlowPlant_ThermalWorkingFluidType_type& x);

        void
        SimFlowPlant_ThermalWorkingFluidType (const SimFlowPlant_ThermalWorkingFluidType_optional& x);

        void
        SimFlowPlant_ThermalWorkingFluidType (::std::auto_ptr< SimFlowPlant_ThermalWorkingFluidType_type > p);

        // SimFlowPlant_WaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_WaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_WaterInletNodeName_type > SimFlowPlant_WaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_WaterInletNodeName_type, char > SimFlowPlant_WaterInletNodeName_traits;

        const SimFlowPlant_WaterInletNodeName_optional&
        SimFlowPlant_WaterInletNodeName () const;

        SimFlowPlant_WaterInletNodeName_optional&
        SimFlowPlant_WaterInletNodeName ();

        void
        SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_type& x);

        void
        SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_optional& x);

        void
        SimFlowPlant_WaterInletNodeName (::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > p);

        // SimFlowPlant_WaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_WaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_WaterOutletNodeName_type > SimFlowPlant_WaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_WaterOutletNodeName_type, char > SimFlowPlant_WaterOutletNodeName_traits;

        const SimFlowPlant_WaterOutletNodeName_optional&
        SimFlowPlant_WaterOutletNodeName () const;

        SimFlowPlant_WaterOutletNodeName_optional&
        SimFlowPlant_WaterOutletNodeName ();

        void
        SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_type& x);

        void
        SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_optional& x);

        void
        SimFlowPlant_WaterOutletNodeName (::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > p);

        // SimFlowPlant_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirInNodeName_type > SimFlowPlant_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirInNodeName_type, char > SimFlowPlant_AirInNodeName_traits;

        const SimFlowPlant_AirInNodeName_optional&
        SimFlowPlant_AirInNodeName () const;

        SimFlowPlant_AirInNodeName_optional&
        SimFlowPlant_AirInNodeName ();

        void
        SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_type& x);

        void
        SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_optional& x);

        void
        SimFlowPlant_AirInNodeName (::std::auto_ptr< SimFlowPlant_AirInNodeName_type > p);

        // SimFlowPlant_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirOutNodeName_type > SimFlowPlant_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirOutNodeName_type, char > SimFlowPlant_AirOutNodeName_traits;

        const SimFlowPlant_AirOutNodeName_optional&
        SimFlowPlant_AirOutNodeName () const;

        SimFlowPlant_AirOutNodeName_optional&
        SimFlowPlant_AirOutNodeName ();

        void
        SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_type& x);

        void
        SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_optional& x);

        void
        SimFlowPlant_AirOutNodeName (::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > p);

        // SimFlowPlant_DesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignFlowRate_type > SimFlowPlant_DesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignFlowRate_traits;

        const SimFlowPlant_DesignFlowRate_optional&
        SimFlowPlant_DesignFlowRate () const;

        SimFlowPlant_DesignFlowRate_optional&
        SimFlowPlant_DesignFlowRate ();

        void
        SimFlowPlant_DesignFlowRate (const SimFlowPlant_DesignFlowRate_type& x);

        void
        SimFlowPlant_DesignFlowRate (const SimFlowPlant_DesignFlowRate_optional& x);

        // SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect
        //
        typedef ::xml_schema::double_ SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_type;
        typedef ::xsd::cxx::tree::optional< SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_type > SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional;
        typedef ::xsd::cxx::tree::traits< SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_type, char, ::xsd::cxx::tree::schema_type::double_ > SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_traits;

        const SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional&
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect () const;

        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional&
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect ();

        void
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect (const SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_type& x);

        void
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect (const SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional& x);

        // SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType
        //
        typedef ::xml_schema::string SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type;
        typedef ::xsd::cxx::tree::optional< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type > SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional;
        typedef ::xsd::cxx::tree::traits< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type, char > SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_traits;

        const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional&
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType () const;

        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional&
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType ();

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type& x);

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional& x);

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type > p);

        // SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed
        //
        typedef ::xml_schema::double_ SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_type;
        typedef ::xsd::cxx::tree::optional< SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_type > SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional;
        typedef ::xsd::cxx::tree::traits< SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_type, char, ::xsd::cxx::tree::schema_type::double_ > SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_traits;

        const SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional&
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed () const;

        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional&
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed ();

        void
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed (const SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_type& x);

        void
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed (const SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional& x);

        // SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName
        //
        typedef ::xml_schema::idref SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type;
        typedef ::xsd::cxx::tree::optional< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type > SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type, char > SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_traits;

        const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional&
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName () const;

        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional&
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName ();

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type& x);

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional& x);

        void
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type > p);

        // SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance
        //
        typedef ::xml_schema::double_ SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_type;
        typedef ::xsd::cxx::tree::optional< SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_type > SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional;
        typedef ::xsd::cxx::tree::traits< SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_type, char, ::xsd::cxx::tree::schema_type::double_ > SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_traits;

        const SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional&
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance () const;

        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional&
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance ();

        void
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance (const SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_type& x);

        void
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance (const SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional& x);

        // Constructors.
        //
        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const RefId_type&);

        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal& x,
                                                           ::xml_schema::flags f = 0,
                                                           ::xml_schema::container* c = 0);

        virtual SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal&
        operator= (const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal& x);

        virtual 
        ~SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        ActiveAreaRatio_optional ActiveAreaRatio_;
        DCtoACConversionEfficiency_optional DCtoACConversionEfficiency_;
        PhotovoltaicSurfaceIntegration_optional PhotovoltaicSurfaceIntegration_;
        PhotovoltaicCellEfficiency_optional PhotovoltaicCellEfficiency_;
        SimFlowPlant_SurfName_optional SimFlowPlant_SurfName_;
        SimFlowPlant_PhotovoltaicThermalModelPerfName_optional SimFlowPlant_PhotovoltaicThermalModelPerfName_;
        SimFlowPlant_PhotovoltaicName_optional SimFlowPlant_PhotovoltaicName_;
        SimFlowPlant_ThermalWorkingFluidType_optional SimFlowPlant_ThermalWorkingFluidType_;
        SimFlowPlant_WaterInletNodeName_optional SimFlowPlant_WaterInletNodeName_;
        SimFlowPlant_WaterOutletNodeName_optional SimFlowPlant_WaterOutletNodeName_;
        SimFlowPlant_AirInNodeName_optional SimFlowPlant_AirInNodeName_;
        SimFlowPlant_AirOutNodeName_optional SimFlowPlant_AirOutNodeName_;
        SimFlowPlant_DesignFlowRate_optional SimFlowPlant_DesignFlowRate_;
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_;
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_;
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_;
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_;
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_SOLAR_DEVICE_SOLAR_PHOTO_VOLTAIC_THERMAL_HXX
