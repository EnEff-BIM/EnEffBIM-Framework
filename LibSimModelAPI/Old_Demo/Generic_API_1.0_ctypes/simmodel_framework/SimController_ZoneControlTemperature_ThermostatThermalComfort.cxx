// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimController_ZoneControlTemperature_ThermostatThermalComfort.hxx"

#include "simcntrl_thermalcomfortcontrol_1_4_objecttype.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimController_ZoneControlTemperature_ThermostatThermalComfort
      // 

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_AveragingMethod_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_AveragingMethod () const
      {
        return this->SimCntrl_AveragingMethod_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_AveragingMethod_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_AveragingMethod ()
      {
        return this->SimCntrl_AveragingMethod_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_AveragingMethod (const SimCntrl_AveragingMethod_type& x)
      {
        this->SimCntrl_AveragingMethod_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_AveragingMethod (const SimCntrl_AveragingMethod_optional& x)
      {
        this->SimCntrl_AveragingMethod_ = x;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_AveragingMethod (::std::auto_ptr< SimCntrl_AveragingMethod_type > x)
      {
        this->SimCntrl_AveragingMethod_.set (x);
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_SpecificPeopleName_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_SpecificPeopleName () const
      {
        return this->SimCntrl_SpecificPeopleName_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_SpecificPeopleName_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_SpecificPeopleName ()
      {
        return this->SimCntrl_SpecificPeopleName_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_SpecificPeopleName (const SimCntrl_SpecificPeopleName_type& x)
      {
        this->SimCntrl_SpecificPeopleName_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_SpecificPeopleName (const SimCntrl_SpecificPeopleName_optional& x)
      {
        this->SimCntrl_SpecificPeopleName_ = x;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_SpecificPeopleName (::std::auto_ptr< SimCntrl_SpecificPeopleName_type > x)
      {
        this->SimCntrl_SpecificPeopleName_.set (x);
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_MinDry_BulbTempSetpoint_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MinDry_BulbTempSetpoint () const
      {
        return this->SimCntrl_MinDry_BulbTempSetpoint_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_MinDry_BulbTempSetpoint_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MinDry_BulbTempSetpoint ()
      {
        return this->SimCntrl_MinDry_BulbTempSetpoint_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MinDry_BulbTempSetpoint (const SimCntrl_MinDry_BulbTempSetpoint_type& x)
      {
        this->SimCntrl_MinDry_BulbTempSetpoint_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MinDry_BulbTempSetpoint (const SimCntrl_MinDry_BulbTempSetpoint_optional& x)
      {
        this->SimCntrl_MinDry_BulbTempSetpoint_ = x;
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_MaxDry_BulbTempSetpoint_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MaxDry_BulbTempSetpoint () const
      {
        return this->SimCntrl_MaxDry_BulbTempSetpoint_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_MaxDry_BulbTempSetpoint_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MaxDry_BulbTempSetpoint ()
      {
        return this->SimCntrl_MaxDry_BulbTempSetpoint_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MaxDry_BulbTempSetpoint (const SimCntrl_MaxDry_BulbTempSetpoint_type& x)
      {
        this->SimCntrl_MaxDry_BulbTempSetpoint_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_MaxDry_BulbTempSetpoint (const SimCntrl_MaxDry_BulbTempSetpoint_optional& x)
      {
        this->SimCntrl_MaxDry_BulbTempSetpoint_ = x;
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControlTypeScheduleName_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControlTypeScheduleName () const
      {
        return this->SimCntrl_ThermalComfortControlTypeScheduleName_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControlTypeScheduleName_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControlTypeScheduleName ()
      {
        return this->SimCntrl_ThermalComfortControlTypeScheduleName_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControlTypeScheduleName (const SimCntrl_ThermalComfortControlTypeScheduleName_type& x)
      {
        this->SimCntrl_ThermalComfortControlTypeScheduleName_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControlTypeScheduleName (const SimCntrl_ThermalComfortControlTypeScheduleName_optional& x)
      {
        this->SimCntrl_ThermalComfortControlTypeScheduleName_ = x;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControlTypeScheduleName (::std::auto_ptr< SimCntrl_ThermalComfortControlTypeScheduleName_type > x)
      {
        this->SimCntrl_ThermalComfortControlTypeScheduleName_.set (x);
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControl_1_4_ObjectType_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_ObjectType () const
      {
        return this->SimCntrl_ThermalComfortControl_1_4_ObjectType_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControl_1_4_ObjectType_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_ObjectType ()
      {
        return this->SimCntrl_ThermalComfortControl_1_4_ObjectType_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_ObjectType (const SimCntrl_ThermalComfortControl_1_4_ObjectType_type& x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_ObjectType_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_ObjectType (const SimCntrl_ThermalComfortControl_1_4_ObjectType_optional& x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_ObjectType_ = x;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_ObjectType (::std::auto_ptr< SimCntrl_ThermalComfortControl_1_4_ObjectType_type > x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_ObjectType_.set (x);
      }

      const SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControl_1_4_Name_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_Name () const
      {
        return this->SimCntrl_ThermalComfortControl_1_4_Name_;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::SimCntrl_ThermalComfortControl_1_4_Name_optional& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_Name ()
      {
        return this->SimCntrl_ThermalComfortControl_1_4_Name_;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_Name (const SimCntrl_ThermalComfortControl_1_4_Name_type& x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_Name_.set (x);
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_Name (const SimCntrl_ThermalComfortControl_1_4_Name_optional& x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_Name_ = x;
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimCntrl_ThermalComfortControl_1_4_Name (::std::auto_ptr< SimCntrl_ThermalComfortControl_1_4_Name_type > x)
      {
        this->SimCntrl_ThermalComfortControl_1_4_Name_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimController_ZoneControlTemperature_ThermostatThermalComfort
      //

      SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimController_ZoneControlTemperature_ThermostatThermalComfort (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (RefId),
        SimCntrl_AveragingMethod_ (this),
        SimCntrl_SpecificPeopleName_ (this),
        SimCntrl_MinDry_BulbTempSetpoint_ (this),
        SimCntrl_MaxDry_BulbTempSetpoint_ (this),
        SimCntrl_ThermalComfortControlTypeScheduleName_ (this),
        SimCntrl_ThermalComfortControl_1_4_ObjectType_ (this),
        SimCntrl_ThermalComfortControl_1_4_Name_ (this)
      {
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimController_ZoneControlTemperature_ThermostatThermalComfort (const SimController_ZoneControlTemperature_ThermostatThermalComfort& x,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (x, f, c),
        SimCntrl_AveragingMethod_ (x.SimCntrl_AveragingMethod_, f, this),
        SimCntrl_SpecificPeopleName_ (x.SimCntrl_SpecificPeopleName_, f, this),
        SimCntrl_MinDry_BulbTempSetpoint_ (x.SimCntrl_MinDry_BulbTempSetpoint_, f, this),
        SimCntrl_MaxDry_BulbTempSetpoint_ (x.SimCntrl_MaxDry_BulbTempSetpoint_, f, this),
        SimCntrl_ThermalComfortControlTypeScheduleName_ (x.SimCntrl_ThermalComfortControlTypeScheduleName_, f, this),
        SimCntrl_ThermalComfortControl_1_4_ObjectType_ (x.SimCntrl_ThermalComfortControl_1_4_ObjectType_, f, this),
        SimCntrl_ThermalComfortControl_1_4_Name_ (x.SimCntrl_ThermalComfortControl_1_4_Name_, f, this)
      {
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::
      SimController_ZoneControlTemperature_ThermostatThermalComfort (const ::xercesc::DOMElement& e,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (e, f | ::xml_schema::flags::base, c),
        SimCntrl_AveragingMethod_ (this),
        SimCntrl_SpecificPeopleName_ (this),
        SimCntrl_MinDry_BulbTempSetpoint_ (this),
        SimCntrl_MaxDry_BulbTempSetpoint_ (this),
        SimCntrl_ThermalComfortControlTypeScheduleName_ (this),
        SimCntrl_ThermalComfortControl_1_4_ObjectType_ (this),
        SimCntrl_ThermalComfortControl_1_4_Name_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimController_ZoneControlTemperature_ThermostatThermalComfort::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimController_ZoneControlTemperature::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrl_AveragingMethod
          //
          if (n.name () == "SimCntrl_AveragingMethod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_AveragingMethod_type > r (
              SimCntrl_AveragingMethod_traits::create (i, f, this));

            if (!this->SimCntrl_AveragingMethod_)
            {
              this->SimCntrl_AveragingMethod_.set (r);
              continue;
            }
          }

          // SimCntrl_SpecificPeopleName
          //
          if (n.name () == "SimCntrl_SpecificPeopleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_SpecificPeopleName_type > r (
              SimCntrl_SpecificPeopleName_traits::create (i, f, this));

            if (!this->SimCntrl_SpecificPeopleName_)
            {
              this->SimCntrl_SpecificPeopleName_.set (r);
              continue;
            }
          }

          // SimCntrl_MinDry_BulbTempSetpoint
          //
          if (n.name () == "SimCntrl_MinDry_BulbTempSetpoint" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimCntrl_MinDry_BulbTempSetpoint_)
            {
              this->SimCntrl_MinDry_BulbTempSetpoint_.set (SimCntrl_MinDry_BulbTempSetpoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_MaxDry_BulbTempSetpoint
          //
          if (n.name () == "SimCntrl_MaxDry_BulbTempSetpoint" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimCntrl_MaxDry_BulbTempSetpoint_)
            {
              this->SimCntrl_MaxDry_BulbTempSetpoint_.set (SimCntrl_MaxDry_BulbTempSetpoint_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrl_ThermalComfortControlTypeScheduleName
          //
          if (n.name () == "SimCntrl_ThermalComfortControlTypeScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_ThermalComfortControlTypeScheduleName_type > r (
              SimCntrl_ThermalComfortControlTypeScheduleName_traits::create (i, f, this));

            if (!this->SimCntrl_ThermalComfortControlTypeScheduleName_)
            {
              this->SimCntrl_ThermalComfortControlTypeScheduleName_.set (r);
              continue;
            }
          }

          // SimCntrl_ThermalComfortControl_1_4_ObjectType
          //
          if (n.name () == "SimCntrl_ThermalComfortControl_1_4_ObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_ThermalComfortControl_1_4_ObjectType_type > r (
              SimCntrl_ThermalComfortControl_1_4_ObjectType_traits::create (i, f, this));

            if (!this->SimCntrl_ThermalComfortControl_1_4_ObjectType_)
            {
              this->SimCntrl_ThermalComfortControl_1_4_ObjectType_.set (r);
              continue;
            }
          }

          // SimCntrl_ThermalComfortControl_1_4_Name
          //
          if (n.name () == "SimCntrl_ThermalComfortControl_1_4_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_ThermalComfortControl_1_4_Name_type > r (
              SimCntrl_ThermalComfortControl_1_4_Name_traits::create (i, f, this));

            if (!this->SimCntrl_ThermalComfortControl_1_4_Name_)
            {
              this->SimCntrl_ThermalComfortControl_1_4_Name_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort* SimController_ZoneControlTemperature_ThermostatThermalComfort::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimController_ZoneControlTemperature_ThermostatThermalComfort (*this, f, c);
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort& SimController_ZoneControlTemperature_ThermostatThermalComfort::
      operator= (const SimController_ZoneControlTemperature_ThermostatThermalComfort& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature& > (*this) = x;
          this->SimCntrl_AveragingMethod_ = x.SimCntrl_AveragingMethod_;
          this->SimCntrl_SpecificPeopleName_ = x.SimCntrl_SpecificPeopleName_;
          this->SimCntrl_MinDry_BulbTempSetpoint_ = x.SimCntrl_MinDry_BulbTempSetpoint_;
          this->SimCntrl_MaxDry_BulbTempSetpoint_ = x.SimCntrl_MaxDry_BulbTempSetpoint_;
          this->SimCntrl_ThermalComfortControlTypeScheduleName_ = x.SimCntrl_ThermalComfortControlTypeScheduleName_;
          this->SimCntrl_ThermalComfortControl_1_4_ObjectType_ = x.SimCntrl_ThermalComfortControl_1_4_ObjectType_;
          this->SimCntrl_ThermalComfortControl_1_4_Name_ = x.SimCntrl_ThermalComfortControl_1_4_Name_;
        }

        return *this;
      }

      SimController_ZoneControlTemperature_ThermostatThermalComfort::
      ~SimController_ZoneControlTemperature_ThermostatThermalComfort ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

