// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode
      // 

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ()
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CrankcaseHeatCap () const
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CrankcaseHeatCap ()
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp () const
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp ()
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_SupWaterStoTankName () const
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_SupWaterStoTankName ()
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatCap () const
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatCap ()
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatSetpointTemp () const
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatSetpointTemp ()
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatOperatSchedName () const
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatOperatSchedName ()
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NumCapStages_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumCapStages () const
      {
        return this->SimFlowEnergyTrans_NumCapStages_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NumCapStages_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumCapStages ()
      {
        return this->SimFlowEnergyTrans_NumCapStages_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumCapStages (const SimFlowEnergyTrans_NumCapStages_type& x)
      {
        this->SimFlowEnergyTrans_NumCapStages_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumCapStages (const SimFlowEnergyTrans_NumCapStages_optional& x)
      {
        this->SimFlowEnergyTrans_NumCapStages_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NumEnhancedDehumidModes_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumEnhancedDehumidModes () const
      {
        return this->SimFlowEnergyTrans_NumEnhancedDehumidModes_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NumEnhancedDehumidModes_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumEnhancedDehumidModes ()
      {
        return this->SimFlowEnergyTrans_NumEnhancedDehumidModes_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumEnhancedDehumidModes (const SimFlowEnergyTrans_NumEnhancedDehumidModes_type& x)
      {
        this->SimFlowEnergyTrans_NumEnhancedDehumidModes_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NumEnhancedDehumidModes (const SimFlowEnergyTrans_NumEnhancedDehumidModes_optional& x)
      {
        this->SimFlowEnergyTrans_NumEnhancedDehumidModes_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType () const
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType ()
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType (const SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_type& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType (const SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_optional& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType (::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_type > x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfName () const
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfName ()
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfName (const SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_type& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfName (const SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_optional& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1CoilPerfName (::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_type > x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType () const
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType ()
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType (const SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_type& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType (const SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_optional& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType (::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_type > x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName () const
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName ()
      {
        return this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName (const SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_type& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName (const SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_optional& x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName (::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_type > x)
      {
        this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType () const
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType ()
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType (const SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_type& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType (const SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_optional& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType (::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_type > x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName () const
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName ()
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName (const SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_type& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName (const SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_optional& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName (::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_type > x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType () const
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType ()
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType (const SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_type& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType (const SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_optional& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType (::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_type > x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName () const
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName ()
      {
        return this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName (const SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_type& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName (const SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_optional& x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName (::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_type > x)
      {
        this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedTotalCoolingCap () const
      {
        return this->CoilPerf_DX_Cool_RatedTotalCoolingCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedTotalCoolingCap ()
      {
        return this->CoilPerf_DX_Cool_RatedTotalCoolingCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedTotalCoolingCap (const CoilPerf_DX_Cool_RatedTotalCoolingCap_type& x)
      {
        this->CoilPerf_DX_Cool_RatedTotalCoolingCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedTotalCoolingCap (const CoilPerf_DX_Cool_RatedTotalCoolingCap_optional& x)
      {
        this->CoilPerf_DX_Cool_RatedTotalCoolingCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedSensHeatRatio () const
      {
        return this->CoilPerf_DX_Cool_RatedSensHeatRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedSensHeatRatio ()
      {
        return this->CoilPerf_DX_Cool_RatedSensHeatRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedSensHeatRatio (const CoilPerf_DX_Cool_RatedSensHeatRatio_type& x)
      {
        this->CoilPerf_DX_Cool_RatedSensHeatRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedSensHeatRatio (const CoilPerf_DX_Cool_RatedSensHeatRatio_optional& x)
      {
        this->CoilPerf_DX_Cool_RatedSensHeatRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedCOP () const
      {
        return this->CoilPerf_DX_Cool_RatedCOP_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedCOP ()
      {
        return this->CoilPerf_DX_Cool_RatedCOP_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedCOP (const CoilPerf_DX_Cool_RatedCOP_type& x)
      {
        this->CoilPerf_DX_Cool_RatedCOP_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedCOP (const CoilPerf_DX_Cool_RatedCOP_optional& x)
      {
        this->CoilPerf_DX_Cool_RatedCOP_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedAirFlowRate () const
      {
        return this->CoilPerf_DX_Cool_RatedAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedAirFlowRate ()
      {
        return this->CoilPerf_DX_Cool_RatedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedAirFlowRate (const CoilPerf_DX_Cool_RatedAirFlowRate_type& x)
      {
        this->CoilPerf_DX_Cool_RatedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatedAirFlowRate (const CoilPerf_DX_Cool_RatedAirFlowRate_optional& x)
      {
        this->CoilPerf_DX_Cool_RatedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil () const
      {
        return this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil ()
      {
        return this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil (const CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_type& x)
      {
        this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil (const CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_optional& x)
      {
        this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName () const
      {
        return this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName ()
      {
        return this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName (const CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_type& x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName (const CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_optional& x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName (::std::auto_ptr< CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_type > x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName () const
      {
        return this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName ()
      {
        return this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName (const CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_type& x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName (const CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_optional& x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName (::std::auto_ptr< CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_type > x)
      {
        this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName () const
      {
        return this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName ()
      {
        return this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName (const CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_type& x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName (const CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName (::std::auto_ptr< CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_type > x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName () const
      {
        return this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName ()
      {
        return this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName (const CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_type& x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName (const CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_optional& x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName (::std::auto_ptr< CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_type > x)
      {
        this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_PartLoadFractCorrelCurveName () const
      {
        return this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_PartLoadFractCorrelCurveName ()
      {
        return this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_PartLoadFractCorrelCurveName (const CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_type& x)
      {
        this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_PartLoadFractCorrelCurveName (const CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_optional& x)
      {
        this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_PartLoadFractCorrelCurveName (::std::auto_ptr< CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_type > x)
      {
        this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin () const
      {
        return this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin ()
      {
        return this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin (const CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_type& x)
      {
        this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin (const CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_optional& x)
      {
        this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap () const
      {
        return this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap ()
      {
        return this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap (const CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_type& x)
      {
        this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap (const CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& x)
      {
        this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_MaxCyclingRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_MaxCyclingRate () const
      {
        return this->CoilPerf_DX_Cool_MaxCyclingRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_MaxCyclingRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_MaxCyclingRate ()
      {
        return this->CoilPerf_DX_Cool_MaxCyclingRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_MaxCyclingRate (const CoilPerf_DX_Cool_MaxCyclingRate_type& x)
      {
        this->CoilPerf_DX_Cool_MaxCyclingRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_MaxCyclingRate (const CoilPerf_DX_Cool_MaxCyclingRate_optional& x)
      {
        this->CoilPerf_DX_Cool_MaxCyclingRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_LatentCapTimeConst_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_LatentCapTimeConst () const
      {
        return this->CoilPerf_DX_Cool_LatentCapTimeConst_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_LatentCapTimeConst_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_LatentCapTimeConst ()
      {
        return this->CoilPerf_DX_Cool_LatentCapTimeConst_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_LatentCapTimeConst (const CoilPerf_DX_Cool_LatentCapTimeConst_type& x)
      {
        this->CoilPerf_DX_Cool_LatentCapTimeConst_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_LatentCapTimeConst (const CoilPerf_DX_Cool_LatentCapTimeConst_optional& x)
      {
        this->CoilPerf_DX_Cool_LatentCapTimeConst_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondAirInletNodeName () const
      {
        return this->CoilPerf_DX_Cool_CondAirInletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondAirInletNodeName ()
      {
        return this->CoilPerf_DX_Cool_CondAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondAirInletNodeName (const CoilPerf_DX_Cool_CondAirInletNodeName_type& x)
      {
        this->CoilPerf_DX_Cool_CondAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondAirInletNodeName (const CoilPerf_DX_Cool_CondAirInletNodeName_optional& x)
      {
        this->CoilPerf_DX_Cool_CondAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondAirInletNodeName (::std::auto_ptr< CoilPerf_DX_Cool_CondAirInletNodeName_type > x)
      {
        this->CoilPerf_DX_Cool_CondAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondType () const
      {
        return this->CoilPerf_DX_Cool_CondType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondType ()
      {
        return this->CoilPerf_DX_Cool_CondType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondType (const CoilPerf_DX_Cool_CondType_type& x)
      {
        this->CoilPerf_DX_Cool_CondType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondType (const CoilPerf_DX_Cool_CondType_optional& x)
      {
        this->CoilPerf_DX_Cool_CondType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_CondType (::std::auto_ptr< CoilPerf_DX_Cool_CondType_type > x)
      {
        this->CoilPerf_DX_Cool_CondType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondEffect () const
      {
        return this->CoilPerf_DX_Cool_EvapCondEffect_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondEffect ()
      {
        return this->CoilPerf_DX_Cool_EvapCondEffect_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondEffect (const CoilPerf_DX_Cool_EvapCondEffect_type& x)
      {
        this->CoilPerf_DX_Cool_EvapCondEffect_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondEffect (const CoilPerf_DX_Cool_EvapCondEffect_optional& x)
      {
        this->CoilPerf_DX_Cool_EvapCondEffect_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondAirFlowRate () const
      {
        return this->CoilPerf_DX_Cool_EvapCondAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondAirFlowRate ()
      {
        return this->CoilPerf_DX_Cool_EvapCondAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondAirFlowRate (const CoilPerf_DX_Cool_EvapCondAirFlowRate_type& x)
      {
        this->CoilPerf_DX_Cool_EvapCondAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondAirFlowRate (const CoilPerf_DX_Cool_EvapCondAirFlowRate_optional& x)
      {
        this->CoilPerf_DX_Cool_EvapCondAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump () const
      {
        return this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump ()
      {
        return this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump (const CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_type& x)
      {
        this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump (const CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_optional& x)
      {
        this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode
      //

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this),
        SimFlowEnergyTrans_NumCapStages_ (this),
        SimFlowEnergyTrans_NumEnhancedDehumidModes_ (this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_ (this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_ (this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_ (this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_ (this),
        CoilPerf_DX_Cool_RatedTotalCoolingCap_ (this),
        CoilPerf_DX_Cool_RatedSensHeatRatio_ (this),
        CoilPerf_DX_Cool_RatedCOP_ (this),
        CoilPerf_DX_Cool_RatedAirFlowRate_ (this),
        CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_ (this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_ (this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_ (this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_ (this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_ (this),
        CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_ (this),
        CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_ (this),
        CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        CoilPerf_DX_Cool_MaxCyclingRate_ (this),
        CoilPerf_DX_Cool_LatentCapTimeConst_ (this),
        CoilPerf_DX_Cool_CondAirInletNodeName_ (this),
        CoilPerf_DX_Cool_CondType_ (this),
        CoilPerf_DX_Cool_EvapCondEffect_ (this),
        CoilPerf_DX_Cool_EvapCondAirFlowRate_ (this),
        CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode& x,
                                                                                           ::xml_schema::flags f,
                                                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_, f, this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (x.SimFlowEnergyTrans_CrankcaseHeatCap_, f, this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_, f, this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (x.SimFlowEnergyTrans_SupWaterStoTankName_, f, this),
        SimFlowEnergyTrans_BasinHeatCap_ (x.SimFlowEnergyTrans_BasinHeatCap_, f, this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (x.SimFlowEnergyTrans_BasinHeatSetpointTemp_, f, this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (x.SimFlowEnergyTrans_BasinHeatOperatSchedName_, f, this),
        SimFlowEnergyTrans_NumCapStages_ (x.SimFlowEnergyTrans_NumCapStages_, f, this),
        SimFlowEnergyTrans_NumEnhancedDehumidModes_ (x.SimFlowEnergyTrans_NumEnhancedDehumidModes_, f, this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_ (x.SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_, f, this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_ (x.SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_, f, this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_ (x.SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_, f, this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_ (x.SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_, f, this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_ (x.SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_, f, this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_ (x.SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_, f, this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_ (x.SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_, f, this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_ (x.SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_, f, this),
        CoilPerf_DX_Cool_RatedTotalCoolingCap_ (x.CoilPerf_DX_Cool_RatedTotalCoolingCap_, f, this),
        CoilPerf_DX_Cool_RatedSensHeatRatio_ (x.CoilPerf_DX_Cool_RatedSensHeatRatio_, f, this),
        CoilPerf_DX_Cool_RatedCOP_ (x.CoilPerf_DX_Cool_RatedCOP_, f, this),
        CoilPerf_DX_Cool_RatedAirFlowRate_ (x.CoilPerf_DX_Cool_RatedAirFlowRate_, f, this),
        CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_ (x.CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_, f, this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_ (x.CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_, f, this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_ (x.CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_, f, this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_ (x.CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_, f, this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_ (x.CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_, f, this),
        CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_ (x.CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_, f, this),
        CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_ (x.CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_, f, this),
        CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_ (x.CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_, f, this),
        CoilPerf_DX_Cool_MaxCyclingRate_ (x.CoilPerf_DX_Cool_MaxCyclingRate_, f, this),
        CoilPerf_DX_Cool_LatentCapTimeConst_ (x.CoilPerf_DX_Cool_LatentCapTimeConst_, f, this),
        CoilPerf_DX_Cool_CondAirInletNodeName_ (x.CoilPerf_DX_Cool_CondAirInletNodeName_, f, this),
        CoilPerf_DX_Cool_CondType_ (x.CoilPerf_DX_Cool_CondType_, f, this),
        CoilPerf_DX_Cool_EvapCondEffect_ (x.CoilPerf_DX_Cool_EvapCondEffect_, f, this),
        CoilPerf_DX_Cool_EvapCondAirFlowRate_ (x.CoilPerf_DX_Cool_EvapCondAirFlowRate_, f, this),
        CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_ (x.CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_, f, this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode (const ::xercesc::DOMElement& e,
                                                                                           ::xml_schema::flags f,
                                                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this),
        SimFlowEnergyTrans_NumCapStages_ (this),
        SimFlowEnergyTrans_NumEnhancedDehumidModes_ (this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_ (this),
        SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_ (this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_ (this),
        SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_ (this),
        SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_ (this),
        CoilPerf_DX_Cool_RatedTotalCoolingCap_ (this),
        CoilPerf_DX_Cool_RatedSensHeatRatio_ (this),
        CoilPerf_DX_Cool_RatedCOP_ (this),
        CoilPerf_DX_Cool_RatedAirFlowRate_ (this),
        CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_ (this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_ (this),
        CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_ (this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_ (this),
        CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_ (this),
        CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_ (this),
        CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_ (this),
        CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        CoilPerf_DX_Cool_MaxCyclingRate_ (this),
        CoilPerf_DX_Cool_LatentCapTimeConst_ (this),
        CoilPerf_DX_Cool_CondAirInletNodeName_ (this),
        CoilPerf_DX_Cool_CondType_ (this),
        CoilPerf_DX_Cool_EvapCondEffect_ (this),
        CoilPerf_DX_Cool_EvapCondAirFlowRate_ (this),
        CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
          //
          if (n.name () == "SimFlowEnergyTrans_CondsCollectionWaterStorageTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > r (
              SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_)
            {
              this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CrankcaseHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_CrankcaseHeatCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_CrankcaseHeatCap_)
            {
              this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (SimFlowEnergyTrans_CrankcaseHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp
          //
          if (n.name () == "SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_)
            {
              this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SupWaterStoTankName
          //
          if (n.name () == "SimFlowEnergyTrans_SupWaterStoTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > r (
              SimFlowEnergyTrans_SupWaterStoTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupWaterStoTankName_)
            {
              this->SimFlowEnergyTrans_SupWaterStoTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatCap_)
            {
              this->SimFlowEnergyTrans_BasinHeatCap_.set (SimFlowEnergyTrans_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatSetpointTemp
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatSetpointTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatSetpointTemp_)
            {
              this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (SimFlowEnergyTrans_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatOperatSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatOperatSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > r (
              SimFlowEnergyTrans_BasinHeatOperatSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_BasinHeatOperatSchedName_)
            {
              this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NumCapStages
          //
          if (n.name () == "SimFlowEnergyTrans_NumCapStages" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NumCapStages_)
            {
              this->SimFlowEnergyTrans_NumCapStages_.set (SimFlowEnergyTrans_NumCapStages_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NumEnhancedDehumidModes
          //
          if (n.name () == "SimFlowEnergyTrans_NumEnhancedDehumidModes" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NumEnhancedDehumidModes_)
            {
              this->SimFlowEnergyTrans_NumEnhancedDehumidModes_.set (SimFlowEnergyTrans_NumEnhancedDehumidModes_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType
          //
          if (n.name () == "SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_type > r (
              SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_)
            {
              this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NrmlModeStage1CoilPerfName
          //
          if (n.name () == "SimFlowEnergyTrans_NrmlModeStage1CoilPerfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_type > r (
              SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_)
            {
              this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType
          //
          if (n.name () == "SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_type > r (
              SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_)
            {
              this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName
          //
          if (n.name () == "SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_type > r (
              SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_)
            {
              this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType
          //
          if (n.name () == "SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_type > r (
              SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_)
            {
              this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName
          //
          if (n.name () == "SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_type > r (
              SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_)
            {
              this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType
          //
          if (n.name () == "SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_type > r (
              SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_)
            {
              this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName
          //
          if (n.name () == "SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_type > r (
              SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_)
            {
              this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_RatedTotalCoolingCap
          //
          if (n.name () == "CoilPerf_DX_Cool_RatedTotalCoolingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_RatedTotalCoolingCap_)
            {
              this->CoilPerf_DX_Cool_RatedTotalCoolingCap_.set (CoilPerf_DX_Cool_RatedTotalCoolingCap_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_RatedSensHeatRatio
          //
          if (n.name () == "CoilPerf_DX_Cool_RatedSensHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_RatedSensHeatRatio_)
            {
              this->CoilPerf_DX_Cool_RatedSensHeatRatio_.set (CoilPerf_DX_Cool_RatedSensHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_RatedCOP
          //
          if (n.name () == "CoilPerf_DX_Cool_RatedCOP" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_RatedCOP_)
            {
              this->CoilPerf_DX_Cool_RatedCOP_.set (CoilPerf_DX_Cool_RatedCOP_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_RatedAirFlowRate
          //
          if (n.name () == "CoilPerf_DX_Cool_RatedAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_RatedAirFlowRate_)
            {
              this->CoilPerf_DX_Cool_RatedAirFlowRate_.set (CoilPerf_DX_Cool_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil
          //
          if (n.name () == "CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_)
            {
              this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_.set (CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName
          //
          if (n.name () == "CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_type > r (
              CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_)
            {
              this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName
          //
          if (n.name () == "CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_type > r (
              CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_)
            {
              this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_type > r (
              CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_)
            {
              this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName
          //
          if (n.name () == "CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_type > r (
              CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_)
            {
              this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_PartLoadFractCorrelCurveName
          //
          if (n.name () == "CoilPerf_DX_Cool_PartLoadFractCorrelCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_type > r (
              CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_)
            {
              this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin
          //
          if (n.name () == "CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_)
            {
              this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_.set (CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap
          //
          if (n.name () == "CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_)
            {
              this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_MaxCyclingRate
          //
          if (n.name () == "CoilPerf_DX_Cool_MaxCyclingRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_MaxCyclingRate_)
            {
              this->CoilPerf_DX_Cool_MaxCyclingRate_.set (CoilPerf_DX_Cool_MaxCyclingRate_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_LatentCapTimeConst
          //
          if (n.name () == "CoilPerf_DX_Cool_LatentCapTimeConst" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_LatentCapTimeConst_)
            {
              this->CoilPerf_DX_Cool_LatentCapTimeConst_.set (CoilPerf_DX_Cool_LatentCapTimeConst_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_CondAirInletNodeName
          //
          if (n.name () == "CoilPerf_DX_Cool_CondAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_CondAirInletNodeName_type > r (
              CoilPerf_DX_Cool_CondAirInletNodeName_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_CondAirInletNodeName_)
            {
              this->CoilPerf_DX_Cool_CondAirInletNodeName_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_CondType
          //
          if (n.name () == "CoilPerf_DX_Cool_CondType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< CoilPerf_DX_Cool_CondType_type > r (
              CoilPerf_DX_Cool_CondType_traits::create (i, f, this));

            if (!this->CoilPerf_DX_Cool_CondType_)
            {
              this->CoilPerf_DX_Cool_CondType_.set (r);
              continue;
            }
          }

          // CoilPerf_DX_Cool_EvapCondEffect
          //
          if (n.name () == "CoilPerf_DX_Cool_EvapCondEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_EvapCondEffect_)
            {
              this->CoilPerf_DX_Cool_EvapCondEffect_.set (CoilPerf_DX_Cool_EvapCondEffect_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_EvapCondAirFlowRate
          //
          if (n.name () == "CoilPerf_DX_Cool_EvapCondAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_EvapCondAirFlowRate_)
            {
              this->CoilPerf_DX_Cool_EvapCondAirFlowRate_.set (CoilPerf_DX_Cool_EvapCondAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump
          //
          if (n.name () == "CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_)
            {
              this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_.set (CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode* SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode (*this, f, c);
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      operator= (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
          this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x.SimFlowEnergyTrans_CrankcaseHeatCap_;
          this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
          this->SimFlowEnergyTrans_SupWaterStoTankName_ = x.SimFlowEnergyTrans_SupWaterStoTankName_;
          this->SimFlowEnergyTrans_BasinHeatCap_ = x.SimFlowEnergyTrans_BasinHeatCap_;
          this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x.SimFlowEnergyTrans_BasinHeatSetpointTemp_;
          this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x.SimFlowEnergyTrans_BasinHeatOperatSchedName_;
          this->SimFlowEnergyTrans_NumCapStages_ = x.SimFlowEnergyTrans_NumCapStages_;
          this->SimFlowEnergyTrans_NumEnhancedDehumidModes_ = x.SimFlowEnergyTrans_NumEnhancedDehumidModes_;
          this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_ = x.SimFlowEnergyTrans_NrmlModeStage1CoilPerfObjType_;
          this->SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_ = x.SimFlowEnergyTrans_NrmlModeStage1CoilPerfName_;
          this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_ = x.SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfObjType_;
          this->SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_ = x.SimFlowEnergyTrans_NrmlModeStage1_2CoilPerfName_;
          this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_ = x.SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfObjType_;
          this->SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_ = x.SimFlowEnergyTrans_DehumidMode1Stage1CoilPerfName_;
          this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_ = x.SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfObjType_;
          this->SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_ = x.SimFlowEnergyTrans_DehumidMode1Stage1_2CoilPerfName_;
          this->CoilPerf_DX_Cool_RatedTotalCoolingCap_ = x.CoilPerf_DX_Cool_RatedTotalCoolingCap_;
          this->CoilPerf_DX_Cool_RatedSensHeatRatio_ = x.CoilPerf_DX_Cool_RatedSensHeatRatio_;
          this->CoilPerf_DX_Cool_RatedCOP_ = x.CoilPerf_DX_Cool_RatedCOP_;
          this->CoilPerf_DX_Cool_RatedAirFlowRate_ = x.CoilPerf_DX_Cool_RatedAirFlowRate_;
          this->CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_ = x.CoilPerf_DX_Cool_FractAirFlowBypassedAroundCoil_;
          this->CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_ = x.CoilPerf_DX_Cool_TotalCoolingCapFuncTempCurveName_;
          this->CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_ = x.CoilPerf_DX_Cool_TotalCoolingCapFuncFlowFractCurveName_;
          this->CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_ = x.CoilPerf_DX_Cool_EnergyInputRatioFuncTempCurveName_;
          this->CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_ = x.CoilPerf_DX_Cool_EnergyInputRatioFuncFlowFractCurveName_;
          this->CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_ = x.CoilPerf_DX_Cool_PartLoadFractCorrelCurveName_;
          this->CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_ = x.CoilPerf_DX_Cool_NomTimeForCondsRemovToBegin_;
          this->CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x.CoilPerf_DX_Cool_RatioInitMoistEvapRate_SteadyStateLatentCap_;
          this->CoilPerf_DX_Cool_MaxCyclingRate_ = x.CoilPerf_DX_Cool_MaxCyclingRate_;
          this->CoilPerf_DX_Cool_LatentCapTimeConst_ = x.CoilPerf_DX_Cool_LatentCapTimeConst_;
          this->CoilPerf_DX_Cool_CondAirInletNodeName_ = x.CoilPerf_DX_Cool_CondAirInletNodeName_;
          this->CoilPerf_DX_Cool_CondType_ = x.CoilPerf_DX_Cool_CondType_;
          this->CoilPerf_DX_Cool_EvapCondEffect_ = x.CoilPerf_DX_Cool_EvapCondEffect_;
          this->CoilPerf_DX_Cool_EvapCondAirFlowRate_ = x.CoilPerf_DX_Cool_EvapCondAirFlowRate_;
          this->CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_ = x.CoilPerf_DX_Cool_EvapCondPumpRatedPwrConsump_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode::
      ~SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXTwoStageWithHumidityControlMode ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

