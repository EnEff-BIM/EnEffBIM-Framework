// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpace_Occupied.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSpace_Occupied
      // 

      const SimSpace_Occupied::SpaceNumber_optional& SimSpace_Occupied::
      SpaceNumber () const
      {
        return this->SpaceNumber_;
      }

      SimSpace_Occupied::SpaceNumber_optional& SimSpace_Occupied::
      SpaceNumber ()
      {
        return this->SpaceNumber_;
      }

      void SimSpace_Occupied::
      SpaceNumber (const SpaceNumber_type& x)
      {
        this->SpaceNumber_.set (x);
      }

      void SimSpace_Occupied::
      SpaceNumber (const SpaceNumber_optional& x)
      {
        this->SpaceNumber_ = x;
      }

      void SimSpace_Occupied::
      SpaceNumber (::std::auto_ptr< SpaceNumber_type > x)
      {
        this->SpaceNumber_.set (x);
      }

      const SimSpace_Occupied::SpaceName_optional& SimSpace_Occupied::
      SpaceName () const
      {
        return this->SpaceName_;
      }

      SimSpace_Occupied::SpaceName_optional& SimSpace_Occupied::
      SpaceName ()
      {
        return this->SpaceName_;
      }

      void SimSpace_Occupied::
      SpaceName (const SpaceName_type& x)
      {
        this->SpaceName_.set (x);
      }

      void SimSpace_Occupied::
      SpaceName (const SpaceName_optional& x)
      {
        this->SpaceName_ = x;
      }

      void SimSpace_Occupied::
      SpaceName (::std::auto_ptr< SpaceName_type > x)
      {
        this->SpaceName_.set (x);
      }

      const SimSpace_Occupied::SpaceInteriorOrExterior_optional& SimSpace_Occupied::
      SpaceInteriorOrExterior () const
      {
        return this->SpaceInteriorOrExterior_;
      }

      SimSpace_Occupied::SpaceInteriorOrExterior_optional& SimSpace_Occupied::
      SpaceInteriorOrExterior ()
      {
        return this->SpaceInteriorOrExterior_;
      }

      void SimSpace_Occupied::
      SpaceInteriorOrExterior (const SpaceInteriorOrExterior_type& x)
      {
        this->SpaceInteriorOrExterior_.set (x);
      }

      void SimSpace_Occupied::
      SpaceInteriorOrExterior (const SpaceInteriorOrExterior_optional& x)
      {
        this->SpaceInteriorOrExterior_ = x;
      }

      void SimSpace_Occupied::
      SpaceInteriorOrExterior (::std::auto_ptr< SpaceInteriorOrExterior_type > x)
      {
        this->SpaceInteriorOrExterior_.set (x);
      }

      const SimSpace_Occupied::SpaceThermalSimulationType_optional& SimSpace_Occupied::
      SpaceThermalSimulationType () const
      {
        return this->SpaceThermalSimulationType_;
      }

      SimSpace_Occupied::SpaceThermalSimulationType_optional& SimSpace_Occupied::
      SpaceThermalSimulationType ()
      {
        return this->SpaceThermalSimulationType_;
      }

      void SimSpace_Occupied::
      SpaceThermalSimulationType (const SpaceThermalSimulationType_type& x)
      {
        this->SpaceThermalSimulationType_.set (x);
      }

      void SimSpace_Occupied::
      SpaceThermalSimulationType (const SpaceThermalSimulationType_optional& x)
      {
        this->SpaceThermalSimulationType_ = x;
      }

      void SimSpace_Occupied::
      SpaceThermalSimulationType (::std::auto_ptr< SpaceThermalSimulationType_type > x)
      {
        this->SpaceThermalSimulationType_.set (x);
      }

      const SimSpace_Occupied::SpaceConditioningRequirement_optional& SimSpace_Occupied::
      SpaceConditioningRequirement () const
      {
        return this->SpaceConditioningRequirement_;
      }

      SimSpace_Occupied::SpaceConditioningRequirement_optional& SimSpace_Occupied::
      SpaceConditioningRequirement ()
      {
        return this->SpaceConditioningRequirement_;
      }

      void SimSpace_Occupied::
      SpaceConditioningRequirement (const SpaceConditioningRequirement_type& x)
      {
        this->SpaceConditioningRequirement_.set (x);
      }

      void SimSpace_Occupied::
      SpaceConditioningRequirement (const SpaceConditioningRequirement_optional& x)
      {
        this->SpaceConditioningRequirement_ = x;
      }

      void SimSpace_Occupied::
      SpaceConditioningRequirement (::std::auto_ptr< SpaceConditioningRequirement_type > x)
      {
        this->SpaceConditioningRequirement_.set (x);
      }

      const SimSpace_Occupied::SpaceOccupantDensity_optional& SimSpace_Occupied::
      SpaceOccupantDensity () const
      {
        return this->SpaceOccupantDensity_;
      }

      SimSpace_Occupied::SpaceOccupantDensity_optional& SimSpace_Occupied::
      SpaceOccupantDensity ()
      {
        return this->SpaceOccupantDensity_;
      }

      void SimSpace_Occupied::
      SpaceOccupantDensity (const SpaceOccupantDensity_type& x)
      {
        this->SpaceOccupantDensity_.set (x);
      }

      void SimSpace_Occupied::
      SpaceOccupantDensity (const SpaceOccupantDensity_optional& x)
      {
        this->SpaceOccupantDensity_ = x;
      }

      const SimSpace_Occupied::SpaceOccupantHeatRateLatent_optional& SimSpace_Occupied::
      SpaceOccupantHeatRateLatent () const
      {
        return this->SpaceOccupantHeatRateLatent_;
      }

      SimSpace_Occupied::SpaceOccupantHeatRateLatent_optional& SimSpace_Occupied::
      SpaceOccupantHeatRateLatent ()
      {
        return this->SpaceOccupantHeatRateLatent_;
      }

      void SimSpace_Occupied::
      SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_type& x)
      {
        this->SpaceOccupantHeatRateLatent_.set (x);
      }

      void SimSpace_Occupied::
      SpaceOccupantHeatRateLatent (const SpaceOccupantHeatRateLatent_optional& x)
      {
        this->SpaceOccupantHeatRateLatent_ = x;
      }

      const SimSpace_Occupied::SpaceOccupantHeatRateSensible_optional& SimSpace_Occupied::
      SpaceOccupantHeatRateSensible () const
      {
        return this->SpaceOccupantHeatRateSensible_;
      }

      SimSpace_Occupied::SpaceOccupantHeatRateSensible_optional& SimSpace_Occupied::
      SpaceOccupantHeatRateSensible ()
      {
        return this->SpaceOccupantHeatRateSensible_;
      }

      void SimSpace_Occupied::
      SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_type& x)
      {
        this->SpaceOccupantHeatRateSensible_.set (x);
      }

      void SimSpace_Occupied::
      SpaceOccupantHeatRateSensible (const SpaceOccupantHeatRateSensible_optional& x)
      {
        this->SpaceOccupantHeatRateSensible_ = x;
      }

      const SimSpace_Occupied::SpaceOccupantLoad_optional& SimSpace_Occupied::
      SpaceOccupantLoad () const
      {
        return this->SpaceOccupantLoad_;
      }

      SimSpace_Occupied::SpaceOccupantLoad_optional& SimSpace_Occupied::
      SpaceOccupantLoad ()
      {
        return this->SpaceOccupantLoad_;
      }

      void SimSpace_Occupied::
      SpaceOccupantLoad (const SpaceOccupantLoad_type& x)
      {
        this->SpaceOccupantLoad_.set (x);
      }

      void SimSpace_Occupied::
      SpaceOccupantLoad (const SpaceOccupantLoad_optional& x)
      {
        this->SpaceOccupantLoad_ = x;
      }

      const SimSpace_Occupied::SpaceEquipmentLoad_optional& SimSpace_Occupied::
      SpaceEquipmentLoad () const
      {
        return this->SpaceEquipmentLoad_;
      }

      SimSpace_Occupied::SpaceEquipmentLoad_optional& SimSpace_Occupied::
      SpaceEquipmentLoad ()
      {
        return this->SpaceEquipmentLoad_;
      }

      void SimSpace_Occupied::
      SpaceEquipmentLoad (const SpaceEquipmentLoad_type& x)
      {
        this->SpaceEquipmentLoad_.set (x);
      }

      void SimSpace_Occupied::
      SpaceEquipmentLoad (const SpaceEquipmentLoad_optional& x)
      {
        this->SpaceEquipmentLoad_ = x;
      }

      const SimSpace_Occupied::SpaceLightingLoad_optional& SimSpace_Occupied::
      SpaceLightingLoad () const
      {
        return this->SpaceLightingLoad_;
      }

      SimSpace_Occupied::SpaceLightingLoad_optional& SimSpace_Occupied::
      SpaceLightingLoad ()
      {
        return this->SpaceLightingLoad_;
      }

      void SimSpace_Occupied::
      SpaceLightingLoad (const SpaceLightingLoad_type& x)
      {
        this->SpaceLightingLoad_.set (x);
      }

      void SimSpace_Occupied::
      SpaceLightingLoad (const SpaceLightingLoad_optional& x)
      {
        this->SpaceLightingLoad_ = x;
      }

      const SimSpace_Occupied::InsideDryBulbTempHeating_optional& SimSpace_Occupied::
      InsideDryBulbTempHeating () const
      {
        return this->InsideDryBulbTempHeating_;
      }

      SimSpace_Occupied::InsideDryBulbTempHeating_optional& SimSpace_Occupied::
      InsideDryBulbTempHeating ()
      {
        return this->InsideDryBulbTempHeating_;
      }

      void SimSpace_Occupied::
      InsideDryBulbTempHeating (const InsideDryBulbTempHeating_type& x)
      {
        this->InsideDryBulbTempHeating_.set (x);
      }

      void SimSpace_Occupied::
      InsideDryBulbTempHeating (const InsideDryBulbTempHeating_optional& x)
      {
        this->InsideDryBulbTempHeating_ = x;
      }

      const SimSpace_Occupied::InsideRelHumidityHeating_optional& SimSpace_Occupied::
      InsideRelHumidityHeating () const
      {
        return this->InsideRelHumidityHeating_;
      }

      SimSpace_Occupied::InsideRelHumidityHeating_optional& SimSpace_Occupied::
      InsideRelHumidityHeating ()
      {
        return this->InsideRelHumidityHeating_;
      }

      void SimSpace_Occupied::
      InsideRelHumidityHeating (const InsideRelHumidityHeating_type& x)
      {
        this->InsideRelHumidityHeating_.set (x);
      }

      void SimSpace_Occupied::
      InsideRelHumidityHeating (const InsideRelHumidityHeating_optional& x)
      {
        this->InsideRelHumidityHeating_ = x;
      }

      const SimSpace_Occupied::InsideDryBulbTempCooling_optional& SimSpace_Occupied::
      InsideDryBulbTempCooling () const
      {
        return this->InsideDryBulbTempCooling_;
      }

      SimSpace_Occupied::InsideDryBulbTempCooling_optional& SimSpace_Occupied::
      InsideDryBulbTempCooling ()
      {
        return this->InsideDryBulbTempCooling_;
      }

      void SimSpace_Occupied::
      InsideDryBulbTempCooling (const InsideDryBulbTempCooling_type& x)
      {
        this->InsideDryBulbTempCooling_.set (x);
      }

      void SimSpace_Occupied::
      InsideDryBulbTempCooling (const InsideDryBulbTempCooling_optional& x)
      {
        this->InsideDryBulbTempCooling_ = x;
      }

      const SimSpace_Occupied::InsideRelHumidityCooling_optional& SimSpace_Occupied::
      InsideRelHumidityCooling () const
      {
        return this->InsideRelHumidityCooling_;
      }

      SimSpace_Occupied::InsideRelHumidityCooling_optional& SimSpace_Occupied::
      InsideRelHumidityCooling ()
      {
        return this->InsideRelHumidityCooling_;
      }

      void SimSpace_Occupied::
      InsideRelHumidityCooling (const InsideRelHumidityCooling_type& x)
      {
        this->InsideRelHumidityCooling_.set (x);
      }

      void SimSpace_Occupied::
      InsideRelHumidityCooling (const InsideRelHumidityCooling_optional& x)
      {
        this->InsideRelHumidityCooling_ = x;
      }

      const SimSpace_Occupied::IncludesReturnAirPlenum_optional& SimSpace_Occupied::
      IncludesReturnAirPlenum () const
      {
        return this->IncludesReturnAirPlenum_;
      }

      SimSpace_Occupied::IncludesReturnAirPlenum_optional& SimSpace_Occupied::
      IncludesReturnAirPlenum ()
      {
        return this->IncludesReturnAirPlenum_;
      }

      void SimSpace_Occupied::
      IncludesReturnAirPlenum (const IncludesReturnAirPlenum_type& x)
      {
        this->IncludesReturnAirPlenum_.set (x);
      }

      void SimSpace_Occupied::
      IncludesReturnAirPlenum (const IncludesReturnAirPlenum_optional& x)
      {
        this->IncludesReturnAirPlenum_ = x;
      }

      const SimSpace_Occupied::PeakAirFlowCooling_optional& SimSpace_Occupied::
      PeakAirFlowCooling () const
      {
        return this->PeakAirFlowCooling_;
      }

      SimSpace_Occupied::PeakAirFlowCooling_optional& SimSpace_Occupied::
      PeakAirFlowCooling ()
      {
        return this->PeakAirFlowCooling_;
      }

      void SimSpace_Occupied::
      PeakAirFlowCooling (const PeakAirFlowCooling_type& x)
      {
        this->PeakAirFlowCooling_.set (x);
      }

      void SimSpace_Occupied::
      PeakAirFlowCooling (const PeakAirFlowCooling_optional& x)
      {
        this->PeakAirFlowCooling_ = x;
      }

      const SimSpace_Occupied::PeakAirFlowHeating_optional& SimSpace_Occupied::
      PeakAirFlowHeating () const
      {
        return this->PeakAirFlowHeating_;
      }

      SimSpace_Occupied::PeakAirFlowHeating_optional& SimSpace_Occupied::
      PeakAirFlowHeating ()
      {
        return this->PeakAirFlowHeating_;
      }

      void SimSpace_Occupied::
      PeakAirFlowHeating (const PeakAirFlowHeating_type& x)
      {
        this->PeakAirFlowHeating_.set (x);
      }

      void SimSpace_Occupied::
      PeakAirFlowHeating (const PeakAirFlowHeating_optional& x)
      {
        this->PeakAirFlowHeating_ = x;
      }

      const SimSpace_Occupied::ExhaustAirFlowRate_optional& SimSpace_Occupied::
      ExhaustAirFlowRate () const
      {
        return this->ExhaustAirFlowRate_;
      }

      SimSpace_Occupied::ExhaustAirFlowRate_optional& SimSpace_Occupied::
      ExhaustAirFlowRate ()
      {
        return this->ExhaustAirFlowRate_;
      }

      void SimSpace_Occupied::
      ExhaustAirFlowRate (const ExhaustAirFlowRate_type& x)
      {
        this->ExhaustAirFlowRate_.set (x);
      }

      void SimSpace_Occupied::
      ExhaustAirFlowRate (const ExhaustAirFlowRate_optional& x)
      {
        this->ExhaustAirFlowRate_ = x;
      }

      const SimSpace_Occupied::NaturalAirChangeRate_optional& SimSpace_Occupied::
      NaturalAirChangeRate () const
      {
        return this->NaturalAirChangeRate_;
      }

      SimSpace_Occupied::NaturalAirChangeRate_optional& SimSpace_Occupied::
      NaturalAirChangeRate ()
      {
        return this->NaturalAirChangeRate_;
      }

      void SimSpace_Occupied::
      NaturalAirChangeRate (const NaturalAirChangeRate_type& x)
      {
        this->NaturalAirChangeRate_.set (x);
      }

      void SimSpace_Occupied::
      NaturalAirChangeRate (const NaturalAirChangeRate_optional& x)
      {
        this->NaturalAirChangeRate_ = x;
      }

      const SimSpace_Occupied::MechanicalAirChangeRate_optional& SimSpace_Occupied::
      MechanicalAirChangeRate () const
      {
        return this->MechanicalAirChangeRate_;
      }

      SimSpace_Occupied::MechanicalAirChangeRate_optional& SimSpace_Occupied::
      MechanicalAirChangeRate ()
      {
        return this->MechanicalAirChangeRate_;
      }

      void SimSpace_Occupied::
      MechanicalAirChangeRate (const MechanicalAirChangeRate_type& x)
      {
        this->MechanicalAirChangeRate_.set (x);
      }

      void SimSpace_Occupied::
      MechanicalAirChangeRate (const MechanicalAirChangeRate_optional& x)
      {
        this->MechanicalAirChangeRate_ = x;
      }

      const SimSpace_Occupied::VentilationType_optional& SimSpace_Occupied::
      VentilationType () const
      {
        return this->VentilationType_;
      }

      SimSpace_Occupied::VentilationType_optional& SimSpace_Occupied::
      VentilationType ()
      {
        return this->VentilationType_;
      }

      void SimSpace_Occupied::
      VentilationType (const VentilationType_type& x)
      {
        this->VentilationType_.set (x);
      }

      void SimSpace_Occupied::
      VentilationType (const VentilationType_optional& x)
      {
        this->VentilationType_ = x;
      }

      void SimSpace_Occupied::
      VentilationType (::std::auto_ptr< VentilationType_type > x)
      {
        this->VentilationType_.set (x);
      }

      const SimSpace_Occupied::OutsideAirPerPerson_optional& SimSpace_Occupied::
      OutsideAirPerPerson () const
      {
        return this->OutsideAirPerPerson_;
      }

      SimSpace_Occupied::OutsideAirPerPerson_optional& SimSpace_Occupied::
      OutsideAirPerPerson ()
      {
        return this->OutsideAirPerPerson_;
      }

      void SimSpace_Occupied::
      OutsideAirPerPerson (const OutsideAirPerPerson_type& x)
      {
        this->OutsideAirPerPerson_.set (x);
      }

      void SimSpace_Occupied::
      OutsideAirPerPerson (const OutsideAirPerPerson_optional& x)
      {
        this->OutsideAirPerPerson_ = x;
      }

      const SimSpace_Occupied::SpaceHeight_optional& SimSpace_Occupied::
      SpaceHeight () const
      {
        return this->SpaceHeight_;
      }

      SimSpace_Occupied::SpaceHeight_optional& SimSpace_Occupied::
      SpaceHeight ()
      {
        return this->SpaceHeight_;
      }

      void SimSpace_Occupied::
      SpaceHeight (const SpaceHeight_type& x)
      {
        this->SpaceHeight_.set (x);
      }

      void SimSpace_Occupied::
      SpaceHeight (const SpaceHeight_optional& x)
      {
        this->SpaceHeight_ = x;
      }

      const SimSpace_Occupied::SpaceGrossPerimeter_optional& SimSpace_Occupied::
      SpaceGrossPerimeter () const
      {
        return this->SpaceGrossPerimeter_;
      }

      SimSpace_Occupied::SpaceGrossPerimeter_optional& SimSpace_Occupied::
      SpaceGrossPerimeter ()
      {
        return this->SpaceGrossPerimeter_;
      }

      void SimSpace_Occupied::
      SpaceGrossPerimeter (const SpaceGrossPerimeter_type& x)
      {
        this->SpaceGrossPerimeter_.set (x);
      }

      void SimSpace_Occupied::
      SpaceGrossPerimeter (const SpaceGrossPerimeter_optional& x)
      {
        this->SpaceGrossPerimeter_ = x;
      }

      const SimSpace_Occupied::SpaceGrossFloorArea_optional& SimSpace_Occupied::
      SpaceGrossFloorArea () const
      {
        return this->SpaceGrossFloorArea_;
      }

      SimSpace_Occupied::SpaceGrossFloorArea_optional& SimSpace_Occupied::
      SpaceGrossFloorArea ()
      {
        return this->SpaceGrossFloorArea_;
      }

      void SimSpace_Occupied::
      SpaceGrossFloorArea (const SpaceGrossFloorArea_type& x)
      {
        this->SpaceGrossFloorArea_.set (x);
      }

      void SimSpace_Occupied::
      SpaceGrossFloorArea (const SpaceGrossFloorArea_optional& x)
      {
        this->SpaceGrossFloorArea_ = x;
      }

      const SimSpace_Occupied::SpaceNetFloorArea_optional& SimSpace_Occupied::
      SpaceNetFloorArea () const
      {
        return this->SpaceNetFloorArea_;
      }

      SimSpace_Occupied::SpaceNetFloorArea_optional& SimSpace_Occupied::
      SpaceNetFloorArea ()
      {
        return this->SpaceNetFloorArea_;
      }

      void SimSpace_Occupied::
      SpaceNetFloorArea (const SpaceNetFloorArea_type& x)
      {
        this->SpaceNetFloorArea_.set (x);
      }

      void SimSpace_Occupied::
      SpaceNetFloorArea (const SpaceNetFloorArea_optional& x)
      {
        this->SpaceNetFloorArea_ = x;
      }

      const SimSpace_Occupied::SpaceGrossVolume_optional& SimSpace_Occupied::
      SpaceGrossVolume () const
      {
        return this->SpaceGrossVolume_;
      }

      SimSpace_Occupied::SpaceGrossVolume_optional& SimSpace_Occupied::
      SpaceGrossVolume ()
      {
        return this->SpaceGrossVolume_;
      }

      void SimSpace_Occupied::
      SpaceGrossVolume (const SpaceGrossVolume_type& x)
      {
        this->SpaceGrossVolume_.set (x);
      }

      void SimSpace_Occupied::
      SpaceGrossVolume (const SpaceGrossVolume_optional& x)
      {
        this->SpaceGrossVolume_ = x;
      }

      const SimSpace_Occupied::SpaceNetVolume_optional& SimSpace_Occupied::
      SpaceNetVolume () const
      {
        return this->SpaceNetVolume_;
      }

      SimSpace_Occupied::SpaceNetVolume_optional& SimSpace_Occupied::
      SpaceNetVolume ()
      {
        return this->SpaceNetVolume_;
      }

      void SimSpace_Occupied::
      SpaceNetVolume (const SpaceNetVolume_type& x)
      {
        this->SpaceNetVolume_.set (x);
      }

      void SimSpace_Occupied::
      SpaceNetVolume (const SpaceNetVolume_optional& x)
      {
        this->SpaceNetVolume_ = x;
      }

      const SimSpace_Occupied::SpaceNetFloorAreaBOMA_optional& SimSpace_Occupied::
      SpaceNetFloorAreaBOMA () const
      {
        return this->SpaceNetFloorAreaBOMA_;
      }

      SimSpace_Occupied::SpaceNetFloorAreaBOMA_optional& SimSpace_Occupied::
      SpaceNetFloorAreaBOMA ()
      {
        return this->SpaceNetFloorAreaBOMA_;
      }

      void SimSpace_Occupied::
      SpaceNetFloorAreaBOMA (const SpaceNetFloorAreaBOMA_type& x)
      {
        this->SpaceNetFloorAreaBOMA_.set (x);
      }

      void SimSpace_Occupied::
      SpaceNetFloorAreaBOMA (const SpaceNetFloorAreaBOMA_optional& x)
      {
        this->SpaceNetFloorAreaBOMA_ = x;
      }

      const SimSpace_Occupied::SpaceUsableFloorAreaBOMA_optional& SimSpace_Occupied::
      SpaceUsableFloorAreaBOMA () const
      {
        return this->SpaceUsableFloorAreaBOMA_;
      }

      SimSpace_Occupied::SpaceUsableFloorAreaBOMA_optional& SimSpace_Occupied::
      SpaceUsableFloorAreaBOMA ()
      {
        return this->SpaceUsableFloorAreaBOMA_;
      }

      void SimSpace_Occupied::
      SpaceUsableFloorAreaBOMA (const SpaceUsableFloorAreaBOMA_type& x)
      {
        this->SpaceUsableFloorAreaBOMA_.set (x);
      }

      void SimSpace_Occupied::
      SpaceUsableFloorAreaBOMA (const SpaceUsableFloorAreaBOMA_optional& x)
      {
        this->SpaceUsableFloorAreaBOMA_ = x;
      }

      const SimSpace_Occupied::ClassRef_SpaceByFunction_optional& SimSpace_Occupied::
      ClassRef_SpaceByFunction () const
      {
        return this->ClassRef_SpaceByFunction_;
      }

      SimSpace_Occupied::ClassRef_SpaceByFunction_optional& SimSpace_Occupied::
      ClassRef_SpaceByFunction ()
      {
        return this->ClassRef_SpaceByFunction_;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_type& x)
      {
        this->ClassRef_SpaceByFunction_.set (x);
      }

      void SimSpace_Occupied::
      ClassRef_SpaceByFunction (const ClassRef_SpaceByFunction_optional& x)
      {
        this->ClassRef_SpaceByFunction_ = x;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceByFunction (::std::auto_ptr< ClassRef_SpaceByFunction_type > x)
      {
        this->ClassRef_SpaceByFunction_.set (x);
      }

      const SimSpace_Occupied::ClassRef_SpaceTypeOwner_optional& SimSpace_Occupied::
      ClassRef_SpaceTypeOwner () const
      {
        return this->ClassRef_SpaceTypeOwner_;
      }

      SimSpace_Occupied::ClassRef_SpaceTypeOwner_optional& SimSpace_Occupied::
      ClassRef_SpaceTypeOwner ()
      {
        return this->ClassRef_SpaceTypeOwner_;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_type& x)
      {
        this->ClassRef_SpaceTypeOwner_.set (x);
      }

      void SimSpace_Occupied::
      ClassRef_SpaceTypeOwner (const ClassRef_SpaceTypeOwner_optional& x)
      {
        this->ClassRef_SpaceTypeOwner_ = x;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceTypeOwner (::std::auto_ptr< ClassRef_SpaceTypeOwner_type > x)
      {
        this->ClassRef_SpaceTypeOwner_.set (x);
      }

      const SimSpace_Occupied::ClassRef_SpaceCategoryOwner_optional& SimSpace_Occupied::
      ClassRef_SpaceCategoryOwner () const
      {
        return this->ClassRef_SpaceCategoryOwner_;
      }

      SimSpace_Occupied::ClassRef_SpaceCategoryOwner_optional& SimSpace_Occupied::
      ClassRef_SpaceCategoryOwner ()
      {
        return this->ClassRef_SpaceCategoryOwner_;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_type& x)
      {
        this->ClassRef_SpaceCategoryOwner_.set (x);
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryOwner (const ClassRef_SpaceCategoryOwner_optional& x)
      {
        this->ClassRef_SpaceCategoryOwner_ = x;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryOwner (::std::auto_ptr< ClassRef_SpaceCategoryOwner_type > x)
      {
        this->ClassRef_SpaceCategoryOwner_.set (x);
      }

      const SimSpace_Occupied::ClassRef_SpaceCategoryBOMA_optional& SimSpace_Occupied::
      ClassRef_SpaceCategoryBOMA () const
      {
        return this->ClassRef_SpaceCategoryBOMA_;
      }

      SimSpace_Occupied::ClassRef_SpaceCategoryBOMA_optional& SimSpace_Occupied::
      ClassRef_SpaceCategoryBOMA ()
      {
        return this->ClassRef_SpaceCategoryBOMA_;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_type& x)
      {
        this->ClassRef_SpaceCategoryBOMA_.set (x);
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryBOMA (const ClassRef_SpaceCategoryBOMA_optional& x)
      {
        this->ClassRef_SpaceCategoryBOMA_ = x;
      }

      void SimSpace_Occupied::
      ClassRef_SpaceCategoryBOMA (::std::auto_ptr< ClassRef_SpaceCategoryBOMA_type > x)
      {
        this->ClassRef_SpaceCategoryBOMA_.set (x);
      }

      const SimSpace_Occupied::SpaceOccupants_optional& SimSpace_Occupied::
      SpaceOccupants () const
      {
        return this->SpaceOccupants_;
      }

      SimSpace_Occupied::SpaceOccupants_optional& SimSpace_Occupied::
      SpaceOccupants ()
      {
        return this->SpaceOccupants_;
      }

      void SimSpace_Occupied::
      SpaceOccupants (const SpaceOccupants_type& x)
      {
        this->SpaceOccupants_.set (x);
      }

      void SimSpace_Occupied::
      SpaceOccupants (const SpaceOccupants_optional& x)
      {
        this->SpaceOccupants_ = x;
      }

      void SimSpace_Occupied::
      SpaceOccupants (::std::auto_ptr< SpaceOccupants_type > x)
      {
        this->SpaceOccupants_.set (x);
      }

      const SimSpace_Occupied::OccupancyScheduleAssignment_optional& SimSpace_Occupied::
      OccupancyScheduleAssignment () const
      {
        return this->OccupancyScheduleAssignment_;
      }

      SimSpace_Occupied::OccupancyScheduleAssignment_optional& SimSpace_Occupied::
      OccupancyScheduleAssignment ()
      {
        return this->OccupancyScheduleAssignment_;
      }

      void SimSpace_Occupied::
      OccupancyScheduleAssignment (const OccupancyScheduleAssignment_type& x)
      {
        this->OccupancyScheduleAssignment_.set (x);
      }

      void SimSpace_Occupied::
      OccupancyScheduleAssignment (const OccupancyScheduleAssignment_optional& x)
      {
        this->OccupancyScheduleAssignment_ = x;
      }

      void SimSpace_Occupied::
      OccupancyScheduleAssignment (::std::auto_ptr< OccupancyScheduleAssignment_type > x)
      {
        this->OccupancyScheduleAssignment_.set (x);
      }

      const SimSpace_Occupied::LightingScheduleAssignment_optional& SimSpace_Occupied::
      LightingScheduleAssignment () const
      {
        return this->LightingScheduleAssignment_;
      }

      SimSpace_Occupied::LightingScheduleAssignment_optional& SimSpace_Occupied::
      LightingScheduleAssignment ()
      {
        return this->LightingScheduleAssignment_;
      }

      void SimSpace_Occupied::
      LightingScheduleAssignment (const LightingScheduleAssignment_type& x)
      {
        this->LightingScheduleAssignment_.set (x);
      }

      void SimSpace_Occupied::
      LightingScheduleAssignment (const LightingScheduleAssignment_optional& x)
      {
        this->LightingScheduleAssignment_ = x;
      }

      void SimSpace_Occupied::
      LightingScheduleAssignment (::std::auto_ptr< LightingScheduleAssignment_type > x)
      {
        this->LightingScheduleAssignment_.set (x);
      }

      const SimSpace_Occupied::EquipmentScheduleAssignment_optional& SimSpace_Occupied::
      EquipmentScheduleAssignment () const
      {
        return this->EquipmentScheduleAssignment_;
      }

      SimSpace_Occupied::EquipmentScheduleAssignment_optional& SimSpace_Occupied::
      EquipmentScheduleAssignment ()
      {
        return this->EquipmentScheduleAssignment_;
      }

      void SimSpace_Occupied::
      EquipmentScheduleAssignment (const EquipmentScheduleAssignment_type& x)
      {
        this->EquipmentScheduleAssignment_.set (x);
      }

      void SimSpace_Occupied::
      EquipmentScheduleAssignment (const EquipmentScheduleAssignment_optional& x)
      {
        this->EquipmentScheduleAssignment_ = x;
      }

      void SimSpace_Occupied::
      EquipmentScheduleAssignment (::std::auto_ptr< EquipmentScheduleAssignment_type > x)
      {
        this->EquipmentScheduleAssignment_.set (x);
      }

      const SimSpace_Occupied::SpaceInSpatialContainer_optional& SimSpace_Occupied::
      SpaceInSpatialContainer () const
      {
        return this->SpaceInSpatialContainer_;
      }

      SimSpace_Occupied::SpaceInSpatialContainer_optional& SimSpace_Occupied::
      SpaceInSpatialContainer ()
      {
        return this->SpaceInSpatialContainer_;
      }

      void SimSpace_Occupied::
      SpaceInSpatialContainer (const SpaceInSpatialContainer_type& x)
      {
        this->SpaceInSpatialContainer_.set (x);
      }

      void SimSpace_Occupied::
      SpaceInSpatialContainer (const SpaceInSpatialContainer_optional& x)
      {
        this->SpaceInSpatialContainer_ = x;
      }

      void SimSpace_Occupied::
      SpaceInSpatialContainer (::std::auto_ptr< SpaceInSpatialContainer_type > x)
      {
        this->SpaceInSpatialContainer_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSpace_Occupied
      //

      SimSpace_Occupied::
      SimSpace_Occupied (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSpace (RefId),
        SpaceNumber_ (this),
        SpaceName_ (this),
        SpaceInteriorOrExterior_ (this),
        SpaceThermalSimulationType_ (this),
        SpaceConditioningRequirement_ (this),
        SpaceOccupantDensity_ (this),
        SpaceOccupantHeatRateLatent_ (this),
        SpaceOccupantHeatRateSensible_ (this),
        SpaceOccupantLoad_ (this),
        SpaceEquipmentLoad_ (this),
        SpaceLightingLoad_ (this),
        InsideDryBulbTempHeating_ (this),
        InsideRelHumidityHeating_ (this),
        InsideDryBulbTempCooling_ (this),
        InsideRelHumidityCooling_ (this),
        IncludesReturnAirPlenum_ (this),
        PeakAirFlowCooling_ (this),
        PeakAirFlowHeating_ (this),
        ExhaustAirFlowRate_ (this),
        NaturalAirChangeRate_ (this),
        MechanicalAirChangeRate_ (this),
        VentilationType_ (this),
        OutsideAirPerPerson_ (this),
        SpaceHeight_ (this),
        SpaceGrossPerimeter_ (this),
        SpaceGrossFloorArea_ (this),
        SpaceNetFloorArea_ (this),
        SpaceGrossVolume_ (this),
        SpaceNetVolume_ (this),
        SpaceNetFloorAreaBOMA_ (this),
        SpaceUsableFloorAreaBOMA_ (this),
        ClassRef_SpaceByFunction_ (this),
        ClassRef_SpaceTypeOwner_ (this),
        ClassRef_SpaceCategoryOwner_ (this),
        ClassRef_SpaceCategoryBOMA_ (this),
        SpaceOccupants_ (this),
        OccupancyScheduleAssignment_ (this),
        LightingScheduleAssignment_ (this),
        EquipmentScheduleAssignment_ (this),
        SpaceInSpatialContainer_ (this)
      {
      }

      SimSpace_Occupied::
      SimSpace_Occupied (const SimSpace_Occupied& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpace (x, f, c),
        SpaceNumber_ (x.SpaceNumber_, f, this),
        SpaceName_ (x.SpaceName_, f, this),
        SpaceInteriorOrExterior_ (x.SpaceInteriorOrExterior_, f, this),
        SpaceThermalSimulationType_ (x.SpaceThermalSimulationType_, f, this),
        SpaceConditioningRequirement_ (x.SpaceConditioningRequirement_, f, this),
        SpaceOccupantDensity_ (x.SpaceOccupantDensity_, f, this),
        SpaceOccupantHeatRateLatent_ (x.SpaceOccupantHeatRateLatent_, f, this),
        SpaceOccupantHeatRateSensible_ (x.SpaceOccupantHeatRateSensible_, f, this),
        SpaceOccupantLoad_ (x.SpaceOccupantLoad_, f, this),
        SpaceEquipmentLoad_ (x.SpaceEquipmentLoad_, f, this),
        SpaceLightingLoad_ (x.SpaceLightingLoad_, f, this),
        InsideDryBulbTempHeating_ (x.InsideDryBulbTempHeating_, f, this),
        InsideRelHumidityHeating_ (x.InsideRelHumidityHeating_, f, this),
        InsideDryBulbTempCooling_ (x.InsideDryBulbTempCooling_, f, this),
        InsideRelHumidityCooling_ (x.InsideRelHumidityCooling_, f, this),
        IncludesReturnAirPlenum_ (x.IncludesReturnAirPlenum_, f, this),
        PeakAirFlowCooling_ (x.PeakAirFlowCooling_, f, this),
        PeakAirFlowHeating_ (x.PeakAirFlowHeating_, f, this),
        ExhaustAirFlowRate_ (x.ExhaustAirFlowRate_, f, this),
        NaturalAirChangeRate_ (x.NaturalAirChangeRate_, f, this),
        MechanicalAirChangeRate_ (x.MechanicalAirChangeRate_, f, this),
        VentilationType_ (x.VentilationType_, f, this),
        OutsideAirPerPerson_ (x.OutsideAirPerPerson_, f, this),
        SpaceHeight_ (x.SpaceHeight_, f, this),
        SpaceGrossPerimeter_ (x.SpaceGrossPerimeter_, f, this),
        SpaceGrossFloorArea_ (x.SpaceGrossFloorArea_, f, this),
        SpaceNetFloorArea_ (x.SpaceNetFloorArea_, f, this),
        SpaceGrossVolume_ (x.SpaceGrossVolume_, f, this),
        SpaceNetVolume_ (x.SpaceNetVolume_, f, this),
        SpaceNetFloorAreaBOMA_ (x.SpaceNetFloorAreaBOMA_, f, this),
        SpaceUsableFloorAreaBOMA_ (x.SpaceUsableFloorAreaBOMA_, f, this),
        ClassRef_SpaceByFunction_ (x.ClassRef_SpaceByFunction_, f, this),
        ClassRef_SpaceTypeOwner_ (x.ClassRef_SpaceTypeOwner_, f, this),
        ClassRef_SpaceCategoryOwner_ (x.ClassRef_SpaceCategoryOwner_, f, this),
        ClassRef_SpaceCategoryBOMA_ (x.ClassRef_SpaceCategoryBOMA_, f, this),
        SpaceOccupants_ (x.SpaceOccupants_, f, this),
        OccupancyScheduleAssignment_ (x.OccupancyScheduleAssignment_, f, this),
        LightingScheduleAssignment_ (x.LightingScheduleAssignment_, f, this),
        EquipmentScheduleAssignment_ (x.EquipmentScheduleAssignment_, f, this),
        SpaceInSpatialContainer_ (x.SpaceInSpatialContainer_, f, this)
      {
      }

      SimSpace_Occupied::
      SimSpace_Occupied (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpace (e, f | ::xml_schema::flags::base, c),
        SpaceNumber_ (this),
        SpaceName_ (this),
        SpaceInteriorOrExterior_ (this),
        SpaceThermalSimulationType_ (this),
        SpaceConditioningRequirement_ (this),
        SpaceOccupantDensity_ (this),
        SpaceOccupantHeatRateLatent_ (this),
        SpaceOccupantHeatRateSensible_ (this),
        SpaceOccupantLoad_ (this),
        SpaceEquipmentLoad_ (this),
        SpaceLightingLoad_ (this),
        InsideDryBulbTempHeating_ (this),
        InsideRelHumidityHeating_ (this),
        InsideDryBulbTempCooling_ (this),
        InsideRelHumidityCooling_ (this),
        IncludesReturnAirPlenum_ (this),
        PeakAirFlowCooling_ (this),
        PeakAirFlowHeating_ (this),
        ExhaustAirFlowRate_ (this),
        NaturalAirChangeRate_ (this),
        MechanicalAirChangeRate_ (this),
        VentilationType_ (this),
        OutsideAirPerPerson_ (this),
        SpaceHeight_ (this),
        SpaceGrossPerimeter_ (this),
        SpaceGrossFloorArea_ (this),
        SpaceNetFloorArea_ (this),
        SpaceGrossVolume_ (this),
        SpaceNetVolume_ (this),
        SpaceNetFloorAreaBOMA_ (this),
        SpaceUsableFloorAreaBOMA_ (this),
        ClassRef_SpaceByFunction_ (this),
        ClassRef_SpaceTypeOwner_ (this),
        ClassRef_SpaceCategoryOwner_ (this),
        ClassRef_SpaceCategoryBOMA_ (this),
        SpaceOccupants_ (this),
        OccupancyScheduleAssignment_ (this),
        LightingScheduleAssignment_ (this),
        EquipmentScheduleAssignment_ (this),
        SpaceInSpatialContainer_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpace_Occupied::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSpace::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SpaceNumber
          //
          if (n.name () == "SpaceNumber" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceNumber_type > r (
              SpaceNumber_traits::create (i, f, this));

            if (!this->SpaceNumber_)
            {
              this->SpaceNumber_.set (r);
              continue;
            }
          }

          // SpaceName
          //
          if (n.name () == "SpaceName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceName_type > r (
              SpaceName_traits::create (i, f, this));

            if (!this->SpaceName_)
            {
              this->SpaceName_.set (r);
              continue;
            }
          }

          // SpaceInteriorOrExterior
          //
          if (n.name () == "SpaceInteriorOrExterior" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceInteriorOrExterior_type > r (
              SpaceInteriorOrExterior_traits::create (i, f, this));

            if (!this->SpaceInteriorOrExterior_)
            {
              this->SpaceInteriorOrExterior_.set (r);
              continue;
            }
          }

          // SpaceThermalSimulationType
          //
          if (n.name () == "SpaceThermalSimulationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceThermalSimulationType_type > r (
              SpaceThermalSimulationType_traits::create (i, f, this));

            if (!this->SpaceThermalSimulationType_)
            {
              this->SpaceThermalSimulationType_.set (r);
              continue;
            }
          }

          // SpaceConditioningRequirement
          //
          if (n.name () == "SpaceConditioningRequirement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceConditioningRequirement_type > r (
              SpaceConditioningRequirement_traits::create (i, f, this));

            if (!this->SpaceConditioningRequirement_)
            {
              this->SpaceConditioningRequirement_.set (r);
              continue;
            }
          }

          // SpaceOccupantDensity
          //
          if (n.name () == "SpaceOccupantDensity" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceOccupantDensity_)
            {
              this->SpaceOccupantDensity_.set (SpaceOccupantDensity_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantHeatRateLatent
          //
          if (n.name () == "SpaceOccupantHeatRateLatent" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceOccupantHeatRateLatent_)
            {
              this->SpaceOccupantHeatRateLatent_.set (SpaceOccupantHeatRateLatent_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantHeatRateSensible
          //
          if (n.name () == "SpaceOccupantHeatRateSensible" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceOccupantHeatRateSensible_)
            {
              this->SpaceOccupantHeatRateSensible_.set (SpaceOccupantHeatRateSensible_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceOccupantLoad
          //
          if (n.name () == "SpaceOccupantLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceOccupantLoad_)
            {
              this->SpaceOccupantLoad_.set (SpaceOccupantLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceEquipmentLoad
          //
          if (n.name () == "SpaceEquipmentLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceEquipmentLoad_)
            {
              this->SpaceEquipmentLoad_.set (SpaceEquipmentLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceLightingLoad
          //
          if (n.name () == "SpaceLightingLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceLightingLoad_)
            {
              this->SpaceLightingLoad_.set (SpaceLightingLoad_traits::create (i, f, this));
              continue;
            }
          }

          // InsideDryBulbTempHeating
          //
          if (n.name () == "InsideDryBulbTempHeating" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->InsideDryBulbTempHeating_)
            {
              this->InsideDryBulbTempHeating_.set (InsideDryBulbTempHeating_traits::create (i, f, this));
              continue;
            }
          }

          // InsideRelHumidityHeating
          //
          if (n.name () == "InsideRelHumidityHeating" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->InsideRelHumidityHeating_)
            {
              this->InsideRelHumidityHeating_.set (InsideRelHumidityHeating_traits::create (i, f, this));
              continue;
            }
          }

          // InsideDryBulbTempCooling
          //
          if (n.name () == "InsideDryBulbTempCooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->InsideDryBulbTempCooling_)
            {
              this->InsideDryBulbTempCooling_.set (InsideDryBulbTempCooling_traits::create (i, f, this));
              continue;
            }
          }

          // InsideRelHumidityCooling
          //
          if (n.name () == "InsideRelHumidityCooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->InsideRelHumidityCooling_)
            {
              this->InsideRelHumidityCooling_.set (InsideRelHumidityCooling_traits::create (i, f, this));
              continue;
            }
          }

          // IncludesReturnAirPlenum
          //
          if (n.name () == "IncludesReturnAirPlenum" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->IncludesReturnAirPlenum_)
            {
              this->IncludesReturnAirPlenum_.set (IncludesReturnAirPlenum_traits::create (i, f, this));
              continue;
            }
          }

          // PeakAirFlowCooling
          //
          if (n.name () == "PeakAirFlowCooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->PeakAirFlowCooling_)
            {
              this->PeakAirFlowCooling_.set (PeakAirFlowCooling_traits::create (i, f, this));
              continue;
            }
          }

          // PeakAirFlowHeating
          //
          if (n.name () == "PeakAirFlowHeating" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->PeakAirFlowHeating_)
            {
              this->PeakAirFlowHeating_.set (PeakAirFlowHeating_traits::create (i, f, this));
              continue;
            }
          }

          // ExhaustAirFlowRate
          //
          if (n.name () == "ExhaustAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->ExhaustAirFlowRate_)
            {
              this->ExhaustAirFlowRate_.set (ExhaustAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // NaturalAirChangeRate
          //
          if (n.name () == "NaturalAirChangeRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->NaturalAirChangeRate_)
            {
              this->NaturalAirChangeRate_.set (NaturalAirChangeRate_traits::create (i, f, this));
              continue;
            }
          }

          // MechanicalAirChangeRate
          //
          if (n.name () == "MechanicalAirChangeRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->MechanicalAirChangeRate_)
            {
              this->MechanicalAirChangeRate_.set (MechanicalAirChangeRate_traits::create (i, f, this));
              continue;
            }
          }

          // VentilationType
          //
          if (n.name () == "VentilationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VentilationType_type > r (
              VentilationType_traits::create (i, f, this));

            if (!this->VentilationType_)
            {
              this->VentilationType_.set (r);
              continue;
            }
          }

          // OutsideAirPerPerson
          //
          if (n.name () == "OutsideAirPerPerson" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->OutsideAirPerPerson_)
            {
              this->OutsideAirPerPerson_.set (OutsideAirPerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceHeight
          //
          if (n.name () == "SpaceHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceHeight_)
            {
              this->SpaceHeight_.set (SpaceHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceGrossPerimeter
          //
          if (n.name () == "SpaceGrossPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceGrossPerimeter_)
            {
              this->SpaceGrossPerimeter_.set (SpaceGrossPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceGrossFloorArea
          //
          if (n.name () == "SpaceGrossFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceGrossFloorArea_)
            {
              this->SpaceGrossFloorArea_.set (SpaceGrossFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceNetFloorArea
          //
          if (n.name () == "SpaceNetFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceNetFloorArea_)
            {
              this->SpaceNetFloorArea_.set (SpaceNetFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceGrossVolume
          //
          if (n.name () == "SpaceGrossVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceGrossVolume_)
            {
              this->SpaceGrossVolume_.set (SpaceGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceNetVolume
          //
          if (n.name () == "SpaceNetVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceNetVolume_)
            {
              this->SpaceNetVolume_.set (SpaceNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceNetFloorAreaBOMA
          //
          if (n.name () == "SpaceNetFloorAreaBOMA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceNetFloorAreaBOMA_)
            {
              this->SpaceNetFloorAreaBOMA_.set (SpaceNetFloorAreaBOMA_traits::create (i, f, this));
              continue;
            }
          }

          // SpaceUsableFloorAreaBOMA
          //
          if (n.name () == "SpaceUsableFloorAreaBOMA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SpaceUsableFloorAreaBOMA_)
            {
              this->SpaceUsableFloorAreaBOMA_.set (SpaceUsableFloorAreaBOMA_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_SpaceByFunction
          //
          if (n.name () == "ClassRef_SpaceByFunction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceByFunction_type > r (
              ClassRef_SpaceByFunction_traits::create (i, f, this));

            if (!this->ClassRef_SpaceByFunction_)
            {
              this->ClassRef_SpaceByFunction_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceTypeOwner
          //
          if (n.name () == "ClassRef_SpaceTypeOwner" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceTypeOwner_type > r (
              ClassRef_SpaceTypeOwner_traits::create (i, f, this));

            if (!this->ClassRef_SpaceTypeOwner_)
            {
              this->ClassRef_SpaceTypeOwner_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceCategoryOwner
          //
          if (n.name () == "ClassRef_SpaceCategoryOwner" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceCategoryOwner_type > r (
              ClassRef_SpaceCategoryOwner_traits::create (i, f, this));

            if (!this->ClassRef_SpaceCategoryOwner_)
            {
              this->ClassRef_SpaceCategoryOwner_.set (r);
              continue;
            }
          }

          // ClassRef_SpaceCategoryBOMA
          //
          if (n.name () == "ClassRef_SpaceCategoryBOMA" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_SpaceCategoryBOMA_type > r (
              ClassRef_SpaceCategoryBOMA_traits::create (i, f, this));

            if (!this->ClassRef_SpaceCategoryBOMA_)
            {
              this->ClassRef_SpaceCategoryBOMA_.set (r);
              continue;
            }
          }

          // SpaceOccupants
          //
          if (n.name () == "SpaceOccupants" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceOccupants_type > r (
              SpaceOccupants_traits::create (i, f, this));

            if (!this->SpaceOccupants_)
            {
              this->SpaceOccupants_.set (r);
              continue;
            }
          }

          // OccupancyScheduleAssignment
          //
          if (n.name () == "OccupancyScheduleAssignment" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< OccupancyScheduleAssignment_type > r (
              OccupancyScheduleAssignment_traits::create (i, f, this));

            if (!this->OccupancyScheduleAssignment_)
            {
              this->OccupancyScheduleAssignment_.set (r);
              continue;
            }
          }

          // LightingScheduleAssignment
          //
          if (n.name () == "LightingScheduleAssignment" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< LightingScheduleAssignment_type > r (
              LightingScheduleAssignment_traits::create (i, f, this));

            if (!this->LightingScheduleAssignment_)
            {
              this->LightingScheduleAssignment_.set (r);
              continue;
            }
          }

          // EquipmentScheduleAssignment
          //
          if (n.name () == "EquipmentScheduleAssignment" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< EquipmentScheduleAssignment_type > r (
              EquipmentScheduleAssignment_traits::create (i, f, this));

            if (!this->EquipmentScheduleAssignment_)
            {
              this->EquipmentScheduleAssignment_.set (r);
              continue;
            }
          }

          // SpaceInSpatialContainer
          //
          if (n.name () == "SpaceInSpatialContainer" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SpaceInSpatialContainer_type > r (
              SpaceInSpatialContainer_traits::create (i, f, this));

            if (!this->SpaceInSpatialContainer_)
            {
              this->SpaceInSpatialContainer_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSpace_Occupied* SimSpace_Occupied::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpace_Occupied (*this, f, c);
      }

      SimSpace_Occupied& SimSpace_Occupied::
      operator= (const SimSpace_Occupied& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSpace& > (*this) = x;
          this->SpaceNumber_ = x.SpaceNumber_;
          this->SpaceName_ = x.SpaceName_;
          this->SpaceInteriorOrExterior_ = x.SpaceInteriorOrExterior_;
          this->SpaceThermalSimulationType_ = x.SpaceThermalSimulationType_;
          this->SpaceConditioningRequirement_ = x.SpaceConditioningRequirement_;
          this->SpaceOccupantDensity_ = x.SpaceOccupantDensity_;
          this->SpaceOccupantHeatRateLatent_ = x.SpaceOccupantHeatRateLatent_;
          this->SpaceOccupantHeatRateSensible_ = x.SpaceOccupantHeatRateSensible_;
          this->SpaceOccupantLoad_ = x.SpaceOccupantLoad_;
          this->SpaceEquipmentLoad_ = x.SpaceEquipmentLoad_;
          this->SpaceLightingLoad_ = x.SpaceLightingLoad_;
          this->InsideDryBulbTempHeating_ = x.InsideDryBulbTempHeating_;
          this->InsideRelHumidityHeating_ = x.InsideRelHumidityHeating_;
          this->InsideDryBulbTempCooling_ = x.InsideDryBulbTempCooling_;
          this->InsideRelHumidityCooling_ = x.InsideRelHumidityCooling_;
          this->IncludesReturnAirPlenum_ = x.IncludesReturnAirPlenum_;
          this->PeakAirFlowCooling_ = x.PeakAirFlowCooling_;
          this->PeakAirFlowHeating_ = x.PeakAirFlowHeating_;
          this->ExhaustAirFlowRate_ = x.ExhaustAirFlowRate_;
          this->NaturalAirChangeRate_ = x.NaturalAirChangeRate_;
          this->MechanicalAirChangeRate_ = x.MechanicalAirChangeRate_;
          this->VentilationType_ = x.VentilationType_;
          this->OutsideAirPerPerson_ = x.OutsideAirPerPerson_;
          this->SpaceHeight_ = x.SpaceHeight_;
          this->SpaceGrossPerimeter_ = x.SpaceGrossPerimeter_;
          this->SpaceGrossFloorArea_ = x.SpaceGrossFloorArea_;
          this->SpaceNetFloorArea_ = x.SpaceNetFloorArea_;
          this->SpaceGrossVolume_ = x.SpaceGrossVolume_;
          this->SpaceNetVolume_ = x.SpaceNetVolume_;
          this->SpaceNetFloorAreaBOMA_ = x.SpaceNetFloorAreaBOMA_;
          this->SpaceUsableFloorAreaBOMA_ = x.SpaceUsableFloorAreaBOMA_;
          this->ClassRef_SpaceByFunction_ = x.ClassRef_SpaceByFunction_;
          this->ClassRef_SpaceTypeOwner_ = x.ClassRef_SpaceTypeOwner_;
          this->ClassRef_SpaceCategoryOwner_ = x.ClassRef_SpaceCategoryOwner_;
          this->ClassRef_SpaceCategoryBOMA_ = x.ClassRef_SpaceCategoryBOMA_;
          this->SpaceOccupants_ = x.SpaceOccupants_;
          this->OccupancyScheduleAssignment_ = x.OccupancyScheduleAssignment_;
          this->LightingScheduleAssignment_ = x.LightingScheduleAssignment_;
          this->EquipmentScheduleAssignment_ = x.EquipmentScheduleAssignment_;
          this->SpaceInSpatialContainer_ = x.SpaceInSpatialContainer_;
        }

        return *this;
      }

      SimSpace_Occupied::
      ~SimSpace_Occupied ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

