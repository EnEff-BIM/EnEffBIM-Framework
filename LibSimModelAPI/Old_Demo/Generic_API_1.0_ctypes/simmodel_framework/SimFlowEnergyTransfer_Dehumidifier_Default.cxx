// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_Dehumidifier_Default.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Dehumidifier_Default
      // 

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_SensorNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_SensorNodeName () const
      {
        return this->SimFlowEnergyTrans_SensorNodeName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_SensorNodeName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_SensorNodeName ()
      {
        return this->SimFlowEnergyTrans_SensorNodeName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_SensorNodeName (const SimFlowEnergyTrans_SensorNodeName_type& x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_SensorNodeName (const SimFlowEnergyTrans_SensorNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_SensorNodeName (::std::auto_ptr< SimFlowEnergyTrans_SensorNodeName_type > x)
      {
        this->SimFlowEnergyTrans_SensorNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_DesiccantHeatExchngObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngObjType () const
      {
        return this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_DesiccantHeatExchngObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngObjType ()
      {
        return this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngObjType (const SimFlowEnergyTrans_DesiccantHeatExchngObjType_type& x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngObjType (const SimFlowEnergyTrans_DesiccantHeatExchngObjType_optional& x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngObjType (::std::auto_ptr< SimFlowEnergyTrans_DesiccantHeatExchngObjType_type > x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_DesiccantHeatExchngName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngName () const
      {
        return this->SimFlowEnergyTrans_DesiccantHeatExchngName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_DesiccantHeatExchngName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngName ()
      {
        return this->SimFlowEnergyTrans_DesiccantHeatExchngName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngName (const SimFlowEnergyTrans_DesiccantHeatExchngName_type& x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngName (const SimFlowEnergyTrans_DesiccantHeatExchngName_optional& x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_DesiccantHeatExchngName (::std::auto_ptr< SimFlowEnergyTrans_DesiccantHeatExchngName_type > x)
      {
        this->SimFlowEnergyTrans_DesiccantHeatExchngName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanObjType () const
      {
        return this->SimFlowEnergyTrans_RegenAirFanObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanObjType ()
      {
        return this->SimFlowEnergyTrans_RegenAirFanObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanObjType (const SimFlowEnergyTrans_RegenAirFanObjType_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanObjType (const SimFlowEnergyTrans_RegenAirFanObjType_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanObjType_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirFanObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanName () const
      {
        return this->SimFlowEnergyTrans_RegenAirFanName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanName ()
      {
        return this->SimFlowEnergyTrans_RegenAirFanName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanName (const SimFlowEnergyTrans_RegenAirFanName_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanName (const SimFlowEnergyTrans_RegenAirFanName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanName (::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanName_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirFanName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanPlacement_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanPlacement () const
      {
        return this->SimFlowEnergyTrans_RegenAirFanPlacement_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirFanPlacement_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanPlacement ()
      {
        return this->SimFlowEnergyTrans_RegenAirFanPlacement_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanPlacement (const SimFlowEnergyTrans_RegenAirFanPlacement_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanPlacement_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanPlacement (const SimFlowEnergyTrans_RegenAirFanPlacement_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirFanPlacement_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirFanPlacement (::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanPlacement_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirFanPlacement_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirHeatObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatObjType () const
      {
        return this->SimFlowEnergyTrans_RegenAirHeatObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirHeatObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatObjType ()
      {
        return this->SimFlowEnergyTrans_RegenAirHeatObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatObjType (const SimFlowEnergyTrans_RegenAirHeatObjType_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatObjType (const SimFlowEnergyTrans_RegenAirHeatObjType_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatObjType (::std::auto_ptr< SimFlowEnergyTrans_RegenAirHeatObjType_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirHeatName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatName () const
      {
        return this->SimFlowEnergyTrans_RegenAirHeatName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenAirHeatName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatName ()
      {
        return this->SimFlowEnergyTrans_RegenAirHeatName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatName (const SimFlowEnergyTrans_RegenAirHeatName_type& x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatName (const SimFlowEnergyTrans_RegenAirHeatName_optional& x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenAirHeatName (::std::auto_ptr< SimFlowEnergyTrans_RegenAirHeatName_type > x)
      {
        this->SimFlowEnergyTrans_RegenAirHeatName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenInletAirSetpointTemp_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenInletAirSetpointTemp () const
      {
        return this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_RegenInletAirSetpointTemp_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenInletAirSetpointTemp ()
      {
        return this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenInletAirSetpointTemp (const SimFlowEnergyTrans_RegenInletAirSetpointTemp_type& x)
      {
        this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_RegenInletAirSetpointTemp (const SimFlowEnergyTrans_RegenInletAirSetpointTemp_optional& x)
      {
        this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilObjType () const
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilObjType_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilObjType ()
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilObjType (const SimFlowEnergyTrans_CompanionCoolingCoilObjType_type& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilObjType (const SimFlowEnergyTrans_CompanionCoolingCoilObjType_optional& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilObjType (::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilObjType_type > x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilName () const
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilName ()
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilName (const SimFlowEnergyTrans_CompanionCoolingCoilName_type& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilName (const SimFlowEnergyTrans_CompanionCoolingCoilName_optional& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilName (::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilName_type > x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilName_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet () const
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet ()
      {
        return this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet (const SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_type& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet (const SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_optional& x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet (::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_type > x)
      {
        this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoilRegenAirHeating_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoilRegenAirHeating () const
      {
        return this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_CompanionCoilRegenAirHeating_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoilRegenAirHeating ()
      {
        return this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoilRegenAirHeating (const SimFlowEnergyTrans_CompanionCoilRegenAirHeating_type& x)
      {
        this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoilRegenAirHeating (const SimFlowEnergyTrans_CompanionCoilRegenAirHeating_optional& x)
      {
        this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_CompanionCoilRegenAirHeating (::std::auto_ptr< SimFlowEnergyTrans_CompanionCoilRegenAirHeating_type > x)
      {
        this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_.set (x);
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanMaxFlowRate_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxFlowRate () const
      {
        return this->SimFlowEnergyTrans_ExhFanMaxFlowRate_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanMaxFlowRate_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxFlowRate ()
      {
        return this->SimFlowEnergyTrans_ExhFanMaxFlowRate_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxFlowRate (const SimFlowEnergyTrans_ExhFanMaxFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_ExhFanMaxFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxFlowRate (const SimFlowEnergyTrans_ExhFanMaxFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_ExhFanMaxFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanMaxPwr_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxPwr () const
      {
        return this->SimFlowEnergyTrans_ExhFanMaxPwr_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanMaxPwr_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxPwr ()
      {
        return this->SimFlowEnergyTrans_ExhFanMaxPwr_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxPwr (const SimFlowEnergyTrans_ExhFanMaxPwr_type& x)
      {
        this->SimFlowEnergyTrans_ExhFanMaxPwr_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanMaxPwr (const SimFlowEnergyTrans_ExhFanMaxPwr_optional& x)
      {
        this->SimFlowEnergyTrans_ExhFanMaxPwr_ = x;
      }

      const SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanPwrCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanPwrCurveName () const
      {
        return this->SimFlowEnergyTrans_ExhFanPwrCurveName_;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::SimFlowEnergyTrans_ExhFanPwrCurveName_optional& SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanPwrCurveName ()
      {
        return this->SimFlowEnergyTrans_ExhFanPwrCurveName_;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanPwrCurveName (const SimFlowEnergyTrans_ExhFanPwrCurveName_type& x)
      {
        this->SimFlowEnergyTrans_ExhFanPwrCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanPwrCurveName (const SimFlowEnergyTrans_ExhFanPwrCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_ExhFanPwrCurveName_ = x;
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTrans_ExhFanPwrCurveName (::std::auto_ptr< SimFlowEnergyTrans_ExhFanPwrCurveName_type > x)
      {
        this->SimFlowEnergyTrans_ExhFanPwrCurveName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Dehumidifier_Default
      //

      SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTransfer_Dehumidifier_Default (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (RefId),
        SimFlowEnergyTrans_SensorNodeName_ (this),
        SimFlowEnergyTrans_DesiccantHeatExchngObjType_ (this),
        SimFlowEnergyTrans_DesiccantHeatExchngName_ (this),
        SimFlowEnergyTrans_RegenAirFanObjType_ (this),
        SimFlowEnergyTrans_RegenAirFanName_ (this),
        SimFlowEnergyTrans_RegenAirFanPlacement_ (this),
        SimFlowEnergyTrans_RegenAirHeatObjType_ (this),
        SimFlowEnergyTrans_RegenAirHeatName_ (this),
        SimFlowEnergyTrans_RegenInletAirSetpointTemp_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilObjType_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilName_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_ (this),
        SimFlowEnergyTrans_CompanionCoilRegenAirHeating_ (this),
        SimFlowEnergyTrans_ExhFanMaxFlowRate_ (this),
        SimFlowEnergyTrans_ExhFanMaxPwr_ (this),
        SimFlowEnergyTrans_ExhFanPwrCurveName_ (this)
      {
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTransfer_Dehumidifier_Default (const SimFlowEnergyTransfer_Dehumidifier_Default& x,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (x, f, c),
        SimFlowEnergyTrans_SensorNodeName_ (x.SimFlowEnergyTrans_SensorNodeName_, f, this),
        SimFlowEnergyTrans_DesiccantHeatExchngObjType_ (x.SimFlowEnergyTrans_DesiccantHeatExchngObjType_, f, this),
        SimFlowEnergyTrans_DesiccantHeatExchngName_ (x.SimFlowEnergyTrans_DesiccantHeatExchngName_, f, this),
        SimFlowEnergyTrans_RegenAirFanObjType_ (x.SimFlowEnergyTrans_RegenAirFanObjType_, f, this),
        SimFlowEnergyTrans_RegenAirFanName_ (x.SimFlowEnergyTrans_RegenAirFanName_, f, this),
        SimFlowEnergyTrans_RegenAirFanPlacement_ (x.SimFlowEnergyTrans_RegenAirFanPlacement_, f, this),
        SimFlowEnergyTrans_RegenAirHeatObjType_ (x.SimFlowEnergyTrans_RegenAirHeatObjType_, f, this),
        SimFlowEnergyTrans_RegenAirHeatName_ (x.SimFlowEnergyTrans_RegenAirHeatName_, f, this),
        SimFlowEnergyTrans_RegenInletAirSetpointTemp_ (x.SimFlowEnergyTrans_RegenInletAirSetpointTemp_, f, this),
        SimFlowEnergyTrans_CompanionCoolingCoilObjType_ (x.SimFlowEnergyTrans_CompanionCoolingCoilObjType_, f, this),
        SimFlowEnergyTrans_CompanionCoolingCoilName_ (x.SimFlowEnergyTrans_CompanionCoolingCoilName_, f, this),
        SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_ (x.SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_, f, this),
        SimFlowEnergyTrans_CompanionCoilRegenAirHeating_ (x.SimFlowEnergyTrans_CompanionCoilRegenAirHeating_, f, this),
        SimFlowEnergyTrans_ExhFanMaxFlowRate_ (x.SimFlowEnergyTrans_ExhFanMaxFlowRate_, f, this),
        SimFlowEnergyTrans_ExhFanMaxPwr_ (x.SimFlowEnergyTrans_ExhFanMaxPwr_, f, this),
        SimFlowEnergyTrans_ExhFanPwrCurveName_ (x.SimFlowEnergyTrans_ExhFanPwrCurveName_, f, this)
      {
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::
      SimFlowEnergyTransfer_Dehumidifier_Default (const ::xercesc::DOMElement& e,
                                                  ::xml_schema::flags f,
                                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_SensorNodeName_ (this),
        SimFlowEnergyTrans_DesiccantHeatExchngObjType_ (this),
        SimFlowEnergyTrans_DesiccantHeatExchngName_ (this),
        SimFlowEnergyTrans_RegenAirFanObjType_ (this),
        SimFlowEnergyTrans_RegenAirFanName_ (this),
        SimFlowEnergyTrans_RegenAirFanPlacement_ (this),
        SimFlowEnergyTrans_RegenAirHeatObjType_ (this),
        SimFlowEnergyTrans_RegenAirHeatName_ (this),
        SimFlowEnergyTrans_RegenInletAirSetpointTemp_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilObjType_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilName_ (this),
        SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_ (this),
        SimFlowEnergyTrans_CompanionCoilRegenAirHeating_ (this),
        SimFlowEnergyTrans_ExhFanMaxFlowRate_ (this),
        SimFlowEnergyTrans_ExhFanMaxPwr_ (this),
        SimFlowEnergyTrans_ExhFanPwrCurveName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_Dehumidifier_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_SensorNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_SensorNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SensorNodeName_type > r (
              SimFlowEnergyTrans_SensorNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SensorNodeName_)
            {
              this->SimFlowEnergyTrans_SensorNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DesiccantHeatExchngObjType
          //
          if (n.name () == "SimFlowEnergyTrans_DesiccantHeatExchngObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DesiccantHeatExchngObjType_type > r (
              SimFlowEnergyTrans_DesiccantHeatExchngObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_)
            {
              this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DesiccantHeatExchngName
          //
          if (n.name () == "SimFlowEnergyTrans_DesiccantHeatExchngName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DesiccantHeatExchngName_type > r (
              SimFlowEnergyTrans_DesiccantHeatExchngName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DesiccantHeatExchngName_)
            {
              this->SimFlowEnergyTrans_DesiccantHeatExchngName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirFanObjType
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirFanObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanObjType_type > r (
              SimFlowEnergyTrans_RegenAirFanObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirFanObjType_)
            {
              this->SimFlowEnergyTrans_RegenAirFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirFanName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirFanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanName_type > r (
              SimFlowEnergyTrans_RegenAirFanName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirFanName_)
            {
              this->SimFlowEnergyTrans_RegenAirFanName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirFanPlacement
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirFanPlacement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirFanPlacement_type > r (
              SimFlowEnergyTrans_RegenAirFanPlacement_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirFanPlacement_)
            {
              this->SimFlowEnergyTrans_RegenAirFanPlacement_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirHeatObjType
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirHeatObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirHeatObjType_type > r (
              SimFlowEnergyTrans_RegenAirHeatObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirHeatObjType_)
            {
              this->SimFlowEnergyTrans_RegenAirHeatObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenAirHeatName
          //
          if (n.name () == "SimFlowEnergyTrans_RegenAirHeatName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_RegenAirHeatName_type > r (
              SimFlowEnergyTrans_RegenAirHeatName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_RegenAirHeatName_)
            {
              this->SimFlowEnergyTrans_RegenAirHeatName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RegenInletAirSetpointTemp
          //
          if (n.name () == "SimFlowEnergyTrans_RegenInletAirSetpointTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_)
            {
              this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_.set (SimFlowEnergyTrans_RegenInletAirSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CompanionCoolingCoilObjType
          //
          if (n.name () == "SimFlowEnergyTrans_CompanionCoolingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilObjType_type > r (
              SimFlowEnergyTrans_CompanionCoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_)
            {
              this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CompanionCoolingCoilName
          //
          if (n.name () == "SimFlowEnergyTrans_CompanionCoolingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilName_type > r (
              SimFlowEnergyTrans_CompanionCoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CompanionCoolingCoilName_)
            {
              this->SimFlowEnergyTrans_CompanionCoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet
          //
          if (n.name () == "SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_type > r (
              SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_)
            {
              this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CompanionCoilRegenAirHeating
          //
          if (n.name () == "SimFlowEnergyTrans_CompanionCoilRegenAirHeating" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CompanionCoilRegenAirHeating_type > r (
              SimFlowEnergyTrans_CompanionCoilRegenAirHeating_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_)
            {
              this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ExhFanMaxFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_ExhFanMaxFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_ExhFanMaxFlowRate_)
            {
              this->SimFlowEnergyTrans_ExhFanMaxFlowRate_.set (SimFlowEnergyTrans_ExhFanMaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ExhFanMaxPwr
          //
          if (n.name () == "SimFlowEnergyTrans_ExhFanMaxPwr" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_ExhFanMaxPwr_)
            {
              this->SimFlowEnergyTrans_ExhFanMaxPwr_.set (SimFlowEnergyTrans_ExhFanMaxPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ExhFanPwrCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_ExhFanPwrCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ExhFanPwrCurveName_type > r (
              SimFlowEnergyTrans_ExhFanPwrCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ExhFanPwrCurveName_)
            {
              this->SimFlowEnergyTrans_ExhFanPwrCurveName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_Dehumidifier_Default* SimFlowEnergyTransfer_Dehumidifier_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_Dehumidifier_Default (*this, f, c);
      }

      SimFlowEnergyTransfer_Dehumidifier_Default& SimFlowEnergyTransfer_Dehumidifier_Default::
      operator= (const SimFlowEnergyTransfer_Dehumidifier_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Dehumidifier& > (*this) = x;
          this->SimFlowEnergyTrans_SensorNodeName_ = x.SimFlowEnergyTrans_SensorNodeName_;
          this->SimFlowEnergyTrans_DesiccantHeatExchngObjType_ = x.SimFlowEnergyTrans_DesiccantHeatExchngObjType_;
          this->SimFlowEnergyTrans_DesiccantHeatExchngName_ = x.SimFlowEnergyTrans_DesiccantHeatExchngName_;
          this->SimFlowEnergyTrans_RegenAirFanObjType_ = x.SimFlowEnergyTrans_RegenAirFanObjType_;
          this->SimFlowEnergyTrans_RegenAirFanName_ = x.SimFlowEnergyTrans_RegenAirFanName_;
          this->SimFlowEnergyTrans_RegenAirFanPlacement_ = x.SimFlowEnergyTrans_RegenAirFanPlacement_;
          this->SimFlowEnergyTrans_RegenAirHeatObjType_ = x.SimFlowEnergyTrans_RegenAirHeatObjType_;
          this->SimFlowEnergyTrans_RegenAirHeatName_ = x.SimFlowEnergyTrans_RegenAirHeatName_;
          this->SimFlowEnergyTrans_RegenInletAirSetpointTemp_ = x.SimFlowEnergyTrans_RegenInletAirSetpointTemp_;
          this->SimFlowEnergyTrans_CompanionCoolingCoilObjType_ = x.SimFlowEnergyTrans_CompanionCoolingCoilObjType_;
          this->SimFlowEnergyTrans_CompanionCoolingCoilName_ = x.SimFlowEnergyTrans_CompanionCoolingCoilName_;
          this->SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_ = x.SimFlowEnergyTrans_CompanionCoolingCoilUpstreamDehumidifierProcInlet_;
          this->SimFlowEnergyTrans_CompanionCoilRegenAirHeating_ = x.SimFlowEnergyTrans_CompanionCoilRegenAirHeating_;
          this->SimFlowEnergyTrans_ExhFanMaxFlowRate_ = x.SimFlowEnergyTrans_ExhFanMaxFlowRate_;
          this->SimFlowEnergyTrans_ExhFanMaxPwr_ = x.SimFlowEnergyTrans_ExhFanMaxPwr_;
          this->SimFlowEnergyTrans_ExhFanPwrCurveName_ = x.SimFlowEnergyTrans_ExhFanPwrCurveName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_Dehumidifier_Default::
      ~SimFlowEnergyTransfer_Dehumidifier_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

