// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod
      // 

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Cond () const
      {
        return this->SimMaterial_Cond_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Cond ()
      {
        return this->SimMaterial_Cond_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Cond (const SimMaterial_Cond_type& x)
      {
        this->SimMaterial_Cond_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_Cond (const SimMaterial_Cond_optional& x)
      {
        this->SimMaterial_Cond_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_InfraredTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredTransAtNrmlIncent () const
      {
        return this->SimMaterial_InfraredTransAtNrmlIncent_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_InfraredTransAtNrmlIncent_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredTransAtNrmlIncent ()
      {
        return this->SimMaterial_InfraredTransAtNrmlIncent_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredTransAtNrmlIncent (const SimMaterial_InfraredTransAtNrmlIncent_type& x)
      {
        this->SimMaterial_InfraredTransAtNrmlIncent_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredTransAtNrmlIncent (const SimMaterial_InfraredTransAtNrmlIncent_optional& x)
      {
        this->SimMaterial_InfraredTransAtNrmlIncent_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans () const
      {
        return this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans ()
      {
        return this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans (const SimMaterial_DirtCorrectFactorForSolar_VisTrans_type& x)
      {
        this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_DirtCorrectFactorForSolar_VisTrans (const SimMaterial_DirtCorrectFactorForSolar_VisTrans_optional& x)
      {
        this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolarDiffusing_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarDiffusing () const
      {
        return this->SimMaterial_SolarDiffusing_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolarDiffusing_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarDiffusing ()
      {
        return this->SimMaterial_SolarDiffusing_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarDiffusing (const SimMaterial_SolarDiffusing_type& x)
      {
        this->SimMaterial_SolarDiffusing_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarDiffusing (const SimMaterial_SolarDiffusing_optional& x)
      {
        this->SimMaterial_SolarDiffusing_ = x;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarDiffusing (::std::auto_ptr< SimMaterial_SolarDiffusing_type > x)
      {
        this->SimMaterial_SolarDiffusing_.set (x);
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolardexRefract_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolardexRefract () const
      {
        return this->SimMaterial_SolardexRefract_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolardexRefract_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolardexRefract ()
      {
        return this->SimMaterial_SolardexRefract_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolardexRefract (const SimMaterial_SolardexRefract_type& x)
      {
        this->SimMaterial_SolardexRefract_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolardexRefract (const SimMaterial_SolardexRefract_optional& x)
      {
        this->SimMaterial_SolardexRefract_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolarExtinctCoef_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarExtinctCoef () const
      {
        return this->SimMaterial_SolarExtinctCoef_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_SolarExtinctCoef_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarExtinctCoef ()
      {
        return this->SimMaterial_SolarExtinctCoef_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarExtinctCoef (const SimMaterial_SolarExtinctCoef_type& x)
      {
        this->SimMaterial_SolarExtinctCoef_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_SolarExtinctCoef (const SimMaterial_SolarExtinctCoef_optional& x)
      {
        this->SimMaterial_SolarExtinctCoef_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_VisdexRefract_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisdexRefract () const
      {
        return this->SimMaterial_VisdexRefract_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_VisdexRefract_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisdexRefract ()
      {
        return this->SimMaterial_VisdexRefract_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisdexRefract (const SimMaterial_VisdexRefract_type& x)
      {
        this->SimMaterial_VisdexRefract_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisdexRefract (const SimMaterial_VisdexRefract_optional& x)
      {
        this->SimMaterial_VisdexRefract_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_VisExtinctCoef_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisExtinctCoef () const
      {
        return this->SimMaterial_VisExtinctCoef_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_VisExtinctCoef_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisExtinctCoef ()
      {
        return this->SimMaterial_VisExtinctCoef_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisExtinctCoef (const SimMaterial_VisExtinctCoef_type& x)
      {
        this->SimMaterial_VisExtinctCoef_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_VisExtinctCoef (const SimMaterial_VisExtinctCoef_optional& x)
      {
        this->SimMaterial_VisExtinctCoef_ = x;
      }

      const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_InfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredHemisphEmis () const
      {
        return this->SimMaterial_InfraredHemisphEmis_;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::SimMaterial_InfraredHemisphEmis_optional& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredHemisphEmis ()
      {
        return this->SimMaterial_InfraredHemisphEmis_;
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredHemisphEmis (const SimMaterial_InfraredHemisphEmis_type& x)
      {
        this->SimMaterial_InfraredHemisphEmis_.set (x);
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_InfraredHemisphEmis (const SimMaterial_InfraredHemisphEmis_optional& x)
      {
        this->SimMaterial_InfraredHemisphEmis_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod
      //

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_InfraredTransAtNrmlIncent_ (this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (this),
        SimMaterial_SolarDiffusing_ (this),
        SimMaterial_SolardexRefract_ (this),
        SimMaterial_SolarExtinctCoef_ (this),
        SimMaterial_VisdexRefract_ (this),
        SimMaterial_VisExtinctCoef_ (this),
        SimMaterial_InfraredHemisphEmis_ (this)
      {
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod (const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod& x,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_Cond_ (x.SimMaterial_Cond_, f, this),
        SimMaterial_InfraredTransAtNrmlIncent_ (x.SimMaterial_InfraredTransAtNrmlIncent_, f, this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (x.SimMaterial_DirtCorrectFactorForSolar_VisTrans_, f, this),
        SimMaterial_SolarDiffusing_ (x.SimMaterial_SolarDiffusing_, f, this),
        SimMaterial_SolardexRefract_ (x.SimMaterial_SolardexRefract_, f, this),
        SimMaterial_SolarExtinctCoef_ (x.SimMaterial_SolarExtinctCoef_, f, this),
        SimMaterial_VisdexRefract_ (x.SimMaterial_VisdexRefract_, f, this),
        SimMaterial_VisExtinctCoef_ (x.SimMaterial_VisExtinctCoef_, f, this),
        SimMaterial_InfraredHemisphEmis_ (x.SimMaterial_InfraredHemisphEmis_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod (const ::xercesc::DOMElement& e,
                                                                     ::xml_schema::flags f,
                                                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_InfraredTransAtNrmlIncent_ (this),
        SimMaterial_DirtCorrectFactorForSolar_VisTrans_ (this),
        SimMaterial_SolarDiffusing_ (this),
        SimMaterial_SolardexRefract_ (this),
        SimMaterial_SolarExtinctCoef_ (this),
        SimMaterial_VisdexRefract_ (this),
        SimMaterial_VisExtinctCoef_ (this),
        SimMaterial_InfraredHemisphEmis_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Cond
          //
          if (n.name () == "SimMaterial_Cond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Cond_)
            {
              this->SimMaterial_Cond_.set (SimMaterial_Cond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_InfraredTransAtNrmlIncent
          //
          if (n.name () == "SimMaterial_InfraredTransAtNrmlIncent" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_InfraredTransAtNrmlIncent_)
            {
              this->SimMaterial_InfraredTransAtNrmlIncent_.set (SimMaterial_InfraredTransAtNrmlIncent_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_DirtCorrectFactorForSolar_VisTrans
          //
          if (n.name () == "SimMaterial_DirtCorrectFactorForSolar_VisTrans" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_)
            {
              this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_.set (SimMaterial_DirtCorrectFactorForSolar_VisTrans_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarDiffusing
          //
          if (n.name () == "SimMaterial_SolarDiffusing" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_SolarDiffusing_type > r (
              SimMaterial_SolarDiffusing_traits::create (i, f, this));

            if (!this->SimMaterial_SolarDiffusing_)
            {
              this->SimMaterial_SolarDiffusing_.set (r);
              continue;
            }
          }

          // SimMaterial_SolardexRefract
          //
          if (n.name () == "SimMaterial_SolardexRefract" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolardexRefract_)
            {
              this->SimMaterial_SolardexRefract_.set (SimMaterial_SolardexRefract_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarExtinctCoef
          //
          if (n.name () == "SimMaterial_SolarExtinctCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolarExtinctCoef_)
            {
              this->SimMaterial_SolarExtinctCoef_.set (SimMaterial_SolarExtinctCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisdexRefract
          //
          if (n.name () == "SimMaterial_VisdexRefract" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisdexRefract_)
            {
              this->SimMaterial_VisdexRefract_.set (SimMaterial_VisdexRefract_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisExtinctCoef
          //
          if (n.name () == "SimMaterial_VisExtinctCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisExtinctCoef_)
            {
              this->SimMaterial_VisExtinctCoef_.set (SimMaterial_VisExtinctCoef_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_InfraredHemisphEmis
          //
          if (n.name () == "SimMaterial_InfraredHemisphEmis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_InfraredHemisphEmis_)
            {
              this->SimMaterial_InfraredHemisphEmis_.set (SimMaterial_InfraredHemisphEmis_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod* SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod (*this, f, c);
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod& SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      operator= (const SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_Cond_ = x.SimMaterial_Cond_;
          this->SimMaterial_InfraredTransAtNrmlIncent_ = x.SimMaterial_InfraredTransAtNrmlIncent_;
          this->SimMaterial_DirtCorrectFactorForSolar_VisTrans_ = x.SimMaterial_DirtCorrectFactorForSolar_VisTrans_;
          this->SimMaterial_SolarDiffusing_ = x.SimMaterial_SolarDiffusing_;
          this->SimMaterial_SolardexRefract_ = x.SimMaterial_SolardexRefract_;
          this->SimMaterial_SolarExtinctCoef_ = x.SimMaterial_SolarExtinctCoef_;
          this->SimMaterial_VisdexRefract_ = x.SimMaterial_VisdexRefract_;
          this->SimMaterial_VisExtinctCoef_ = x.SimMaterial_VisExtinctCoef_;
          this->SimMaterial_InfraredHemisphEmis_ = x.SimMaterial_InfraredHemisphEmis_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod::
      ~SimMaterial_GlazingMaterial_GlazingRefractionExtinctionMethod ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

