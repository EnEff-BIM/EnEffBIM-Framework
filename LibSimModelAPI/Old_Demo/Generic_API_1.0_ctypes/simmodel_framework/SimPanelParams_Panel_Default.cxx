// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimPanelParams_Panel_Default.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimPanelParams_Panel_Default
      // 

      const SimPanelParams_Panel_Default::PanelDepth_optional& SimPanelParams_Panel_Default::
      PanelDepth () const
      {
        return this->PanelDepth_;
      }

      SimPanelParams_Panel_Default::PanelDepth_optional& SimPanelParams_Panel_Default::
      PanelDepth ()
      {
        return this->PanelDepth_;
      }

      void SimPanelParams_Panel_Default::
      PanelDepth (const PanelDepth_type& x)
      {
        this->PanelDepth_.set (x);
      }

      void SimPanelParams_Panel_Default::
      PanelDepth (const PanelDepth_optional& x)
      {
        this->PanelDepth_ = x;
      }

      const SimPanelParams_Panel_Default::PanelWidth_optional& SimPanelParams_Panel_Default::
      PanelWidth () const
      {
        return this->PanelWidth_;
      }

      SimPanelParams_Panel_Default::PanelWidth_optional& SimPanelParams_Panel_Default::
      PanelWidth ()
      {
        return this->PanelWidth_;
      }

      void SimPanelParams_Panel_Default::
      PanelWidth (const PanelWidth_type& x)
      {
        this->PanelWidth_.set (x);
      }

      void SimPanelParams_Panel_Default::
      PanelWidth (const PanelWidth_optional& x)
      {
        this->PanelWidth_ = x;
      }

      const SimPanelParams_Panel_Default::PanelThickness_optional& SimPanelParams_Panel_Default::
      PanelThickness () const
      {
        return this->PanelThickness_;
      }

      SimPanelParams_Panel_Default::PanelThickness_optional& SimPanelParams_Panel_Default::
      PanelThickness ()
      {
        return this->PanelThickness_;
      }

      void SimPanelParams_Panel_Default::
      PanelThickness (const PanelThickness_type& x)
      {
        this->PanelThickness_.set (x);
      }

      void SimPanelParams_Panel_Default::
      PanelThickness (const PanelThickness_optional& x)
      {
        this->PanelThickness_ = x;
      }

      const SimPanelParams_Panel_Default::PanelProfilePath_optional& SimPanelParams_Panel_Default::
      PanelProfilePath () const
      {
        return this->PanelProfilePath_;
      }

      SimPanelParams_Panel_Default::PanelProfilePath_optional& SimPanelParams_Panel_Default::
      PanelProfilePath ()
      {
        return this->PanelProfilePath_;
      }

      void SimPanelParams_Panel_Default::
      PanelProfilePath (const PanelProfilePath_type& x)
      {
        this->PanelProfilePath_.set (x);
      }

      void SimPanelParams_Panel_Default::
      PanelProfilePath (const PanelProfilePath_optional& x)
      {
        this->PanelProfilePath_ = x;
      }

      void SimPanelParams_Panel_Default::
      PanelProfilePath (::std::auto_ptr< PanelProfilePath_type > x)
      {
        this->PanelProfilePath_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimPanelParams_Panel_Default
      //

      SimPanelParams_Panel_Default::
      SimPanelParams_Panel_Default (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimPanelParams_Panel (RefId),
        PanelDepth_ (this),
        PanelWidth_ (this),
        PanelThickness_ (this),
        PanelProfilePath_ (this)
      {
      }

      SimPanelParams_Panel_Default::
      SimPanelParams_Panel_Default (const SimPanelParams_Panel_Default& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimPanelParams_Panel (x, f, c),
        PanelDepth_ (x.PanelDepth_, f, this),
        PanelWidth_ (x.PanelWidth_, f, this),
        PanelThickness_ (x.PanelThickness_, f, this),
        PanelProfilePath_ (x.PanelProfilePath_, f, this)
      {
      }

      SimPanelParams_Panel_Default::
      SimPanelParams_Panel_Default (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimPanelParams_Panel (e, f | ::xml_schema::flags::base, c),
        PanelDepth_ (this),
        PanelWidth_ (this),
        PanelThickness_ (this),
        PanelProfilePath_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimPanelParams_Panel_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimPanelParams_Panel::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PanelDepth
          //
          if (n.name () == "PanelDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->PanelDepth_)
            {
              this->PanelDepth_.set (PanelDepth_traits::create (i, f, this));
              continue;
            }
          }

          // PanelWidth
          //
          if (n.name () == "PanelWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->PanelWidth_)
            {
              this->PanelWidth_.set (PanelWidth_traits::create (i, f, this));
              continue;
            }
          }

          // PanelThickness
          //
          if (n.name () == "PanelThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->PanelThickness_)
            {
              this->PanelThickness_.set (PanelThickness_traits::create (i, f, this));
              continue;
            }
          }

          // PanelProfilePath
          //
          if (n.name () == "PanelProfilePath" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< PanelProfilePath_type > r (
              PanelProfilePath_traits::create (i, f, this));

            if (!this->PanelProfilePath_)
            {
              this->PanelProfilePath_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimPanelParams_Panel_Default* SimPanelParams_Panel_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimPanelParams_Panel_Default (*this, f, c);
      }

      SimPanelParams_Panel_Default& SimPanelParams_Panel_Default::
      operator= (const SimPanelParams_Panel_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimPanelParams_Panel& > (*this) = x;
          this->PanelDepth_ = x.PanelDepth_;
          this->PanelWidth_ = x.PanelWidth_;
          this->PanelThickness_ = x.PanelThickness_;
          this->PanelProfilePath_ = x.PanelProfilePath_;
        }

        return *this;
      }

      SimPanelParams_Panel_Default::
      ~SimPanelParams_Panel_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

