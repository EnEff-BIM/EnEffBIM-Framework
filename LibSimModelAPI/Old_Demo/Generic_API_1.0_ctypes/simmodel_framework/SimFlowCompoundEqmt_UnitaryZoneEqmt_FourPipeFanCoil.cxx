// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CapacityControlMethod_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CapacityControlMethod () const
      {
        return this->SimFlowCompEqmt_CapacityControlMethod_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CapacityControlMethod_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CapacityControlMethod ()
      {
        return this->SimFlowCompEqmt_CapacityControlMethod_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CapacityControlMethod (const SimFlowCompEqmt_CapacityControlMethod_type& x)
      {
        this->SimFlowCompEqmt_CapacityControlMethod_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CapacityControlMethod (const SimFlowCompEqmt_CapacityControlMethod_optional& x)
      {
        this->SimFlowCompEqmt_CapacityControlMethod_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CapacityControlMethod (::std::auto_ptr< SimFlowCompEqmt_CapacityControlMethod_type > x)
      {
        this->SimFlowCompEqmt_CapacityControlMethod_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxSupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxSupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio () const
      {
        return this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio ()
      {
        return this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio (const SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_type& x)
      {
        this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio (const SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_optional& x)
      {
        this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio () const
      {
        return this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio ()
      {
        return this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio (const SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_type& x)
      {
        this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio (const SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_optional& x)
      {
        this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxOutdrAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxOutdrAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdrAirSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirSchedName () const
      {
        return this->SimFlowCompEqmt_OutdrAirSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdrAirSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirSchedName ()
      {
        return this->SimFlowCompEqmt_OutdrAirSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirSchedName (const SimFlowCompEqmt_OutdrAirSchedName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirSchedName (const SimFlowCompEqmt_OutdrAirSchedName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirSchedName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirSchedName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirInNodeName () const
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirInNodeName ()
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirOutNodeName () const
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirOutNodeName ()
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdoorAirMixerObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdoorAirMixerObjType () const
      {
        return this->SimFlowCompEqmt_OutdoorAirMixerObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdoorAirMixerObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdoorAirMixerObjType ()
      {
        return this->SimFlowCompEqmt_OutdoorAirMixerObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdoorAirMixerObjType (const SimFlowCompEqmt_OutdoorAirMixerObjType_type& x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdoorAirMixerObjType (const SimFlowCompEqmt_OutdoorAirMixerObjType_optional& x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdoorAirMixerObjType (::std::auto_ptr< SimFlowCompEqmt_OutdoorAirMixerObjType_type > x)
      {
        this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdrAirMixerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirMixerName () const
      {
        return this->SimFlowCompEqmt_OutdrAirMixerName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_OutdrAirMixerName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirMixerName ()
      {
        return this->SimFlowCompEqmt_OutdrAirMixerName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirMixerName (const SimFlowCompEqmt_OutdrAirMixerName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirMixerName (const SimFlowCompEqmt_OutdrAirMixerName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_OutdrAirMixerName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirMixerName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirMixerName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanObjType () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanObjType ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanObjType (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_SupplyAirFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilObjType () const
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilObjType ()
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilName () const
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilName ()
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxColdWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxColdWaterFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxColdWaterFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxColdWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxColdWaterFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxColdWaterFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxColdWaterFlowRate (const SimFlowCompEqmt_MaxColdWaterFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxColdWaterFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxColdWaterFlowRate (const SimFlowCompEqmt_MaxColdWaterFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxColdWaterFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MinColdWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinColdWaterFlowRate () const
      {
        return this->SimFlowCompEqmt_MinColdWaterFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MinColdWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinColdWaterFlowRate ()
      {
        return this->SimFlowCompEqmt_MinColdWaterFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinColdWaterFlowRate (const SimFlowCompEqmt_MinColdWaterFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MinColdWaterFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinColdWaterFlowRate (const SimFlowCompEqmt_MinColdWaterFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MinColdWaterFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingConvergTol () const
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingConvergTol ()
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_type& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_optional& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilObjType () const
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilObjType ()
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilName () const
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilName ()
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxHotWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxHotWaterFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxHotWaterFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MaxHotWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxHotWaterFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxHotWaterFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxHotWaterFlowRate (const SimFlowCompEqmt_MaxHotWaterFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxHotWaterFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MaxHotWaterFlowRate (const SimFlowCompEqmt_MaxHotWaterFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxHotWaterFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MinHotWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinHotWaterFlowRate () const
      {
        return this->SimFlowCompEqmt_MinHotWaterFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_MinHotWaterFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinHotWaterFlowRate ()
      {
        return this->SimFlowCompEqmt_MinHotWaterFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinHotWaterFlowRate (const SimFlowCompEqmt_MinHotWaterFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MinHotWaterFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_MinHotWaterFlowRate (const SimFlowCompEqmt_MinHotWaterFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MinHotWaterFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingConvergTol () const
      {
        return this->SimFlowCompEqmt_HeatingConvergTol_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_HeatingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingConvergTol ()
      {
        return this->SimFlowCompEqmt_HeatingConvergTol_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingConvergTol (const SimFlowCompEqmt_HeatingConvergTol_type& x)
      {
        this->SimFlowCompEqmt_HeatingConvergTol_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_HeatingConvergTol (const SimFlowCompEqmt_HeatingConvergTol_optional& x)
      {
        this->SimFlowCompEqmt_HeatingConvergTol_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailMngrListName () const
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailMngrListName ()
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_type& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_optional& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompEqmt_AvailMngrListName (::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_CapacityControlMethod_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_ (this),
        SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_OutdrAirSchedName_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (this),
        SimFlowCompEqmt_OutdrAirMixerName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_MaxColdWaterFlowRate_ (this),
        SimFlowCompEqmt_MinColdWaterFlowRate_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_MaxHotWaterFlowRate_ (this),
        SimFlowCompEqmt_MinHotWaterFlowRate_ (this),
        SimFlowCompEqmt_HeatingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil (const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil& x,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_CapacityControlMethod_ (x.SimFlowCompEqmt_CapacityControlMethod_, f, this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (x.SimFlowCompEqmt_MaxSupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_ (x.SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_, f, this),
        SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_ (x.SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_, f, this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (x.SimFlowCompEqmt_MaxOutdrAirFlowRate_, f, this),
        SimFlowCompEqmt_OutdrAirSchedName_ (x.SimFlowCompEqmt_OutdrAirSchedName_, f, this),
        SimFlowCompEqmt_AirInNodeName_ (x.SimFlowCompEqmt_AirInNodeName_, f, this),
        SimFlowCompEqmt_AirOutNodeName_ (x.SimFlowCompEqmt_AirOutNodeName_, f, this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (x.SimFlowCompEqmt_OutdoorAirMixerObjType_, f, this),
        SimFlowCompEqmt_OutdrAirMixerName_ (x.SimFlowCompEqmt_OutdrAirMixerName_, f, this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (x.SimFlowCompEqmt_SupplyAirFanObjType_, f, this),
        SimFlowCompEqmt_SupplyAirFanName_ (x.SimFlowCompEqmt_SupplyAirFanName_, f, this),
        SimFlowCompEqmt_CoolingCoilObjType_ (x.SimFlowCompEqmt_CoolingCoilObjType_, f, this),
        SimFlowCompEqmt_CoolingCoilName_ (x.SimFlowCompEqmt_CoolingCoilName_, f, this),
        SimFlowCompEqmt_MaxColdWaterFlowRate_ (x.SimFlowCompEqmt_MaxColdWaterFlowRate_, f, this),
        SimFlowCompEqmt_MinColdWaterFlowRate_ (x.SimFlowCompEqmt_MinColdWaterFlowRate_, f, this),
        SimFlowCompEqmt_CoolingConvergTol_ (x.SimFlowCompEqmt_CoolingConvergTol_, f, this),
        SimFlowCompEqmt_HeatingCoilObjType_ (x.SimFlowCompEqmt_HeatingCoilObjType_, f, this),
        SimFlowCompEqmt_HeatingCoilName_ (x.SimFlowCompEqmt_HeatingCoilName_, f, this),
        SimFlowCompEqmt_MaxHotWaterFlowRate_ (x.SimFlowCompEqmt_MaxHotWaterFlowRate_, f, this),
        SimFlowCompEqmt_MinHotWaterFlowRate_ (x.SimFlowCompEqmt_MinHotWaterFlowRate_, f, this),
        SimFlowCompEqmt_HeatingConvergTol_ (x.SimFlowCompEqmt_HeatingConvergTol_, f, this),
        SimFlowCompEqmt_AvailMngrListName_ (x.SimFlowCompEqmt_AvailMngrListName_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_CapacityControlMethod_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_ (this),
        SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_OutdrAirSchedName_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_OutdoorAirMixerObjType_ (this),
        SimFlowCompEqmt_OutdrAirMixerName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_MaxColdWaterFlowRate_ (this),
        SimFlowCompEqmt_MinColdWaterFlowRate_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_MaxHotWaterFlowRate_ (this),
        SimFlowCompEqmt_MinHotWaterFlowRate_ (this),
        SimFlowCompEqmt_HeatingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CapacityControlMethod
          //
          if (n.name () == "SimFlowCompEqmt_CapacityControlMethod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CapacityControlMethod_type > r (
              SimFlowCompEqmt_CapacityControlMethod_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CapacityControlMethod_)
            {
              this->SimFlowCompEqmt_CapacityControlMethod_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxSupplyAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (SimFlowCompEqmt_MaxSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio
          //
          if (n.name () == "SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_)
            {
              this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_.set (SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio
          //
          if (n.name () == "SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_)
            {
              this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_.set (SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxOutdrAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxOutdrAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxOutdrAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (SimFlowCompEqmt_MaxOutdrAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirSchedName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirSchedName_type > r (
              SimFlowCompEqmt_OutdrAirSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirSchedName_)
            {
              this->SimFlowCompEqmt_OutdrAirSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirInNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > r (
              SimFlowCompEqmt_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirInNodeName_)
            {
              this->SimFlowCompEqmt_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirOutNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > r (
              SimFlowCompEqmt_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirOutNodeName_)
            {
              this->SimFlowCompEqmt_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdoorAirMixerObjType
          //
          if (n.name () == "SimFlowCompEqmt_OutdoorAirMixerObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdoorAirMixerObjType_type > r (
              SimFlowCompEqmt_OutdoorAirMixerObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdoorAirMixerObjType_)
            {
              this->SimFlowCompEqmt_OutdoorAirMixerObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirMixerName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirMixerName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirMixerName_type > r (
              SimFlowCompEqmt_OutdrAirMixerName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirMixerName_)
            {
              this->SimFlowCompEqmt_OutdrAirMixerName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanObjType
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > r (
              SimFlowCompEqmt_SupplyAirFanObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanObjType_)
            {
              this->SimFlowCompEqmt_SupplyAirFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > r (
              SimFlowCompEqmt_SupplyAirFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > r (
              SimFlowCompEqmt_CoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilObjType_)
            {
              this->SimFlowCompEqmt_CoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > r (
              SimFlowCompEqmt_CoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilName_)
            {
              this->SimFlowCompEqmt_CoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxColdWaterFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxColdWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxColdWaterFlowRate_)
            {
              this->SimFlowCompEqmt_MaxColdWaterFlowRate_.set (SimFlowCompEqmt_MaxColdWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MinColdWaterFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MinColdWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinColdWaterFlowRate_)
            {
              this->SimFlowCompEqmt_MinColdWaterFlowRate_.set (SimFlowCompEqmt_MinColdWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingConvergTol
          //
          if (n.name () == "SimFlowCompEqmt_CoolingConvergTol" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_CoolingConvergTol_)
            {
              this->SimFlowCompEqmt_CoolingConvergTol_.set (SimFlowCompEqmt_CoolingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > r (
              SimFlowCompEqmt_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilObjType_)
            {
              this->SimFlowCompEqmt_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > r (
              SimFlowCompEqmt_HeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilName_)
            {
              this->SimFlowCompEqmt_HeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxHotWaterFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxHotWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxHotWaterFlowRate_)
            {
              this->SimFlowCompEqmt_MaxHotWaterFlowRate_.set (SimFlowCompEqmt_MaxHotWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MinHotWaterFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MinHotWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinHotWaterFlowRate_)
            {
              this->SimFlowCompEqmt_MinHotWaterFlowRate_.set (SimFlowCompEqmt_MinHotWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingConvergTol
          //
          if (n.name () == "SimFlowCompEqmt_HeatingConvergTol" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_HeatingConvergTol_)
            {
              this->SimFlowCompEqmt_HeatingConvergTol_.set (SimFlowCompEqmt_HeatingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AvailMngrListName
          //
          if (n.name () == "SimFlowCompEqmt_AvailMngrListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > r (
              SimFlowCompEqmt_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailMngrListName_)
            {
              this->SimFlowCompEqmt_AvailMngrListName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil* SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil& SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_CapacityControlMethod_ = x.SimFlowCompEqmt_CapacityControlMethod_;
          this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x.SimFlowCompEqmt_MaxSupplyAirFlowRate_;
          this->SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_ = x.SimFlowCompEqmt_LowSpeedSupplyAirFlowRatio_;
          this->SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_ = x.SimFlowCompEqmt_MediumSpeedSupplyAirFlowRatio_;
          this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x.SimFlowCompEqmt_MaxOutdrAirFlowRate_;
          this->SimFlowCompEqmt_OutdrAirSchedName_ = x.SimFlowCompEqmt_OutdrAirSchedName_;
          this->SimFlowCompEqmt_AirInNodeName_ = x.SimFlowCompEqmt_AirInNodeName_;
          this->SimFlowCompEqmt_AirOutNodeName_ = x.SimFlowCompEqmt_AirOutNodeName_;
          this->SimFlowCompEqmt_OutdoorAirMixerObjType_ = x.SimFlowCompEqmt_OutdoorAirMixerObjType_;
          this->SimFlowCompEqmt_OutdrAirMixerName_ = x.SimFlowCompEqmt_OutdrAirMixerName_;
          this->SimFlowCompEqmt_SupplyAirFanObjType_ = x.SimFlowCompEqmt_SupplyAirFanObjType_;
          this->SimFlowCompEqmt_SupplyAirFanName_ = x.SimFlowCompEqmt_SupplyAirFanName_;
          this->SimFlowCompEqmt_CoolingCoilObjType_ = x.SimFlowCompEqmt_CoolingCoilObjType_;
          this->SimFlowCompEqmt_CoolingCoilName_ = x.SimFlowCompEqmt_CoolingCoilName_;
          this->SimFlowCompEqmt_MaxColdWaterFlowRate_ = x.SimFlowCompEqmt_MaxColdWaterFlowRate_;
          this->SimFlowCompEqmt_MinColdWaterFlowRate_ = x.SimFlowCompEqmt_MinColdWaterFlowRate_;
          this->SimFlowCompEqmt_CoolingConvergTol_ = x.SimFlowCompEqmt_CoolingConvergTol_;
          this->SimFlowCompEqmt_HeatingCoilObjType_ = x.SimFlowCompEqmt_HeatingCoilObjType_;
          this->SimFlowCompEqmt_HeatingCoilName_ = x.SimFlowCompEqmt_HeatingCoilName_;
          this->SimFlowCompEqmt_MaxHotWaterFlowRate_ = x.SimFlowCompEqmt_MaxHotWaterFlowRate_;
          this->SimFlowCompEqmt_MinHotWaterFlowRate_ = x.SimFlowCompEqmt_MinHotWaterFlowRate_;
          this->SimFlowCompEqmt_HeatingConvergTol_ = x.SimFlowCompEqmt_HeatingConvergTol_;
          this->SimFlowCompEqmt_AvailMngrListName_ = x.SimFlowCompEqmt_AvailMngrListName_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_FourPipeFanCoil ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

