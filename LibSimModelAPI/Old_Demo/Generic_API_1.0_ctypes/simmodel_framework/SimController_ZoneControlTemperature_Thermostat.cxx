// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimController_ZoneControlTemperature_Thermostat.hxx"

#include "simcntrl_control_1_4_objecttype.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimController_ZoneControlTemperature_Thermostat
      // 

      const SimController_ZoneControlTemperature_Thermostat::SimCntrl_ControlTypeScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_ControlTypeScheduleName () const
      {
        return this->SimCntrl_ControlTypeScheduleName_;
      }

      SimController_ZoneControlTemperature_Thermostat::SimCntrl_ControlTypeScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_ControlTypeScheduleName ()
      {
        return this->SimCntrl_ControlTypeScheduleName_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_ControlTypeScheduleName (const SimCntrl_ControlTypeScheduleName_type& x)
      {
        this->SimCntrl_ControlTypeScheduleName_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_ControlTypeScheduleName (const SimCntrl_ControlTypeScheduleName_optional& x)
      {
        this->SimCntrl_ControlTypeScheduleName_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_ControlTypeScheduleName (::std::auto_ptr< SimCntrl_ControlTypeScheduleName_type > x)
      {
        this->SimCntrl_ControlTypeScheduleName_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::SimCntrl_Control_1_4_ObjectType_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_ObjectType () const
      {
        return this->SimCntrl_Control_1_4_ObjectType_;
      }

      SimController_ZoneControlTemperature_Thermostat::SimCntrl_Control_1_4_ObjectType_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_ObjectType ()
      {
        return this->SimCntrl_Control_1_4_ObjectType_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_ObjectType (const SimCntrl_Control_1_4_ObjectType_type& x)
      {
        this->SimCntrl_Control_1_4_ObjectType_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_ObjectType (const SimCntrl_Control_1_4_ObjectType_optional& x)
      {
        this->SimCntrl_Control_1_4_ObjectType_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_ObjectType (::std::auto_ptr< SimCntrl_Control_1_4_ObjectType_type > x)
      {
        this->SimCntrl_Control_1_4_ObjectType_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::SimCntrl_Control_1_4_Name_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_Name () const
      {
        return this->SimCntrl_Control_1_4_Name_;
      }

      SimController_ZoneControlTemperature_Thermostat::SimCntrl_Control_1_4_Name_optional& SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_Name ()
      {
        return this->SimCntrl_Control_1_4_Name_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_Name (const SimCntrl_Control_1_4_Name_type& x)
      {
        this->SimCntrl_Control_1_4_Name_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_Name (const SimCntrl_Control_1_4_Name_optional& x)
      {
        this->SimCntrl_Control_1_4_Name_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      SimCntrl_Control_1_4_Name (::std::auto_ptr< SimCntrl_Control_1_4_Name_type > x)
      {
        this->SimCntrl_Control_1_4_Name_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_ThermostatName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_ThermostatName () const
      {
        return this->ZoneCont_Tstat_OperativeTemp_ThermostatName_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_ThermostatName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_ThermostatName ()
      {
        return this->ZoneCont_Tstat_OperativeTemp_ThermostatName_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_ThermostatName (const ZoneCont_Tstat_OperativeTemp_ThermostatName_type& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_ThermostatName_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_ThermostatName (const ZoneCont_Tstat_OperativeTemp_ThermostatName_optional& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_ThermostatName_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_ThermostatName (::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_ThermostatName_type > x)
      {
        this->ZoneCont_Tstat_OperativeTemp_ThermostatName_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode () const
      {
        return this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode ()
      {
        return this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode (const ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_type& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode (const ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_optional& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode (::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_type > x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction () const
      {
        return this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction ()
      {
        return this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction (const ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_type& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction (const ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_optional& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_ = x;
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName () const
      {
        return this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName ()
      {
        return this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName (const ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_type& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName (const ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_optional& x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName (::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_type > x)
      {
        this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName (const ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName (const ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName (::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_type > x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_DehumidCntlType_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidCntlType () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_DehumidCntlType_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidCntlType ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidCntlType (const ZoneCont_Tstat_TempAndHumid_DehumidCntlType_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidCntlType (const ZoneCont_Tstat_TempAndHumid_DehumidCntlType_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_DehumidCntlType (::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_DehumidCntlType_type > x)
      {
        this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod (const ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod (const ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod (::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_type > x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange (const ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange (const ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_ = x;
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName (const ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName (const ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_ = x;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName (::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_type > x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_.set (x);
      }

      const SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio () const
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_;
      }

      SimController_ZoneControlTemperature_Thermostat::ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_optional& SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio ()
      {
        return this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_;
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio (const ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_type& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_.set (x);
      }

      void SimController_ZoneControlTemperature_Thermostat::
      ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio (const ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_optional& x)
      {
        this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimController_ZoneControlTemperature_Thermostat
      //

      SimController_ZoneControlTemperature_Thermostat::
      SimController_ZoneControlTemperature_Thermostat (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (RefId),
        SimCntrl_ControlTypeScheduleName_ (this),
        SimCntrl_Control_1_4_ObjectType_ (this),
        SimCntrl_Control_1_4_Name_ (this),
        ZoneCont_Tstat_OperativeTemp_ThermostatName_ (this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_ (this),
        ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_ (this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_ (this),
        ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_ (this),
        ZoneCont_Tstat_TempAndHumid_DehumidCntlType_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_ (this)
      {
      }

      SimController_ZoneControlTemperature_Thermostat::
      SimController_ZoneControlTemperature_Thermostat (const SimController_ZoneControlTemperature_Thermostat& x,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (x, f, c),
        SimCntrl_ControlTypeScheduleName_ (x.SimCntrl_ControlTypeScheduleName_, f, this),
        SimCntrl_Control_1_4_ObjectType_ (x.SimCntrl_Control_1_4_ObjectType_, f, this),
        SimCntrl_Control_1_4_Name_ (x.SimCntrl_Control_1_4_Name_, f, this),
        ZoneCont_Tstat_OperativeTemp_ThermostatName_ (x.ZoneCont_Tstat_OperativeTemp_ThermostatName_, f, this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_ (x.ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_, f, this),
        ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_ (x.ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_, f, this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_ (x.ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_, f, this),
        ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_ (x.ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_, f, this),
        ZoneCont_Tstat_TempAndHumid_DehumidCntlType_ (x.ZoneCont_Tstat_TempAndHumid_DehumidCntlType_, f, this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_ (x.ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_, f, this),
        ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_ (x.ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_, f, this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_ (x.ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_, f, this),
        ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_ (x.ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_, f, this)
      {
      }

      SimController_ZoneControlTemperature_Thermostat::
      SimController_ZoneControlTemperature_Thermostat (const ::xercesc::DOMElement& e,
                                                       ::xml_schema::flags f,
                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature (e, f | ::xml_schema::flags::base, c),
        SimCntrl_ControlTypeScheduleName_ (this),
        SimCntrl_Control_1_4_ObjectType_ (this),
        SimCntrl_Control_1_4_Name_ (this),
        ZoneCont_Tstat_OperativeTemp_ThermostatName_ (this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_ (this),
        ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_ (this),
        ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_ (this),
        ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_ (this),
        ZoneCont_Tstat_TempAndHumid_DehumidCntlType_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_ (this),
        ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimController_ZoneControlTemperature_Thermostat::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimController_ZoneControlTemperature::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrl_ControlTypeScheduleName
          //
          if (n.name () == "SimCntrl_ControlTypeScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_ControlTypeScheduleName_type > r (
              SimCntrl_ControlTypeScheduleName_traits::create (i, f, this));

            if (!this->SimCntrl_ControlTypeScheduleName_)
            {
              this->SimCntrl_ControlTypeScheduleName_.set (r);
              continue;
            }
          }

          // SimCntrl_Control_1_4_ObjectType
          //
          if (n.name () == "SimCntrl_Control_1_4_ObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_Control_1_4_ObjectType_type > r (
              SimCntrl_Control_1_4_ObjectType_traits::create (i, f, this));

            if (!this->SimCntrl_Control_1_4_ObjectType_)
            {
              this->SimCntrl_Control_1_4_ObjectType_.set (r);
              continue;
            }
          }

          // SimCntrl_Control_1_4_Name
          //
          if (n.name () == "SimCntrl_Control_1_4_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimCntrl_Control_1_4_Name_type > r (
              SimCntrl_Control_1_4_Name_traits::create (i, f, this));

            if (!this->SimCntrl_Control_1_4_Name_)
            {
              this->SimCntrl_Control_1_4_Name_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_OperativeTemp_ThermostatName
          //
          if (n.name () == "ZoneCont_Tstat_OperativeTemp_ThermostatName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_ThermostatName_type > r (
              ZoneCont_Tstat_OperativeTemp_ThermostatName_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_OperativeTemp_ThermostatName_)
            {
              this->ZoneCont_Tstat_OperativeTemp_ThermostatName_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode
          //
          if (n.name () == "ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_type > r (
              ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_)
            {
              this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction
          //
          if (n.name () == "ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_)
            {
              this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_.set (ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName
          //
          if (n.name () == "ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_type > r (
              ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_)
            {
              this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_type > r (
              ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_)
            {
              this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_DehumidCntlType
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_DehumidCntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_DehumidCntlType_type > r (
              ZoneCont_Tstat_TempAndHumid_DehumidCntlType_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_)
            {
              this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_type > r (
              ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_)
            {
              this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_)
            {
              this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_.set (ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_type > r (
              ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_traits::create (i, f, this));

            if (!this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_)
            {
              this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_.set (r);
              continue;
            }
          }

          // ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio
          //
          if (n.name () == "ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_)
            {
              this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_.set (ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimController_ZoneControlTemperature_Thermostat* SimController_ZoneControlTemperature_Thermostat::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimController_ZoneControlTemperature_Thermostat (*this, f, c);
      }

      SimController_ZoneControlTemperature_Thermostat& SimController_ZoneControlTemperature_Thermostat::
      operator= (const SimController_ZoneControlTemperature_Thermostat& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimController_ZoneControlTemperature& > (*this) = x;
          this->SimCntrl_ControlTypeScheduleName_ = x.SimCntrl_ControlTypeScheduleName_;
          this->SimCntrl_Control_1_4_ObjectType_ = x.SimCntrl_Control_1_4_ObjectType_;
          this->SimCntrl_Control_1_4_Name_ = x.SimCntrl_Control_1_4_Name_;
          this->ZoneCont_Tstat_OperativeTemp_ThermostatName_ = x.ZoneCont_Tstat_OperativeTemp_ThermostatName_;
          this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_ = x.ZoneCont_Tstat_OperativeTemp_RadiativeFractionInputMode_;
          this->ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_ = x.ZoneCont_Tstat_OperativeTemp_FixedRadiativeFraction_;
          this->ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_ = x.ZoneCont_Tstat_OperativeTemp_RadiativeFractionScheduleName_;
          this->ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_ = x.ZoneCont_Tstat_TempAndHumid_DehumidifyingRelativeHumiditySetpointScheduleName_;
          this->ZoneCont_Tstat_TempAndHumid_DehumidCntlType_ = x.ZoneCont_Tstat_TempAndHumid_DehumidCntlType_;
          this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_ = x.ZoneCont_Tstat_TempAndHumid_OvercoolRangeInputMethod_;
          this->ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_ = x.ZoneCont_Tstat_TempAndHumid_OvercoolConstantRange_;
          this->ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_ = x.ZoneCont_Tstat_TempAndHumid_OvercoolRangeSchedName_;
          this->ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_ = x.ZoneCont_Tstat_TempAndHumid_OvercoolCtrlRatio_;
        }

        return *this;
      }

      SimController_ZoneControlTemperature_Thermostat::
      ~SimController_ZoneControlTemperature_Thermostat ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

