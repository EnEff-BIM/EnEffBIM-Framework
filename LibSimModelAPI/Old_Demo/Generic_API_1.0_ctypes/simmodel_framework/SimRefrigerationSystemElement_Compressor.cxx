// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRefrigerationSystemElement_Compressor.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Compressor
      // 

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_EndUseSubCat () const
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_EndUseSubCat ()
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RefrigCompPwrCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompPwrCurveName () const
      {
        return this->SimRefrigSysElem_RefrigCompPwrCurveName_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RefrigCompPwrCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompPwrCurveName ()
      {
        return this->SimRefrigSysElem_RefrigCompPwrCurveName_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompPwrCurveName (const SimRefrigSysElem_RefrigCompPwrCurveName_type& x)
      {
        this->SimRefrigSysElem_RefrigCompPwrCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompPwrCurveName (const SimRefrigSysElem_RefrigCompPwrCurveName_optional& x)
      {
        this->SimRefrigSysElem_RefrigCompPwrCurveName_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompPwrCurveName (::std::auto_ptr< SimRefrigSysElem_RefrigCompPwrCurveName_type > x)
      {
        this->SimRefrigSysElem_RefrigCompPwrCurveName_.set (x);
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RefrigCompCapCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompCapCurveName () const
      {
        return this->SimRefrigSysElem_RefrigCompCapCurveName_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RefrigCompCapCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompCapCurveName ()
      {
        return this->SimRefrigSysElem_RefrigCompCapCurveName_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompCapCurveName (const SimRefrigSysElem_RefrigCompCapCurveName_type& x)
      {
        this->SimRefrigSysElem_RefrigCompCapCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompCapCurveName (const SimRefrigSysElem_RefrigCompCapCurveName_optional& x)
      {
        this->SimRefrigSysElem_RefrigCompCapCurveName_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RefrigCompCapCurveName (::std::auto_ptr< SimRefrigSysElem_RefrigCompCapCurveName_type > x)
      {
        this->SimRefrigSysElem_RefrigCompCapCurveName_.set (x);
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedSuperheat_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSuperheat () const
      {
        return this->SimRefrigSysElem_RatedSuperheat_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedSuperheat_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSuperheat ()
      {
        return this->SimRefrigSysElem_RatedSuperheat_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSuperheat (const SimRefrigSysElem_RatedSuperheat_type& x)
      {
        this->SimRefrigSysElem_RatedSuperheat_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSuperheat (const SimRefrigSysElem_RatedSuperheat_optional& x)
      {
        this->SimRefrigSysElem_RatedSuperheat_ = x;
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedRtnGasTemp_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedRtnGasTemp () const
      {
        return this->SimRefrigSysElem_RatedRtnGasTemp_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedRtnGasTemp_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedRtnGasTemp ()
      {
        return this->SimRefrigSysElem_RatedRtnGasTemp_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedRtnGasTemp (const SimRefrigSysElem_RatedRtnGasTemp_type& x)
      {
        this->SimRefrigSysElem_RatedRtnGasTemp_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedRtnGasTemp (const SimRefrigSysElem_RatedRtnGasTemp_optional& x)
      {
        this->SimRefrigSysElem_RatedRtnGasTemp_ = x;
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedLiqTemp_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedLiqTemp () const
      {
        return this->SimRefrigSysElem_RatedLiqTemp_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedLiqTemp_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedLiqTemp ()
      {
        return this->SimRefrigSysElem_RatedLiqTemp_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedLiqTemp (const SimRefrigSysElem_RatedLiqTemp_type& x)
      {
        this->SimRefrigSysElem_RatedLiqTemp_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedLiqTemp (const SimRefrigSysElem_RatedLiqTemp_optional& x)
      {
        this->SimRefrigSysElem_RatedLiqTemp_ = x;
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedSubcooling_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSubcooling () const
      {
        return this->SimRefrigSysElem_RatedSubcooling_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_RatedSubcooling_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSubcooling ()
      {
        return this->SimRefrigSysElem_RatedSubcooling_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSubcooling (const SimRefrigSysElem_RatedSubcooling_type& x)
      {
        this->SimRefrigSysElem_RatedSubcooling_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_RatedSubcooling (const SimRefrigSysElem_RatedSubcooling_optional& x)
      {
        this->SimRefrigSysElem_RatedSubcooling_ = x;
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_ModeofOperation_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_ModeofOperation () const
      {
        return this->SimRefrigSysElem_ModeofOperation_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_ModeofOperation_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_ModeofOperation ()
      {
        return this->SimRefrigSysElem_ModeofOperation_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_ModeofOperation (const SimRefrigSysElem_ModeofOperation_type& x)
      {
        this->SimRefrigSysElem_ModeofOperation_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_ModeofOperation (const SimRefrigSysElem_ModeofOperation_optional& x)
      {
        this->SimRefrigSysElem_ModeofOperation_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_ModeofOperation (::std::auto_ptr< SimRefrigSysElem_ModeofOperation_type > x)
      {
        this->SimRefrigSysElem_ModeofOperation_.set (x);
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_TranscriticalCompressPowerCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressPowerCurveName () const
      {
        return this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_TranscriticalCompressPowerCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressPowerCurveName ()
      {
        return this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressPowerCurveName (const SimRefrigSysElem_TranscriticalCompressPowerCurveName_type& x)
      {
        this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressPowerCurveName (const SimRefrigSysElem_TranscriticalCompressPowerCurveName_optional& x)
      {
        this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressPowerCurveName (::std::auto_ptr< SimRefrigSysElem_TranscriticalCompressPowerCurveName_type > x)
      {
        this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_.set (x);
      }

      const SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_TranscriticalCompressCapCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressCapCurveName () const
      {
        return this->SimRefrigSysElem_TranscriticalCompressCapCurveName_;
      }

      SimRefrigerationSystemElement_Compressor::SimRefrigSysElem_TranscriticalCompressCapCurveName_optional& SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressCapCurveName ()
      {
        return this->SimRefrigSysElem_TranscriticalCompressCapCurveName_;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressCapCurveName (const SimRefrigSysElem_TranscriticalCompressCapCurveName_type& x)
      {
        this->SimRefrigSysElem_TranscriticalCompressCapCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressCapCurveName (const SimRefrigSysElem_TranscriticalCompressCapCurveName_optional& x)
      {
        this->SimRefrigSysElem_TranscriticalCompressCapCurveName_ = x;
      }

      void SimRefrigerationSystemElement_Compressor::
      SimRefrigSysElem_TranscriticalCompressCapCurveName (::std::auto_ptr< SimRefrigSysElem_TranscriticalCompressCapCurveName_type > x)
      {
        this->SimRefrigSysElem_TranscriticalCompressCapCurveName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Compressor
      //

      SimRefrigerationSystemElement_Compressor::
      SimRefrigerationSystemElement_Compressor (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement (RefId),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RefrigCompPwrCurveName_ (this),
        SimRefrigSysElem_RefrigCompCapCurveName_ (this),
        SimRefrigSysElem_RatedSuperheat_ (this),
        SimRefrigSysElem_RatedRtnGasTemp_ (this),
        SimRefrigSysElem_RatedLiqTemp_ (this),
        SimRefrigSysElem_RatedSubcooling_ (this),
        SimRefrigSysElem_ModeofOperation_ (this),
        SimRefrigSysElem_TranscriticalCompressPowerCurveName_ (this),
        SimRefrigSysElem_TranscriticalCompressCapCurveName_ (this)
      {
      }

      SimRefrigerationSystemElement_Compressor::
      SimRefrigerationSystemElement_Compressor (const SimRefrigerationSystemElement_Compressor& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement (x, f, c),
        SimRefrigSysElem_EndUseSubCat_ (x.SimRefrigSysElem_EndUseSubCat_, f, this),
        SimRefrigSysElem_RefrigCompPwrCurveName_ (x.SimRefrigSysElem_RefrigCompPwrCurveName_, f, this),
        SimRefrigSysElem_RefrigCompCapCurveName_ (x.SimRefrigSysElem_RefrigCompCapCurveName_, f, this),
        SimRefrigSysElem_RatedSuperheat_ (x.SimRefrigSysElem_RatedSuperheat_, f, this),
        SimRefrigSysElem_RatedRtnGasTemp_ (x.SimRefrigSysElem_RatedRtnGasTemp_, f, this),
        SimRefrigSysElem_RatedLiqTemp_ (x.SimRefrigSysElem_RatedLiqTemp_, f, this),
        SimRefrigSysElem_RatedSubcooling_ (x.SimRefrigSysElem_RatedSubcooling_, f, this),
        SimRefrigSysElem_ModeofOperation_ (x.SimRefrigSysElem_ModeofOperation_, f, this),
        SimRefrigSysElem_TranscriticalCompressPowerCurveName_ (x.SimRefrigSysElem_TranscriticalCompressPowerCurveName_, f, this),
        SimRefrigSysElem_TranscriticalCompressCapCurveName_ (x.SimRefrigSysElem_TranscriticalCompressCapCurveName_, f, this)
      {
      }

      SimRefrigerationSystemElement_Compressor::
      SimRefrigerationSystemElement_Compressor (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement (e, f | ::xml_schema::flags::base, c),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RefrigCompPwrCurveName_ (this),
        SimRefrigSysElem_RefrigCompCapCurveName_ (this),
        SimRefrigSysElem_RatedSuperheat_ (this),
        SimRefrigSysElem_RatedRtnGasTemp_ (this),
        SimRefrigSysElem_RatedLiqTemp_ (this),
        SimRefrigSysElem_RatedSubcooling_ (this),
        SimRefrigSysElem_ModeofOperation_ (this),
        SimRefrigSysElem_TranscriticalCompressPowerCurveName_ (this),
        SimRefrigSysElem_TranscriticalCompressCapCurveName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRefrigerationSystemElement_Compressor::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimRefrigerationSystemElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimRefrigSysElem_EndUseSubCat
          //
          if (n.name () == "SimRefrigSysElem_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > r (
              SimRefrigSysElem_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EndUseSubCat_)
            {
              this->SimRefrigSysElem_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RefrigCompPwrCurveName
          //
          if (n.name () == "SimRefrigSysElem_RefrigCompPwrCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_RefrigCompPwrCurveName_type > r (
              SimRefrigSysElem_RefrigCompPwrCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_RefrigCompPwrCurveName_)
            {
              this->SimRefrigSysElem_RefrigCompPwrCurveName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RefrigCompCapCurveName
          //
          if (n.name () == "SimRefrigSysElem_RefrigCompCapCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_RefrigCompCapCurveName_type > r (
              SimRefrigSysElem_RefrigCompCapCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_RefrigCompCapCurveName_)
            {
              this->SimRefrigSysElem_RefrigCompCapCurveName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedSuperheat
          //
          if (n.name () == "SimRefrigSysElem_RatedSuperheat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedSuperheat_)
            {
              this->SimRefrigSysElem_RatedSuperheat_.set (SimRefrigSysElem_RatedSuperheat_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedRtnGasTemp
          //
          if (n.name () == "SimRefrigSysElem_RatedRtnGasTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedRtnGasTemp_)
            {
              this->SimRefrigSysElem_RatedRtnGasTemp_.set (SimRefrigSysElem_RatedRtnGasTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedLiqTemp
          //
          if (n.name () == "SimRefrigSysElem_RatedLiqTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedLiqTemp_)
            {
              this->SimRefrigSysElem_RatedLiqTemp_.set (SimRefrigSysElem_RatedLiqTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_RatedSubcooling
          //
          if (n.name () == "SimRefrigSysElem_RatedSubcooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedSubcooling_)
            {
              this->SimRefrigSysElem_RatedSubcooling_.set (SimRefrigSysElem_RatedSubcooling_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_ModeofOperation
          //
          if (n.name () == "SimRefrigSysElem_ModeofOperation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_ModeofOperation_type > r (
              SimRefrigSysElem_ModeofOperation_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_ModeofOperation_)
            {
              this->SimRefrigSysElem_ModeofOperation_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_TranscriticalCompressPowerCurveName
          //
          if (n.name () == "SimRefrigSysElem_TranscriticalCompressPowerCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_TranscriticalCompressPowerCurveName_type > r (
              SimRefrigSysElem_TranscriticalCompressPowerCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_)
            {
              this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_TranscriticalCompressCapCurveName
          //
          if (n.name () == "SimRefrigSysElem_TranscriticalCompressCapCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_TranscriticalCompressCapCurveName_type > r (
              SimRefrigSysElem_TranscriticalCompressCapCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_TranscriticalCompressCapCurveName_)
            {
              this->SimRefrigSysElem_TranscriticalCompressCapCurveName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimRefrigerationSystemElement_Compressor* SimRefrigerationSystemElement_Compressor::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRefrigerationSystemElement_Compressor (*this, f, c);
      }

      SimRefrigerationSystemElement_Compressor& SimRefrigerationSystemElement_Compressor::
      operator= (const SimRefrigerationSystemElement_Compressor& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimRefrigerationSystemElement& > (*this) = x;
          this->SimRefrigSysElem_EndUseSubCat_ = x.SimRefrigSysElem_EndUseSubCat_;
          this->SimRefrigSysElem_RefrigCompPwrCurveName_ = x.SimRefrigSysElem_RefrigCompPwrCurveName_;
          this->SimRefrigSysElem_RefrigCompCapCurveName_ = x.SimRefrigSysElem_RefrigCompCapCurveName_;
          this->SimRefrigSysElem_RatedSuperheat_ = x.SimRefrigSysElem_RatedSuperheat_;
          this->SimRefrigSysElem_RatedRtnGasTemp_ = x.SimRefrigSysElem_RatedRtnGasTemp_;
          this->SimRefrigSysElem_RatedLiqTemp_ = x.SimRefrigSysElem_RatedLiqTemp_;
          this->SimRefrigSysElem_RatedSubcooling_ = x.SimRefrigSysElem_RatedSubcooling_;
          this->SimRefrigSysElem_ModeofOperation_ = x.SimRefrigSysElem_ModeofOperation_;
          this->SimRefrigSysElem_TranscriticalCompressPowerCurveName_ = x.SimRefrigSysElem_TranscriticalCompressPowerCurveName_;
          this->SimRefrigSysElem_TranscriticalCompressCapCurveName_ = x.SimRefrigSysElem_TranscriticalCompressCapCurveName_;
        }

        return *this;
      }

      SimRefrigerationSystemElement_Compressor::
      ~SimRefrigerationSystemElement_Compressor ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

