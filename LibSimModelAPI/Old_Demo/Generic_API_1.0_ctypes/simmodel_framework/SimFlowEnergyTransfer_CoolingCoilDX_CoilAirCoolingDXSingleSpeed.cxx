// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed
      // 

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName () const
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName ()
      {
        return this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (const SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_optional& x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondsCollectionWaterStorageTankName (::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > x)
      {
        this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedTotalCoolingCap () const
      {
        return this->SimFlowEnergyTrans_RatedTotalCoolingCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedTotalCoolingCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedTotalCoolingCap ()
      {
        return this->SimFlowEnergyTrans_RatedTotalCoolingCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedTotalCoolingCap (const SimFlowEnergyTrans_RatedTotalCoolingCap_type& x)
      {
        this->SimFlowEnergyTrans_RatedTotalCoolingCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedTotalCoolingCap (const SimFlowEnergyTrans_RatedTotalCoolingCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatedTotalCoolingCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSensHeatRatio () const
      {
        return this->SimFlowEnergyTrans_RatedSensHeatRatio_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedSensHeatRatio_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSensHeatRatio ()
      {
        return this->SimFlowEnergyTrans_RatedSensHeatRatio_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSensHeatRatio (const SimFlowEnergyTrans_RatedSensHeatRatio_type& x)
      {
        this->SimFlowEnergyTrans_RatedSensHeatRatio_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSensHeatRatio (const SimFlowEnergyTrans_RatedSensHeatRatio_optional& x)
      {
        this->SimFlowEnergyTrans_RatedSensHeatRatio_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedCOP () const
      {
        return this->SimFlowEnergyTrans_RatedCOP_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedCOP_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedCOP ()
      {
        return this->SimFlowEnergyTrans_RatedCOP_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedCOP (const SimFlowEnergyTrans_RatedCOP_type& x)
      {
        this->SimFlowEnergyTrans_RatedCOP_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedCOP (const SimFlowEnergyTrans_RatedCOP_optional& x)
      {
        this->SimFlowEnergyTrans_RatedCOP_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate (const SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate (const SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName () const
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName ()
      {
        return this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (const SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > x)
      {
        this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName () const
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName ()
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin () const
      {
        return this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin ()
      {
        return this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin (const SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_type& x)
      {
        this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_NomTimeForCondsRemovToBegin (const SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_optional& x)
      {
        this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap () const
      {
        return this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap ()
      {
        return this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap (const SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_type& x)
      {
        this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap (const SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_MaxCyclingRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxCyclingRate () const
      {
        return this->SimFlowEnergyTrans_MaxCyclingRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_MaxCyclingRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxCyclingRate ()
      {
        return this->SimFlowEnergyTrans_MaxCyclingRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxCyclingRate (const SimFlowEnergyTrans_MaxCyclingRate_type& x)
      {
        this->SimFlowEnergyTrans_MaxCyclingRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxCyclingRate (const SimFlowEnergyTrans_MaxCyclingRate_optional& x)
      {
        this->SimFlowEnergyTrans_MaxCyclingRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_LatentCapTimeConst_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_LatentCapTimeConst () const
      {
        return this->SimFlowEnergyTrans_LatentCapTimeConst_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_LatentCapTimeConst_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_LatentCapTimeConst ()
      {
        return this->SimFlowEnergyTrans_LatentCapTimeConst_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_LatentCapTimeConst (const SimFlowEnergyTrans_LatentCapTimeConst_type& x)
      {
        this->SimFlowEnergyTrans_LatentCapTimeConst_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_LatentCapTimeConst (const SimFlowEnergyTrans_LatentCapTimeConst_optional& x)
      {
        this->SimFlowEnergyTrans_LatentCapTimeConst_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_CondAirInletNodeName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondAirInletNodeName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_CondAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (const SimFlowEnergyTrans_CondAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_CondAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondType () const
      {
        return this->SimFlowEnergyTrans_CondType_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CondType_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondType ()
      {
        return this->SimFlowEnergyTrans_CondType_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_type& x)
      {
        this->SimFlowEnergyTrans_CondType_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondType (const SimFlowEnergyTrans_CondType_optional& x)
      {
        this->SimFlowEnergyTrans_CondType_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CondType (::std::auto_ptr< SimFlowEnergyTrans_CondType_type > x)
      {
        this->SimFlowEnergyTrans_CondType_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondEffect () const
      {
        return this->SimFlowEnergyTrans_EvapCondEffect_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondEffect_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondEffect ()
      {
        return this->SimFlowEnergyTrans_EvapCondEffect_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondEffect (const SimFlowEnergyTrans_EvapCondEffect_type& x)
      {
        this->SimFlowEnergyTrans_EvapCondEffect_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondEffect (const SimFlowEnergyTrans_EvapCondEffect_optional& x)
      {
        this->SimFlowEnergyTrans_EvapCondEffect_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_EvapCondAirFlowRate_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondAirFlowRate_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_EvapCondAirFlowRate_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondAirFlowRate (const SimFlowEnergyTrans_EvapCondAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_EvapCondAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondAirFlowRate (const SimFlowEnergyTrans_EvapCondAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_EvapCondAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump () const
      {
        return this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump ()
      {
        return this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_type& x)
      {
        this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump (const SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_optional& x)
      {
        this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap () const
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap ()
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp () const
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp ()
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName () const
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_SupWaterStoTankName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName ()
      {
        return this->SimFlowEnergyTrans_SupWaterStoTankName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > x)
      {
        this->SimFlowEnergyTrans_SupWaterStoTankName_.set (x);
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatCap () const
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatCap_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatCap ()
      {
        return this->SimFlowEnergyTrans_BasinHeatCap_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatCap (const SimFlowEnergyTrans_BasinHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp () const
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp ()
      {
        return this->SimFlowEnergyTrans_BasinHeatSetpointTemp_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatSetpointTemp (const SimFlowEnergyTrans_BasinHeatSetpointTemp_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x;
      }

      const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName () const
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName ()
      {
        return this->SimFlowEnergyTrans_BasinHeatOperatSchedName_;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_type& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (const SimFlowEnergyTrans_BasinHeatOperatSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x;
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTrans_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > x)
      {
        this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed
      //

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_RatedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedCOP_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        SimFlowEnergyTrans_MaxCyclingRate_ (this),
        SimFlowEnergyTrans_LatentCapTimeConst_ (this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (this),
        SimFlowEnergyTrans_CondType_ (this),
        SimFlowEnergyTrans_EvapCondEffect_ (this),
        SimFlowEnergyTrans_EvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed& x,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_, f, this),
        SimFlowEnergyTrans_RatedTotalCoolingCap_ (x.SimFlowEnergyTrans_RatedTotalCoolingCap_, f, this),
        SimFlowEnergyTrans_RatedSensHeatRatio_ (x.SimFlowEnergyTrans_RatedSensHeatRatio_, f, this),
        SimFlowEnergyTrans_RatedCOP_ (x.SimFlowEnergyTrans_RatedCOP_, f, this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (x.SimFlowEnergyTrans_RatedAirFlowRate_, f, this),
        SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_ (x.SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_, f, this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (x.SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (x.SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_, f, this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_, f, this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (x.SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_, f, this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (x.SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_, f, this),
        SimFlowEnergyTrans_MaxCyclingRate_ (x.SimFlowEnergyTrans_MaxCyclingRate_, f, this),
        SimFlowEnergyTrans_LatentCapTimeConst_ (x.SimFlowEnergyTrans_LatentCapTimeConst_, f, this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (x.SimFlowEnergyTrans_CondAirInletNodeName_, f, this),
        SimFlowEnergyTrans_CondType_ (x.SimFlowEnergyTrans_CondType_, f, this),
        SimFlowEnergyTrans_EvapCondEffect_ (x.SimFlowEnergyTrans_EvapCondEffect_, f, this),
        SimFlowEnergyTrans_EvapCondAirFlowRate_ (x.SimFlowEnergyTrans_EvapCondAirFlowRate_, f, this),
        SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_ (x.SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_, f, this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (x.SimFlowEnergyTrans_CrankcaseHeatCap_, f, this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_, f, this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (x.SimFlowEnergyTrans_SupWaterStoTankName_, f, this),
        SimFlowEnergyTrans_BasinHeatCap_ (x.SimFlowEnergyTrans_BasinHeatCap_, f, this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (x.SimFlowEnergyTrans_BasinHeatSetpointTemp_, f, this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (x.SimFlowEnergyTrans_BasinHeatOperatSchedName_, f, this)
      {
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed (const ::xercesc::DOMElement& e,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ (this),
        SimFlowEnergyTrans_RatedTotalCoolingCap_ (this),
        SimFlowEnergyTrans_RatedSensHeatRatio_ (this),
        SimFlowEnergyTrans_RatedCOP_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ (this),
        SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ (this),
        SimFlowEnergyTrans_MaxCyclingRate_ (this),
        SimFlowEnergyTrans_LatentCapTimeConst_ (this),
        SimFlowEnergyTrans_CondAirInletNodeName_ (this),
        SimFlowEnergyTrans_CondType_ (this),
        SimFlowEnergyTrans_EvapCondEffect_ (this),
        SimFlowEnergyTrans_EvapCondAirFlowRate_ (this),
        SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_SupWaterStoTankName_ (this),
        SimFlowEnergyTrans_BasinHeatCap_ (this),
        SimFlowEnergyTrans_BasinHeatSetpointTemp_ (this),
        SimFlowEnergyTrans_BasinHeatOperatSchedName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondsCollectionWaterStorageTankName
          //
          if (n.name () == "SimFlowEnergyTrans_CondsCollectionWaterStorageTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_type > r (
              SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_)
            {
              this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedTotalCoolingCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatedTotalCoolingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedTotalCoolingCap_)
            {
              this->SimFlowEnergyTrans_RatedTotalCoolingCap_.set (SimFlowEnergyTrans_RatedTotalCoolingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedSensHeatRatio
          //
          if (n.name () == "SimFlowEnergyTrans_RatedSensHeatRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedSensHeatRatio_)
            {
              this->SimFlowEnergyTrans_RatedSensHeatRatio_.set (SimFlowEnergyTrans_RatedSensHeatRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedCOP
          //
          if (n.name () == "SimFlowEnergyTrans_RatedCOP" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedCOP_)
            {
              this->SimFlowEnergyTrans_RatedCOP_.set (SimFlowEnergyTrans_RatedCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedAirFlowRate_.set (SimFlowEnergyTrans_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_.set (SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_type > r (
              SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_type > r (
              SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_)
            {
              this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PartLoadFractCorrelCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_PartLoadFractCorrelCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > r (
              SimFlowEnergyTrans_PartLoadFractCorrelCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_)
            {
              this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NomTimeForCondsRemovToBegin
          //
          if (n.name () == "SimFlowEnergyTrans_NomTimeForCondsRemovToBegin" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_)
            {
              this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_.set (SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_)
            {
              this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_.set (SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxCyclingRate
          //
          if (n.name () == "SimFlowEnergyTrans_MaxCyclingRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxCyclingRate_)
            {
              this->SimFlowEnergyTrans_MaxCyclingRate_.set (SimFlowEnergyTrans_MaxCyclingRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LatentCapTimeConst
          //
          if (n.name () == "SimFlowEnergyTrans_LatentCapTimeConst" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LatentCapTimeConst_)
            {
              this->SimFlowEnergyTrans_LatentCapTimeConst_.set (SimFlowEnergyTrans_LatentCapTimeConst_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CondAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_CondAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondAirInletNodeName_type > r (
              SimFlowEnergyTrans_CondAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_CondAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondType
          //
          if (n.name () == "SimFlowEnergyTrans_CondType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondType_type > r (
              SimFlowEnergyTrans_CondType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondType_)
            {
              this->SimFlowEnergyTrans_CondType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapCondEffect
          //
          if (n.name () == "SimFlowEnergyTrans_EvapCondEffect" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_EvapCondEffect_)
            {
              this->SimFlowEnergyTrans_EvapCondEffect_.set (SimFlowEnergyTrans_EvapCondEffect_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapCondAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_EvapCondAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_EvapCondAirFlowRate_)
            {
              this->SimFlowEnergyTrans_EvapCondAirFlowRate_.set (SimFlowEnergyTrans_EvapCondAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump
          //
          if (n.name () == "SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_)
            {
              this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_.set (SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CrankcaseHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_CrankcaseHeatCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_CrankcaseHeatCap_)
            {
              this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (SimFlowEnergyTrans_CrankcaseHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp
          //
          if (n.name () == "SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_)
            {
              this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SupWaterStoTankName
          //
          if (n.name () == "SimFlowEnergyTrans_SupWaterStoTankName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > r (
              SimFlowEnergyTrans_SupWaterStoTankName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupWaterStoTankName_)
            {
              this->SimFlowEnergyTrans_SupWaterStoTankName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatCap_)
            {
              this->SimFlowEnergyTrans_BasinHeatCap_.set (SimFlowEnergyTrans_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatSetpointTemp
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatSetpointTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_BasinHeatSetpointTemp_)
            {
              this->SimFlowEnergyTrans_BasinHeatSetpointTemp_.set (SimFlowEnergyTrans_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_BasinHeatOperatSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_BasinHeatOperatSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_BasinHeatOperatSchedName_type > r (
              SimFlowEnergyTrans_BasinHeatOperatSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_BasinHeatOperatSchedName_)
            {
              this->SimFlowEnergyTrans_BasinHeatOperatSchedName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed* SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed (*this, f, c);
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed& SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      operator= (const SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_CoolingCoilDX& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_ = x.SimFlowEnergyTrans_CondsCollectionWaterStorageTankName_;
          this->SimFlowEnergyTrans_RatedTotalCoolingCap_ = x.SimFlowEnergyTrans_RatedTotalCoolingCap_;
          this->SimFlowEnergyTrans_RatedSensHeatRatio_ = x.SimFlowEnergyTrans_RatedSensHeatRatio_;
          this->SimFlowEnergyTrans_RatedCOP_ = x.SimFlowEnergyTrans_RatedCOP_;
          this->SimFlowEnergyTrans_RatedAirFlowRate_ = x.SimFlowEnergyTrans_RatedAirFlowRate_;
          this->SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_ = x.SimFlowEnergyTrans_RatedEvapFanPwrPerVolFlowRate_;
          this->SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_ = x.SimFlowEnergyTrans_TotalCoolingCapFuncTempCurveName_;
          this->SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_ = x.SimFlowEnergyTrans_TotalCoolingCapFuncFlowFractCurveName_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
          this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
          this->SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_ = x.SimFlowEnergyTrans_NomTimeForCondsRemovToBegin_;
          this->SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_ = x.SimFlowEnergyTrans_RatioInitMoistEvapRate_SteadyStateLatentCap_;
          this->SimFlowEnergyTrans_MaxCyclingRate_ = x.SimFlowEnergyTrans_MaxCyclingRate_;
          this->SimFlowEnergyTrans_LatentCapTimeConst_ = x.SimFlowEnergyTrans_LatentCapTimeConst_;
          this->SimFlowEnergyTrans_CondAirInletNodeName_ = x.SimFlowEnergyTrans_CondAirInletNodeName_;
          this->SimFlowEnergyTrans_CondType_ = x.SimFlowEnergyTrans_CondType_;
          this->SimFlowEnergyTrans_EvapCondEffect_ = x.SimFlowEnergyTrans_EvapCondEffect_;
          this->SimFlowEnergyTrans_EvapCondAirFlowRate_ = x.SimFlowEnergyTrans_EvapCondAirFlowRate_;
          this->SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_ = x.SimFlowEnergyTrans_EvapCondPumpRatedPwrConsump_;
          this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x.SimFlowEnergyTrans_CrankcaseHeatCap_;
          this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
          this->SimFlowEnergyTrans_SupWaterStoTankName_ = x.SimFlowEnergyTrans_SupWaterStoTankName_;
          this->SimFlowEnergyTrans_BasinHeatCap_ = x.SimFlowEnergyTrans_BasinHeatCap_;
          this->SimFlowEnergyTrans_BasinHeatSetpointTemp_ = x.SimFlowEnergyTrans_BasinHeatSetpointTemp_;
          this->SimFlowEnergyTrans_BasinHeatOperatSchedName_ = x.SimFlowEnergyTrans_BasinHeatOperatSchedName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed::
      ~SimFlowEnergyTransfer_CoolingCoilDX_CoilAirCoolingDXSingleSpeed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

