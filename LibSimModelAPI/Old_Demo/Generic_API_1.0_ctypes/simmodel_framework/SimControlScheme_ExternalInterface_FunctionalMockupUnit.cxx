// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimControlScheme_ExternalInterface_FunctionalMockupUnit.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_ExternalInterface_FunctionalMockupUnit
      // 

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMUFileName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUFileName () const
      {
        return this->SimCntrlSchm_FMUFileName_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMUFileName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUFileName ()
      {
        return this->SimCntrlSchm_FMUFileName_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUFileName (const SimCntrlSchm_FMUFileName_type& x)
      {
        this->SimCntrlSchm_FMUFileName_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUFileName (const SimCntrlSchm_FMUFileName_optional& x)
      {
        this->SimCntrlSchm_FMUFileName_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUFileName (::std::auto_ptr< SimCntrlSchm_FMUFileName_type > x)
      {
        this->SimCntrlSchm_FMUFileName_.set (x);
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMUTimeout_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUTimeout () const
      {
        return this->SimCntrlSchm_FMUTimeout_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMUTimeout_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUTimeout ()
      {
        return this->SimCntrlSchm_FMUTimeout_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUTimeout (const SimCntrlSchm_FMUTimeout_type& x)
      {
        this->SimCntrlSchm_FMUTimeout_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMUTimeout (const SimCntrlSchm_FMUTimeout_optional& x)
      {
        this->SimCntrlSchm_FMUTimeout_ = x;
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMULoggingOn_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMULoggingOn () const
      {
        return this->SimCntrlSchm_FMULoggingOn_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::SimCntrlSchm_FMULoggingOn_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMULoggingOn ()
      {
        return this->SimCntrlSchm_FMULoggingOn_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMULoggingOn (const SimCntrlSchm_FMULoggingOn_type& x)
      {
        this->SimCntrlSchm_FMULoggingOn_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimCntrlSchm_FMULoggingOn (const SimCntrlSchm_FMULoggingOn_optional& x)
      {
        this->SimCntrlSchm_FMULoggingOn_ = x;
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue () const
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue ()
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue (const ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_type& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue (const ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_optional& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue (::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_type > x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_.set (x);
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName () const
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName ()
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName (const ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_type& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName (const ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_optional& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName (::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_type > x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_.set (x);
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName () const
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName ()
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName (const ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_type& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName (const ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_optional& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName (::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_type > x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_.set (x);
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName () const
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName ()
      {
        return this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName (const ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_type& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName (const ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_optional& x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName (::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_type > x)
      {
        this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_.set (x);
      }

      const SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames () const
      {
        return this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_optional& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames ()
      {
        return this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames (const ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_type& x)
      {
        this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_.set (x);
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames (const ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_optional& x)
      {
        this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_ = x;
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames (::std::auto_ptr< ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_type > x)
      {
        this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimControlScheme_ExternalInterface_FunctionalMockupUnit
      //

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimControlScheme_ExternalInterface_FunctionalMockupUnit (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ExternalInterface (RefId),
        SimCntrlSchm_FMUFileName_ (this),
        SimCntrlSchm_FMUTimeout_ (this),
        SimCntrlSchm_FMULoggingOn_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_ (this),
        ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_ (this)
      {
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimControlScheme_ExternalInterface_FunctionalMockupUnit (const SimControlScheme_ExternalInterface_FunctionalMockupUnit& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ExternalInterface (x, f, c),
        SimCntrlSchm_FMUFileName_ (x.SimCntrlSchm_FMUFileName_, f, this),
        SimCntrlSchm_FMUTimeout_ (x.SimCntrlSchm_FMUTimeout_, f, this),
        SimCntrlSchm_FMULoggingOn_ (x.SimCntrlSchm_FMULoggingOn_, f, this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_ (x.ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_, f, this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_ (x.ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_, f, this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_ (x.ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_, f, this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_ (x.ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_, f, this),
        ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_ (x.ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_, f, this)
      {
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      SimControlScheme_ExternalInterface_FunctionalMockupUnit (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ExternalInterface (e, f | ::xml_schema::flags::base, c),
        SimCntrlSchm_FMUFileName_ (this),
        SimCntrlSchm_FMUTimeout_ (this),
        SimCntrlSchm_FMULoggingOn_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_ (this),
        ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_ (this),
        ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimControlScheme_ExternalInterface::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimCntrlSchm_FMUFileName
          //
          if (n.name () == "SimCntrlSchm_FMUFileName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimCntrlSchm_FMUFileName_type > r (
              SimCntrlSchm_FMUFileName_traits::create (i, f, this));

            if (!this->SimCntrlSchm_FMUFileName_)
            {
              this->SimCntrlSchm_FMUFileName_.set (r);
              continue;
            }
          }

          // SimCntrlSchm_FMUTimeout
          //
          if (n.name () == "SimCntrlSchm_FMUTimeout" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_FMUTimeout_)
            {
              this->SimCntrlSchm_FMUTimeout_.set (SimCntrlSchm_FMUTimeout_traits::create (i, f, this));
              continue;
            }
          }

          // SimCntrlSchm_FMULoggingOn
          //
          if (n.name () == "SimCntrlSchm_FMULoggingOn" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimCntrlSchm_FMULoggingOn_)
            {
              this->SimCntrlSchm_FMULoggingOn_.set (SimCntrlSchm_FMULoggingOn_traits::create (i, f, this));
              continue;
            }
          }

          // ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue
          //
          if (n.name () == "ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_type > r (
              ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_traits::create (i, f, this));

            if (!this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_)
            {
              this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_.set (r);
              continue;
            }
          }

          // ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName
          //
          if (n.name () == "ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_type > r (
              ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_traits::create (i, f, this));

            if (!this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_)
            {
              this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_.set (r);
              continue;
            }
          }

          // ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName
          //
          if (n.name () == "ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_type > r (
              ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_traits::create (i, f, this));

            if (!this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_)
            {
              this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_.set (r);
              continue;
            }
          }

          // ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName
          //
          if (n.name () == "ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_type > r (
              ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_traits::create (i, f, this));

            if (!this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_)
            {
              this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_.set (r);
              continue;
            }
          }

          // ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames
          //
          if (n.name () == "ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_type > r (
              ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_traits::create (i, f, this));

            if (!this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_)
            {
              this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit* SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimControlScheme_ExternalInterface_FunctionalMockupUnit (*this, f, c);
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit& SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      operator= (const SimControlScheme_ExternalInterface_FunctionalMockupUnit& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimControlScheme_ExternalInterface& > (*this) = x;
          this->SimCntrlSchm_FMUFileName_ = x.SimCntrlSchm_FMUFileName_;
          this->SimCntrlSchm_FMUTimeout_ = x.SimCntrlSchm_FMUTimeout_;
          this->SimCntrlSchm_FMULoggingOn_ = x.SimCntrlSchm_FMULoggingOn_;
          this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_ = x.ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusKeyValue_;
          this->ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_ = x.ExtInterf_FuncMockUnitImp_Frm_Var_EnergyPlusVarName_;
          this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_ = x.ExtInterf_FuncMockUnitImp_Frm_Var_FMUInstanceName_;
          this->ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_ = x.ExtInterf_FuncMockUnitImp_Frm_Var_FMUVarName_;
          this->ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_ = x.ExtInterf_FuncMockUnitImp_To_Sched_SchedTypeLimitsNames_;
        }

        return *this;
      }

      SimControlScheme_ExternalInterface_FunctionalMockupUnit::
      ~SimControlScheme_ExternalInterface_FunctionalMockupUnit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

