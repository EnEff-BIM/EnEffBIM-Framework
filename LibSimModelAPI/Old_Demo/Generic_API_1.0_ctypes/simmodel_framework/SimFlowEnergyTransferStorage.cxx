// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransferStorage.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransferStorage
      // 

      const SimFlowEnergyTransferStorage::Representation_optional& SimFlowEnergyTransferStorage::
      Representation () const
      {
        return this->Representation_;
      }

      SimFlowEnergyTransferStorage::Representation_optional& SimFlowEnergyTransferStorage::
      Representation ()
      {
        return this->Representation_;
      }

      void SimFlowEnergyTransferStorage::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimFlowEnergyTransferStorage::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimFlowEnergyTransferStorage::SimFlowEnergyTransSto_Name_optional& SimFlowEnergyTransferStorage::
      SimFlowEnergyTransSto_Name () const
      {
        return this->SimFlowEnergyTransSto_Name_;
      }

      SimFlowEnergyTransferStorage::SimFlowEnergyTransSto_Name_optional& SimFlowEnergyTransferStorage::
      SimFlowEnergyTransSto_Name ()
      {
        return this->SimFlowEnergyTransSto_Name_;
      }

      void SimFlowEnergyTransferStorage::
      SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_type& x)
      {
        this->SimFlowEnergyTransSto_Name_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      SimFlowEnergyTransSto_Name (const SimFlowEnergyTransSto_Name_optional& x)
      {
        this->SimFlowEnergyTransSto_Name_ = x;
      }

      void SimFlowEnergyTransferStorage::
      SimFlowEnergyTransSto_Name (::std::auto_ptr< SimFlowEnergyTransSto_Name_type > x)
      {
        this->SimFlowEnergyTransSto_Name_.set (x);
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_WaterHeatName_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_WaterHeatName () const
      {
        return this->WaterHeater_Sizing_WaterHeatName_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_WaterHeatName_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_WaterHeatName ()
      {
        return this->WaterHeater_Sizing_WaterHeatName_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_WaterHeatName (const WaterHeater_Sizing_WaterHeatName_type& x)
      {
        this->WaterHeater_Sizing_WaterHeatName_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_WaterHeatName (const WaterHeater_Sizing_WaterHeatName_optional& x)
      {
        this->WaterHeater_Sizing_WaterHeatName_ = x;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_WaterHeatName (::std::auto_ptr< WaterHeater_Sizing_WaterHeatName_type > x)
      {
        this->WaterHeater_Sizing_WaterHeatName_.set (x);
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_DesignMode_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_DesignMode () const
      {
        return this->WaterHeater_Sizing_DesignMode_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_DesignMode_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_DesignMode ()
      {
        return this->WaterHeater_Sizing_DesignMode_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_DesignMode (const WaterHeater_Sizing_DesignMode_type& x)
      {
        this->WaterHeater_Sizing_DesignMode_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_DesignMode (const WaterHeater_Sizing_DesignMode_optional& x)
      {
        this->WaterHeater_Sizing_DesignMode_ = x;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_DesignMode (::std::auto_ptr< WaterHeater_Sizing_DesignMode_type > x)
      {
        this->WaterHeater_Sizing_DesignMode_.set (x);
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeStorageCanMeetPeakDraw () const
      {
        return this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeStorageCanMeetPeakDraw ()
      {
        return this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeStorageCanMeetPeakDraw (const WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_type& x)
      {
        this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeStorageCanMeetPeakDraw (const WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_optional& x)
      {
        this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_TimeForTankRecov_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeForTankRecov () const
      {
        return this->WaterHeater_Sizing_TimeForTankRecov_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_TimeForTankRecov_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeForTankRecov ()
      {
        return this->WaterHeater_Sizing_TimeForTankRecov_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeForTankRecov (const WaterHeater_Sizing_TimeForTankRecov_type& x)
      {
        this->WaterHeater_Sizing_TimeForTankRecov_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_TimeForTankRecov (const WaterHeater_Sizing_TimeForTankRecov_optional& x)
      {
        this->WaterHeater_Sizing_TimeForTankRecov_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_NomTankVolForAutosizPlantConn_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NomTankVolForAutosizPlantConn () const
      {
        return this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_NomTankVolForAutosizPlantConn_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NomTankVolForAutosizPlantConn ()
      {
        return this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NomTankVolForAutosizPlantConn (const WaterHeater_Sizing_NomTankVolForAutosizPlantConn_type& x)
      {
        this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NomTankVolForAutosizPlantConn (const WaterHeater_Sizing_NomTankVolForAutosizPlantConn_optional& x)
      {
        this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumBedrooms_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBedrooms () const
      {
        return this->WaterHeater_Sizing_NumBedrooms_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumBedrooms_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBedrooms ()
      {
        return this->WaterHeater_Sizing_NumBedrooms_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBedrooms (const WaterHeater_Sizing_NumBedrooms_type& x)
      {
        this->WaterHeater_Sizing_NumBedrooms_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBedrooms (const WaterHeater_Sizing_NumBedrooms_optional& x)
      {
        this->WaterHeater_Sizing_NumBedrooms_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumBathrooms_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBathrooms () const
      {
        return this->WaterHeater_Sizing_NumBathrooms_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumBathrooms_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBathrooms ()
      {
        return this->WaterHeater_Sizing_NumBathrooms_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBathrooms (const WaterHeater_Sizing_NumBathrooms_type& x)
      {
        this->WaterHeater_Sizing_NumBathrooms_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumBathrooms (const WaterHeater_Sizing_NumBathrooms_optional& x)
      {
        this->WaterHeater_Sizing_NumBathrooms_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerPerson_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerPerson () const
      {
        return this->WaterHeater_Sizing_StorageCapPerPerson_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerPerson_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerPerson ()
      {
        return this->WaterHeater_Sizing_StorageCapPerPerson_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerPerson (const WaterHeater_Sizing_StorageCapPerPerson_type& x)
      {
        this->WaterHeater_Sizing_StorageCapPerPerson_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerPerson (const WaterHeater_Sizing_StorageCapPerPerson_optional& x)
      {
        this->WaterHeater_Sizing_StorageCapPerPerson_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerPerson_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerPerson () const
      {
        return this->WaterHeater_Sizing_RecovCapPerPerson_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerPerson_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerPerson ()
      {
        return this->WaterHeater_Sizing_RecovCapPerPerson_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerPerson (const WaterHeater_Sizing_RecovCapPerPerson_type& x)
      {
        this->WaterHeater_Sizing_RecovCapPerPerson_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerPerson (const WaterHeater_Sizing_RecovCapPerPerson_optional& x)
      {
        this->WaterHeater_Sizing_RecovCapPerPerson_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerFloorArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerFloorArea () const
      {
        return this->WaterHeater_Sizing_StorageCapPerFloorArea_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerFloorArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerFloorArea ()
      {
        return this->WaterHeater_Sizing_StorageCapPerFloorArea_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerFloorArea (const WaterHeater_Sizing_StorageCapPerFloorArea_type& x)
      {
        this->WaterHeater_Sizing_StorageCapPerFloorArea_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerFloorArea (const WaterHeater_Sizing_StorageCapPerFloorArea_optional& x)
      {
        this->WaterHeater_Sizing_StorageCapPerFloorArea_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerFloorArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerFloorArea () const
      {
        return this->WaterHeater_Sizing_RecovCapPerFloorArea_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerFloorArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerFloorArea ()
      {
        return this->WaterHeater_Sizing_RecovCapPerFloorArea_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerFloorArea (const WaterHeater_Sizing_RecovCapPerFloorArea_type& x)
      {
        this->WaterHeater_Sizing_RecovCapPerFloorArea_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerFloorArea (const WaterHeater_Sizing_RecovCapPerFloorArea_optional& x)
      {
        this->WaterHeater_Sizing_RecovCapPerFloorArea_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumUnits_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumUnits () const
      {
        return this->WaterHeater_Sizing_NumUnits_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_NumUnits_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumUnits ()
      {
        return this->WaterHeater_Sizing_NumUnits_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumUnits (const WaterHeater_Sizing_NumUnits_type& x)
      {
        this->WaterHeater_Sizing_NumUnits_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_NumUnits (const WaterHeater_Sizing_NumUnits_optional& x)
      {
        this->WaterHeater_Sizing_NumUnits_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerUnit_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerUnit () const
      {
        return this->WaterHeater_Sizing_StorageCapPerUnit_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerUnit_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerUnit ()
      {
        return this->WaterHeater_Sizing_StorageCapPerUnit_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerUnit (const WaterHeater_Sizing_StorageCapPerUnit_type& x)
      {
        this->WaterHeater_Sizing_StorageCapPerUnit_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerUnit (const WaterHeater_Sizing_StorageCapPerUnit_optional& x)
      {
        this->WaterHeater_Sizing_StorageCapPerUnit_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerUnit_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerUnit () const
      {
        return this->WaterHeater_Sizing_RecovCapPerUnit_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_RecovCapPerUnit_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerUnit ()
      {
        return this->WaterHeater_Sizing_RecovCapPerUnit_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerUnit (const WaterHeater_Sizing_RecovCapPerUnit_type& x)
      {
        this->WaterHeater_Sizing_RecovCapPerUnit_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_RecovCapPerUnit (const WaterHeater_Sizing_RecovCapPerUnit_optional& x)
      {
        this->WaterHeater_Sizing_RecovCapPerUnit_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerCollectArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerCollectArea () const
      {
        return this->WaterHeater_Sizing_StorageCapPerCollectArea_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_StorageCapPerCollectArea_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerCollectArea ()
      {
        return this->WaterHeater_Sizing_StorageCapPerCollectArea_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerCollectArea (const WaterHeater_Sizing_StorageCapPerCollectArea_type& x)
      {
        this->WaterHeater_Sizing_StorageCapPerCollectArea_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_StorageCapPerCollectArea (const WaterHeater_Sizing_StorageCapPerCollectArea_optional& x)
      {
        this->WaterHeater_Sizing_StorageCapPerCollectArea_ = x;
      }

      const SimFlowEnergyTransferStorage::WaterHeater_Sizing_HeightAspectRatio_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_HeightAspectRatio () const
      {
        return this->WaterHeater_Sizing_HeightAspectRatio_;
      }

      SimFlowEnergyTransferStorage::WaterHeater_Sizing_HeightAspectRatio_optional& SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_HeightAspectRatio ()
      {
        return this->WaterHeater_Sizing_HeightAspectRatio_;
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_HeightAspectRatio (const WaterHeater_Sizing_HeightAspectRatio_type& x)
      {
        this->WaterHeater_Sizing_HeightAspectRatio_.set (x);
      }

      void SimFlowEnergyTransferStorage::
      WaterHeater_Sizing_HeightAspectRatio (const WaterHeater_Sizing_HeightAspectRatio_optional& x)
      {
        this->WaterHeater_Sizing_HeightAspectRatio_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransferStorage
      //

      SimFlowEnergyTransferStorage::
      SimFlowEnergyTransferStorage (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyConverter (RefId),
        Representation_ (this),
        SimFlowEnergyTransSto_Name_ (this),
        WaterHeater_Sizing_WaterHeatName_ (this),
        WaterHeater_Sizing_DesignMode_ (this),
        WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_ (this),
        WaterHeater_Sizing_TimeForTankRecov_ (this),
        WaterHeater_Sizing_NomTankVolForAutosizPlantConn_ (this),
        WaterHeater_Sizing_NumBedrooms_ (this),
        WaterHeater_Sizing_NumBathrooms_ (this),
        WaterHeater_Sizing_StorageCapPerPerson_ (this),
        WaterHeater_Sizing_RecovCapPerPerson_ (this),
        WaterHeater_Sizing_StorageCapPerFloorArea_ (this),
        WaterHeater_Sizing_RecovCapPerFloorArea_ (this),
        WaterHeater_Sizing_NumUnits_ (this),
        WaterHeater_Sizing_StorageCapPerUnit_ (this),
        WaterHeater_Sizing_RecovCapPerUnit_ (this),
        WaterHeater_Sizing_StorageCapPerCollectArea_ (this),
        WaterHeater_Sizing_HeightAspectRatio_ (this)
      {
      }

      SimFlowEnergyTransferStorage::
      SimFlowEnergyTransferStorage (const SimFlowEnergyTransferStorage& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyConverter (x, f, c),
        Representation_ (x.Representation_, f, this),
        SimFlowEnergyTransSto_Name_ (x.SimFlowEnergyTransSto_Name_, f, this),
        WaterHeater_Sizing_WaterHeatName_ (x.WaterHeater_Sizing_WaterHeatName_, f, this),
        WaterHeater_Sizing_DesignMode_ (x.WaterHeater_Sizing_DesignMode_, f, this),
        WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_ (x.WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_, f, this),
        WaterHeater_Sizing_TimeForTankRecov_ (x.WaterHeater_Sizing_TimeForTankRecov_, f, this),
        WaterHeater_Sizing_NomTankVolForAutosizPlantConn_ (x.WaterHeater_Sizing_NomTankVolForAutosizPlantConn_, f, this),
        WaterHeater_Sizing_NumBedrooms_ (x.WaterHeater_Sizing_NumBedrooms_, f, this),
        WaterHeater_Sizing_NumBathrooms_ (x.WaterHeater_Sizing_NumBathrooms_, f, this),
        WaterHeater_Sizing_StorageCapPerPerson_ (x.WaterHeater_Sizing_StorageCapPerPerson_, f, this),
        WaterHeater_Sizing_RecovCapPerPerson_ (x.WaterHeater_Sizing_RecovCapPerPerson_, f, this),
        WaterHeater_Sizing_StorageCapPerFloorArea_ (x.WaterHeater_Sizing_StorageCapPerFloorArea_, f, this),
        WaterHeater_Sizing_RecovCapPerFloorArea_ (x.WaterHeater_Sizing_RecovCapPerFloorArea_, f, this),
        WaterHeater_Sizing_NumUnits_ (x.WaterHeater_Sizing_NumUnits_, f, this),
        WaterHeater_Sizing_StorageCapPerUnit_ (x.WaterHeater_Sizing_StorageCapPerUnit_, f, this),
        WaterHeater_Sizing_RecovCapPerUnit_ (x.WaterHeater_Sizing_RecovCapPerUnit_, f, this),
        WaterHeater_Sizing_StorageCapPerCollectArea_ (x.WaterHeater_Sizing_StorageCapPerCollectArea_, f, this),
        WaterHeater_Sizing_HeightAspectRatio_ (x.WaterHeater_Sizing_HeightAspectRatio_, f, this)
      {
      }

      SimFlowEnergyTransferStorage::
      SimFlowEnergyTransferStorage (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyConverter (e, f | ::xml_schema::flags::base, c),
        Representation_ (this),
        SimFlowEnergyTransSto_Name_ (this),
        WaterHeater_Sizing_WaterHeatName_ (this),
        WaterHeater_Sizing_DesignMode_ (this),
        WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_ (this),
        WaterHeater_Sizing_TimeForTankRecov_ (this),
        WaterHeater_Sizing_NomTankVolForAutosizPlantConn_ (this),
        WaterHeater_Sizing_NumBedrooms_ (this),
        WaterHeater_Sizing_NumBathrooms_ (this),
        WaterHeater_Sizing_StorageCapPerPerson_ (this),
        WaterHeater_Sizing_RecovCapPerPerson_ (this),
        WaterHeater_Sizing_StorageCapPerFloorArea_ (this),
        WaterHeater_Sizing_RecovCapPerFloorArea_ (this),
        WaterHeater_Sizing_NumUnits_ (this),
        WaterHeater_Sizing_StorageCapPerUnit_ (this),
        WaterHeater_Sizing_RecovCapPerUnit_ (this),
        WaterHeater_Sizing_StorageCapPerCollectArea_ (this),
        WaterHeater_Sizing_HeightAspectRatio_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransferStorage::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyConverter::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTransSto_Name
          //
          if (n.name () == "SimFlowEnergyTransSto_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTransSto_Name_type > r (
              SimFlowEnergyTransSto_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTransSto_Name_)
            {
              this->SimFlowEnergyTransSto_Name_.set (r);
              continue;
            }
          }

          // WaterHeater_Sizing_WaterHeatName
          //
          if (n.name () == "WaterHeater_Sizing_WaterHeatName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< WaterHeater_Sizing_WaterHeatName_type > r (
              WaterHeater_Sizing_WaterHeatName_traits::create (i, f, this));

            if (!this->WaterHeater_Sizing_WaterHeatName_)
            {
              this->WaterHeater_Sizing_WaterHeatName_.set (r);
              continue;
            }
          }

          // WaterHeater_Sizing_DesignMode
          //
          if (n.name () == "WaterHeater_Sizing_DesignMode" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< WaterHeater_Sizing_DesignMode_type > r (
              WaterHeater_Sizing_DesignMode_traits::create (i, f, this));

            if (!this->WaterHeater_Sizing_DesignMode_)
            {
              this->WaterHeater_Sizing_DesignMode_.set (r);
              continue;
            }
          }

          // WaterHeater_Sizing_TimeStorageCanMeetPeakDraw
          //
          if (n.name () == "WaterHeater_Sizing_TimeStorageCanMeetPeakDraw" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_)
            {
              this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_.set (WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_TimeForTankRecov
          //
          if (n.name () == "WaterHeater_Sizing_TimeForTankRecov" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_TimeForTankRecov_)
            {
              this->WaterHeater_Sizing_TimeForTankRecov_.set (WaterHeater_Sizing_TimeForTankRecov_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_NomTankVolForAutosizPlantConn
          //
          if (n.name () == "WaterHeater_Sizing_NomTankVolForAutosizPlantConn" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_)
            {
              this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_.set (WaterHeater_Sizing_NomTankVolForAutosizPlantConn_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_NumBedrooms
          //
          if (n.name () == "WaterHeater_Sizing_NumBedrooms" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_NumBedrooms_)
            {
              this->WaterHeater_Sizing_NumBedrooms_.set (WaterHeater_Sizing_NumBedrooms_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_NumBathrooms
          //
          if (n.name () == "WaterHeater_Sizing_NumBathrooms" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_NumBathrooms_)
            {
              this->WaterHeater_Sizing_NumBathrooms_.set (WaterHeater_Sizing_NumBathrooms_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_StorageCapPerPerson
          //
          if (n.name () == "WaterHeater_Sizing_StorageCapPerPerson" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_StorageCapPerPerson_)
            {
              this->WaterHeater_Sizing_StorageCapPerPerson_.set (WaterHeater_Sizing_StorageCapPerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_RecovCapPerPerson
          //
          if (n.name () == "WaterHeater_Sizing_RecovCapPerPerson" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_RecovCapPerPerson_)
            {
              this->WaterHeater_Sizing_RecovCapPerPerson_.set (WaterHeater_Sizing_RecovCapPerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_StorageCapPerFloorArea
          //
          if (n.name () == "WaterHeater_Sizing_StorageCapPerFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_StorageCapPerFloorArea_)
            {
              this->WaterHeater_Sizing_StorageCapPerFloorArea_.set (WaterHeater_Sizing_StorageCapPerFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_RecovCapPerFloorArea
          //
          if (n.name () == "WaterHeater_Sizing_RecovCapPerFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_RecovCapPerFloorArea_)
            {
              this->WaterHeater_Sizing_RecovCapPerFloorArea_.set (WaterHeater_Sizing_RecovCapPerFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_NumUnits
          //
          if (n.name () == "WaterHeater_Sizing_NumUnits" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_NumUnits_)
            {
              this->WaterHeater_Sizing_NumUnits_.set (WaterHeater_Sizing_NumUnits_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_StorageCapPerUnit
          //
          if (n.name () == "WaterHeater_Sizing_StorageCapPerUnit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_StorageCapPerUnit_)
            {
              this->WaterHeater_Sizing_StorageCapPerUnit_.set (WaterHeater_Sizing_StorageCapPerUnit_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_RecovCapPerUnit
          //
          if (n.name () == "WaterHeater_Sizing_RecovCapPerUnit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_RecovCapPerUnit_)
            {
              this->WaterHeater_Sizing_RecovCapPerUnit_.set (WaterHeater_Sizing_RecovCapPerUnit_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_StorageCapPerCollectArea
          //
          if (n.name () == "WaterHeater_Sizing_StorageCapPerCollectArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_StorageCapPerCollectArea_)
            {
              this->WaterHeater_Sizing_StorageCapPerCollectArea_.set (WaterHeater_Sizing_StorageCapPerCollectArea_traits::create (i, f, this));
              continue;
            }
          }

          // WaterHeater_Sizing_HeightAspectRatio
          //
          if (n.name () == "WaterHeater_Sizing_HeightAspectRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->WaterHeater_Sizing_HeightAspectRatio_)
            {
              this->WaterHeater_Sizing_HeightAspectRatio_.set (WaterHeater_Sizing_HeightAspectRatio_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransferStorage* SimFlowEnergyTransferStorage::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransferStorage (*this, f, c);
      }

      SimFlowEnergyTransferStorage& SimFlowEnergyTransferStorage::
      operator= (const SimFlowEnergyTransferStorage& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyConverter& > (*this) = x;
          this->Representation_ = x.Representation_;
          this->SimFlowEnergyTransSto_Name_ = x.SimFlowEnergyTransSto_Name_;
          this->WaterHeater_Sizing_WaterHeatName_ = x.WaterHeater_Sizing_WaterHeatName_;
          this->WaterHeater_Sizing_DesignMode_ = x.WaterHeater_Sizing_DesignMode_;
          this->WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_ = x.WaterHeater_Sizing_TimeStorageCanMeetPeakDraw_;
          this->WaterHeater_Sizing_TimeForTankRecov_ = x.WaterHeater_Sizing_TimeForTankRecov_;
          this->WaterHeater_Sizing_NomTankVolForAutosizPlantConn_ = x.WaterHeater_Sizing_NomTankVolForAutosizPlantConn_;
          this->WaterHeater_Sizing_NumBedrooms_ = x.WaterHeater_Sizing_NumBedrooms_;
          this->WaterHeater_Sizing_NumBathrooms_ = x.WaterHeater_Sizing_NumBathrooms_;
          this->WaterHeater_Sizing_StorageCapPerPerson_ = x.WaterHeater_Sizing_StorageCapPerPerson_;
          this->WaterHeater_Sizing_RecovCapPerPerson_ = x.WaterHeater_Sizing_RecovCapPerPerson_;
          this->WaterHeater_Sizing_StorageCapPerFloorArea_ = x.WaterHeater_Sizing_StorageCapPerFloorArea_;
          this->WaterHeater_Sizing_RecovCapPerFloorArea_ = x.WaterHeater_Sizing_RecovCapPerFloorArea_;
          this->WaterHeater_Sizing_NumUnits_ = x.WaterHeater_Sizing_NumUnits_;
          this->WaterHeater_Sizing_StorageCapPerUnit_ = x.WaterHeater_Sizing_StorageCapPerUnit_;
          this->WaterHeater_Sizing_RecovCapPerUnit_ = x.WaterHeater_Sizing_RecovCapPerUnit_;
          this->WaterHeater_Sizing_StorageCapPerCollectArea_ = x.WaterHeater_Sizing_StorageCapPerCollectArea_;
          this->WaterHeater_Sizing_HeightAspectRatio_ = x.WaterHeater_Sizing_HeightAspectRatio_;
        }

        return *this;
      }

      SimFlowEnergyTransferStorage::
      ~SimFlowEnergyTransferStorage ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

