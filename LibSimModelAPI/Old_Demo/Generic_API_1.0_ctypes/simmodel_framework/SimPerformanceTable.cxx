// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimPerformanceTable.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceTable
      // 

      const SimPerformanceTable::SimPerformanceTable_Name_optional& SimPerformanceTable::
      SimPerformanceTable_Name () const
      {
        return this->SimPerformanceTable_Name_;
      }

      SimPerformanceTable::SimPerformanceTable_Name_optional& SimPerformanceTable::
      SimPerformanceTable_Name ()
      {
        return this->SimPerformanceTable_Name_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_Name (const SimPerformanceTable_Name_type& x)
      {
        this->SimPerformanceTable_Name_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_Name (const SimPerformanceTable_Name_optional& x)
      {
        this->SimPerformanceTable_Name_ = x;
      }

      void SimPerformanceTable::
      SimPerformanceTable_Name (::std::auto_ptr< SimPerformanceTable_Name_type > x)
      {
        this->SimPerformanceTable_Name_.set (x);
      }

      const SimPerformanceTable::SimPerformanceTable_CurveType_optional& SimPerformanceTable::
      SimPerformanceTable_CurveType () const
      {
        return this->SimPerformanceTable_CurveType_;
      }

      SimPerformanceTable::SimPerformanceTable_CurveType_optional& SimPerformanceTable::
      SimPerformanceTable_CurveType ()
      {
        return this->SimPerformanceTable_CurveType_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_CurveType (const SimPerformanceTable_CurveType_type& x)
      {
        this->SimPerformanceTable_CurveType_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_CurveType (const SimPerformanceTable_CurveType_optional& x)
      {
        this->SimPerformanceTable_CurveType_ = x;
      }

      void SimPerformanceTable::
      SimPerformanceTable_CurveType (::std::auto_ptr< SimPerformanceTable_CurveType_type > x)
      {
        this->SimPerformanceTable_CurveType_.set (x);
      }

      const SimPerformanceTable::SimPerformanceTable_InterpolatMethod_optional& SimPerformanceTable::
      SimPerformanceTable_InterpolatMethod () const
      {
        return this->SimPerformanceTable_InterpolatMethod_;
      }

      SimPerformanceTable::SimPerformanceTable_InterpolatMethod_optional& SimPerformanceTable::
      SimPerformanceTable_InterpolatMethod ()
      {
        return this->SimPerformanceTable_InterpolatMethod_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_InterpolatMethod (const SimPerformanceTable_InterpolatMethod_type& x)
      {
        this->SimPerformanceTable_InterpolatMethod_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_InterpolatMethod (const SimPerformanceTable_InterpolatMethod_optional& x)
      {
        this->SimPerformanceTable_InterpolatMethod_ = x;
      }

      void SimPerformanceTable::
      SimPerformanceTable_InterpolatMethod (::std::auto_ptr< SimPerformanceTable_InterpolatMethod_type > x)
      {
        this->SimPerformanceTable_InterpolatMethod_.set (x);
      }

      const SimPerformanceTable::SimPerformanceTable_MinTableOutput_optional& SimPerformanceTable::
      SimPerformanceTable_MinTableOutput () const
      {
        return this->SimPerformanceTable_MinTableOutput_;
      }

      SimPerformanceTable::SimPerformanceTable_MinTableOutput_optional& SimPerformanceTable::
      SimPerformanceTable_MinTableOutput ()
      {
        return this->SimPerformanceTable_MinTableOutput_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_MinTableOutput (const SimPerformanceTable_MinTableOutput_type& x)
      {
        this->SimPerformanceTable_MinTableOutput_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_MinTableOutput (const SimPerformanceTable_MinTableOutput_optional& x)
      {
        this->SimPerformanceTable_MinTableOutput_ = x;
      }

      const SimPerformanceTable::SimPerformanceTable_MaxTableOutput_optional& SimPerformanceTable::
      SimPerformanceTable_MaxTableOutput () const
      {
        return this->SimPerformanceTable_MaxTableOutput_;
      }

      SimPerformanceTable::SimPerformanceTable_MaxTableOutput_optional& SimPerformanceTable::
      SimPerformanceTable_MaxTableOutput ()
      {
        return this->SimPerformanceTable_MaxTableOutput_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_MaxTableOutput (const SimPerformanceTable_MaxTableOutput_type& x)
      {
        this->SimPerformanceTable_MaxTableOutput_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_MaxTableOutput (const SimPerformanceTable_MaxTableOutput_optional& x)
      {
        this->SimPerformanceTable_MaxTableOutput_ = x;
      }

      const SimPerformanceTable::SimPerformanceTable_OutputUnitType_optional& SimPerformanceTable::
      SimPerformanceTable_OutputUnitType () const
      {
        return this->SimPerformanceTable_OutputUnitType_;
      }

      SimPerformanceTable::SimPerformanceTable_OutputUnitType_optional& SimPerformanceTable::
      SimPerformanceTable_OutputUnitType ()
      {
        return this->SimPerformanceTable_OutputUnitType_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_OutputUnitType (const SimPerformanceTable_OutputUnitType_type& x)
      {
        this->SimPerformanceTable_OutputUnitType_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_OutputUnitType (const SimPerformanceTable_OutputUnitType_optional& x)
      {
        this->SimPerformanceTable_OutputUnitType_ = x;
      }

      void SimPerformanceTable::
      SimPerformanceTable_OutputUnitType (::std::auto_ptr< SimPerformanceTable_OutputUnitType_type > x)
      {
        this->SimPerformanceTable_OutputUnitType_.set (x);
      }

      const SimPerformanceTable::SimPerformanceTable_NormalizationRef_optional& SimPerformanceTable::
      SimPerformanceTable_NormalizationRef () const
      {
        return this->SimPerformanceTable_NormalizationRef_;
      }

      SimPerformanceTable::SimPerformanceTable_NormalizationRef_optional& SimPerformanceTable::
      SimPerformanceTable_NormalizationRef ()
      {
        return this->SimPerformanceTable_NormalizationRef_;
      }

      void SimPerformanceTable::
      SimPerformanceTable_NormalizationRef (const SimPerformanceTable_NormalizationRef_type& x)
      {
        this->SimPerformanceTable_NormalizationRef_.set (x);
      }

      void SimPerformanceTable::
      SimPerformanceTable_NormalizationRef (const SimPerformanceTable_NormalizationRef_optional& x)
      {
        this->SimPerformanceTable_NormalizationRef_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceTable
      //

      SimPerformanceTable::
      SimPerformanceTable (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeometry::SimAnalyticalRepresentationItem (RefId),
        SimPerformanceTable_Name_ (this),
        SimPerformanceTable_CurveType_ (this),
        SimPerformanceTable_InterpolatMethod_ (this),
        SimPerformanceTable_MinTableOutput_ (this),
        SimPerformanceTable_MaxTableOutput_ (this),
        SimPerformanceTable_OutputUnitType_ (this),
        SimPerformanceTable_NormalizationRef_ (this)
      {
      }

      SimPerformanceTable::
      SimPerformanceTable (const SimPerformanceTable& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimAnalyticalRepresentationItem (x, f, c),
        SimPerformanceTable_Name_ (x.SimPerformanceTable_Name_, f, this),
        SimPerformanceTable_CurveType_ (x.SimPerformanceTable_CurveType_, f, this),
        SimPerformanceTable_InterpolatMethod_ (x.SimPerformanceTable_InterpolatMethod_, f, this),
        SimPerformanceTable_MinTableOutput_ (x.SimPerformanceTable_MinTableOutput_, f, this),
        SimPerformanceTable_MaxTableOutput_ (x.SimPerformanceTable_MaxTableOutput_, f, this),
        SimPerformanceTable_OutputUnitType_ (x.SimPerformanceTable_OutputUnitType_, f, this),
        SimPerformanceTable_NormalizationRef_ (x.SimPerformanceTable_NormalizationRef_, f, this)
      {
      }

      SimPerformanceTable::
      SimPerformanceTable (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimAnalyticalRepresentationItem (e, f | ::xml_schema::flags::base, c),
        SimPerformanceTable_Name_ (this),
        SimPerformanceTable_CurveType_ (this),
        SimPerformanceTable_InterpolatMethod_ (this),
        SimPerformanceTable_MinTableOutput_ (this),
        SimPerformanceTable_MaxTableOutput_ (this),
        SimPerformanceTable_OutputUnitType_ (this),
        SimPerformanceTable_NormalizationRef_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimPerformanceTable::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeometry::SimAnalyticalRepresentationItem::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimPerformanceTable_Name
          //
          if (n.name () == "SimPerformanceTable_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_Name_type > r (
              SimPerformanceTable_Name_traits::create (i, f, this));

            if (!this->SimPerformanceTable_Name_)
            {
              this->SimPerformanceTable_Name_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_CurveType
          //
          if (n.name () == "SimPerformanceTable_CurveType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_CurveType_type > r (
              SimPerformanceTable_CurveType_traits::create (i, f, this));

            if (!this->SimPerformanceTable_CurveType_)
            {
              this->SimPerformanceTable_CurveType_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_InterpolatMethod
          //
          if (n.name () == "SimPerformanceTable_InterpolatMethod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_InterpolatMethod_type > r (
              SimPerformanceTable_InterpolatMethod_traits::create (i, f, this));

            if (!this->SimPerformanceTable_InterpolatMethod_)
            {
              this->SimPerformanceTable_InterpolatMethod_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_MinTableOutput
          //
          if (n.name () == "SimPerformanceTable_MinTableOutput" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MinTableOutput_)
            {
              this->SimPerformanceTable_MinTableOutput_.set (SimPerformanceTable_MinTableOutput_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_MaxTableOutput
          //
          if (n.name () == "SimPerformanceTable_MaxTableOutput" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_MaxTableOutput_)
            {
              this->SimPerformanceTable_MaxTableOutput_.set (SimPerformanceTable_MaxTableOutput_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerformanceTable_OutputUnitType
          //
          if (n.name () == "SimPerformanceTable_OutputUnitType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerformanceTable_OutputUnitType_type > r (
              SimPerformanceTable_OutputUnitType_traits::create (i, f, this));

            if (!this->SimPerformanceTable_OutputUnitType_)
            {
              this->SimPerformanceTable_OutputUnitType_.set (r);
              continue;
            }
          }

          // SimPerformanceTable_NormalizationRef
          //
          if (n.name () == "SimPerformanceTable_NormalizationRef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerformanceTable_NormalizationRef_)
            {
              this->SimPerformanceTable_NormalizationRef_.set (SimPerformanceTable_NormalizationRef_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimPerformanceTable* SimPerformanceTable::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimPerformanceTable (*this, f, c);
      }

      SimPerformanceTable& SimPerformanceTable::
      operator= (const SimPerformanceTable& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeometry::SimAnalyticalRepresentationItem& > (*this) = x;
          this->SimPerformanceTable_Name_ = x.SimPerformanceTable_Name_;
          this->SimPerformanceTable_CurveType_ = x.SimPerformanceTable_CurveType_;
          this->SimPerformanceTable_InterpolatMethod_ = x.SimPerformanceTable_InterpolatMethod_;
          this->SimPerformanceTable_MinTableOutput_ = x.SimPerformanceTable_MinTableOutput_;
          this->SimPerformanceTable_MaxTableOutput_ = x.SimPerformanceTable_MaxTableOutput_;
          this->SimPerformanceTable_OutputUnitType_ = x.SimPerformanceTable_OutputUnitType_;
          this->SimPerformanceTable_NormalizationRef_ = x.SimPerformanceTable_NormalizationRef_;
        }

        return *this;
      }

      SimPerformanceTable::
      ~SimPerformanceTable ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

