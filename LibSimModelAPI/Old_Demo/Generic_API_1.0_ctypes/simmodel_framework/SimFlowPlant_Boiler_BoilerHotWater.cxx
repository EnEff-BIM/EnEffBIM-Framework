// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_Boiler_BoilerHotWater.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_Boiler_BoilerHotWater
      // 

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_FuelType_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_FuelType () const
      {
        return this->SimFlowPlant_FuelType_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_FuelType_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_FuelType ()
      {
        return this->SimFlowPlant_FuelType_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_FuelType (const SimFlowPlant_FuelType_type& x)
      {
        this->SimFlowPlant_FuelType_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_FuelType (const SimFlowPlant_FuelType_optional& x)
      {
        this->SimFlowPlant_FuelType_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_FuelType (::std::auto_ptr< SimFlowPlant_FuelType_type > x)
      {
        this->SimFlowPlant_FuelType_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NomCap_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomCap () const
      {
        return this->SimFlowPlant_NomCap_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NomCap_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomCap ()
      {
        return this->SimFlowPlant_NomCap_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x)
      {
        this->SimFlowPlant_NomCap_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x)
      {
        this->SimFlowPlant_NomCap_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NomThermalEff_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomThermalEff () const
      {
        return this->SimFlowPlant_NomThermalEff_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NomThermalEff_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomThermalEff ()
      {
        return this->SimFlowPlant_NomThermalEff_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomThermalEff (const SimFlowPlant_NomThermalEff_type& x)
      {
        this->SimFlowPlant_NomThermalEff_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NomThermalEff (const SimFlowPlant_NomThermalEff_optional& x)
      {
        this->SimFlowPlant_NomThermalEff_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_EfficiencyCurveTempEvaluationVar () const
      {
        return this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_EfficiencyCurveTempEvaluationVar ()
      {
        return this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_EfficiencyCurveTempEvaluationVar (const SimFlowPlant_EfficiencyCurveTempEvaluationVar_type& x)
      {
        this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_EfficiencyCurveTempEvaluationVar (const SimFlowPlant_EfficiencyCurveTempEvaluationVar_optional& x)
      {
        this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_EfficiencyCurveTempEvaluationVar (::std::auto_ptr< SimFlowPlant_EfficiencyCurveTempEvaluationVar_type > x)
      {
        this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NrmlizedBoilerEffCurveName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NrmlizedBoilerEffCurveName () const
      {
        return this->SimFlowPlant_NrmlizedBoilerEffCurveName_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_NrmlizedBoilerEffCurveName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NrmlizedBoilerEffCurveName ()
      {
        return this->SimFlowPlant_NrmlizedBoilerEffCurveName_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NrmlizedBoilerEffCurveName (const SimFlowPlant_NrmlizedBoilerEffCurveName_type& x)
      {
        this->SimFlowPlant_NrmlizedBoilerEffCurveName_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NrmlizedBoilerEffCurveName (const SimFlowPlant_NrmlizedBoilerEffCurveName_optional& x)
      {
        this->SimFlowPlant_NrmlizedBoilerEffCurveName_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_NrmlizedBoilerEffCurveName (::std::auto_ptr< SimFlowPlant_NrmlizedBoilerEffCurveName_type > x)
      {
        this->SimFlowPlant_NrmlizedBoilerEffCurveName_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_DesignWaterOutletTemp_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterOutletTemp () const
      {
        return this->SimFlowPlant_DesignWaterOutletTemp_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_DesignWaterOutletTemp_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterOutletTemp ()
      {
        return this->SimFlowPlant_DesignWaterOutletTemp_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterOutletTemp (const SimFlowPlant_DesignWaterOutletTemp_type& x)
      {
        this->SimFlowPlant_DesignWaterOutletTemp_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterOutletTemp (const SimFlowPlant_DesignWaterOutletTemp_optional& x)
      {
        this->SimFlowPlant_DesignWaterOutletTemp_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_DesignWaterFlowRate_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignWaterFlowRate_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_DesignWaterFlowRate_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignWaterFlowRate_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignWaterFlowRate_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignWaterFlowRate_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MinPartLoadRatio () const
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MinPartLoadRatio ()
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MaxPartLoadRatio () const
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MaxPartLoadRatio ()
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_OptimumPartLoadRatio () const
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_OptimumPartLoadRatio ()
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerWaterInletNodeName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterInletNodeName () const
      {
        return this->SimFlowPlant_BoilerWaterInletNodeName_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerWaterInletNodeName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterInletNodeName ()
      {
        return this->SimFlowPlant_BoilerWaterInletNodeName_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterInletNodeName (const SimFlowPlant_BoilerWaterInletNodeName_type& x)
      {
        this->SimFlowPlant_BoilerWaterInletNodeName_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterInletNodeName (const SimFlowPlant_BoilerWaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_BoilerWaterInletNodeName_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterInletNodeName (::std::auto_ptr< SimFlowPlant_BoilerWaterInletNodeName_type > x)
      {
        this->SimFlowPlant_BoilerWaterInletNodeName_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerWaterOutletNodeName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterOutletNodeName () const
      {
        return this->SimFlowPlant_BoilerWaterOutletNodeName_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerWaterOutletNodeName_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterOutletNodeName ()
      {
        return this->SimFlowPlant_BoilerWaterOutletNodeName_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterOutletNodeName (const SimFlowPlant_BoilerWaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_BoilerWaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterOutletNodeName (const SimFlowPlant_BoilerWaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_BoilerWaterOutletNodeName_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_BoilerWaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_BoilerWaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_WaterOutletUpTempLimit_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_WaterOutletUpTempLimit () const
      {
        return this->SimFlowPlant_WaterOutletUpTempLimit_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_WaterOutletUpTempLimit_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_WaterOutletUpTempLimit ()
      {
        return this->SimFlowPlant_WaterOutletUpTempLimit_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_WaterOutletUpTempLimit (const SimFlowPlant_WaterOutletUpTempLimit_type& x)
      {
        this->SimFlowPlant_WaterOutletUpTempLimit_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_WaterOutletUpTempLimit (const SimFlowPlant_WaterOutletUpTempLimit_optional& x)
      {
        this->SimFlowPlant_WaterOutletUpTempLimit_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerFlowMode_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerFlowMode () const
      {
        return this->SimFlowPlant_BoilerFlowMode_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_BoilerFlowMode_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerFlowMode ()
      {
        return this->SimFlowPlant_BoilerFlowMode_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerFlowMode (const SimFlowPlant_BoilerFlowMode_type& x)
      {
        this->SimFlowPlant_BoilerFlowMode_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerFlowMode (const SimFlowPlant_BoilerFlowMode_optional& x)
      {
        this->SimFlowPlant_BoilerFlowMode_ = x;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_BoilerFlowMode (::std::auto_ptr< SimFlowPlant_BoilerFlowMode_type > x)
      {
        this->SimFlowPlant_BoilerFlowMode_.set (x);
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_ParasiticElecLoad_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_ParasiticElecLoad () const
      {
        return this->SimFlowPlant_ParasiticElecLoad_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_ParasiticElecLoad_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_ParasiticElecLoad ()
      {
        return this->SimFlowPlant_ParasiticElecLoad_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_ParasiticElecLoad (const SimFlowPlant_ParasiticElecLoad_type& x)
      {
        this->SimFlowPlant_ParasiticElecLoad_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_ParasiticElecLoad (const SimFlowPlant_ParasiticElecLoad_optional& x)
      {
        this->SimFlowPlant_ParasiticElecLoad_ = x;
      }

      const SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_SizingFactor_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_SizingFactor () const
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      SimFlowPlant_Boiler_BoilerHotWater::SimFlowPlant_SizingFactor_optional& SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_SizingFactor ()
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x)
      {
        this->SimFlowPlant_SizingFactor_.set (x);
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x)
      {
        this->SimFlowPlant_SizingFactor_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_Boiler_BoilerHotWater
      //

      SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_Boiler_BoilerHotWater (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant_Boiler (RefId),
        SimFlowPlant_FuelType_ (this),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_NomThermalEff_ (this),
        SimFlowPlant_EfficiencyCurveTempEvaluationVar_ (this),
        SimFlowPlant_NrmlizedBoilerEffCurveName_ (this),
        SimFlowPlant_DesignWaterOutletTemp_ (this),
        SimFlowPlant_DesignWaterFlowRate_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_BoilerWaterInletNodeName_ (this),
        SimFlowPlant_BoilerWaterOutletNodeName_ (this),
        SimFlowPlant_WaterOutletUpTempLimit_ (this),
        SimFlowPlant_BoilerFlowMode_ (this),
        SimFlowPlant_ParasiticElecLoad_ (this),
        SimFlowPlant_SizingFactor_ (this)
      {
      }

      SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_Boiler_BoilerHotWater (const SimFlowPlant_Boiler_BoilerHotWater& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_Boiler (x, f, c),
        SimFlowPlant_FuelType_ (x.SimFlowPlant_FuelType_, f, this),
        SimFlowPlant_NomCap_ (x.SimFlowPlant_NomCap_, f, this),
        SimFlowPlant_NomThermalEff_ (x.SimFlowPlant_NomThermalEff_, f, this),
        SimFlowPlant_EfficiencyCurveTempEvaluationVar_ (x.SimFlowPlant_EfficiencyCurveTempEvaluationVar_, f, this),
        SimFlowPlant_NrmlizedBoilerEffCurveName_ (x.SimFlowPlant_NrmlizedBoilerEffCurveName_, f, this),
        SimFlowPlant_DesignWaterOutletTemp_ (x.SimFlowPlant_DesignWaterOutletTemp_, f, this),
        SimFlowPlant_DesignWaterFlowRate_ (x.SimFlowPlant_DesignWaterFlowRate_, f, this),
        SimFlowPlant_MinPartLoadRatio_ (x.SimFlowPlant_MinPartLoadRatio_, f, this),
        SimFlowPlant_MaxPartLoadRatio_ (x.SimFlowPlant_MaxPartLoadRatio_, f, this),
        SimFlowPlant_OptimumPartLoadRatio_ (x.SimFlowPlant_OptimumPartLoadRatio_, f, this),
        SimFlowPlant_BoilerWaterInletNodeName_ (x.SimFlowPlant_BoilerWaterInletNodeName_, f, this),
        SimFlowPlant_BoilerWaterOutletNodeName_ (x.SimFlowPlant_BoilerWaterOutletNodeName_, f, this),
        SimFlowPlant_WaterOutletUpTempLimit_ (x.SimFlowPlant_WaterOutletUpTempLimit_, f, this),
        SimFlowPlant_BoilerFlowMode_ (x.SimFlowPlant_BoilerFlowMode_, f, this),
        SimFlowPlant_ParasiticElecLoad_ (x.SimFlowPlant_ParasiticElecLoad_, f, this),
        SimFlowPlant_SizingFactor_ (x.SimFlowPlant_SizingFactor_, f, this)
      {
      }

      SimFlowPlant_Boiler_BoilerHotWater::
      SimFlowPlant_Boiler_BoilerHotWater (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_Boiler (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_FuelType_ (this),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_NomThermalEff_ (this),
        SimFlowPlant_EfficiencyCurveTempEvaluationVar_ (this),
        SimFlowPlant_NrmlizedBoilerEffCurveName_ (this),
        SimFlowPlant_DesignWaterOutletTemp_ (this),
        SimFlowPlant_DesignWaterFlowRate_ (this),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_BoilerWaterInletNodeName_ (this),
        SimFlowPlant_BoilerWaterOutletNodeName_ (this),
        SimFlowPlant_WaterOutletUpTempLimit_ (this),
        SimFlowPlant_BoilerFlowMode_ (this),
        SimFlowPlant_ParasiticElecLoad_ (this),
        SimFlowPlant_SizingFactor_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_Boiler_BoilerHotWater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant_Boiler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_FuelType
          //
          if (n.name () == "SimFlowPlant_FuelType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_FuelType_type > r (
              SimFlowPlant_FuelType_traits::create (i, f, this));

            if (!this->SimFlowPlant_FuelType_)
            {
              this->SimFlowPlant_FuelType_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NomCap
          //
          if (n.name () == "SimFlowPlant_NomCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NomCap_)
            {
              this->SimFlowPlant_NomCap_.set (SimFlowPlant_NomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NomThermalEff
          //
          if (n.name () == "SimFlowPlant_NomThermalEff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NomThermalEff_)
            {
              this->SimFlowPlant_NomThermalEff_.set (SimFlowPlant_NomThermalEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EfficiencyCurveTempEvaluationVar
          //
          if (n.name () == "SimFlowPlant_EfficiencyCurveTempEvaluationVar" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_EfficiencyCurveTempEvaluationVar_type > r (
              SimFlowPlant_EfficiencyCurveTempEvaluationVar_traits::create (i, f, this));

            if (!this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_)
            {
              this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NrmlizedBoilerEffCurveName
          //
          if (n.name () == "SimFlowPlant_NrmlizedBoilerEffCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_NrmlizedBoilerEffCurveName_type > r (
              SimFlowPlant_NrmlizedBoilerEffCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_NrmlizedBoilerEffCurveName_)
            {
              this->SimFlowPlant_NrmlizedBoilerEffCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignWaterOutletTemp
          //
          if (n.name () == "SimFlowPlant_DesignWaterOutletTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignWaterOutletTemp_)
            {
              this->SimFlowPlant_DesignWaterOutletTemp_.set (SimFlowPlant_DesignWaterOutletTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignWaterFlowRate_)
            {
              this->SimFlowPlant_DesignWaterFlowRate_.set (SimFlowPlant_DesignWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MinPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MinPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MinPartLoadRatio_)
            {
              this->SimFlowPlant_MinPartLoadRatio_.set (SimFlowPlant_MinPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MaxPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MaxPartLoadRatio_)
            {
              this->SimFlowPlant_MaxPartLoadRatio_.set (SimFlowPlant_MaxPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_OptimumPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_OptimumPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_OptimumPartLoadRatio_)
            {
              this->SimFlowPlant_OptimumPartLoadRatio_.set (SimFlowPlant_OptimumPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BoilerWaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_BoilerWaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BoilerWaterInletNodeName_type > r (
              SimFlowPlant_BoilerWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BoilerWaterInletNodeName_)
            {
              this->SimFlowPlant_BoilerWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BoilerWaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_BoilerWaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BoilerWaterOutletNodeName_type > r (
              SimFlowPlant_BoilerWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BoilerWaterOutletNodeName_)
            {
              this->SimFlowPlant_BoilerWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_WaterOutletUpTempLimit
          //
          if (n.name () == "SimFlowPlant_WaterOutletUpTempLimit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_WaterOutletUpTempLimit_)
            {
              this->SimFlowPlant_WaterOutletUpTempLimit_.set (SimFlowPlant_WaterOutletUpTempLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BoilerFlowMode
          //
          if (n.name () == "SimFlowPlant_BoilerFlowMode" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BoilerFlowMode_type > r (
              SimFlowPlant_BoilerFlowMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_BoilerFlowMode_)
            {
              this->SimFlowPlant_BoilerFlowMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ParasiticElecLoad
          //
          if (n.name () == "SimFlowPlant_ParasiticElecLoad" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ParasiticElecLoad_)
            {
              this->SimFlowPlant_ParasiticElecLoad_.set (SimFlowPlant_ParasiticElecLoad_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SizingFactor
          //
          if (n.name () == "SimFlowPlant_SizingFactor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_SizingFactor_)
            {
              this->SimFlowPlant_SizingFactor_.set (SimFlowPlant_SizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_Boiler_BoilerHotWater* SimFlowPlant_Boiler_BoilerHotWater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_Boiler_BoilerHotWater (*this, f, c);
      }

      SimFlowPlant_Boiler_BoilerHotWater& SimFlowPlant_Boiler_BoilerHotWater::
      operator= (const SimFlowPlant_Boiler_BoilerHotWater& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant_Boiler& > (*this) = x;
          this->SimFlowPlant_FuelType_ = x.SimFlowPlant_FuelType_;
          this->SimFlowPlant_NomCap_ = x.SimFlowPlant_NomCap_;
          this->SimFlowPlant_NomThermalEff_ = x.SimFlowPlant_NomThermalEff_;
          this->SimFlowPlant_EfficiencyCurveTempEvaluationVar_ = x.SimFlowPlant_EfficiencyCurveTempEvaluationVar_;
          this->SimFlowPlant_NrmlizedBoilerEffCurveName_ = x.SimFlowPlant_NrmlizedBoilerEffCurveName_;
          this->SimFlowPlant_DesignWaterOutletTemp_ = x.SimFlowPlant_DesignWaterOutletTemp_;
          this->SimFlowPlant_DesignWaterFlowRate_ = x.SimFlowPlant_DesignWaterFlowRate_;
          this->SimFlowPlant_MinPartLoadRatio_ = x.SimFlowPlant_MinPartLoadRatio_;
          this->SimFlowPlant_MaxPartLoadRatio_ = x.SimFlowPlant_MaxPartLoadRatio_;
          this->SimFlowPlant_OptimumPartLoadRatio_ = x.SimFlowPlant_OptimumPartLoadRatio_;
          this->SimFlowPlant_BoilerWaterInletNodeName_ = x.SimFlowPlant_BoilerWaterInletNodeName_;
          this->SimFlowPlant_BoilerWaterOutletNodeName_ = x.SimFlowPlant_BoilerWaterOutletNodeName_;
          this->SimFlowPlant_WaterOutletUpTempLimit_ = x.SimFlowPlant_WaterOutletUpTempLimit_;
          this->SimFlowPlant_BoilerFlowMode_ = x.SimFlowPlant_BoilerFlowMode_;
          this->SimFlowPlant_ParasiticElecLoad_ = x.SimFlowPlant_ParasiticElecLoad_;
          this->SimFlowPlant_SizingFactor_ = x.SimFlowPlant_SizingFactor_;
        }

        return *this;
      }

      SimFlowPlant_Boiler_BoilerHotWater::
      ~SimFlowPlant_Boiler_BoilerHotWater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

