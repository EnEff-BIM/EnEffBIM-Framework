// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimPerformanceCurve_Mathematical_QuadLinear.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceCurve_Mathematical_QuadLinear
      // 

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef1Constant_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef1Constant () const
      {
        return this->SimPerfCurve_Coef1Constant_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef1Constant_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef1Constant ()
      {
        return this->SimPerfCurve_Coef1Constant_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef1Constant (const SimPerfCurve_Coef1Constant_type& x)
      {
        this->SimPerfCurve_Coef1Constant_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef1Constant (const SimPerfCurve_Coef1Constant_optional& x)
      {
        this->SimPerfCurve_Coef1Constant_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValX_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValX () const
      {
        return this->SimPerfCurve_MinValX_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValX_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValX ()
      {
        return this->SimPerfCurve_MinValX_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValX (const SimPerfCurve_MinValX_type& x)
      {
        this->SimPerfCurve_MinValX_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValX (const SimPerfCurve_MinValX_optional& x)
      {
        this->SimPerfCurve_MinValX_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValX_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValX () const
      {
        return this->SimPerfCurve_MaxValX_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValX_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValX ()
      {
        return this->SimPerfCurve_MaxValX_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValX (const SimPerfCurve_MaxValX_type& x)
      {
        this->SimPerfCurve_MaxValX_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValX (const SimPerfCurve_MaxValX_optional& x)
      {
        this->SimPerfCurve_MaxValX_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coefficient2w_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient2w () const
      {
        return this->SimPerfCurve_Coefficient2w_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coefficient2w_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient2w ()
      {
        return this->SimPerfCurve_Coefficient2w_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient2w (const SimPerfCurve_Coefficient2w_type& x)
      {
        this->SimPerfCurve_Coefficient2w_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient2w (const SimPerfCurve_Coefficient2w_optional& x)
      {
        this->SimPerfCurve_Coefficient2w_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef_3_X_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_3_X () const
      {
        return this->SimPerfCurve_Coef_3_X_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef_3_X_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_3_X ()
      {
        return this->SimPerfCurve_Coef_3_X_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_3_X (const SimPerfCurve_Coef_3_X_type& x)
      {
        this->SimPerfCurve_Coef_3_X_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_3_X (const SimPerfCurve_Coef_3_X_optional& x)
      {
        this->SimPerfCurve_Coef_3_X_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef_4_Y_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_4_Y () const
      {
        return this->SimPerfCurve_Coef_4_Y_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coef_4_Y_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_4_Y ()
      {
        return this->SimPerfCurve_Coef_4_Y_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_4_Y (const SimPerfCurve_Coef_4_Y_type& x)
      {
        this->SimPerfCurve_Coef_4_Y_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coef_4_Y (const SimPerfCurve_Coef_4_Y_optional& x)
      {
        this->SimPerfCurve_Coef_4_Y_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coefficient5z_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient5z () const
      {
        return this->SimPerfCurve_Coefficient5z_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_Coefficient5z_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient5z ()
      {
        return this->SimPerfCurve_Coefficient5z_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient5z (const SimPerfCurve_Coefficient5z_type& x)
      {
        this->SimPerfCurve_Coefficient5z_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_Coefficient5z (const SimPerfCurve_Coefficient5z_optional& x)
      {
        this->SimPerfCurve_Coefficient5z_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValueofw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValueofw () const
      {
        return this->SimPerfCurve_MinValueofw_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValueofw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValueofw ()
      {
        return this->SimPerfCurve_MinValueofw_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValueofw (const SimPerfCurve_MinValueofw_type& x)
      {
        this->SimPerfCurve_MinValueofw_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValueofw (const SimPerfCurve_MinValueofw_optional& x)
      {
        this->SimPerfCurve_MinValueofw_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValueofw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValueofw () const
      {
        return this->SimPerfCurve_MaxValueofw_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValueofw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValueofw ()
      {
        return this->SimPerfCurve_MaxValueofw_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValueofw (const SimPerfCurve_MaxValueofw_type& x)
      {
        this->SimPerfCurve_MaxValueofw_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValueofw (const SimPerfCurve_MaxValueofw_optional& x)
      {
        this->SimPerfCurve_MaxValueofw_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValY () const
      {
        return this->SimPerfCurve_MinValY_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValY ()
      {
        return this->SimPerfCurve_MinValY_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValY (const SimPerfCurve_MinValY_type& x)
      {
        this->SimPerfCurve_MinValY_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValY (const SimPerfCurve_MinValY_optional& x)
      {
        this->SimPerfCurve_MinValY_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValY () const
      {
        return this->SimPerfCurve_MaxValY_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValY ()
      {
        return this->SimPerfCurve_MaxValY_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValY (const SimPerfCurve_MaxValY_type& x)
      {
        this->SimPerfCurve_MaxValY_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValY (const SimPerfCurve_MaxValY_optional& x)
      {
        this->SimPerfCurve_MaxValY_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValZ () const
      {
        return this->SimPerfCurve_MinValZ_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MinValZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValZ ()
      {
        return this->SimPerfCurve_MinValZ_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValZ (const SimPerfCurve_MinValZ_type& x)
      {
        this->SimPerfCurve_MinValZ_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MinValZ (const SimPerfCurve_MinValZ_optional& x)
      {
        this->SimPerfCurve_MinValZ_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValZ () const
      {
        return this->SimPerfCurve_MaxValZ_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_MaxValZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValZ ()
      {
        return this->SimPerfCurve_MaxValZ_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValZ (const SimPerfCurve_MaxValZ_type& x)
      {
        this->SimPerfCurve_MaxValZ_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_MaxValZ (const SimPerfCurve_MaxValZ_optional& x)
      {
        this->SimPerfCurve_MaxValZ_ = x;
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeforw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeforw () const
      {
        return this->SimPerfCurve_InputUnitTypeforw_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeforw_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeforw ()
      {
        return this->SimPerfCurve_InputUnitTypeforw_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeforw (const SimPerfCurve_InputUnitTypeforw_type& x)
      {
        this->SimPerfCurve_InputUnitTypeforw_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeforw (const SimPerfCurve_InputUnitTypeforw_optional& x)
      {
        this->SimPerfCurve_InputUnitTypeforw_ = x;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeforw (::std::auto_ptr< SimPerfCurve_InputUnitTypeforw_type > x)
      {
        this->SimPerfCurve_InputUnitTypeforw_.set (x);
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeForY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForY () const
      {
        return this->SimPerfCurve_InputUnitTypeForY_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeForY_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForY ()
      {
        return this->SimPerfCurve_InputUnitTypeForY_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForY (const SimPerfCurve_InputUnitTypeForY_type& x)
      {
        this->SimPerfCurve_InputUnitTypeForY_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForY (const SimPerfCurve_InputUnitTypeForY_optional& x)
      {
        this->SimPerfCurve_InputUnitTypeForY_ = x;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForY (::std::auto_ptr< SimPerfCurve_InputUnitTypeForY_type > x)
      {
        this->SimPerfCurve_InputUnitTypeForY_.set (x);
      }

      const SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeForZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForZ () const
      {
        return this->SimPerfCurve_InputUnitTypeForZ_;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::SimPerfCurve_InputUnitTypeForZ_optional& SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForZ ()
      {
        return this->SimPerfCurve_InputUnitTypeForZ_;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForZ (const SimPerfCurve_InputUnitTypeForZ_type& x)
      {
        this->SimPerfCurve_InputUnitTypeForZ_.set (x);
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForZ (const SimPerfCurve_InputUnitTypeForZ_optional& x)
      {
        this->SimPerfCurve_InputUnitTypeForZ_ = x;
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerfCurve_InputUnitTypeForZ (::std::auto_ptr< SimPerfCurve_InputUnitTypeForZ_type > x)
      {
        this->SimPerfCurve_InputUnitTypeForZ_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimPerformanceCurve_Mathematical_QuadLinear
      //

      SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerformanceCurve_Mathematical_QuadLinear (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (RefId),
        SimPerfCurve_Coef1Constant_ (this),
        SimPerfCurve_MinValX_ (this),
        SimPerfCurve_MaxValX_ (this),
        SimPerfCurve_Coefficient2w_ (this),
        SimPerfCurve_Coef_3_X_ (this),
        SimPerfCurve_Coef_4_Y_ (this),
        SimPerfCurve_Coefficient5z_ (this),
        SimPerfCurve_MinValueofw_ (this),
        SimPerfCurve_MaxValueofw_ (this),
        SimPerfCurve_MinValY_ (this),
        SimPerfCurve_MaxValY_ (this),
        SimPerfCurve_MinValZ_ (this),
        SimPerfCurve_MaxValZ_ (this),
        SimPerfCurve_InputUnitTypeforw_ (this),
        SimPerfCurve_InputUnitTypeForY_ (this),
        SimPerfCurve_InputUnitTypeForZ_ (this)
      {
      }

      SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerformanceCurve_Mathematical_QuadLinear (const SimPerformanceCurve_Mathematical_QuadLinear& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (x, f, c),
        SimPerfCurve_Coef1Constant_ (x.SimPerfCurve_Coef1Constant_, f, this),
        SimPerfCurve_MinValX_ (x.SimPerfCurve_MinValX_, f, this),
        SimPerfCurve_MaxValX_ (x.SimPerfCurve_MaxValX_, f, this),
        SimPerfCurve_Coefficient2w_ (x.SimPerfCurve_Coefficient2w_, f, this),
        SimPerfCurve_Coef_3_X_ (x.SimPerfCurve_Coef_3_X_, f, this),
        SimPerfCurve_Coef_4_Y_ (x.SimPerfCurve_Coef_4_Y_, f, this),
        SimPerfCurve_Coefficient5z_ (x.SimPerfCurve_Coefficient5z_, f, this),
        SimPerfCurve_MinValueofw_ (x.SimPerfCurve_MinValueofw_, f, this),
        SimPerfCurve_MaxValueofw_ (x.SimPerfCurve_MaxValueofw_, f, this),
        SimPerfCurve_MinValY_ (x.SimPerfCurve_MinValY_, f, this),
        SimPerfCurve_MaxValY_ (x.SimPerfCurve_MaxValY_, f, this),
        SimPerfCurve_MinValZ_ (x.SimPerfCurve_MinValZ_, f, this),
        SimPerfCurve_MaxValZ_ (x.SimPerfCurve_MaxValZ_, f, this),
        SimPerfCurve_InputUnitTypeforw_ (x.SimPerfCurve_InputUnitTypeforw_, f, this),
        SimPerfCurve_InputUnitTypeForY_ (x.SimPerfCurve_InputUnitTypeForY_, f, this),
        SimPerfCurve_InputUnitTypeForZ_ (x.SimPerfCurve_InputUnitTypeForZ_, f, this)
      {
      }

      SimPerformanceCurve_Mathematical_QuadLinear::
      SimPerformanceCurve_Mathematical_QuadLinear (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical (e, f | ::xml_schema::flags::base, c),
        SimPerfCurve_Coef1Constant_ (this),
        SimPerfCurve_MinValX_ (this),
        SimPerfCurve_MaxValX_ (this),
        SimPerfCurve_Coefficient2w_ (this),
        SimPerfCurve_Coef_3_X_ (this),
        SimPerfCurve_Coef_4_Y_ (this),
        SimPerfCurve_Coefficient5z_ (this),
        SimPerfCurve_MinValueofw_ (this),
        SimPerfCurve_MaxValueofw_ (this),
        SimPerfCurve_MinValY_ (this),
        SimPerfCurve_MaxValY_ (this),
        SimPerfCurve_MinValZ_ (this),
        SimPerfCurve_MaxValZ_ (this),
        SimPerfCurve_InputUnitTypeforw_ (this),
        SimPerfCurve_InputUnitTypeForY_ (this),
        SimPerfCurve_InputUnitTypeForZ_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimPerformanceCurve_Mathematical_QuadLinear::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimPerfCurve_Coef1Constant
          //
          if (n.name () == "SimPerfCurve_Coef1Constant" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coef1Constant_)
            {
              this->SimPerfCurve_Coef1Constant_.set (SimPerfCurve_Coef1Constant_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MinValX
          //
          if (n.name () == "SimPerfCurve_MinValX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MinValX_)
            {
              this->SimPerfCurve_MinValX_.set (SimPerfCurve_MinValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MaxValX
          //
          if (n.name () == "SimPerfCurve_MaxValX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MaxValX_)
            {
              this->SimPerfCurve_MaxValX_.set (SimPerfCurve_MaxValX_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coefficient2w
          //
          if (n.name () == "SimPerfCurve_Coefficient2w" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coefficient2w_)
            {
              this->SimPerfCurve_Coefficient2w_.set (SimPerfCurve_Coefficient2w_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coef_3_X
          //
          if (n.name () == "SimPerfCurve_Coef_3_X" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coef_3_X_)
            {
              this->SimPerfCurve_Coef_3_X_.set (SimPerfCurve_Coef_3_X_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coef_4_Y
          //
          if (n.name () == "SimPerfCurve_Coef_4_Y" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coef_4_Y_)
            {
              this->SimPerfCurve_Coef_4_Y_.set (SimPerfCurve_Coef_4_Y_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_Coefficient5z
          //
          if (n.name () == "SimPerfCurve_Coefficient5z" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_Coefficient5z_)
            {
              this->SimPerfCurve_Coefficient5z_.set (SimPerfCurve_Coefficient5z_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MinValueofw
          //
          if (n.name () == "SimPerfCurve_MinValueofw" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MinValueofw_)
            {
              this->SimPerfCurve_MinValueofw_.set (SimPerfCurve_MinValueofw_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MaxValueofw
          //
          if (n.name () == "SimPerfCurve_MaxValueofw" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MaxValueofw_)
            {
              this->SimPerfCurve_MaxValueofw_.set (SimPerfCurve_MaxValueofw_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MinValY
          //
          if (n.name () == "SimPerfCurve_MinValY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MinValY_)
            {
              this->SimPerfCurve_MinValY_.set (SimPerfCurve_MinValY_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MaxValY
          //
          if (n.name () == "SimPerfCurve_MaxValY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MaxValY_)
            {
              this->SimPerfCurve_MaxValY_.set (SimPerfCurve_MaxValY_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MinValZ
          //
          if (n.name () == "SimPerfCurve_MinValZ" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MinValZ_)
            {
              this->SimPerfCurve_MinValZ_.set (SimPerfCurve_MinValZ_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_MaxValZ
          //
          if (n.name () == "SimPerfCurve_MaxValZ" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->SimPerfCurve_MaxValZ_)
            {
              this->SimPerfCurve_MaxValZ_.set (SimPerfCurve_MaxValZ_traits::create (i, f, this));
              continue;
            }
          }

          // SimPerfCurve_InputUnitTypeforw
          //
          if (n.name () == "SimPerfCurve_InputUnitTypeforw" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerfCurve_InputUnitTypeforw_type > r (
              SimPerfCurve_InputUnitTypeforw_traits::create (i, f, this));

            if (!this->SimPerfCurve_InputUnitTypeforw_)
            {
              this->SimPerfCurve_InputUnitTypeforw_.set (r);
              continue;
            }
          }

          // SimPerfCurve_InputUnitTypeForY
          //
          if (n.name () == "SimPerfCurve_InputUnitTypeForY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerfCurve_InputUnitTypeForY_type > r (
              SimPerfCurve_InputUnitTypeForY_traits::create (i, f, this));

            if (!this->SimPerfCurve_InputUnitTypeForY_)
            {
              this->SimPerfCurve_InputUnitTypeForY_.set (r);
              continue;
            }
          }

          // SimPerfCurve_InputUnitTypeForZ
          //
          if (n.name () == "SimPerfCurve_InputUnitTypeForZ" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< SimPerfCurve_InputUnitTypeForZ_type > r (
              SimPerfCurve_InputUnitTypeForZ_traits::create (i, f, this));

            if (!this->SimPerfCurve_InputUnitTypeForZ_)
            {
              this->SimPerfCurve_InputUnitTypeForZ_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimPerformanceCurve_Mathematical_QuadLinear* SimPerformanceCurve_Mathematical_QuadLinear::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimPerformanceCurve_Mathematical_QuadLinear (*this, f, c);
      }

      SimPerformanceCurve_Mathematical_QuadLinear& SimPerformanceCurve_Mathematical_QuadLinear::
      operator= (const SimPerformanceCurve_Mathematical_QuadLinear& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeometry::SimPerformanceCurve_Mathematical& > (*this) = x;
          this->SimPerfCurve_Coef1Constant_ = x.SimPerfCurve_Coef1Constant_;
          this->SimPerfCurve_MinValX_ = x.SimPerfCurve_MinValX_;
          this->SimPerfCurve_MaxValX_ = x.SimPerfCurve_MaxValX_;
          this->SimPerfCurve_Coefficient2w_ = x.SimPerfCurve_Coefficient2w_;
          this->SimPerfCurve_Coef_3_X_ = x.SimPerfCurve_Coef_3_X_;
          this->SimPerfCurve_Coef_4_Y_ = x.SimPerfCurve_Coef_4_Y_;
          this->SimPerfCurve_Coefficient5z_ = x.SimPerfCurve_Coefficient5z_;
          this->SimPerfCurve_MinValueofw_ = x.SimPerfCurve_MinValueofw_;
          this->SimPerfCurve_MaxValueofw_ = x.SimPerfCurve_MaxValueofw_;
          this->SimPerfCurve_MinValY_ = x.SimPerfCurve_MinValY_;
          this->SimPerfCurve_MaxValY_ = x.SimPerfCurve_MaxValY_;
          this->SimPerfCurve_MinValZ_ = x.SimPerfCurve_MinValZ_;
          this->SimPerfCurve_MaxValZ_ = x.SimPerfCurve_MaxValZ_;
          this->SimPerfCurve_InputUnitTypeforw_ = x.SimPerfCurve_InputUnitTypeforw_;
          this->SimPerfCurve_InputUnitTypeForY_ = x.SimPerfCurve_InputUnitTypeForY_;
          this->SimPerfCurve_InputUnitTypeForZ_ = x.SimPerfCurve_InputUnitTypeForZ_;
        }

        return *this;
      }

      SimPerformanceCurve_Mathematical_QuadLinear::
      ~SimPerformanceCurve_Mathematical_QuadLinear ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

