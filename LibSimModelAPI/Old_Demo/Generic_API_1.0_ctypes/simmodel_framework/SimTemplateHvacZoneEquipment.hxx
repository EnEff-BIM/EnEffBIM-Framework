// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_TEMPLATE_HVAC_ZONE_EQUIPMENT_HXX
#define SIM_TEMPLATE_HVAC_ZONE_EQUIPMENT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimTemplateHvacZoneEquipment;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simtemplate.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      class SimTemplateHvacZoneEquipment: public ::namespaces::Sim::ResourcesGeneral::SimTemplate
      {
        public:
        // TemplateZoneEquipment1
        //
        typedef ::xml_schema::idref TemplateZoneEquipment1_type;
        typedef ::xsd::cxx::tree::optional< TemplateZoneEquipment1_type > TemplateZoneEquipment1_optional;
        typedef ::xsd::cxx::tree::traits< TemplateZoneEquipment1_type, char > TemplateZoneEquipment1_traits;

        const TemplateZoneEquipment1_optional&
        TemplateZoneEquipment1 () const;

        TemplateZoneEquipment1_optional&
        TemplateZoneEquipment1 ();

        void
        TemplateZoneEquipment1 (const TemplateZoneEquipment1_type& x);

        void
        TemplateZoneEquipment1 (const TemplateZoneEquipment1_optional& x);

        void
        TemplateZoneEquipment1 (::std::auto_ptr< TemplateZoneEquipment1_type > p);

        // CoolingPriority_Equpment1
        //
        typedef ::xml_schema::int_ CoolingPriority_Equpment1_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_Equpment1_type > CoolingPriority_Equpment1_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_Equpment1_type, char > CoolingPriority_Equpment1_traits;

        const CoolingPriority_Equpment1_optional&
        CoolingPriority_Equpment1 () const;

        CoolingPriority_Equpment1_optional&
        CoolingPriority_Equpment1 ();

        void
        CoolingPriority_Equpment1 (const CoolingPriority_Equpment1_type& x);

        void
        CoolingPriority_Equpment1 (const CoolingPriority_Equpment1_optional& x);

        // HeatingPriority_Equpment1
        //
        typedef ::xml_schema::int_ HeatingPriority_Equpment1_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_Equpment1_type > HeatingPriority_Equpment1_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_Equpment1_type, char > HeatingPriority_Equpment1_traits;

        const HeatingPriority_Equpment1_optional&
        HeatingPriority_Equpment1 () const;

        HeatingPriority_Equpment1_optional&
        HeatingPriority_Equpment1 ();

        void
        HeatingPriority_Equpment1 (const HeatingPriority_Equpment1_type& x);

        void
        HeatingPriority_Equpment1 (const HeatingPriority_Equpment1_optional& x);

        // TemplateZoneEquipment2
        //
        typedef ::xml_schema::idref TemplateZoneEquipment2_type;
        typedef ::xsd::cxx::tree::optional< TemplateZoneEquipment2_type > TemplateZoneEquipment2_optional;
        typedef ::xsd::cxx::tree::traits< TemplateZoneEquipment2_type, char > TemplateZoneEquipment2_traits;

        const TemplateZoneEquipment2_optional&
        TemplateZoneEquipment2 () const;

        TemplateZoneEquipment2_optional&
        TemplateZoneEquipment2 ();

        void
        TemplateZoneEquipment2 (const TemplateZoneEquipment2_type& x);

        void
        TemplateZoneEquipment2 (const TemplateZoneEquipment2_optional& x);

        void
        TemplateZoneEquipment2 (::std::auto_ptr< TemplateZoneEquipment2_type > p);

        // CoolingPriority_Equpment2
        //
        typedef ::xml_schema::int_ CoolingPriority_Equpment2_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_Equpment2_type > CoolingPriority_Equpment2_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_Equpment2_type, char > CoolingPriority_Equpment2_traits;

        const CoolingPriority_Equpment2_optional&
        CoolingPriority_Equpment2 () const;

        CoolingPriority_Equpment2_optional&
        CoolingPriority_Equpment2 ();

        void
        CoolingPriority_Equpment2 (const CoolingPriority_Equpment2_type& x);

        void
        CoolingPriority_Equpment2 (const CoolingPriority_Equpment2_optional& x);

        // HeatingPriority_Equpment2
        //
        typedef ::xml_schema::int_ HeatingPriority_Equpment2_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_Equpment2_type > HeatingPriority_Equpment2_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_Equpment2_type, char > HeatingPriority_Equpment2_traits;

        const HeatingPriority_Equpment2_optional&
        HeatingPriority_Equpment2 () const;

        HeatingPriority_Equpment2_optional&
        HeatingPriority_Equpment2 ();

        void
        HeatingPriority_Equpment2 (const HeatingPriority_Equpment2_type& x);

        void
        HeatingPriority_Equpment2 (const HeatingPriority_Equpment2_optional& x);

        // TemplateZoneEquipment3
        //
        typedef ::xml_schema::idref TemplateZoneEquipment3_type;
        typedef ::xsd::cxx::tree::optional< TemplateZoneEquipment3_type > TemplateZoneEquipment3_optional;
        typedef ::xsd::cxx::tree::traits< TemplateZoneEquipment3_type, char > TemplateZoneEquipment3_traits;

        const TemplateZoneEquipment3_optional&
        TemplateZoneEquipment3 () const;

        TemplateZoneEquipment3_optional&
        TemplateZoneEquipment3 ();

        void
        TemplateZoneEquipment3 (const TemplateZoneEquipment3_type& x);

        void
        TemplateZoneEquipment3 (const TemplateZoneEquipment3_optional& x);

        void
        TemplateZoneEquipment3 (::std::auto_ptr< TemplateZoneEquipment3_type > p);

        // CoolingPriority_Equpment3
        //
        typedef ::xml_schema::int_ CoolingPriority_Equpment3_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_Equpment3_type > CoolingPriority_Equpment3_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_Equpment3_type, char > CoolingPriority_Equpment3_traits;

        const CoolingPriority_Equpment3_optional&
        CoolingPriority_Equpment3 () const;

        CoolingPriority_Equpment3_optional&
        CoolingPriority_Equpment3 ();

        void
        CoolingPriority_Equpment3 (const CoolingPriority_Equpment3_type& x);

        void
        CoolingPriority_Equpment3 (const CoolingPriority_Equpment3_optional& x);

        // HeatingPriority_Equpment3
        //
        typedef ::xml_schema::int_ HeatingPriority_Equpment3_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_Equpment3_type > HeatingPriority_Equpment3_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_Equpment3_type, char > HeatingPriority_Equpment3_traits;

        const HeatingPriority_Equpment3_optional&
        HeatingPriority_Equpment3 () const;

        HeatingPriority_Equpment3_optional&
        HeatingPriority_Equpment3 ();

        void
        HeatingPriority_Equpment3 (const HeatingPriority_Equpment3_type& x);

        void
        HeatingPriority_Equpment3 (const HeatingPriority_Equpment3_optional& x);

        // TemplateZoneEquipment4
        //
        typedef ::xml_schema::idref TemplateZoneEquipment4_type;
        typedef ::xsd::cxx::tree::optional< TemplateZoneEquipment4_type > TemplateZoneEquipment4_optional;
        typedef ::xsd::cxx::tree::traits< TemplateZoneEquipment4_type, char > TemplateZoneEquipment4_traits;

        const TemplateZoneEquipment4_optional&
        TemplateZoneEquipment4 () const;

        TemplateZoneEquipment4_optional&
        TemplateZoneEquipment4 ();

        void
        TemplateZoneEquipment4 (const TemplateZoneEquipment4_type& x);

        void
        TemplateZoneEquipment4 (const TemplateZoneEquipment4_optional& x);

        void
        TemplateZoneEquipment4 (::std::auto_ptr< TemplateZoneEquipment4_type > p);

        // CoolingPriority_Equpment4
        //
        typedef ::xml_schema::int_ CoolingPriority_Equpment4_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_Equpment4_type > CoolingPriority_Equpment4_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_Equpment4_type, char > CoolingPriority_Equpment4_traits;

        const CoolingPriority_Equpment4_optional&
        CoolingPriority_Equpment4 () const;

        CoolingPriority_Equpment4_optional&
        CoolingPriority_Equpment4 ();

        void
        CoolingPriority_Equpment4 (const CoolingPriority_Equpment4_type& x);

        void
        CoolingPriority_Equpment4 (const CoolingPriority_Equpment4_optional& x);

        // HeatingPriority_Equpment4
        //
        typedef ::xml_schema::int_ HeatingPriority_Equpment4_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_Equpment4_type > HeatingPriority_Equpment4_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_Equpment4_type, char > HeatingPriority_Equpment4_traits;

        const HeatingPriority_Equpment4_optional&
        HeatingPriority_Equpment4 () const;

        HeatingPriority_Equpment4_optional&
        HeatingPriority_Equpment4 ();

        void
        HeatingPriority_Equpment4 (const HeatingPriority_Equpment4_type& x);

        void
        HeatingPriority_Equpment4 (const HeatingPriority_Equpment4_optional& x);

        // TemplateZoneEquipment5
        //
        typedef ::xml_schema::idref TemplateZoneEquipment5_type;
        typedef ::xsd::cxx::tree::optional< TemplateZoneEquipment5_type > TemplateZoneEquipment5_optional;
        typedef ::xsd::cxx::tree::traits< TemplateZoneEquipment5_type, char > TemplateZoneEquipment5_traits;

        const TemplateZoneEquipment5_optional&
        TemplateZoneEquipment5 () const;

        TemplateZoneEquipment5_optional&
        TemplateZoneEquipment5 ();

        void
        TemplateZoneEquipment5 (const TemplateZoneEquipment5_type& x);

        void
        TemplateZoneEquipment5 (const TemplateZoneEquipment5_optional& x);

        void
        TemplateZoneEquipment5 (::std::auto_ptr< TemplateZoneEquipment5_type > p);

        // CoolingPriority_Equpment5
        //
        typedef ::xml_schema::int_ CoolingPriority_Equpment5_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_Equpment5_type > CoolingPriority_Equpment5_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_Equpment5_type, char > CoolingPriority_Equpment5_traits;

        const CoolingPriority_Equpment5_optional&
        CoolingPriority_Equpment5 () const;

        CoolingPriority_Equpment5_optional&
        CoolingPriority_Equpment5 ();

        void
        CoolingPriority_Equpment5 (const CoolingPriority_Equpment5_type& x);

        void
        CoolingPriority_Equpment5 (const CoolingPriority_Equpment5_optional& x);

        // HeatingPriority_Equpment5
        //
        typedef ::xml_schema::int_ HeatingPriority_Equpment5_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_Equpment5_type > HeatingPriority_Equpment5_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_Equpment5_type, char > HeatingPriority_Equpment5_traits;

        const HeatingPriority_Equpment5_optional&
        HeatingPriority_Equpment5 () const;

        HeatingPriority_Equpment5_optional&
        HeatingPriority_Equpment5 ();

        void
        HeatingPriority_Equpment5 (const HeatingPriority_Equpment5_type& x);

        void
        HeatingPriority_Equpment5 (const HeatingPriority_Equpment5_optional& x);

        // TemplateAirTerminal
        //
        typedef ::xml_schema::idref TemplateAirTerminal_type;
        typedef ::xsd::cxx::tree::optional< TemplateAirTerminal_type > TemplateAirTerminal_optional;
        typedef ::xsd::cxx::tree::traits< TemplateAirTerminal_type, char > TemplateAirTerminal_traits;

        const TemplateAirTerminal_optional&
        TemplateAirTerminal () const;

        TemplateAirTerminal_optional&
        TemplateAirTerminal ();

        void
        TemplateAirTerminal (const TemplateAirTerminal_type& x);

        void
        TemplateAirTerminal (const TemplateAirTerminal_optional& x);

        void
        TemplateAirTerminal (::std::auto_ptr< TemplateAirTerminal_type > p);

        // CoolingPriority_AirTerminal
        //
        typedef ::xml_schema::int_ CoolingPriority_AirTerminal_type;
        typedef ::xsd::cxx::tree::optional< CoolingPriority_AirTerminal_type > CoolingPriority_AirTerminal_optional;
        typedef ::xsd::cxx::tree::traits< CoolingPriority_AirTerminal_type, char > CoolingPriority_AirTerminal_traits;

        const CoolingPriority_AirTerminal_optional&
        CoolingPriority_AirTerminal () const;

        CoolingPriority_AirTerminal_optional&
        CoolingPriority_AirTerminal ();

        void
        CoolingPriority_AirTerminal (const CoolingPriority_AirTerminal_type& x);

        void
        CoolingPriority_AirTerminal (const CoolingPriority_AirTerminal_optional& x);

        // HeatingPriority_AirTerminal
        //
        typedef ::xml_schema::int_ HeatingPriority_AirTerminal_type;
        typedef ::xsd::cxx::tree::optional< HeatingPriority_AirTerminal_type > HeatingPriority_AirTerminal_optional;
        typedef ::xsd::cxx::tree::traits< HeatingPriority_AirTerminal_type, char > HeatingPriority_AirTerminal_traits;

        const HeatingPriority_AirTerminal_optional&
        HeatingPriority_AirTerminal () const;

        HeatingPriority_AirTerminal_optional&
        HeatingPriority_AirTerminal ();

        void
        HeatingPriority_AirTerminal (const HeatingPriority_AirTerminal_type& x);

        void
        HeatingPriority_AirTerminal (const HeatingPriority_AirTerminal_optional& x);

        // IncludesSensors
        //
        typedef ::xml_schema::boolean IncludesSensors_type;
        typedef ::xsd::cxx::tree::optional< IncludesSensors_type > IncludesSensors_optional;
        typedef ::xsd::cxx::tree::traits< IncludesSensors_type, char > IncludesSensors_traits;

        const IncludesSensors_optional&
        IncludesSensors () const;

        IncludesSensors_optional&
        IncludesSensors ();

        void
        IncludesSensors (const IncludesSensors_type& x);

        void
        IncludesSensors (const IncludesSensors_optional& x);

        // TemplateDryBulbTempSensor
        //
        typedef ::xml_schema::idref TemplateDryBulbTempSensor_type;
        typedef ::xsd::cxx::tree::optional< TemplateDryBulbTempSensor_type > TemplateDryBulbTempSensor_optional;
        typedef ::xsd::cxx::tree::traits< TemplateDryBulbTempSensor_type, char > TemplateDryBulbTempSensor_traits;

        const TemplateDryBulbTempSensor_optional&
        TemplateDryBulbTempSensor () const;

        TemplateDryBulbTempSensor_optional&
        TemplateDryBulbTempSensor ();

        void
        TemplateDryBulbTempSensor (const TemplateDryBulbTempSensor_type& x);

        void
        TemplateDryBulbTempSensor (const TemplateDryBulbTempSensor_optional& x);

        void
        TemplateDryBulbTempSensor (::std::auto_ptr< TemplateDryBulbTempSensor_type > p);

        // TemplateRadiantTempSensor
        //
        typedef ::xml_schema::idref TemplateRadiantTempSensor_type;
        typedef ::xsd::cxx::tree::optional< TemplateRadiantTempSensor_type > TemplateRadiantTempSensor_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRadiantTempSensor_type, char > TemplateRadiantTempSensor_traits;

        const TemplateRadiantTempSensor_optional&
        TemplateRadiantTempSensor () const;

        TemplateRadiantTempSensor_optional&
        TemplateRadiantTempSensor ();

        void
        TemplateRadiantTempSensor (const TemplateRadiantTempSensor_type& x);

        void
        TemplateRadiantTempSensor (const TemplateRadiantTempSensor_optional& x);

        void
        TemplateRadiantTempSensor (::std::auto_ptr< TemplateRadiantTempSensor_type > p);

        // ZoneTemperatureController
        //
        typedef ::xml_schema::idref ZoneTemperatureController_type;
        typedef ::xsd::cxx::tree::optional< ZoneTemperatureController_type > ZoneTemperatureController_optional;
        typedef ::xsd::cxx::tree::traits< ZoneTemperatureController_type, char > ZoneTemperatureController_traits;

        const ZoneTemperatureController_optional&
        ZoneTemperatureController () const;

        ZoneTemperatureController_optional&
        ZoneTemperatureController ();

        void
        ZoneTemperatureController (const ZoneTemperatureController_type& x);

        void
        ZoneTemperatureController (const ZoneTemperatureController_optional& x);

        void
        ZoneTemperatureController (::std::auto_ptr< ZoneTemperatureController_type > p);

        // TemplateRelativeHumiditySensor
        //
        typedef ::xml_schema::idref TemplateRelativeHumiditySensor_type;
        typedef ::xsd::cxx::tree::optional< TemplateRelativeHumiditySensor_type > TemplateRelativeHumiditySensor_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRelativeHumiditySensor_type, char > TemplateRelativeHumiditySensor_traits;

        const TemplateRelativeHumiditySensor_optional&
        TemplateRelativeHumiditySensor () const;

        TemplateRelativeHumiditySensor_optional&
        TemplateRelativeHumiditySensor ();

        void
        TemplateRelativeHumiditySensor (const TemplateRelativeHumiditySensor_type& x);

        void
        TemplateRelativeHumiditySensor (const TemplateRelativeHumiditySensor_optional& x);

        void
        TemplateRelativeHumiditySensor (::std::auto_ptr< TemplateRelativeHumiditySensor_type > p);

        // ZoneHumidityController
        //
        typedef ::xml_schema::idref ZoneHumidityController_type;
        typedef ::xsd::cxx::tree::optional< ZoneHumidityController_type > ZoneHumidityController_optional;
        typedef ::xsd::cxx::tree::traits< ZoneHumidityController_type, char > ZoneHumidityController_traits;

        const ZoneHumidityController_optional&
        ZoneHumidityController () const;

        ZoneHumidityController_optional&
        ZoneHumidityController ();

        void
        ZoneHumidityController (const ZoneHumidityController_type& x);

        void
        ZoneHumidityController (const ZoneHumidityController_optional& x);

        void
        ZoneHumidityController (::std::auto_ptr< ZoneHumidityController_type > p);

        // TemplateCO2Sensor
        //
        typedef ::xml_schema::idref TemplateCO2Sensor_type;
        typedef ::xsd::cxx::tree::optional< TemplateCO2Sensor_type > TemplateCO2Sensor_optional;
        typedef ::xsd::cxx::tree::traits< TemplateCO2Sensor_type, char > TemplateCO2Sensor_traits;

        const TemplateCO2Sensor_optional&
        TemplateCO2Sensor () const;

        TemplateCO2Sensor_optional&
        TemplateCO2Sensor ();

        void
        TemplateCO2Sensor (const TemplateCO2Sensor_type& x);

        void
        TemplateCO2Sensor (const TemplateCO2Sensor_optional& x);

        void
        TemplateCO2Sensor (::std::auto_ptr< TemplateCO2Sensor_type > p);

        // ZoneVentilationController
        //
        typedef ::xml_schema::idref ZoneVentilationController_type;
        typedef ::xsd::cxx::tree::optional< ZoneVentilationController_type > ZoneVentilationController_optional;
        typedef ::xsd::cxx::tree::traits< ZoneVentilationController_type, char > ZoneVentilationController_traits;

        const ZoneVentilationController_optional&
        ZoneVentilationController () const;

        ZoneVentilationController_optional&
        ZoneVentilationController ();

        void
        ZoneVentilationController (const ZoneVentilationController_type& x);

        void
        ZoneVentilationController (const ZoneVentilationController_optional& x);

        void
        ZoneVentilationController (::std::auto_ptr< ZoneVentilationController_type > p);

        // TemplateDayLightingSensor
        //
        typedef ::xml_schema::idref TemplateDayLightingSensor_type;
        typedef ::xsd::cxx::tree::optional< TemplateDayLightingSensor_type > TemplateDayLightingSensor_optional;
        typedef ::xsd::cxx::tree::traits< TemplateDayLightingSensor_type, char > TemplateDayLightingSensor_traits;

        const TemplateDayLightingSensor_optional&
        TemplateDayLightingSensor () const;

        TemplateDayLightingSensor_optional&
        TemplateDayLightingSensor ();

        void
        TemplateDayLightingSensor (const TemplateDayLightingSensor_type& x);

        void
        TemplateDayLightingSensor (const TemplateDayLightingSensor_optional& x);

        void
        TemplateDayLightingSensor (::std::auto_ptr< TemplateDayLightingSensor_type > p);

        // ZoneDaylightingController
        //
        typedef ::xml_schema::idref ZoneDaylightingController_type;
        typedef ::xsd::cxx::tree::optional< ZoneDaylightingController_type > ZoneDaylightingController_optional;
        typedef ::xsd::cxx::tree::traits< ZoneDaylightingController_type, char > ZoneDaylightingController_traits;

        const ZoneDaylightingController_optional&
        ZoneDaylightingController () const;

        ZoneDaylightingController_optional&
        ZoneDaylightingController ();

        void
        ZoneDaylightingController (const ZoneDaylightingController_type& x);

        void
        ZoneDaylightingController (const ZoneDaylightingController_optional& x);

        void
        ZoneDaylightingController (::std::auto_ptr< ZoneDaylightingController_type > p);

        // ZoneBranchesIncludePlena
        //
        typedef ::xml_schema::boolean ZoneBranchesIncludePlena_type;
        typedef ::xsd::cxx::tree::optional< ZoneBranchesIncludePlena_type > ZoneBranchesIncludePlena_optional;
        typedef ::xsd::cxx::tree::traits< ZoneBranchesIncludePlena_type, char > ZoneBranchesIncludePlena_traits;

        const ZoneBranchesIncludePlena_optional&
        ZoneBranchesIncludePlena () const;

        ZoneBranchesIncludePlena_optional&
        ZoneBranchesIncludePlena ();

        void
        ZoneBranchesIncludePlena (const ZoneBranchesIncludePlena_type& x);

        void
        ZoneBranchesIncludePlena (const ZoneBranchesIncludePlena_optional& x);

        // IncludesSharedSupplyPlenum
        //
        typedef ::xml_schema::boolean IncludesSharedSupplyPlenum_type;
        typedef ::xsd::cxx::tree::optional< IncludesSharedSupplyPlenum_type > IncludesSharedSupplyPlenum_optional;
        typedef ::xsd::cxx::tree::traits< IncludesSharedSupplyPlenum_type, char > IncludesSharedSupplyPlenum_traits;

        const IncludesSharedSupplyPlenum_optional&
        IncludesSharedSupplyPlenum () const;

        IncludesSharedSupplyPlenum_optional&
        IncludesSharedSupplyPlenum ();

        void
        IncludesSharedSupplyPlenum (const IncludesSharedSupplyPlenum_type& x);

        void
        IncludesSharedSupplyPlenum (const IncludesSharedSupplyPlenum_optional& x);

        // IncludesDedicatedSupplyPlenum
        //
        typedef ::xml_schema::boolean IncludesDedicatedSupplyPlenum_type;
        typedef ::xsd::cxx::tree::optional< IncludesDedicatedSupplyPlenum_type > IncludesDedicatedSupplyPlenum_optional;
        typedef ::xsd::cxx::tree::traits< IncludesDedicatedSupplyPlenum_type, char > IncludesDedicatedSupplyPlenum_traits;

        const IncludesDedicatedSupplyPlenum_optional&
        IncludesDedicatedSupplyPlenum () const;

        IncludesDedicatedSupplyPlenum_optional&
        IncludesDedicatedSupplyPlenum ();

        void
        IncludesDedicatedSupplyPlenum (const IncludesDedicatedSupplyPlenum_type& x);

        void
        IncludesDedicatedSupplyPlenum (const IncludesDedicatedSupplyPlenum_optional& x);

        // IncludesDedicatedReturnPlenum
        //
        typedef ::xml_schema::boolean IncludesDedicatedReturnPlenum_type;
        typedef ::xsd::cxx::tree::optional< IncludesDedicatedReturnPlenum_type > IncludesDedicatedReturnPlenum_optional;
        typedef ::xsd::cxx::tree::traits< IncludesDedicatedReturnPlenum_type, char > IncludesDedicatedReturnPlenum_traits;

        const IncludesDedicatedReturnPlenum_optional&
        IncludesDedicatedReturnPlenum () const;

        IncludesDedicatedReturnPlenum_optional&
        IncludesDedicatedReturnPlenum ();

        void
        IncludesDedicatedReturnPlenum (const IncludesDedicatedReturnPlenum_type& x);

        void
        IncludesDedicatedReturnPlenum (const IncludesDedicatedReturnPlenum_optional& x);

        // IncludesSharedReturnPlenum
        //
        typedef ::xml_schema::boolean IncludesSharedReturnPlenum_type;
        typedef ::xsd::cxx::tree::optional< IncludesSharedReturnPlenum_type > IncludesSharedReturnPlenum_optional;
        typedef ::xsd::cxx::tree::traits< IncludesSharedReturnPlenum_type, char > IncludesSharedReturnPlenum_traits;

        const IncludesSharedReturnPlenum_optional&
        IncludesSharedReturnPlenum () const;

        IncludesSharedReturnPlenum_optional&
        IncludesSharedReturnPlenum ();

        void
        IncludesSharedReturnPlenum (const IncludesSharedReturnPlenum_type& x);

        void
        IncludesSharedReturnPlenum (const IncludesSharedReturnPlenum_optional& x);

        // Constructors.
        //
        SimTemplateHvacZoneEquipment (const RefId_type&);

        SimTemplateHvacZoneEquipment (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

        SimTemplateHvacZoneEquipment (const SimTemplateHvacZoneEquipment& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

        virtual SimTemplateHvacZoneEquipment*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimTemplateHvacZoneEquipment&
        operator= (const SimTemplateHvacZoneEquipment& x);

        virtual 
        ~SimTemplateHvacZoneEquipment ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        TemplateZoneEquipment1_optional TemplateZoneEquipment1_;
        CoolingPriority_Equpment1_optional CoolingPriority_Equpment1_;
        HeatingPriority_Equpment1_optional HeatingPriority_Equpment1_;
        TemplateZoneEquipment2_optional TemplateZoneEquipment2_;
        CoolingPriority_Equpment2_optional CoolingPriority_Equpment2_;
        HeatingPriority_Equpment2_optional HeatingPriority_Equpment2_;
        TemplateZoneEquipment3_optional TemplateZoneEquipment3_;
        CoolingPriority_Equpment3_optional CoolingPriority_Equpment3_;
        HeatingPriority_Equpment3_optional HeatingPriority_Equpment3_;
        TemplateZoneEquipment4_optional TemplateZoneEquipment4_;
        CoolingPriority_Equpment4_optional CoolingPriority_Equpment4_;
        HeatingPriority_Equpment4_optional HeatingPriority_Equpment4_;
        TemplateZoneEquipment5_optional TemplateZoneEquipment5_;
        CoolingPriority_Equpment5_optional CoolingPriority_Equpment5_;
        HeatingPriority_Equpment5_optional HeatingPriority_Equpment5_;
        TemplateAirTerminal_optional TemplateAirTerminal_;
        CoolingPriority_AirTerminal_optional CoolingPriority_AirTerminal_;
        HeatingPriority_AirTerminal_optional HeatingPriority_AirTerminal_;
        IncludesSensors_optional IncludesSensors_;
        TemplateDryBulbTempSensor_optional TemplateDryBulbTempSensor_;
        TemplateRadiantTempSensor_optional TemplateRadiantTempSensor_;
        ZoneTemperatureController_optional ZoneTemperatureController_;
        TemplateRelativeHumiditySensor_optional TemplateRelativeHumiditySensor_;
        ZoneHumidityController_optional ZoneHumidityController_;
        TemplateCO2Sensor_optional TemplateCO2Sensor_;
        ZoneVentilationController_optional ZoneVentilationController_;
        TemplateDayLightingSensor_optional TemplateDayLightingSensor_;
        ZoneDaylightingController_optional ZoneDaylightingController_;
        ZoneBranchesIncludePlena_optional ZoneBranchesIncludePlena_;
        IncludesSharedSupplyPlenum_optional IncludesSharedSupplyPlenum_;
        IncludesDedicatedSupplyPlenum_optional IncludesDedicatedSupplyPlenum_;
        IncludesDedicatedReturnPlenum_optional IncludesDedicatedReturnPlenum_;
        IncludesSharedReturnPlenum_optional IncludesSharedReturnPlenum_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_TEMPLATE_HVAC_ZONE_EQUIPMENT_HXX
