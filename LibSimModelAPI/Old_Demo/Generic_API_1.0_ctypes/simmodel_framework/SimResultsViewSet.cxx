// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimResultsViewSet.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimResultsViewSet
      // 

      const SimResultsViewSet::ViewSetLayout_optional& SimResultsViewSet::
      ViewSetLayout () const
      {
        return this->ViewSetLayout_;
      }

      SimResultsViewSet::ViewSetLayout_optional& SimResultsViewSet::
      ViewSetLayout ()
      {
        return this->ViewSetLayout_;
      }

      void SimResultsViewSet::
      ViewSetLayout (const ViewSetLayout_type& x)
      {
        this->ViewSetLayout_.set (x);
      }

      void SimResultsViewSet::
      ViewSetLayout (const ViewSetLayout_optional& x)
      {
        this->ViewSetLayout_ = x;
      }

      const SimResultsViewSet::ViewSet_optional& SimResultsViewSet::
      ViewSet () const
      {
        return this->ViewSet_;
      }

      SimResultsViewSet::ViewSet_optional& SimResultsViewSet::
      ViewSet ()
      {
        return this->ViewSet_;
      }

      void SimResultsViewSet::
      ViewSet (const ViewSet_type& x)
      {
        this->ViewSet_.set (x);
      }

      void SimResultsViewSet::
      ViewSet (const ViewSet_optional& x)
      {
        this->ViewSet_ = x;
      }

      void SimResultsViewSet::
      ViewSet (::std::auto_ptr< ViewSet_type > x)
      {
        this->ViewSet_.set (x);
      }

      const SimResultsViewSet::ViewSetString_optional& SimResultsViewSet::
      ViewSetString () const
      {
        return this->ViewSetString_;
      }

      SimResultsViewSet::ViewSetString_optional& SimResultsViewSet::
      ViewSetString ()
      {
        return this->ViewSetString_;
      }

      void SimResultsViewSet::
      ViewSetString (const ViewSetString_type& x)
      {
        this->ViewSetString_.set (x);
      }

      void SimResultsViewSet::
      ViewSetString (const ViewSetString_optional& x)
      {
        this->ViewSetString_ = x;
      }

      void SimResultsViewSet::
      ViewSetString (::std::auto_ptr< ViewSetString_type > x)
      {
        this->ViewSetString_.set (x);
      }

      const SimResultsViewSet::ViewNumber_optional& SimResultsViewSet::
      ViewNumber () const
      {
        return this->ViewNumber_;
      }

      SimResultsViewSet::ViewNumber_optional& SimResultsViewSet::
      ViewNumber ()
      {
        return this->ViewNumber_;
      }

      void SimResultsViewSet::
      ViewNumber (const ViewNumber_type& x)
      {
        this->ViewNumber_.set (x);
      }

      void SimResultsViewSet::
      ViewNumber (const ViewNumber_optional& x)
      {
        this->ViewNumber_ = x;
      }

      const SimResultsViewSet::SubViewNumber_optional& SimResultsViewSet::
      SubViewNumber () const
      {
        return this->SubViewNumber_;
      }

      SimResultsViewSet::SubViewNumber_optional& SimResultsViewSet::
      SubViewNumber ()
      {
        return this->SubViewNumber_;
      }

      void SimResultsViewSet::
      SubViewNumber (const SubViewNumber_type& x)
      {
        this->SubViewNumber_.set (x);
      }

      void SimResultsViewSet::
      SubViewNumber (const SubViewNumber_optional& x)
      {
        this->SubViewNumber_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimResultsViewSet
      //

      SimResultsViewSet::
      SimResultsViewSet (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (RefId),
        ViewSetLayout_ (this),
        ViewSet_ (this),
        ViewSetString_ (this),
        ViewNumber_ (this),
        SubViewNumber_ (this)
      {
      }

      SimResultsViewSet::
      SimResultsViewSet (const SimResultsViewSet& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (x, f, c),
        ViewSetLayout_ (x.ViewSetLayout_, f, this),
        ViewSet_ (x.ViewSet_, f, this),
        ViewSetString_ (x.ViewSetString_, f, this),
        ViewNumber_ (x.ViewNumber_, f, this),
        SubViewNumber_ (x.SubViewNumber_, f, this)
      {
      }

      SimResultsViewSet::
      SimResultsViewSet (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (e, f | ::xml_schema::flags::base, c),
        ViewSetLayout_ (this),
        ViewSet_ (this),
        ViewSetString_ (this),
        ViewNumber_ (this),
        SubViewNumber_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimResultsViewSet::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimResultsVisualization::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ViewSetLayout
          //
          if (n.name () == "ViewSetLayout" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ViewSetLayout_)
            {
              this->ViewSetLayout_.set (ViewSetLayout_traits::create (i, f, this));
              continue;
            }
          }

          // ViewSet
          //
          if (n.name () == "ViewSet" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ViewSet_type > r (
              ViewSet_traits::create (i, f, this));

            if (!this->ViewSet_)
            {
              this->ViewSet_.set (r);
              continue;
            }
          }

          // ViewSetString
          //
          if (n.name () == "ViewSetString" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ViewSetString_type > r (
              ViewSetString_traits::create (i, f, this));

            if (!this->ViewSetString_)
            {
              this->ViewSetString_.set (r);
              continue;
            }
          }

          // ViewNumber
          //
          if (n.name () == "ViewNumber" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ViewNumber_)
            {
              this->ViewNumber_.set (ViewNumber_traits::create (i, f, this));
              continue;
            }
          }

          // SubViewNumber
          //
          if (n.name () == "SubViewNumber" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SubViewNumber_)
            {
              this->SubViewNumber_.set (SubViewNumber_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimResultsViewSet* SimResultsViewSet::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimResultsViewSet (*this, f, c);
      }

      SimResultsViewSet& SimResultsViewSet::
      operator= (const SimResultsViewSet& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization& > (*this) = x;
          this->ViewSetLayout_ = x.ViewSetLayout_;
          this->ViewSet_ = x.ViewSet_;
          this->ViewSetString_ = x.ViewSetString_;
          this->ViewNumber_ = x.ViewNumber_;
          this->SubViewNumber_ = x.SubViewNumber_;
        }

        return *this;
      }

      SimResultsViewSet::
      ~SimResultsViewSet ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

