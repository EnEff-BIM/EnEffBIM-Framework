// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_PlumbingTerminal_HotWaterFixtures.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_PlumbingTerminal_HotWaterFixtures
      // 

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_EndUseSubCat_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_EndUseSubCat () const
      {
        return this->SimFlowTerm_EndUseSubCat_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_EndUseSubCat_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_EndUseSubCat ()
      {
        return this->SimFlowTerm_EndUseSubCat_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_EndUseSubCat (const SimFlowTerm_EndUseSubCat_type& x)
      {
        this->SimFlowTerm_EndUseSubCat_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_EndUseSubCat (const SimFlowTerm_EndUseSubCat_optional& x)
      {
        this->SimFlowTerm_EndUseSubCat_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_EndUseSubCat (::std::auto_ptr< SimFlowTerm_EndUseSubCat_type > x)
      {
        this->SimFlowTerm_EndUseSubCat_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_PeakFlowRate_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_PeakFlowRate () const
      {
        return this->SimFlowTerm_PeakFlowRate_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_PeakFlowRate_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_PeakFlowRate ()
      {
        return this->SimFlowTerm_PeakFlowRate_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_PeakFlowRate (const SimFlowTerm_PeakFlowRate_type& x)
      {
        this->SimFlowTerm_PeakFlowRate_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_PeakFlowRate (const SimFlowTerm_PeakFlowRate_optional& x)
      {
        this->SimFlowTerm_PeakFlowRate_ = x;
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_FlowRateFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_FlowRateFractSchedName () const
      {
        return this->SimFlowTerm_FlowRateFractSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_FlowRateFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_FlowRateFractSchedName ()
      {
        return this->SimFlowTerm_FlowRateFractSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_FlowRateFractSchedName (const SimFlowTerm_FlowRateFractSchedName_type& x)
      {
        this->SimFlowTerm_FlowRateFractSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_FlowRateFractSchedName (const SimFlowTerm_FlowRateFractSchedName_optional& x)
      {
        this->SimFlowTerm_FlowRateFractSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_FlowRateFractSchedName (::std::auto_ptr< SimFlowTerm_FlowRateFractSchedName_type > x)
      {
        this->SimFlowTerm_FlowRateFractSchedName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_TargetTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_TargetTempSchedName () const
      {
        return this->SimFlowTerm_TargetTempSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_TargetTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_TargetTempSchedName ()
      {
        return this->SimFlowTerm_TargetTempSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_TargetTempSchedName (const SimFlowTerm_TargetTempSchedName_type& x)
      {
        this->SimFlowTerm_TargetTempSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_TargetTempSchedName (const SimFlowTerm_TargetTempSchedName_optional& x)
      {
        this->SimFlowTerm_TargetTempSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_TargetTempSchedName (::std::auto_ptr< SimFlowTerm_TargetTempSchedName_type > x)
      {
        this->SimFlowTerm_TargetTempSchedName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_HotWaterSupTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_HotWaterSupTempSchedName () const
      {
        return this->SimFlowTerm_HotWaterSupTempSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_HotWaterSupTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_HotWaterSupTempSchedName ()
      {
        return this->SimFlowTerm_HotWaterSupTempSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_HotWaterSupTempSchedName (const SimFlowTerm_HotWaterSupTempSchedName_type& x)
      {
        this->SimFlowTerm_HotWaterSupTempSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_HotWaterSupTempSchedName (const SimFlowTerm_HotWaterSupTempSchedName_optional& x)
      {
        this->SimFlowTerm_HotWaterSupTempSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_HotWaterSupTempSchedName (::std::auto_ptr< SimFlowTerm_HotWaterSupTempSchedName_type > x)
      {
        this->SimFlowTerm_HotWaterSupTempSchedName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_ColdWaterSupTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ColdWaterSupTempSchedName () const
      {
        return this->SimFlowTerm_ColdWaterSupTempSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_ColdWaterSupTempSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ColdWaterSupTempSchedName ()
      {
        return this->SimFlowTerm_ColdWaterSupTempSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ColdWaterSupTempSchedName (const SimFlowTerm_ColdWaterSupTempSchedName_type& x)
      {
        this->SimFlowTerm_ColdWaterSupTempSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ColdWaterSupTempSchedName (const SimFlowTerm_ColdWaterSupTempSchedName_optional& x)
      {
        this->SimFlowTerm_ColdWaterSupTempSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ColdWaterSupTempSchedName (::std::auto_ptr< SimFlowTerm_ColdWaterSupTempSchedName_type > x)
      {
        this->SimFlowTerm_ColdWaterSupTempSchedName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_ZoneName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ZoneName () const
      {
        return this->SimFlowTerm_ZoneName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_ZoneName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ZoneName ()
      {
        return this->SimFlowTerm_ZoneName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ZoneName (const SimFlowTerm_ZoneName_type& x)
      {
        this->SimFlowTerm_ZoneName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ZoneName (const SimFlowTerm_ZoneName_optional& x)
      {
        this->SimFlowTerm_ZoneName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_ZoneName (::std::auto_ptr< SimFlowTerm_ZoneName_type > x)
      {
        this->SimFlowTerm_ZoneName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_SensFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_SensFractSchedName () const
      {
        return this->SimFlowTerm_SensFractSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_SensFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_SensFractSchedName ()
      {
        return this->SimFlowTerm_SensFractSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_SensFractSchedName (const SimFlowTerm_SensFractSchedName_type& x)
      {
        this->SimFlowTerm_SensFractSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_SensFractSchedName (const SimFlowTerm_SensFractSchedName_optional& x)
      {
        this->SimFlowTerm_SensFractSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_SensFractSchedName (::std::auto_ptr< SimFlowTerm_SensFractSchedName_type > x)
      {
        this->SimFlowTerm_SensFractSchedName_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_LatentFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_LatentFractSchedName () const
      {
        return this->SimFlowTerm_LatentFractSchedName_;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::SimFlowTerm_LatentFractSchedName_optional& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_LatentFractSchedName ()
      {
        return this->SimFlowTerm_LatentFractSchedName_;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_LatentFractSchedName (const SimFlowTerm_LatentFractSchedName_type& x)
      {
        this->SimFlowTerm_LatentFractSchedName_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_LatentFractSchedName (const SimFlowTerm_LatentFractSchedName_optional& x)
      {
        this->SimFlowTerm_LatentFractSchedName_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerm_LatentFractSchedName (::std::auto_ptr< SimFlowTerm_LatentFractSchedName_type > x)
      {
        this->SimFlowTerm_LatentFractSchedName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_PlumbingTerminal_HotWaterFixtures
      //

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_PlumbingTerminal (RefId),
        SimFlowTerm_EndUseSubCat_ (this),
        SimFlowTerm_PeakFlowRate_ (this),
        SimFlowTerm_FlowRateFractSchedName_ (this),
        SimFlowTerm_TargetTempSchedName_ (this),
        SimFlowTerm_HotWaterSupTempSchedName_ (this),
        SimFlowTerm_ColdWaterSupTempSchedName_ (this),
        SimFlowTerm_ZoneName_ (this),
        SimFlowTerm_SensFractSchedName_ (this),
        SimFlowTerm_LatentFractSchedName_ (this)
      {
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures (const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_PlumbingTerminal (x, f, c),
        SimFlowTerm_EndUseSubCat_ (x.SimFlowTerm_EndUseSubCat_, f, this),
        SimFlowTerm_PeakFlowRate_ (x.SimFlowTerm_PeakFlowRate_, f, this),
        SimFlowTerm_FlowRateFractSchedName_ (x.SimFlowTerm_FlowRateFractSchedName_, f, this),
        SimFlowTerm_TargetTempSchedName_ (x.SimFlowTerm_TargetTempSchedName_, f, this),
        SimFlowTerm_HotWaterSupTempSchedName_ (x.SimFlowTerm_HotWaterSupTempSchedName_, f, this),
        SimFlowTerm_ColdWaterSupTempSchedName_ (x.SimFlowTerm_ColdWaterSupTempSchedName_, f, this),
        SimFlowTerm_ZoneName_ (x.SimFlowTerm_ZoneName_, f, this),
        SimFlowTerm_SensFractSchedName_ (x.SimFlowTerm_SensFractSchedName_, f, this),
        SimFlowTerm_LatentFractSchedName_ (x.SimFlowTerm_LatentFractSchedName_, f, this)
      {
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal_PlumbingTerminal (e, f | ::xml_schema::flags::base, c),
        SimFlowTerm_EndUseSubCat_ (this),
        SimFlowTerm_PeakFlowRate_ (this),
        SimFlowTerm_FlowRateFractSchedName_ (this),
        SimFlowTerm_TargetTempSchedName_ (this),
        SimFlowTerm_HotWaterSupTempSchedName_ (this),
        SimFlowTerm_ColdWaterSupTempSchedName_ (this),
        SimFlowTerm_ZoneName_ (this),
        SimFlowTerm_SensFractSchedName_ (this),
        SimFlowTerm_LatentFractSchedName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowTerminal_PlumbingTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowTerm_EndUseSubCat
          //
          if (n.name () == "SimFlowTerm_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_EndUseSubCat_type > r (
              SimFlowTerm_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimFlowTerm_EndUseSubCat_)
            {
              this->SimFlowTerm_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimFlowTerm_PeakFlowRate
          //
          if (n.name () == "SimFlowTerm_PeakFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowTerm_PeakFlowRate_)
            {
              this->SimFlowTerm_PeakFlowRate_.set (SimFlowTerm_PeakFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowTerm_FlowRateFractSchedName
          //
          if (n.name () == "SimFlowTerm_FlowRateFractSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_FlowRateFractSchedName_type > r (
              SimFlowTerm_FlowRateFractSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_FlowRateFractSchedName_)
            {
              this->SimFlowTerm_FlowRateFractSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_TargetTempSchedName
          //
          if (n.name () == "SimFlowTerm_TargetTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_TargetTempSchedName_type > r (
              SimFlowTerm_TargetTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_TargetTempSchedName_)
            {
              this->SimFlowTerm_TargetTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_HotWaterSupTempSchedName
          //
          if (n.name () == "SimFlowTerm_HotWaterSupTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_HotWaterSupTempSchedName_type > r (
              SimFlowTerm_HotWaterSupTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_HotWaterSupTempSchedName_)
            {
              this->SimFlowTerm_HotWaterSupTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ColdWaterSupTempSchedName
          //
          if (n.name () == "SimFlowTerm_ColdWaterSupTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ColdWaterSupTempSchedName_type > r (
              SimFlowTerm_ColdWaterSupTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ColdWaterSupTempSchedName_)
            {
              this->SimFlowTerm_ColdWaterSupTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ZoneName
          //
          if (n.name () == "SimFlowTerm_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ZoneName_type > r (
              SimFlowTerm_ZoneName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ZoneName_)
            {
              this->SimFlowTerm_ZoneName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_SensFractSchedName
          //
          if (n.name () == "SimFlowTerm_SensFractSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_SensFractSchedName_type > r (
              SimFlowTerm_SensFractSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_SensFractSchedName_)
            {
              this->SimFlowTerm_SensFractSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_LatentFractSchedName
          //
          if (n.name () == "SimFlowTerm_LatentFractSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_LatentFractSchedName_type > r (
              SimFlowTerm_LatentFractSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_LatentFractSchedName_)
            {
              this->SimFlowTerm_LatentFractSchedName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures* SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_PlumbingTerminal_HotWaterFixtures (*this, f, c);
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures& SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      operator= (const SimFlowTerminal_PlumbingTerminal_HotWaterFixtures& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowTerminal_PlumbingTerminal& > (*this) = x;
          this->SimFlowTerm_EndUseSubCat_ = x.SimFlowTerm_EndUseSubCat_;
          this->SimFlowTerm_PeakFlowRate_ = x.SimFlowTerm_PeakFlowRate_;
          this->SimFlowTerm_FlowRateFractSchedName_ = x.SimFlowTerm_FlowRateFractSchedName_;
          this->SimFlowTerm_TargetTempSchedName_ = x.SimFlowTerm_TargetTempSchedName_;
          this->SimFlowTerm_HotWaterSupTempSchedName_ = x.SimFlowTerm_HotWaterSupTempSchedName_;
          this->SimFlowTerm_ColdWaterSupTempSchedName_ = x.SimFlowTerm_ColdWaterSupTempSchedName_;
          this->SimFlowTerm_ZoneName_ = x.SimFlowTerm_ZoneName_;
          this->SimFlowTerm_SensFractSchedName_ = x.SimFlowTerm_SensFractSchedName_;
          this->SimFlowTerm_LatentFractSchedName_ = x.SimFlowTerm_LatentFractSchedName_;
        }

        return *this;
      }

      SimFlowTerminal_PlumbingTerminal_HotWaterFixtures::
      ~SimFlowTerminal_PlumbingTerminal_HotWaterFixtures ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

