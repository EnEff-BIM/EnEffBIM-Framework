// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatingCoilSteam.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilSteam
      // 

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_DegreeSubCooling_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeSubCooling () const
      {
        return this->SimFlowEnergyTrans_DegreeSubCooling_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_DegreeSubCooling_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeSubCooling ()
      {
        return this->SimFlowEnergyTrans_DegreeSubCooling_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeSubCooling (const SimFlowEnergyTrans_DegreeSubCooling_type& x)
      {
        this->SimFlowEnergyTrans_DegreeSubCooling_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeSubCooling (const SimFlowEnergyTrans_DegreeSubCooling_optional& x)
      {
        this->SimFlowEnergyTrans_DegreeSubCooling_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_MaxSteamFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_MaxSteamFlowRate () const
      {
        return this->SimFlowEnergyTrans_MaxSteamFlowRate_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_MaxSteamFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_MaxSteamFlowRate ()
      {
        return this->SimFlowEnergyTrans_MaxSteamFlowRate_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_MaxSteamFlowRate (const SimFlowEnergyTrans_MaxSteamFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_MaxSteamFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_MaxSteamFlowRate (const SimFlowEnergyTrans_MaxSteamFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_MaxSteamFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_WaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterInletNodeName (const SimFlowEnergyTrans_WaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_WaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_WaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterOutletNodeName (const SimFlowEnergyTrans_WaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_WaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_WaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_DegreeLoopSubCooling_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeLoopSubCooling () const
      {
        return this->SimFlowEnergyTrans_DegreeLoopSubCooling_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_DegreeLoopSubCooling_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeLoopSubCooling ()
      {
        return this->SimFlowEnergyTrans_DegreeLoopSubCooling_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeLoopSubCooling (const SimFlowEnergyTrans_DegreeLoopSubCooling_type& x)
      {
        this->SimFlowEnergyTrans_DegreeLoopSubCooling_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_DegreeLoopSubCooling (const SimFlowEnergyTrans_DegreeLoopSubCooling_optional& x)
      {
        this->SimFlowEnergyTrans_DegreeLoopSubCooling_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_CoilCtrlType_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_CoilCtrlType () const
      {
        return this->SimFlowEnergyTrans_CoilCtrlType_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_CoilCtrlType_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_CoilCtrlType ()
      {
        return this->SimFlowEnergyTrans_CoilCtrlType_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_CoilCtrlType (const SimFlowEnergyTrans_CoilCtrlType_type& x)
      {
        this->SimFlowEnergyTrans_CoilCtrlType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_CoilCtrlType (const SimFlowEnergyTrans_CoilCtrlType_optional& x)
      {
        this->SimFlowEnergyTrans_CoilCtrlType_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_CoilCtrlType (::std::auto_ptr< SimFlowEnergyTrans_CoilCtrlType_type > x)
      {
        this->SimFlowEnergyTrans_CoilCtrlType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_TempSetpointNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_TempSetpointNodeName () const
      {
        return this->SimFlowEnergyTrans_TempSetpointNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::SimFlowEnergyTrans_TempSetpointNodeName_optional& SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_TempSetpointNodeName ()
      {
        return this->SimFlowEnergyTrans_TempSetpointNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_TempSetpointNodeName (const SimFlowEnergyTrans_TempSetpointNodeName_type& x)
      {
        this->SimFlowEnergyTrans_TempSetpointNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_TempSetpointNodeName (const SimFlowEnergyTrans_TempSetpointNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_TempSetpointNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTrans_TempSetpointNodeName (::std::auto_ptr< SimFlowEnergyTrans_TempSetpointNodeName_type > x)
      {
        this->SimFlowEnergyTrans_TempSetpointNodeName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilSteam
      //

      SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTransfer_HeatingCoilSteam (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_DegreeSubCooling_ (this),
        SimFlowEnergyTrans_MaxSteamFlowRate_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_DegreeLoopSubCooling_ (this),
        SimFlowEnergyTrans_CoilCtrlType_ (this),
        SimFlowEnergyTrans_TempSetpointNodeName_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTransfer_HeatingCoilSteam (const SimFlowEnergyTransfer_HeatingCoilSteam& x,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_DegreeSubCooling_ (x.SimFlowEnergyTrans_DegreeSubCooling_, f, this),
        SimFlowEnergyTrans_MaxSteamFlowRate_ (x.SimFlowEnergyTrans_MaxSteamFlowRate_, f, this),
        SimFlowEnergyTrans_WaterInletNodeName_ (x.SimFlowEnergyTrans_WaterInletNodeName_, f, this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (x.SimFlowEnergyTrans_WaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_DegreeLoopSubCooling_ (x.SimFlowEnergyTrans_DegreeLoopSubCooling_, f, this),
        SimFlowEnergyTrans_CoilCtrlType_ (x.SimFlowEnergyTrans_CoilCtrlType_, f, this),
        SimFlowEnergyTrans_TempSetpointNodeName_ (x.SimFlowEnergyTrans_TempSetpointNodeName_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::
      SimFlowEnergyTransfer_HeatingCoilSteam (const ::xercesc::DOMElement& e,
                                              ::xml_schema::flags f,
                                              ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_DegreeSubCooling_ (this),
        SimFlowEnergyTrans_MaxSteamFlowRate_ (this),
        SimFlowEnergyTrans_WaterInletNodeName_ (this),
        SimFlowEnergyTrans_WaterOutletNodeName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_DegreeLoopSubCooling_ (this),
        SimFlowEnergyTrans_CoilCtrlType_ (this),
        SimFlowEnergyTrans_TempSetpointNodeName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatingCoilSteam::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DegreeSubCooling
          //
          if (n.name () == "SimFlowEnergyTrans_DegreeSubCooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DegreeSubCooling_)
            {
              this->SimFlowEnergyTrans_DegreeSubCooling_.set (SimFlowEnergyTrans_DegreeSubCooling_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxSteamFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_MaxSteamFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxSteamFlowRate_)
            {
              this->SimFlowEnergyTrans_MaxSteamFlowRate_.set (SimFlowEnergyTrans_MaxSteamFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterInletNodeName_type > r (
              SimFlowEnergyTrans_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_WaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_WaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_WaterOutletNodeName_type > r (
              SimFlowEnergyTrans_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_WaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DegreeLoopSubCooling
          //
          if (n.name () == "SimFlowEnergyTrans_DegreeLoopSubCooling" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DegreeLoopSubCooling_)
            {
              this->SimFlowEnergyTrans_DegreeLoopSubCooling_.set (SimFlowEnergyTrans_DegreeLoopSubCooling_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CoilCtrlType
          //
          if (n.name () == "SimFlowEnergyTrans_CoilCtrlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CoilCtrlType_type > r (
              SimFlowEnergyTrans_CoilCtrlType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CoilCtrlType_)
            {
              this->SimFlowEnergyTrans_CoilCtrlType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_TempSetpointNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_TempSetpointNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TempSetpointNodeName_type > r (
              SimFlowEnergyTrans_TempSetpointNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TempSetpointNodeName_)
            {
              this->SimFlowEnergyTrans_TempSetpointNodeName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatingCoilSteam* SimFlowEnergyTransfer_HeatingCoilSteam::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatingCoilSteam (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatingCoilSteam& SimFlowEnergyTransfer_HeatingCoilSteam::
      operator= (const SimFlowEnergyTransfer_HeatingCoilSteam& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_DegreeSubCooling_ = x.SimFlowEnergyTrans_DegreeSubCooling_;
          this->SimFlowEnergyTrans_MaxSteamFlowRate_ = x.SimFlowEnergyTrans_MaxSteamFlowRate_;
          this->SimFlowEnergyTrans_WaterInletNodeName_ = x.SimFlowEnergyTrans_WaterInletNodeName_;
          this->SimFlowEnergyTrans_WaterOutletNodeName_ = x.SimFlowEnergyTrans_WaterOutletNodeName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_DegreeLoopSubCooling_ = x.SimFlowEnergyTrans_DegreeLoopSubCooling_;
          this->SimFlowEnergyTrans_CoilCtrlType_ = x.SimFlowEnergyTrans_CoilCtrlType_;
          this->SimFlowEnergyTrans_TempSetpointNodeName_ = x.SimFlowEnergyTrans_TempSetpointNodeName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatingCoilSteam::
      ~SimFlowEnergyTransfer_HeatingCoilSteam ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

