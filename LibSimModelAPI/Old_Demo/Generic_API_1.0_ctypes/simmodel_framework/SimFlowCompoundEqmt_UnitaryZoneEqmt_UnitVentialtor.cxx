// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor
      // 

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxSupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxSupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxSupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxSupplyAirFlowRate (const SimFlowCompEqmt_MaxSupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFlowRate (const SimFlowCompEqmt_MaxOutdrAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirInNodeName () const
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AirInNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirInNodeName ()
      {
        return this->SimFlowCompEqmt_AirInNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirInNodeName (const SimFlowCompEqmt_AirInNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirInNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirInNodeName (::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirInNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirOutNodeName () const
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AirOutNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirOutNodeName ()
      {
        return this->SimFlowCompEqmt_AirOutNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_type& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirOutNodeName (const SimFlowCompEqmt_AirOutNodeName_optional& x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AirOutNodeName (::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > x)
      {
        this->SimFlowCompEqmt_AirOutNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanObjType () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_SupplyAirFanObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanObjType ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanObjType (const SimFlowCompEqmt_SupplyAirFanObjType_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanObjType (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_SupplyAirFanName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanName (const SimFlowCompEqmt_SupplyAirFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_SupplyAirFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilObjType () const
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilObjType ()
      {
        return this->SimFlowCompEqmt_CoolingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilObjType (const SimFlowCompEqmt_CoolingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilName () const
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilName ()
      {
        return this->SimFlowCompEqmt_CoolingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_type& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilName (const SimFlowCompEqmt_CoolingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingCoilName (::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > x)
      {
        this->SimFlowCompEqmt_CoolingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingConvergTol () const
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoolingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingConvergTol ()
      {
        return this->SimFlowCompEqmt_CoolingConvergTol_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_type& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoolingConvergTol (const SimFlowCompEqmt_CoolingConvergTol_optional& x)
      {
        this->SimFlowCompEqmt_CoolingConvergTol_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilObjType () const
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilObjType ()
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilName () const
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilName ()
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingConvergTol () const
      {
        return this->SimFlowCompEqmt_HeatingConvergTol_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_HeatingConvergTol_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingConvergTol ()
      {
        return this->SimFlowCompEqmt_HeatingConvergTol_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingConvergTol (const SimFlowCompEqmt_HeatingConvergTol_type& x)
      {
        this->SimFlowCompEqmt_HeatingConvergTol_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_HeatingConvergTol (const SimFlowCompEqmt_HeatingConvergTol_optional& x)
      {
        this->SimFlowCompEqmt_HeatingConvergTol_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailMngrListName () const
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_AvailMngrListName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailMngrListName ()
      {
        return this->SimFlowCompEqmt_AvailMngrListName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_type& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailMngrListName (const SimFlowCompEqmt_AvailMngrListName_optional& x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_AvailMngrListName (::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > x)
      {
        this->SimFlowCompEqmt_AvailMngrListName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_OutdrAirCntlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirCntlType () const
      {
        return this->SimFlowCompEqmt_OutdrAirCntlType_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_OutdrAirCntlType_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirCntlType ()
      {
        return this->SimFlowCompEqmt_OutdrAirCntlType_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirCntlType (const SimFlowCompEqmt_OutdrAirCntlType_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirCntlType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirCntlType (const SimFlowCompEqmt_OutdrAirCntlType_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirCntlType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirCntlType (::std::auto_ptr< SimFlowCompEqmt_OutdrAirCntlType_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirCntlType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MinOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirFlowRate () const
      {
        return this->SimFlowCompEqmt_MinOutdrAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MinOutdrAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirFlowRate ()
      {
        return this->SimFlowCompEqmt_MinOutdrAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirFlowRate (const SimFlowCompEqmt_MinOutdrAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_MinOutdrAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirFlowRate (const SimFlowCompEqmt_MinOutdrAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_MinOutdrAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MinOutdrAirSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirSchedName () const
      {
        return this->SimFlowCompEqmt_MinOutdrAirSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MinOutdrAirSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirSchedName ()
      {
        return this->SimFlowCompEqmt_MinOutdrAirSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirSchedName (const SimFlowCompEqmt_MinOutdrAirSchedName_type& x)
      {
        this->SimFlowCompEqmt_MinOutdrAirSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirSchedName (const SimFlowCompEqmt_MinOutdrAirSchedName_optional& x)
      {
        this->SimFlowCompEqmt_MinOutdrAirSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MinOutdrAirSchedName (::std::auto_ptr< SimFlowCompEqmt_MinOutdrAirSchedName_type > x)
      {
        this->SimFlowCompEqmt_MinOutdrAirSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName () const
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName ()
      {
        return this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName (const SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_type& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName (const SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_optional& x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName (::std::auto_ptr< SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_type > x)
      {
        this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_OutdrAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirNodeName () const
      {
        return this->SimFlowCompEqmt_OutdrAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_OutdrAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirNodeName ()
      {
        return this->SimFlowCompEqmt_OutdrAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirNodeName (const SimFlowCompEqmt_OutdrAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_OutdrAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirNodeName (const SimFlowCompEqmt_OutdrAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_OutdrAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_OutdrAirNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_OutdrAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_ExhAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_ExhAirNodeName () const
      {
        return this->SimFlowCompEqmt_ExhAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_ExhAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_ExhAirNodeName ()
      {
        return this->SimFlowCompEqmt_ExhAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_ExhAirNodeName (const SimFlowCompEqmt_ExhAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_ExhAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_ExhAirNodeName (const SimFlowCompEqmt_ExhAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_ExhAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_ExhAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ExhAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_ExhAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MixedAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MixedAirNodeName () const
      {
        return this->SimFlowCompEqmt_MixedAirNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_MixedAirNodeName_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MixedAirNodeName ()
      {
        return this->SimFlowCompEqmt_MixedAirNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MixedAirNodeName (const SimFlowCompEqmt_MixedAirNodeName_type& x)
      {
        this->SimFlowCompEqmt_MixedAirNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MixedAirNodeName (const SimFlowCompEqmt_MixedAirNodeName_optional& x)
      {
        this->SimFlowCompEqmt_MixedAirNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_MixedAirNodeName (::std::auto_ptr< SimFlowCompEqmt_MixedAirNodeName_type > x)
      {
        this->SimFlowCompEqmt_MixedAirNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoilOption_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoilOption () const
      {
        return this->SimFlowCompEqmt_CoilOption_;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::SimFlowCompEqmt_CoilOption_optional& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoilOption ()
      {
        return this->SimFlowCompEqmt_CoilOption_;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoilOption (const SimFlowCompEqmt_CoilOption_type& x)
      {
        this->SimFlowCompEqmt_CoilOption_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoilOption (const SimFlowCompEqmt_CoilOption_optional& x)
      {
        this->SimFlowCompEqmt_CoilOption_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompEqmt_CoilOption (::std::auto_ptr< SimFlowCompEqmt_CoilOption_type > x)
      {
        this->SimFlowCompEqmt_CoilOption_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor
      //

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_HeatingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_OutdrAirCntlType_ (this),
        SimFlowCompEqmt_MinOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_MinOutdrAirSchedName_ (this),
        SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_ (this),
        SimFlowCompEqmt_OutdrAirNodeName_ (this),
        SimFlowCompEqmt_ExhAirNodeName_ (this),
        SimFlowCompEqmt_MixedAirNodeName_ (this),
        SimFlowCompEqmt_CoilOption_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor (const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor& x,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (x.SimFlowCompEqmt_MaxSupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (x.SimFlowCompEqmt_MaxOutdrAirFlowRate_, f, this),
        SimFlowCompEqmt_AirInNodeName_ (x.SimFlowCompEqmt_AirInNodeName_, f, this),
        SimFlowCompEqmt_AirOutNodeName_ (x.SimFlowCompEqmt_AirOutNodeName_, f, this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (x.SimFlowCompEqmt_SupplyAirFanObjType_, f, this),
        SimFlowCompEqmt_SupplyAirFanName_ (x.SimFlowCompEqmt_SupplyAirFanName_, f, this),
        SimFlowCompEqmt_CoolingCoilObjType_ (x.SimFlowCompEqmt_CoolingCoilObjType_, f, this),
        SimFlowCompEqmt_CoolingCoilName_ (x.SimFlowCompEqmt_CoolingCoilName_, f, this),
        SimFlowCompEqmt_CoolingConvergTol_ (x.SimFlowCompEqmt_CoolingConvergTol_, f, this),
        SimFlowCompEqmt_HeatingCoilObjType_ (x.SimFlowCompEqmt_HeatingCoilObjType_, f, this),
        SimFlowCompEqmt_HeatingCoilName_ (x.SimFlowCompEqmt_HeatingCoilName_, f, this),
        SimFlowCompEqmt_HeatingConvergTol_ (x.SimFlowCompEqmt_HeatingConvergTol_, f, this),
        SimFlowCompEqmt_AvailMngrListName_ (x.SimFlowCompEqmt_AvailMngrListName_, f, this),
        SimFlowCompEqmt_OutdrAirCntlType_ (x.SimFlowCompEqmt_OutdrAirCntlType_, f, this),
        SimFlowCompEqmt_MinOutdrAirFlowRate_ (x.SimFlowCompEqmt_MinOutdrAirFlowRate_, f, this),
        SimFlowCompEqmt_MinOutdrAirSchedName_ (x.SimFlowCompEqmt_MinOutdrAirSchedName_, f, this),
        SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_ (x.SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_, f, this),
        SimFlowCompEqmt_OutdrAirNodeName_ (x.SimFlowCompEqmt_OutdrAirNodeName_, f, this),
        SimFlowCompEqmt_ExhAirNodeName_ (x.SimFlowCompEqmt_ExhAirNodeName_, f, this),
        SimFlowCompEqmt_MixedAirNodeName_ (x.SimFlowCompEqmt_MixedAirNodeName_, f, this),
        SimFlowCompEqmt_CoilOption_ (x.SimFlowCompEqmt_CoilOption_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor (const ::xercesc::DOMElement& e,
                                                          ::xml_schema::flags f,
                                                          ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_MaxSupplyAirFlowRate_ (this),
        SimFlowCompEqmt_MaxOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_AirInNodeName_ (this),
        SimFlowCompEqmt_AirOutNodeName_ (this),
        SimFlowCompEqmt_SupplyAirFanObjType_ (this),
        SimFlowCompEqmt_SupplyAirFanName_ (this),
        SimFlowCompEqmt_CoolingCoilObjType_ (this),
        SimFlowCompEqmt_CoolingCoilName_ (this),
        SimFlowCompEqmt_CoolingConvergTol_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_HeatingConvergTol_ (this),
        SimFlowCompEqmt_AvailMngrListName_ (this),
        SimFlowCompEqmt_OutdrAirCntlType_ (this),
        SimFlowCompEqmt_MinOutdrAirFlowRate_ (this),
        SimFlowCompEqmt_MinOutdrAirSchedName_ (this),
        SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_ (this),
        SimFlowCompEqmt_OutdrAirNodeName_ (this),
        SimFlowCompEqmt_ExhAirNodeName_ (this),
        SimFlowCompEqmt_MixedAirNodeName_ (this),
        SimFlowCompEqmt_CoilOption_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxSupplyAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxSupplyAirFlowRate_.set (SimFlowCompEqmt_MaxSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MaxOutdrAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MaxOutdrAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxOutdrAirFlowRate_)
            {
              this->SimFlowCompEqmt_MaxOutdrAirFlowRate_.set (SimFlowCompEqmt_MaxOutdrAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AirInNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirInNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirInNodeName_type > r (
              SimFlowCompEqmt_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirInNodeName_)
            {
              this->SimFlowCompEqmt_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_AirOutNodeName
          //
          if (n.name () == "SimFlowCompEqmt_AirOutNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AirOutNodeName_type > r (
              SimFlowCompEqmt_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AirOutNodeName_)
            {
              this->SimFlowCompEqmt_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanObjType
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanObjType_type > r (
              SimFlowCompEqmt_SupplyAirFanObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanObjType_)
            {
              this->SimFlowCompEqmt_SupplyAirFanObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanName_type > r (
              SimFlowCompEqmt_SupplyAirFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilObjType_type > r (
              SimFlowCompEqmt_CoolingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilObjType_)
            {
              this->SimFlowCompEqmt_CoolingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_CoolingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoolingCoilName_type > r (
              SimFlowCompEqmt_CoolingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoolingCoilName_)
            {
              this->SimFlowCompEqmt_CoolingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoolingConvergTol
          //
          if (n.name () == "SimFlowCompEqmt_CoolingConvergTol" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_CoolingConvergTol_)
            {
              this->SimFlowCompEqmt_CoolingConvergTol_.set (SimFlowCompEqmt_CoolingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > r (
              SimFlowCompEqmt_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilObjType_)
            {
              this->SimFlowCompEqmt_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > r (
              SimFlowCompEqmt_HeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilName_)
            {
              this->SimFlowCompEqmt_HeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingConvergTol
          //
          if (n.name () == "SimFlowCompEqmt_HeatingConvergTol" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_HeatingConvergTol_)
            {
              this->SimFlowCompEqmt_HeatingConvergTol_.set (SimFlowCompEqmt_HeatingConvergTol_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_AvailMngrListName
          //
          if (n.name () == "SimFlowCompEqmt_AvailMngrListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailMngrListName_type > r (
              SimFlowCompEqmt_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailMngrListName_)
            {
              this->SimFlowCompEqmt_AvailMngrListName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirCntlType
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirCntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirCntlType_type > r (
              SimFlowCompEqmt_OutdrAirCntlType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirCntlType_)
            {
              this->SimFlowCompEqmt_OutdrAirCntlType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MinOutdrAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_MinOutdrAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MinOutdrAirFlowRate_)
            {
              this->SimFlowCompEqmt_MinOutdrAirFlowRate_.set (SimFlowCompEqmt_MinOutdrAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_MinOutdrAirSchedName
          //
          if (n.name () == "SimFlowCompEqmt_MinOutdrAirSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_MinOutdrAirSchedName_type > r (
              SimFlowCompEqmt_MinOutdrAirSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_MinOutdrAirSchedName_)
            {
              this->SimFlowCompEqmt_MinOutdrAirSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName
          //
          if (n.name () == "SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_type > r (
              SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_)
            {
              this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_OutdrAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_OutdrAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_OutdrAirNodeName_type > r (
              SimFlowCompEqmt_OutdrAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_OutdrAirNodeName_)
            {
              this->SimFlowCompEqmt_OutdrAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_ExhAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_ExhAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_ExhAirNodeName_type > r (
              SimFlowCompEqmt_ExhAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_ExhAirNodeName_)
            {
              this->SimFlowCompEqmt_ExhAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MixedAirNodeName
          //
          if (n.name () == "SimFlowCompEqmt_MixedAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_MixedAirNodeName_type > r (
              SimFlowCompEqmt_MixedAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_MixedAirNodeName_)
            {
              this->SimFlowCompEqmt_MixedAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_CoilOption
          //
          if (n.name () == "SimFlowCompEqmt_CoilOption" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CoilOption_type > r (
              SimFlowCompEqmt_CoilOption_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CoilOption_)
            {
              this->SimFlowCompEqmt_CoilOption_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor* SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor& SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_MaxSupplyAirFlowRate_ = x.SimFlowCompEqmt_MaxSupplyAirFlowRate_;
          this->SimFlowCompEqmt_MaxOutdrAirFlowRate_ = x.SimFlowCompEqmt_MaxOutdrAirFlowRate_;
          this->SimFlowCompEqmt_AirInNodeName_ = x.SimFlowCompEqmt_AirInNodeName_;
          this->SimFlowCompEqmt_AirOutNodeName_ = x.SimFlowCompEqmt_AirOutNodeName_;
          this->SimFlowCompEqmt_SupplyAirFanObjType_ = x.SimFlowCompEqmt_SupplyAirFanObjType_;
          this->SimFlowCompEqmt_SupplyAirFanName_ = x.SimFlowCompEqmt_SupplyAirFanName_;
          this->SimFlowCompEqmt_CoolingCoilObjType_ = x.SimFlowCompEqmt_CoolingCoilObjType_;
          this->SimFlowCompEqmt_CoolingCoilName_ = x.SimFlowCompEqmt_CoolingCoilName_;
          this->SimFlowCompEqmt_CoolingConvergTol_ = x.SimFlowCompEqmt_CoolingConvergTol_;
          this->SimFlowCompEqmt_HeatingCoilObjType_ = x.SimFlowCompEqmt_HeatingCoilObjType_;
          this->SimFlowCompEqmt_HeatingCoilName_ = x.SimFlowCompEqmt_HeatingCoilName_;
          this->SimFlowCompEqmt_HeatingConvergTol_ = x.SimFlowCompEqmt_HeatingConvergTol_;
          this->SimFlowCompEqmt_AvailMngrListName_ = x.SimFlowCompEqmt_AvailMngrListName_;
          this->SimFlowCompEqmt_OutdrAirCntlType_ = x.SimFlowCompEqmt_OutdrAirCntlType_;
          this->SimFlowCompEqmt_MinOutdrAirFlowRate_ = x.SimFlowCompEqmt_MinOutdrAirFlowRate_;
          this->SimFlowCompEqmt_MinOutdrAirSchedName_ = x.SimFlowCompEqmt_MinOutdrAirSchedName_;
          this->SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_ = x.SimFlowCompEqmt_MaxOutdrAirFractOrTempSchedName_;
          this->SimFlowCompEqmt_OutdrAirNodeName_ = x.SimFlowCompEqmt_OutdrAirNodeName_;
          this->SimFlowCompEqmt_ExhAirNodeName_ = x.SimFlowCompEqmt_ExhAirNodeName_;
          this->SimFlowCompEqmt_MixedAirNodeName_ = x.SimFlowCompEqmt_MixedAirNodeName_;
          this->SimFlowCompEqmt_CoilOption_ = x.SimFlowCompEqmt_CoilOption_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor::
      ~SimFlowCompoundEqmt_UnitaryZoneEqmt_UnitVentialtor ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

