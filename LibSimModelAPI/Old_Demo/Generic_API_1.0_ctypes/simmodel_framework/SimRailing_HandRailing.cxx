// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRailing_HandRailing.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimRailing_HandRailing
      // 

      const SimRailing_HandRailing::ConstructionType_optional& SimRailing_HandRailing::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimRailing_HandRailing::ConstructionType_optional& SimRailing_HandRailing::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimRailing_HandRailing::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimRailing_HandRailing::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimRailing_HandRailing::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimRailing_HandRailing::RailingLength_optional& SimRailing_HandRailing::
      RailingLength () const
      {
        return this->RailingLength_;
      }

      SimRailing_HandRailing::RailingLength_optional& SimRailing_HandRailing::
      RailingLength ()
      {
        return this->RailingLength_;
      }

      void SimRailing_HandRailing::
      RailingLength (const RailingLength_type& x)
      {
        this->RailingLength_.set (x);
      }

      void SimRailing_HandRailing::
      RailingLength (const RailingLength_optional& x)
      {
        this->RailingLength_ = x;
      }

      const SimRailing_HandRailing::RailingHeight_optional& SimRailing_HandRailing::
      RailingHeight () const
      {
        return this->RailingHeight_;
      }

      SimRailing_HandRailing::RailingHeight_optional& SimRailing_HandRailing::
      RailingHeight ()
      {
        return this->RailingHeight_;
      }

      void SimRailing_HandRailing::
      RailingHeight (const RailingHeight_type& x)
      {
        this->RailingHeight_.set (x);
      }

      void SimRailing_HandRailing::
      RailingHeight (const RailingHeight_optional& x)
      {
        this->RailingHeight_ = x;
      }

      const SimRailing_HandRailing::RailingGrossSideArea_optional& SimRailing_HandRailing::
      RailingGrossSideArea () const
      {
        return this->RailingGrossSideArea_;
      }

      SimRailing_HandRailing::RailingGrossSideArea_optional& SimRailing_HandRailing::
      RailingGrossSideArea ()
      {
        return this->RailingGrossSideArea_;
      }

      void SimRailing_HandRailing::
      RailingGrossSideArea (const RailingGrossSideArea_type& x)
      {
        this->RailingGrossSideArea_.set (x);
      }

      void SimRailing_HandRailing::
      RailingGrossSideArea (const RailingGrossSideArea_optional& x)
      {
        this->RailingGrossSideArea_ = x;
      }

      const SimRailing_HandRailing::ClassRef_UniFormat_optional& SimRailing_HandRailing::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimRailing_HandRailing::ClassRef_UniFormat_optional& SimRailing_HandRailing::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimRailing_HandRailing::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimRailing_HandRailing::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimRailing_HandRailing::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimRailing_HandRailing::MaterialList_optional& SimRailing_HandRailing::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimRailing_HandRailing::MaterialList_optional& SimRailing_HandRailing::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimRailing_HandRailing::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimRailing_HandRailing::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimRailing_HandRailing::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimRailing_HandRailing::VoidsInRailing_optional& SimRailing_HandRailing::
      VoidsInRailing () const
      {
        return this->VoidsInRailing_;
      }

      SimRailing_HandRailing::VoidsInRailing_optional& SimRailing_HandRailing::
      VoidsInRailing ()
      {
        return this->VoidsInRailing_;
      }

      void SimRailing_HandRailing::
      VoidsInRailing (const VoidsInRailing_type& x)
      {
        this->VoidsInRailing_.set (x);
      }

      void SimRailing_HandRailing::
      VoidsInRailing (const VoidsInRailing_optional& x)
      {
        this->VoidsInRailing_ = x;
      }

      void SimRailing_HandRailing::
      VoidsInRailing (::std::auto_ptr< VoidsInRailing_type > x)
      {
        this->VoidsInRailing_.set (x);
      }

      const SimRailing_HandRailing::ContainingRamp_optional& SimRailing_HandRailing::
      ContainingRamp () const
      {
        return this->ContainingRamp_;
      }

      SimRailing_HandRailing::ContainingRamp_optional& SimRailing_HandRailing::
      ContainingRamp ()
      {
        return this->ContainingRamp_;
      }

      void SimRailing_HandRailing::
      ContainingRamp (const ContainingRamp_type& x)
      {
        this->ContainingRamp_.set (x);
      }

      void SimRailing_HandRailing::
      ContainingRamp (const ContainingRamp_optional& x)
      {
        this->ContainingRamp_ = x;
      }

      void SimRailing_HandRailing::
      ContainingRamp (::std::auto_ptr< ContainingRamp_type > x)
      {
        this->ContainingRamp_.set (x);
      }

      const SimRailing_HandRailing::ContainingStair_optional& SimRailing_HandRailing::
      ContainingStair () const
      {
        return this->ContainingStair_;
      }

      SimRailing_HandRailing::ContainingStair_optional& SimRailing_HandRailing::
      ContainingStair ()
      {
        return this->ContainingStair_;
      }

      void SimRailing_HandRailing::
      ContainingStair (const ContainingStair_type& x)
      {
        this->ContainingStair_.set (x);
      }

      void SimRailing_HandRailing::
      ContainingStair (const ContainingStair_optional& x)
      {
        this->ContainingStair_ = x;
      }

      void SimRailing_HandRailing::
      ContainingStair (::std::auto_ptr< ContainingStair_type > x)
      {
        this->ContainingStair_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimRailing_HandRailing
      //

      SimRailing_HandRailing::
      SimRailing_HandRailing (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimRailing (RefId),
        ConstructionType_ (this),
        RailingLength_ (this),
        RailingHeight_ (this),
        RailingGrossSideArea_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInRailing_ (this),
        ContainingRamp_ (this),
        ContainingStair_ (this)
      {
      }

      SimRailing_HandRailing::
      SimRailing_HandRailing (const SimRailing_HandRailing& x,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimRailing (x, f, c),
        ConstructionType_ (x.ConstructionType_, f, this),
        RailingLength_ (x.RailingLength_, f, this),
        RailingHeight_ (x.RailingHeight_, f, this),
        RailingGrossSideArea_ (x.RailingGrossSideArea_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        VoidsInRailing_ (x.VoidsInRailing_, f, this),
        ContainingRamp_ (x.ContainingRamp_, f, this),
        ContainingStair_ (x.ContainingStair_, f, this)
      {
      }

      SimRailing_HandRailing::
      SimRailing_HandRailing (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f,
                              ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimRailing (e, f | ::xml_schema::flags::base, c),
        ConstructionType_ (this),
        RailingLength_ (this),
        RailingHeight_ (this),
        RailingGrossSideArea_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInRailing_ (this),
        ContainingRamp_ (this),
        ContainingStair_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRailing_HandRailing::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimRailing::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // RailingLength
          //
          if (n.name () == "RailingLength" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->RailingLength_)
            {
              this->RailingLength_.set (RailingLength_traits::create (i, f, this));
              continue;
            }
          }

          // RailingHeight
          //
          if (n.name () == "RailingHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->RailingHeight_)
            {
              this->RailingHeight_.set (RailingHeight_traits::create (i, f, this));
              continue;
            }
          }

          // RailingGrossSideArea
          //
          if (n.name () == "RailingGrossSideArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->RailingGrossSideArea_)
            {
              this->RailingGrossSideArea_.set (RailingGrossSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // VoidsInRailing
          //
          if (n.name () == "VoidsInRailing" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VoidsInRailing_type > r (
              VoidsInRailing_traits::create (i, f, this));

            if (!this->VoidsInRailing_)
            {
              this->VoidsInRailing_.set (r);
              continue;
            }
          }

          // ContainingRamp
          //
          if (n.name () == "ContainingRamp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ContainingRamp_type > r (
              ContainingRamp_traits::create (i, f, this));

            if (!this->ContainingRamp_)
            {
              this->ContainingRamp_.set (r);
              continue;
            }
          }

          // ContainingStair
          //
          if (n.name () == "ContainingStair" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ContainingStair_type > r (
              ContainingStair_traits::create (i, f, this));

            if (!this->ContainingStair_)
            {
              this->ContainingStair_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimRailing_HandRailing* SimRailing_HandRailing::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRailing_HandRailing (*this, f, c);
      }

      SimRailing_HandRailing& SimRailing_HandRailing::
      operator= (const SimRailing_HandRailing& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimRailing& > (*this) = x;
          this->ConstructionType_ = x.ConstructionType_;
          this->RailingLength_ = x.RailingLength_;
          this->RailingHeight_ = x.RailingHeight_;
          this->RailingGrossSideArea_ = x.RailingGrossSideArea_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->VoidsInRailing_ = x.VoidsInRailing_;
          this->ContainingRamp_ = x.ContainingRamp_;
          this->ContainingStair_ = x.ContainingStair_;
        }

        return *this;
      }

      SimRailing_HandRailing::
      ~SimRailing_HandRailing ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

