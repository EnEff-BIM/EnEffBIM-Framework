// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateSimulationParameters.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateSimulationParameters
      // 

      const SimTemplateSimulationParameters::TemplateGeneralSimParams_optional& SimTemplateSimulationParameters::
      TemplateGeneralSimParams () const
      {
        return this->TemplateGeneralSimParams_;
      }

      SimTemplateSimulationParameters::TemplateGeneralSimParams_optional& SimTemplateSimulationParameters::
      TemplateGeneralSimParams ()
      {
        return this->TemplateGeneralSimParams_;
      }

      void SimTemplateSimulationParameters::
      TemplateGeneralSimParams (const TemplateGeneralSimParams_type& x)
      {
        this->TemplateGeneralSimParams_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateGeneralSimParams (const TemplateGeneralSimParams_optional& x)
      {
        this->TemplateGeneralSimParams_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateGeneralSimParams (::std::auto_ptr< TemplateGeneralSimParams_type > x)
      {
        this->TemplateGeneralSimParams_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateRunPeriod_optional& SimTemplateSimulationParameters::
      TemplateRunPeriod () const
      {
        return this->TemplateRunPeriod_;
      }

      SimTemplateSimulationParameters::TemplateRunPeriod_optional& SimTemplateSimulationParameters::
      TemplateRunPeriod ()
      {
        return this->TemplateRunPeriod_;
      }

      void SimTemplateSimulationParameters::
      TemplateRunPeriod (const TemplateRunPeriod_type& x)
      {
        this->TemplateRunPeriod_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateRunPeriod (const TemplateRunPeriod_optional& x)
      {
        this->TemplateRunPeriod_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateRunPeriod (::std::auto_ptr< TemplateRunPeriod_type > x)
      {
        this->TemplateRunPeriod_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateSpecialDays_optional& SimTemplateSimulationParameters::
      TemplateSpecialDays () const
      {
        return this->TemplateSpecialDays_;
      }

      SimTemplateSimulationParameters::TemplateSpecialDays_optional& SimTemplateSimulationParameters::
      TemplateSpecialDays ()
      {
        return this->TemplateSpecialDays_;
      }

      void SimTemplateSimulationParameters::
      TemplateSpecialDays (const TemplateSpecialDays_type& x)
      {
        this->TemplateSpecialDays_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateSpecialDays (const TemplateSpecialDays_optional& x)
      {
        this->TemplateSpecialDays_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateSpecialDays (::std::auto_ptr< TemplateSpecialDays_type > x)
      {
        this->TemplateSpecialDays_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateDaylightSavings_optional& SimTemplateSimulationParameters::
      TemplateDaylightSavings () const
      {
        return this->TemplateDaylightSavings_;
      }

      SimTemplateSimulationParameters::TemplateDaylightSavings_optional& SimTemplateSimulationParameters::
      TemplateDaylightSavings ()
      {
        return this->TemplateDaylightSavings_;
      }

      void SimTemplateSimulationParameters::
      TemplateDaylightSavings (const TemplateDaylightSavings_type& x)
      {
        this->TemplateDaylightSavings_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateDaylightSavings (const TemplateDaylightSavings_optional& x)
      {
        this->TemplateDaylightSavings_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateDaylightSavings (::std::auto_ptr< TemplateDaylightSavings_type > x)
      {
        this->TemplateDaylightSavings_.set (x);
      }

      const SimTemplateSimulationParameters::SurfaceConvectionAlgorithmInside_optional& SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmInside () const
      {
        return this->SurfaceConvectionAlgorithmInside_;
      }

      SimTemplateSimulationParameters::SurfaceConvectionAlgorithmInside_optional& SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmInside ()
      {
        return this->SurfaceConvectionAlgorithmInside_;
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmInside (const SurfaceConvectionAlgorithmInside_type& x)
      {
        this->SurfaceConvectionAlgorithmInside_.set (x);
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmInside (const SurfaceConvectionAlgorithmInside_optional& x)
      {
        this->SurfaceConvectionAlgorithmInside_ = x;
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmInside (::std::auto_ptr< SurfaceConvectionAlgorithmInside_type > x)
      {
        this->SurfaceConvectionAlgorithmInside_.set (x);
      }

      const SimTemplateSimulationParameters::SurfaceConvectionAlgorithmOutside_optional& SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmOutside () const
      {
        return this->SurfaceConvectionAlgorithmOutside_;
      }

      SimTemplateSimulationParameters::SurfaceConvectionAlgorithmOutside_optional& SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmOutside ()
      {
        return this->SurfaceConvectionAlgorithmOutside_;
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmOutside (const SurfaceConvectionAlgorithmOutside_type& x)
      {
        this->SurfaceConvectionAlgorithmOutside_.set (x);
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmOutside (const SurfaceConvectionAlgorithmOutside_optional& x)
      {
        this->SurfaceConvectionAlgorithmOutside_ = x;
      }

      void SimTemplateSimulationParameters::
      SurfaceConvectionAlgorithmOutside (::std::auto_ptr< SurfaceConvectionAlgorithmOutside_type > x)
      {
        this->SurfaceConvectionAlgorithmOutside_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateHeatBalanceAlgorithm_optional& SimTemplateSimulationParameters::
      TemplateHeatBalanceAlgorithm () const
      {
        return this->TemplateHeatBalanceAlgorithm_;
      }

      SimTemplateSimulationParameters::TemplateHeatBalanceAlgorithm_optional& SimTemplateSimulationParameters::
      TemplateHeatBalanceAlgorithm ()
      {
        return this->TemplateHeatBalanceAlgorithm_;
      }

      void SimTemplateSimulationParameters::
      TemplateHeatBalanceAlgorithm (const TemplateHeatBalanceAlgorithm_type& x)
      {
        this->TemplateHeatBalanceAlgorithm_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateHeatBalanceAlgorithm (const TemplateHeatBalanceAlgorithm_optional& x)
      {
        this->TemplateHeatBalanceAlgorithm_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateHeatBalanceAlgorithm (::std::auto_ptr< TemplateHeatBalanceAlgorithm_type > x)
      {
        this->TemplateHeatBalanceAlgorithm_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateZoneAirHeatBalAlgorithm_optional& SimTemplateSimulationParameters::
      TemplateZoneAirHeatBalAlgorithm () const
      {
        return this->TemplateZoneAirHeatBalAlgorithm_;
      }

      SimTemplateSimulationParameters::TemplateZoneAirHeatBalAlgorithm_optional& SimTemplateSimulationParameters::
      TemplateZoneAirHeatBalAlgorithm ()
      {
        return this->TemplateZoneAirHeatBalAlgorithm_;
      }

      void SimTemplateSimulationParameters::
      TemplateZoneAirHeatBalAlgorithm (const TemplateZoneAirHeatBalAlgorithm_type& x)
      {
        this->TemplateZoneAirHeatBalAlgorithm_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateZoneAirHeatBalAlgorithm (const TemplateZoneAirHeatBalAlgorithm_optional& x)
      {
        this->TemplateZoneAirHeatBalAlgorithm_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateZoneAirHeatBalAlgorithm (::std::auto_ptr< TemplateZoneAirHeatBalAlgorithm_type > x)
      {
        this->TemplateZoneAirHeatBalAlgorithm_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateGroundHeatTransfer_optional& SimTemplateSimulationParameters::
      TemplateGroundHeatTransfer () const
      {
        return this->TemplateGroundHeatTransfer_;
      }

      SimTemplateSimulationParameters::TemplateGroundHeatTransfer_optional& SimTemplateSimulationParameters::
      TemplateGroundHeatTransfer ()
      {
        return this->TemplateGroundHeatTransfer_;
      }

      void SimTemplateSimulationParameters::
      TemplateGroundHeatTransfer (const TemplateGroundHeatTransfer_type& x)
      {
        this->TemplateGroundHeatTransfer_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateGroundHeatTransfer (const TemplateGroundHeatTransfer_optional& x)
      {
        this->TemplateGroundHeatTransfer_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateGroundHeatTransfer (::std::auto_ptr< TemplateGroundHeatTransfer_type > x)
      {
        this->TemplateGroundHeatTransfer_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateSurfaceTypeConvCoeff_optional& SimTemplateSimulationParameters::
      TemplateSurfaceTypeConvCoeff () const
      {
        return this->TemplateSurfaceTypeConvCoeff_;
      }

      SimTemplateSimulationParameters::TemplateSurfaceTypeConvCoeff_optional& SimTemplateSimulationParameters::
      TemplateSurfaceTypeConvCoeff ()
      {
        return this->TemplateSurfaceTypeConvCoeff_;
      }

      void SimTemplateSimulationParameters::
      TemplateSurfaceTypeConvCoeff (const TemplateSurfaceTypeConvCoeff_type& x)
      {
        this->TemplateSurfaceTypeConvCoeff_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateSurfaceTypeConvCoeff (const TemplateSurfaceTypeConvCoeff_optional& x)
      {
        this->TemplateSurfaceTypeConvCoeff_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateSurfaceTypeConvCoeff (::std::auto_ptr< TemplateSurfaceTypeConvCoeff_type > x)
      {
        this->TemplateSurfaceTypeConvCoeff_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateParametricSetValue_optional& SimTemplateSimulationParameters::
      TemplateParametricSetValue () const
      {
        return this->TemplateParametricSetValue_;
      }

      SimTemplateSimulationParameters::TemplateParametricSetValue_optional& SimTemplateSimulationParameters::
      TemplateParametricSetValue ()
      {
        return this->TemplateParametricSetValue_;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricSetValue (const TemplateParametricSetValue_type& x)
      {
        this->TemplateParametricSetValue_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateParametricSetValue (const TemplateParametricSetValue_optional& x)
      {
        this->TemplateParametricSetValue_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricSetValue (::std::auto_ptr< TemplateParametricSetValue_type > x)
      {
        this->TemplateParametricSetValue_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateParametricLogic_optional& SimTemplateSimulationParameters::
      TemplateParametricLogic () const
      {
        return this->TemplateParametricLogic_;
      }

      SimTemplateSimulationParameters::TemplateParametricLogic_optional& SimTemplateSimulationParameters::
      TemplateParametricLogic ()
      {
        return this->TemplateParametricLogic_;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricLogic (const TemplateParametricLogic_type& x)
      {
        this->TemplateParametricLogic_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateParametricLogic (const TemplateParametricLogic_optional& x)
      {
        this->TemplateParametricLogic_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricLogic (::std::auto_ptr< TemplateParametricLogic_type > x)
      {
        this->TemplateParametricLogic_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateParametricPerformRun_optional& SimTemplateSimulationParameters::
      TemplateParametricPerformRun () const
      {
        return this->TemplateParametricPerformRun_;
      }

      SimTemplateSimulationParameters::TemplateParametricPerformRun_optional& SimTemplateSimulationParameters::
      TemplateParametricPerformRun ()
      {
        return this->TemplateParametricPerformRun_;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricPerformRun (const TemplateParametricPerformRun_type& x)
      {
        this->TemplateParametricPerformRun_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateParametricPerformRun (const TemplateParametricPerformRun_optional& x)
      {
        this->TemplateParametricPerformRun_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricPerformRun (::std::auto_ptr< TemplateParametricPerformRun_type > x)
      {
        this->TemplateParametricPerformRun_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateParametricFileNameSuffix_optional& SimTemplateSimulationParameters::
      TemplateParametricFileNameSuffix () const
      {
        return this->TemplateParametricFileNameSuffix_;
      }

      SimTemplateSimulationParameters::TemplateParametricFileNameSuffix_optional& SimTemplateSimulationParameters::
      TemplateParametricFileNameSuffix ()
      {
        return this->TemplateParametricFileNameSuffix_;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricFileNameSuffix (const TemplateParametricFileNameSuffix_type& x)
      {
        this->TemplateParametricFileNameSuffix_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateParametricFileNameSuffix (const TemplateParametricFileNameSuffix_optional& x)
      {
        this->TemplateParametricFileNameSuffix_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateParametricFileNameSuffix (::std::auto_ptr< TemplateParametricFileNameSuffix_type > x)
      {
        this->TemplateParametricFileNameSuffix_.set (x);
      }

      const SimTemplateSimulationParameters::TemplateGlobalSizingParams_optional& SimTemplateSimulationParameters::
      TemplateGlobalSizingParams () const
      {
        return this->TemplateGlobalSizingParams_;
      }

      SimTemplateSimulationParameters::TemplateGlobalSizingParams_optional& SimTemplateSimulationParameters::
      TemplateGlobalSizingParams ()
      {
        return this->TemplateGlobalSizingParams_;
      }

      void SimTemplateSimulationParameters::
      TemplateGlobalSizingParams (const TemplateGlobalSizingParams_type& x)
      {
        this->TemplateGlobalSizingParams_.set (x);
      }

      void SimTemplateSimulationParameters::
      TemplateGlobalSizingParams (const TemplateGlobalSizingParams_optional& x)
      {
        this->TemplateGlobalSizingParams_ = x;
      }

      void SimTemplateSimulationParameters::
      TemplateGlobalSizingParams (::std::auto_ptr< TemplateGlobalSizingParams_type > x)
      {
        this->TemplateGlobalSizingParams_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateSimulationParameters
      //

      SimTemplateSimulationParameters::
      SimTemplateSimulationParameters (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (RefId),
        TemplateGeneralSimParams_ (this),
        TemplateRunPeriod_ (this),
        TemplateSpecialDays_ (this),
        TemplateDaylightSavings_ (this),
        SurfaceConvectionAlgorithmInside_ (this),
        SurfaceConvectionAlgorithmOutside_ (this),
        TemplateHeatBalanceAlgorithm_ (this),
        TemplateZoneAirHeatBalAlgorithm_ (this),
        TemplateGroundHeatTransfer_ (this),
        TemplateSurfaceTypeConvCoeff_ (this),
        TemplateParametricSetValue_ (this),
        TemplateParametricLogic_ (this),
        TemplateParametricPerformRun_ (this),
        TemplateParametricFileNameSuffix_ (this),
        TemplateGlobalSizingParams_ (this)
      {
      }

      SimTemplateSimulationParameters::
      SimTemplateSimulationParameters (const SimTemplateSimulationParameters& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (x, f, c),
        TemplateGeneralSimParams_ (x.TemplateGeneralSimParams_, f, this),
        TemplateRunPeriod_ (x.TemplateRunPeriod_, f, this),
        TemplateSpecialDays_ (x.TemplateSpecialDays_, f, this),
        TemplateDaylightSavings_ (x.TemplateDaylightSavings_, f, this),
        SurfaceConvectionAlgorithmInside_ (x.SurfaceConvectionAlgorithmInside_, f, this),
        SurfaceConvectionAlgorithmOutside_ (x.SurfaceConvectionAlgorithmOutside_, f, this),
        TemplateHeatBalanceAlgorithm_ (x.TemplateHeatBalanceAlgorithm_, f, this),
        TemplateZoneAirHeatBalAlgorithm_ (x.TemplateZoneAirHeatBalAlgorithm_, f, this),
        TemplateGroundHeatTransfer_ (x.TemplateGroundHeatTransfer_, f, this),
        TemplateSurfaceTypeConvCoeff_ (x.TemplateSurfaceTypeConvCoeff_, f, this),
        TemplateParametricSetValue_ (x.TemplateParametricSetValue_, f, this),
        TemplateParametricLogic_ (x.TemplateParametricLogic_, f, this),
        TemplateParametricPerformRun_ (x.TemplateParametricPerformRun_, f, this),
        TemplateParametricFileNameSuffix_ (x.TemplateParametricFileNameSuffix_, f, this),
        TemplateGlobalSizingParams_ (x.TemplateGlobalSizingParams_, f, this)
      {
      }

      SimTemplateSimulationParameters::
      SimTemplateSimulationParameters (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateGeneralSimParams_ (this),
        TemplateRunPeriod_ (this),
        TemplateSpecialDays_ (this),
        TemplateDaylightSavings_ (this),
        SurfaceConvectionAlgorithmInside_ (this),
        SurfaceConvectionAlgorithmOutside_ (this),
        TemplateHeatBalanceAlgorithm_ (this),
        TemplateZoneAirHeatBalAlgorithm_ (this),
        TemplateGroundHeatTransfer_ (this),
        TemplateSurfaceTypeConvCoeff_ (this),
        TemplateParametricSetValue_ (this),
        TemplateParametricLogic_ (this),
        TemplateParametricPerformRun_ (this),
        TemplateParametricFileNameSuffix_ (this),
        TemplateGlobalSizingParams_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateSimulationParameters::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateGeneralSimParams
          //
          if (n.name () == "TemplateGeneralSimParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateGeneralSimParams_type > r (
              TemplateGeneralSimParams_traits::create (i, f, this));

            if (!this->TemplateGeneralSimParams_)
            {
              this->TemplateGeneralSimParams_.set (r);
              continue;
            }
          }

          // TemplateRunPeriod
          //
          if (n.name () == "TemplateRunPeriod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateRunPeriod_type > r (
              TemplateRunPeriod_traits::create (i, f, this));

            if (!this->TemplateRunPeriod_)
            {
              this->TemplateRunPeriod_.set (r);
              continue;
            }
          }

          // TemplateSpecialDays
          //
          if (n.name () == "TemplateSpecialDays" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSpecialDays_type > r (
              TemplateSpecialDays_traits::create (i, f, this));

            if (!this->TemplateSpecialDays_)
            {
              this->TemplateSpecialDays_.set (r);
              continue;
            }
          }

          // TemplateDaylightSavings
          //
          if (n.name () == "TemplateDaylightSavings" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateDaylightSavings_type > r (
              TemplateDaylightSavings_traits::create (i, f, this));

            if (!this->TemplateDaylightSavings_)
            {
              this->TemplateDaylightSavings_.set (r);
              continue;
            }
          }

          // SurfaceConvectionAlgorithmInside
          //
          if (n.name () == "SurfaceConvectionAlgorithmInside" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SurfaceConvectionAlgorithmInside_type > r (
              SurfaceConvectionAlgorithmInside_traits::create (i, f, this));

            if (!this->SurfaceConvectionAlgorithmInside_)
            {
              this->SurfaceConvectionAlgorithmInside_.set (r);
              continue;
            }
          }

          // SurfaceConvectionAlgorithmOutside
          //
          if (n.name () == "SurfaceConvectionAlgorithmOutside" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SurfaceConvectionAlgorithmOutside_type > r (
              SurfaceConvectionAlgorithmOutside_traits::create (i, f, this));

            if (!this->SurfaceConvectionAlgorithmOutside_)
            {
              this->SurfaceConvectionAlgorithmOutside_.set (r);
              continue;
            }
          }

          // TemplateHeatBalanceAlgorithm
          //
          if (n.name () == "TemplateHeatBalanceAlgorithm" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateHeatBalanceAlgorithm_type > r (
              TemplateHeatBalanceAlgorithm_traits::create (i, f, this));

            if (!this->TemplateHeatBalanceAlgorithm_)
            {
              this->TemplateHeatBalanceAlgorithm_.set (r);
              continue;
            }
          }

          // TemplateZoneAirHeatBalAlgorithm
          //
          if (n.name () == "TemplateZoneAirHeatBalAlgorithm" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateZoneAirHeatBalAlgorithm_type > r (
              TemplateZoneAirHeatBalAlgorithm_traits::create (i, f, this));

            if (!this->TemplateZoneAirHeatBalAlgorithm_)
            {
              this->TemplateZoneAirHeatBalAlgorithm_.set (r);
              continue;
            }
          }

          // TemplateGroundHeatTransfer
          //
          if (n.name () == "TemplateGroundHeatTransfer" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateGroundHeatTransfer_type > r (
              TemplateGroundHeatTransfer_traits::create (i, f, this));

            if (!this->TemplateGroundHeatTransfer_)
            {
              this->TemplateGroundHeatTransfer_.set (r);
              continue;
            }
          }

          // TemplateSurfaceTypeConvCoeff
          //
          if (n.name () == "TemplateSurfaceTypeConvCoeff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSurfaceTypeConvCoeff_type > r (
              TemplateSurfaceTypeConvCoeff_traits::create (i, f, this));

            if (!this->TemplateSurfaceTypeConvCoeff_)
            {
              this->TemplateSurfaceTypeConvCoeff_.set (r);
              continue;
            }
          }

          // TemplateParametricSetValue
          //
          if (n.name () == "TemplateParametricSetValue" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateParametricSetValue_type > r (
              TemplateParametricSetValue_traits::create (i, f, this));

            if (!this->TemplateParametricSetValue_)
            {
              this->TemplateParametricSetValue_.set (r);
              continue;
            }
          }

          // TemplateParametricLogic
          //
          if (n.name () == "TemplateParametricLogic" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateParametricLogic_type > r (
              TemplateParametricLogic_traits::create (i, f, this));

            if (!this->TemplateParametricLogic_)
            {
              this->TemplateParametricLogic_.set (r);
              continue;
            }
          }

          // TemplateParametricPerformRun
          //
          if (n.name () == "TemplateParametricPerformRun" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateParametricPerformRun_type > r (
              TemplateParametricPerformRun_traits::create (i, f, this));

            if (!this->TemplateParametricPerformRun_)
            {
              this->TemplateParametricPerformRun_.set (r);
              continue;
            }
          }

          // TemplateParametricFileNameSuffix
          //
          if (n.name () == "TemplateParametricFileNameSuffix" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateParametricFileNameSuffix_type > r (
              TemplateParametricFileNameSuffix_traits::create (i, f, this));

            if (!this->TemplateParametricFileNameSuffix_)
            {
              this->TemplateParametricFileNameSuffix_.set (r);
              continue;
            }
          }

          // TemplateGlobalSizingParams
          //
          if (n.name () == "TemplateGlobalSizingParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateGlobalSizingParams_type > r (
              TemplateGlobalSizingParams_traits::create (i, f, this));

            if (!this->TemplateGlobalSizingParams_)
            {
              this->TemplateGlobalSizingParams_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateSimulationParameters* SimTemplateSimulationParameters::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateSimulationParameters (*this, f, c);
      }

      SimTemplateSimulationParameters& SimTemplateSimulationParameters::
      operator= (const SimTemplateSimulationParameters& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimTemplate& > (*this) = x;
          this->TemplateGeneralSimParams_ = x.TemplateGeneralSimParams_;
          this->TemplateRunPeriod_ = x.TemplateRunPeriod_;
          this->TemplateSpecialDays_ = x.TemplateSpecialDays_;
          this->TemplateDaylightSavings_ = x.TemplateDaylightSavings_;
          this->SurfaceConvectionAlgorithmInside_ = x.SurfaceConvectionAlgorithmInside_;
          this->SurfaceConvectionAlgorithmOutside_ = x.SurfaceConvectionAlgorithmOutside_;
          this->TemplateHeatBalanceAlgorithm_ = x.TemplateHeatBalanceAlgorithm_;
          this->TemplateZoneAirHeatBalAlgorithm_ = x.TemplateZoneAirHeatBalAlgorithm_;
          this->TemplateGroundHeatTransfer_ = x.TemplateGroundHeatTransfer_;
          this->TemplateSurfaceTypeConvCoeff_ = x.TemplateSurfaceTypeConvCoeff_;
          this->TemplateParametricSetValue_ = x.TemplateParametricSetValue_;
          this->TemplateParametricLogic_ = x.TemplateParametricLogic_;
          this->TemplateParametricPerformRun_ = x.TemplateParametricPerformRun_;
          this->TemplateParametricFileNameSuffix_ = x.TemplateParametricFileNameSuffix_;
          this->TemplateGlobalSizingParams_ = x.TemplateGlobalSizingParams_;
        }

        return *this;
      }

      SimTemplateSimulationParameters::
      ~SimTemplateSimulationParameters ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

