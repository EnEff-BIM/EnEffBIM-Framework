// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_COMBUSTION_TURBINE_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_COMBUSTION_TURBINE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_CombustionTurbine;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_CombustionTurbine: public ::namespaces::Sim::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_FuelType
        //
        typedef ::xml_schema::string SimFlowPlant_FuelType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelType_type > SimFlowPlant_FuelType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelType_type, char > SimFlowPlant_FuelType_traits;

        const SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType () const;

        SimFlowPlant_FuelType_optional&
        SimFlowPlant_FuelType ();

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_type& x);

        void
        SimFlowPlant_FuelType (const SimFlowPlant_FuelType_optional& x);

        void
        SimFlowPlant_FuelType (::std::auto_ptr< SimFlowPlant_FuelType_type > p);

        // SimFlowPlant_MinPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MinPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MinPartLoadRatio_type > SimFlowPlant_MinPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MinPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MinPartLoadRatio_traits;

        const SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio () const;

        SimFlowPlant_MinPartLoadRatio_optional&
        SimFlowPlant_MinPartLoadRatio ();

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x);

        void
        SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x);

        // SimFlowPlant_MaxPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxPartLoadRatio_type > SimFlowPlant_MaxPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxPartLoadRatio_traits;

        const SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio () const;

        SimFlowPlant_MaxPartLoadRatio_optional&
        SimFlowPlant_MaxPartLoadRatio ();

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x);

        void
        SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x);

        // SimFlowPlant_OptimumPartLoadRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_OptimumPartLoadRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_OptimumPartLoadRatio_type > SimFlowPlant_OptimumPartLoadRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_OptimumPartLoadRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_OptimumPartLoadRatio_traits;

        const SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio () const;

        SimFlowPlant_OptimumPartLoadRatio_optional&
        SimFlowPlant_OptimumPartLoadRatio ();

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x);

        void
        SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x);

        // SimFlowPlant_DesignHeatRecovWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignHeatRecovWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignHeatRecovWaterFlowRate_type > SimFlowPlant_DesignHeatRecovWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignHeatRecovWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignHeatRecovWaterFlowRate_traits;

        const SimFlowPlant_DesignHeatRecovWaterFlowRate_optional&
        SimFlowPlant_DesignHeatRecovWaterFlowRate () const;

        SimFlowPlant_DesignHeatRecovWaterFlowRate_optional&
        SimFlowPlant_DesignHeatRecovWaterFlowRate ();

        void
        SimFlowPlant_DesignHeatRecovWaterFlowRate (const SimFlowPlant_DesignHeatRecovWaterFlowRate_type& x);

        void
        SimFlowPlant_DesignHeatRecovWaterFlowRate (const SimFlowPlant_DesignHeatRecovWaterFlowRate_optional& x);

        // SimFlowPlant_HeatRecovInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovInletNodeName_type > SimFlowPlant_HeatRecovInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovInletNodeName_type, char > SimFlowPlant_HeatRecovInletNodeName_traits;

        const SimFlowPlant_HeatRecovInletNodeName_optional&
        SimFlowPlant_HeatRecovInletNodeName () const;

        SimFlowPlant_HeatRecovInletNodeName_optional&
        SimFlowPlant_HeatRecovInletNodeName ();

        void
        SimFlowPlant_HeatRecovInletNodeName (const SimFlowPlant_HeatRecovInletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovInletNodeName (const SimFlowPlant_HeatRecovInletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovInletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovInletNodeName_type > p);

        // SimFlowPlant_HeatRecovOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovOutletNodeName_type > SimFlowPlant_HeatRecovOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovOutletNodeName_type, char > SimFlowPlant_HeatRecovOutletNodeName_traits;

        const SimFlowPlant_HeatRecovOutletNodeName_optional&
        SimFlowPlant_HeatRecovOutletNodeName () const;

        SimFlowPlant_HeatRecovOutletNodeName_optional&
        SimFlowPlant_HeatRecovOutletNodeName ();

        void
        SimFlowPlant_HeatRecovOutletNodeName (const SimFlowPlant_HeatRecovOutletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovOutletNodeName (const SimFlowPlant_HeatRecovOutletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovOutletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovOutletNodeName_type > p);

        // SimFlowPlant_MaxExhFlowPerUnitPwrOutput
        //
        typedef ::xml_schema::double_ SimFlowPlant_MaxExhFlowPerUnitPwrOutput_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_MaxExhFlowPerUnitPwrOutput_type > SimFlowPlant_MaxExhFlowPerUnitPwrOutput_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_MaxExhFlowPerUnitPwrOutput_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_MaxExhFlowPerUnitPwrOutput_traits;

        const SimFlowPlant_MaxExhFlowPerUnitPwrOutput_optional&
        SimFlowPlant_MaxExhFlowPerUnitPwrOutput () const;

        SimFlowPlant_MaxExhFlowPerUnitPwrOutput_optional&
        SimFlowPlant_MaxExhFlowPerUnitPwrOutput ();

        void
        SimFlowPlant_MaxExhFlowPerUnitPwrOutput (const SimFlowPlant_MaxExhFlowPerUnitPwrOutput_type& x);

        void
        SimFlowPlant_MaxExhFlowPerUnitPwrOutput (const SimFlowPlant_MaxExhFlowPerUnitPwrOutput_optional& x);

        // SimFlowPlant_DesignMinExhTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignMinExhTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignMinExhTemp_type > SimFlowPlant_DesignMinExhTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignMinExhTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignMinExhTemp_traits;

        const SimFlowPlant_DesignMinExhTemp_optional&
        SimFlowPlant_DesignMinExhTemp () const;

        SimFlowPlant_DesignMinExhTemp_optional&
        SimFlowPlant_DesignMinExhTemp ();

        void
        SimFlowPlant_DesignMinExhTemp (const SimFlowPlant_DesignMinExhTemp_type& x);

        void
        SimFlowPlant_DesignMinExhTemp (const SimFlowPlant_DesignMinExhTemp_optional& x);

        // SimFlowPlant_FuelHigherHeatingVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_FuelHigherHeatingVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FuelHigherHeatingVal_type > SimFlowPlant_FuelHigherHeatingVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FuelHigherHeatingVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FuelHigherHeatingVal_traits;

        const SimFlowPlant_FuelHigherHeatingVal_optional&
        SimFlowPlant_FuelHigherHeatingVal () const;

        SimFlowPlant_FuelHigherHeatingVal_optional&
        SimFlowPlant_FuelHigherHeatingVal ();

        void
        SimFlowPlant_FuelHigherHeatingVal (const SimFlowPlant_FuelHigherHeatingVal_type& x);

        void
        SimFlowPlant_FuelHigherHeatingVal (const SimFlowPlant_FuelHigherHeatingVal_optional& x);

        // SimFlowPlant_HeatRecovMaxTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_HeatRecovMaxTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovMaxTemp_type > SimFlowPlant_HeatRecovMaxTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovMaxTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_HeatRecovMaxTemp_traits;

        const SimFlowPlant_HeatRecovMaxTemp_optional&
        SimFlowPlant_HeatRecovMaxTemp () const;

        SimFlowPlant_HeatRecovMaxTemp_optional&
        SimFlowPlant_HeatRecovMaxTemp ();

        void
        SimFlowPlant_HeatRecovMaxTemp (const SimFlowPlant_HeatRecovMaxTemp_type& x);

        void
        SimFlowPlant_HeatRecovMaxTemp (const SimFlowPlant_HeatRecovMaxTemp_optional& x);

        // SimFlowPlant_OutdrAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_OutdrAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_OutdrAirInletNodeName_type > SimFlowPlant_OutdrAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_OutdrAirInletNodeName_type, char > SimFlowPlant_OutdrAirInletNodeName_traits;

        const SimFlowPlant_OutdrAirInletNodeName_optional&
        SimFlowPlant_OutdrAirInletNodeName () const;

        SimFlowPlant_OutdrAirInletNodeName_optional&
        SimFlowPlant_OutdrAirInletNodeName ();

        void
        SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_type& x);

        void
        SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_optional& x);

        void
        SimFlowPlant_OutdrAirInletNodeName (::std::auto_ptr< SimFlowPlant_OutdrAirInletNodeName_type > p);

        // SimFlowPlant_RatedPwrOutput
        //
        typedef ::xml_schema::double_ SimFlowPlant_RatedPwrOutput_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_RatedPwrOutput_type > SimFlowPlant_RatedPwrOutput_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_RatedPwrOutput_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_RatedPwrOutput_traits;

        const SimFlowPlant_RatedPwrOutput_optional&
        SimFlowPlant_RatedPwrOutput () const;

        SimFlowPlant_RatedPwrOutput_optional&
        SimFlowPlant_RatedPwrOutput ();

        void
        SimFlowPlant_RatedPwrOutput (const SimFlowPlant_RatedPwrOutput_type& x);

        void
        SimFlowPlant_RatedPwrOutput (const SimFlowPlant_RatedPwrOutput_optional& x);

        // SimFlowPlant_ElecCircuitNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_ElecCircuitNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ElecCircuitNodeName_type > SimFlowPlant_ElecCircuitNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ElecCircuitNodeName_type, char > SimFlowPlant_ElecCircuitNodeName_traits;

        const SimFlowPlant_ElecCircuitNodeName_optional&
        SimFlowPlant_ElecCircuitNodeName () const;

        SimFlowPlant_ElecCircuitNodeName_optional&
        SimFlowPlant_ElecCircuitNodeName ();

        void
        SimFlowPlant_ElecCircuitNodeName (const SimFlowPlant_ElecCircuitNodeName_type& x);

        void
        SimFlowPlant_ElecCircuitNodeName (const SimFlowPlant_ElecCircuitNodeName_optional& x);

        void
        SimFlowPlant_ElecCircuitNodeName (::std::auto_ptr< SimFlowPlant_ElecCircuitNodeName_type > p);

        // SimFlowPlant_PartLoadBasedFuelInputCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_PartLoadBasedFuelInputCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PartLoadBasedFuelInputCurveName_type > SimFlowPlant_PartLoadBasedFuelInputCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PartLoadBasedFuelInputCurveName_type, char > SimFlowPlant_PartLoadBasedFuelInputCurveName_traits;

        const SimFlowPlant_PartLoadBasedFuelInputCurveName_optional&
        SimFlowPlant_PartLoadBasedFuelInputCurveName () const;

        SimFlowPlant_PartLoadBasedFuelInputCurveName_optional&
        SimFlowPlant_PartLoadBasedFuelInputCurveName ();

        void
        SimFlowPlant_PartLoadBasedFuelInputCurveName (const SimFlowPlant_PartLoadBasedFuelInputCurveName_type& x);

        void
        SimFlowPlant_PartLoadBasedFuelInputCurveName (const SimFlowPlant_PartLoadBasedFuelInputCurveName_optional& x);

        void
        SimFlowPlant_PartLoadBasedFuelInputCurveName (::std::auto_ptr< SimFlowPlant_PartLoadBasedFuelInputCurveName_type > p);

        // SimFlowPlant_TempBasedFuelInputCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_TempBasedFuelInputCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_TempBasedFuelInputCurveName_type > SimFlowPlant_TempBasedFuelInputCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_TempBasedFuelInputCurveName_type, char > SimFlowPlant_TempBasedFuelInputCurveName_traits;

        const SimFlowPlant_TempBasedFuelInputCurveName_optional&
        SimFlowPlant_TempBasedFuelInputCurveName () const;

        SimFlowPlant_TempBasedFuelInputCurveName_optional&
        SimFlowPlant_TempBasedFuelInputCurveName ();

        void
        SimFlowPlant_TempBasedFuelInputCurveName (const SimFlowPlant_TempBasedFuelInputCurveName_type& x);

        void
        SimFlowPlant_TempBasedFuelInputCurveName (const SimFlowPlant_TempBasedFuelInputCurveName_optional& x);

        void
        SimFlowPlant_TempBasedFuelInputCurveName (::std::auto_ptr< SimFlowPlant_TempBasedFuelInputCurveName_type > p);

        // SimFlowPlant_ExhFlowCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_ExhFlowCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ExhFlowCurveName_type > SimFlowPlant_ExhFlowCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ExhFlowCurveName_type, char > SimFlowPlant_ExhFlowCurveName_traits;

        const SimFlowPlant_ExhFlowCurveName_optional&
        SimFlowPlant_ExhFlowCurveName () const;

        SimFlowPlant_ExhFlowCurveName_optional&
        SimFlowPlant_ExhFlowCurveName ();

        void
        SimFlowPlant_ExhFlowCurveName (const SimFlowPlant_ExhFlowCurveName_type& x);

        void
        SimFlowPlant_ExhFlowCurveName (const SimFlowPlant_ExhFlowCurveName_optional& x);

        void
        SimFlowPlant_ExhFlowCurveName (::std::auto_ptr< SimFlowPlant_ExhFlowCurveName_type > p);

        // SimFlowPlant_PartLoadBasedExhTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_PartLoadBasedExhTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PartLoadBasedExhTempCurveName_type > SimFlowPlant_PartLoadBasedExhTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PartLoadBasedExhTempCurveName_type, char > SimFlowPlant_PartLoadBasedExhTempCurveName_traits;

        const SimFlowPlant_PartLoadBasedExhTempCurveName_optional&
        SimFlowPlant_PartLoadBasedExhTempCurveName () const;

        SimFlowPlant_PartLoadBasedExhTempCurveName_optional&
        SimFlowPlant_PartLoadBasedExhTempCurveName ();

        void
        SimFlowPlant_PartLoadBasedExhTempCurveName (const SimFlowPlant_PartLoadBasedExhTempCurveName_type& x);

        void
        SimFlowPlant_PartLoadBasedExhTempCurveName (const SimFlowPlant_PartLoadBasedExhTempCurveName_optional& x);

        void
        SimFlowPlant_PartLoadBasedExhTempCurveName (::std::auto_ptr< SimFlowPlant_PartLoadBasedExhTempCurveName_type > p);

        // SimFlowPlant_TempBasedExhTempCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_TempBasedExhTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_TempBasedExhTempCurveName_type > SimFlowPlant_TempBasedExhTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_TempBasedExhTempCurveName_type, char > SimFlowPlant_TempBasedExhTempCurveName_traits;

        const SimFlowPlant_TempBasedExhTempCurveName_optional&
        SimFlowPlant_TempBasedExhTempCurveName () const;

        SimFlowPlant_TempBasedExhTempCurveName_optional&
        SimFlowPlant_TempBasedExhTempCurveName ();

        void
        SimFlowPlant_TempBasedExhTempCurveName (const SimFlowPlant_TempBasedExhTempCurveName_type& x);

        void
        SimFlowPlant_TempBasedExhTempCurveName (const SimFlowPlant_TempBasedExhTempCurveName_optional& x);

        void
        SimFlowPlant_TempBasedExhTempCurveName (::std::auto_ptr< SimFlowPlant_TempBasedExhTempCurveName_type > p);

        // SimFlowPlant_HeatRecovLubeEnergyCurveName
        //
        typedef ::xml_schema::idref SimFlowPlant_HeatRecovLubeEnergyCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovLubeEnergyCurveName_type > SimFlowPlant_HeatRecovLubeEnergyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovLubeEnergyCurveName_type, char > SimFlowPlant_HeatRecovLubeEnergyCurveName_traits;

        const SimFlowPlant_HeatRecovLubeEnergyCurveName_optional&
        SimFlowPlant_HeatRecovLubeEnergyCurveName () const;

        SimFlowPlant_HeatRecovLubeEnergyCurveName_optional&
        SimFlowPlant_HeatRecovLubeEnergyCurveName ();

        void
        SimFlowPlant_HeatRecovLubeEnergyCurveName (const SimFlowPlant_HeatRecovLubeEnergyCurveName_type& x);

        void
        SimFlowPlant_HeatRecovLubeEnergyCurveName (const SimFlowPlant_HeatRecovLubeEnergyCurveName_optional& x);

        void
        SimFlowPlant_HeatRecovLubeEnergyCurveName (::std::auto_ptr< SimFlowPlant_HeatRecovLubeEnergyCurveName_type > p);

        // SimFlowPlant_DesignAirInletTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignAirInletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignAirInletTemp_type > SimFlowPlant_DesignAirInletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignAirInletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignAirInletTemp_traits;

        const SimFlowPlant_DesignAirInletTemp_optional&
        SimFlowPlant_DesignAirInletTemp () const;

        SimFlowPlant_DesignAirInletTemp_optional&
        SimFlowPlant_DesignAirInletTemp ();

        void
        SimFlowPlant_DesignAirInletTemp (const SimFlowPlant_DesignAirInletTemp_type& x);

        void
        SimFlowPlant_DesignAirInletTemp (const SimFlowPlant_DesignAirInletTemp_optional& x);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_CombustionTurbine (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_CombustionTurbine (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_CombustionTurbine (const SimFlowPlant_ElectricalGenerator_CombustionTurbine& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_CombustionTurbine*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_CombustionTurbine&
        operator= (const SimFlowPlant_ElectricalGenerator_CombustionTurbine& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_CombustionTurbine ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_FuelType_optional SimFlowPlant_FuelType_;
        SimFlowPlant_MinPartLoadRatio_optional SimFlowPlant_MinPartLoadRatio_;
        SimFlowPlant_MaxPartLoadRatio_optional SimFlowPlant_MaxPartLoadRatio_;
        SimFlowPlant_OptimumPartLoadRatio_optional SimFlowPlant_OptimumPartLoadRatio_;
        SimFlowPlant_DesignHeatRecovWaterFlowRate_optional SimFlowPlant_DesignHeatRecovWaterFlowRate_;
        SimFlowPlant_HeatRecovInletNodeName_optional SimFlowPlant_HeatRecovInletNodeName_;
        SimFlowPlant_HeatRecovOutletNodeName_optional SimFlowPlant_HeatRecovOutletNodeName_;
        SimFlowPlant_MaxExhFlowPerUnitPwrOutput_optional SimFlowPlant_MaxExhFlowPerUnitPwrOutput_;
        SimFlowPlant_DesignMinExhTemp_optional SimFlowPlant_DesignMinExhTemp_;
        SimFlowPlant_FuelHigherHeatingVal_optional SimFlowPlant_FuelHigherHeatingVal_;
        SimFlowPlant_HeatRecovMaxTemp_optional SimFlowPlant_HeatRecovMaxTemp_;
        SimFlowPlant_OutdrAirInletNodeName_optional SimFlowPlant_OutdrAirInletNodeName_;
        SimFlowPlant_RatedPwrOutput_optional SimFlowPlant_RatedPwrOutput_;
        SimFlowPlant_ElecCircuitNodeName_optional SimFlowPlant_ElecCircuitNodeName_;
        SimFlowPlant_PartLoadBasedFuelInputCurveName_optional SimFlowPlant_PartLoadBasedFuelInputCurveName_;
        SimFlowPlant_TempBasedFuelInputCurveName_optional SimFlowPlant_TempBasedFuelInputCurveName_;
        SimFlowPlant_ExhFlowCurveName_optional SimFlowPlant_ExhFlowCurveName_;
        SimFlowPlant_PartLoadBasedExhTempCurveName_optional SimFlowPlant_PartLoadBasedExhTempCurveName_;
        SimFlowPlant_TempBasedExhTempCurveName_optional SimFlowPlant_TempBasedExhTempCurveName_;
        SimFlowPlant_HeatRecovLubeEnergyCurveName_optional SimFlowPlant_HeatRecovLubeEnergyCurveName_;
        SimFlowPlant_DesignAirInletTemp_optional SimFlowPlant_DesignAirInletTemp_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_COMBUSTION_TURBINE_HXX
