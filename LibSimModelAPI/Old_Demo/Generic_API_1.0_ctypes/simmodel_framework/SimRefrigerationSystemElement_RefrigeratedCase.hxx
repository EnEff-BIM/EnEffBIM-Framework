// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATED_CASE_HXX
#define SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATED_CASE_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_RefrigeratedCase;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simrefrigerationsystemelement.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_RefrigeratedCase: public ::namespaces::Sim::MepModel::SimRefrigerationSystemElement
      {
        public:
        // SimRefrigSysElem_AvailSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AvailSchedName_type > SimRefrigSysElem_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AvailSchedName_type, char > SimRefrigSysElem_AvailSchedName_traits;

        const SimRefrigSysElem_AvailSchedName_optional&
        SimRefrigSysElem_AvailSchedName () const;

        SimRefrigSysElem_AvailSchedName_optional&
        SimRefrigSysElem_AvailSchedName ();

        void
        SimRefrigSysElem_AvailSchedName (const SimRefrigSysElem_AvailSchedName_type& x);

        void
        SimRefrigSysElem_AvailSchedName (const SimRefrigSysElem_AvailSchedName_optional& x);

        void
        SimRefrigSysElem_AvailSchedName (::std::auto_ptr< SimRefrigSysElem_AvailSchedName_type > p);

        // SimRefrigSysElem_ZoneName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_ZoneName_type > SimRefrigSysElem_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_ZoneName_type, char > SimRefrigSysElem_ZoneName_traits;

        const SimRefrigSysElem_ZoneName_optional&
        SimRefrigSysElem_ZoneName () const;

        SimRefrigSysElem_ZoneName_optional&
        SimRefrigSysElem_ZoneName ();

        void
        SimRefrigSysElem_ZoneName (const SimRefrigSysElem_ZoneName_type& x);

        void
        SimRefrigSysElem_ZoneName (const SimRefrigSysElem_ZoneName_optional& x);

        void
        SimRefrigSysElem_ZoneName (::std::auto_ptr< SimRefrigSysElem_ZoneName_type > p);

        // SimRefrigSysElem_RatedAmbTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedAmbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedAmbTemp_type > SimRefrigSysElem_RatedAmbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedAmbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedAmbTemp_traits;

        const SimRefrigSysElem_RatedAmbTemp_optional&
        SimRefrigSysElem_RatedAmbTemp () const;

        SimRefrigSysElem_RatedAmbTemp_optional&
        SimRefrigSysElem_RatedAmbTemp ();

        void
        SimRefrigSysElem_RatedAmbTemp (const SimRefrigSysElem_RatedAmbTemp_type& x);

        void
        SimRefrigSysElem_RatedAmbTemp (const SimRefrigSysElem_RatedAmbTemp_optional& x);

        // SimRefrigSysElem_RatedAmbRelHumid
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedAmbRelHumid_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedAmbRelHumid_type > SimRefrigSysElem_RatedAmbRelHumid_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedAmbRelHumid_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedAmbRelHumid_traits;

        const SimRefrigSysElem_RatedAmbRelHumid_optional&
        SimRefrigSysElem_RatedAmbRelHumid () const;

        SimRefrigSysElem_RatedAmbRelHumid_optional&
        SimRefrigSysElem_RatedAmbRelHumid ();

        void
        SimRefrigSysElem_RatedAmbRelHumid (const SimRefrigSysElem_RatedAmbRelHumid_type& x);

        void
        SimRefrigSysElem_RatedAmbRelHumid (const SimRefrigSysElem_RatedAmbRelHumid_optional& x);

        // SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_type > SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_traits;

        const SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_optional&
        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength () const;

        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_optional&
        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength ();

        void
        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength (const SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_type& x);

        void
        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength (const SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_optional& x);

        // SimRefrigSysElem_RatedLatentHeatRatio
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedLatentHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedLatentHeatRatio_type > SimRefrigSysElem_RatedLatentHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedLatentHeatRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedLatentHeatRatio_traits;

        const SimRefrigSysElem_RatedLatentHeatRatio_optional&
        SimRefrigSysElem_RatedLatentHeatRatio () const;

        SimRefrigSysElem_RatedLatentHeatRatio_optional&
        SimRefrigSysElem_RatedLatentHeatRatio ();

        void
        SimRefrigSysElem_RatedLatentHeatRatio (const SimRefrigSysElem_RatedLatentHeatRatio_type& x);

        void
        SimRefrigSysElem_RatedLatentHeatRatio (const SimRefrigSysElem_RatedLatentHeatRatio_optional& x);

        // SimRefrigSysElem_RatedRuntimeFract
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedRuntimeFract_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedRuntimeFract_type > SimRefrigSysElem_RatedRuntimeFract_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedRuntimeFract_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedRuntimeFract_traits;

        const SimRefrigSysElem_RatedRuntimeFract_optional&
        SimRefrigSysElem_RatedRuntimeFract () const;

        SimRefrigSysElem_RatedRuntimeFract_optional&
        SimRefrigSysElem_RatedRuntimeFract ();

        void
        SimRefrigSysElem_RatedRuntimeFract (const SimRefrigSysElem_RatedRuntimeFract_type& x);

        void
        SimRefrigSysElem_RatedRuntimeFract (const SimRefrigSysElem_RatedRuntimeFract_optional& x);

        // SimRefrigSysElem_CaseLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CaseLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseLength_type > SimRefrigSysElem_CaseLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CaseLength_traits;

        const SimRefrigSysElem_CaseLength_optional&
        SimRefrigSysElem_CaseLength () const;

        SimRefrigSysElem_CaseLength_optional&
        SimRefrigSysElem_CaseLength ();

        void
        SimRefrigSysElem_CaseLength (const SimRefrigSysElem_CaseLength_type& x);

        void
        SimRefrigSysElem_CaseLength (const SimRefrigSysElem_CaseLength_optional& x);

        // SimRefrigSysElem_CaseOperatTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CaseOperatTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseOperatTemp_type > SimRefrigSysElem_CaseOperatTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseOperatTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CaseOperatTemp_traits;

        const SimRefrigSysElem_CaseOperatTemp_optional&
        SimRefrigSysElem_CaseOperatTemp () const;

        SimRefrigSysElem_CaseOperatTemp_optional&
        SimRefrigSysElem_CaseOperatTemp ();

        void
        SimRefrigSysElem_CaseOperatTemp (const SimRefrigSysElem_CaseOperatTemp_type& x);

        void
        SimRefrigSysElem_CaseOperatTemp (const SimRefrigSysElem_CaseOperatTemp_optional& x);

        // SimRefrigSysElem_LatentCaseCreditCurveType
        //
        typedef ::xml_schema::string SimRefrigSysElem_LatentCaseCreditCurveType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_LatentCaseCreditCurveType_type > SimRefrigSysElem_LatentCaseCreditCurveType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_LatentCaseCreditCurveType_type, char > SimRefrigSysElem_LatentCaseCreditCurveType_traits;

        const SimRefrigSysElem_LatentCaseCreditCurveType_optional&
        SimRefrigSysElem_LatentCaseCreditCurveType () const;

        SimRefrigSysElem_LatentCaseCreditCurveType_optional&
        SimRefrigSysElem_LatentCaseCreditCurveType ();

        void
        SimRefrigSysElem_LatentCaseCreditCurveType (const SimRefrigSysElem_LatentCaseCreditCurveType_type& x);

        void
        SimRefrigSysElem_LatentCaseCreditCurveType (const SimRefrigSysElem_LatentCaseCreditCurveType_optional& x);

        void
        SimRefrigSysElem_LatentCaseCreditCurveType (::std::auto_ptr< SimRefrigSysElem_LatentCaseCreditCurveType_type > p);

        // SimRefrigSysElem_LatentCaseCreditCurveName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_LatentCaseCreditCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_LatentCaseCreditCurveName_type > SimRefrigSysElem_LatentCaseCreditCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_LatentCaseCreditCurveName_type, char > SimRefrigSysElem_LatentCaseCreditCurveName_traits;

        const SimRefrigSysElem_LatentCaseCreditCurveName_optional&
        SimRefrigSysElem_LatentCaseCreditCurveName () const;

        SimRefrigSysElem_LatentCaseCreditCurveName_optional&
        SimRefrigSysElem_LatentCaseCreditCurveName ();

        void
        SimRefrigSysElem_LatentCaseCreditCurveName (const SimRefrigSysElem_LatentCaseCreditCurveName_type& x);

        void
        SimRefrigSysElem_LatentCaseCreditCurveName (const SimRefrigSysElem_LatentCaseCreditCurveName_optional& x);

        void
        SimRefrigSysElem_LatentCaseCreditCurveName (::std::auto_ptr< SimRefrigSysElem_LatentCaseCreditCurveName_type > p);

        // SimRefrigSysElem_StandardCaseFanPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_type > SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_traits;

        const SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_optional&
        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength () const;

        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_optional&
        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength ();

        void
        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength (const SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength (const SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_OperatCaseFanPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_type > SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_traits;

        const SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_optional&
        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength () const;

        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_optional&
        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength ();

        void
        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength (const SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength (const SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_type > SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_traits;

        const SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_optional&
        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength () const;

        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_optional&
        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength ();

        void
        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength (const SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength (const SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_type > SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_traits;

        const SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_optional&
        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength () const;

        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_optional&
        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength ();

        void
        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength (const SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength (const SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_CaseLightingSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CaseLightingSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseLightingSchedName_type > SimRefrigSysElem_CaseLightingSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseLightingSchedName_type, char > SimRefrigSysElem_CaseLightingSchedName_traits;

        const SimRefrigSysElem_CaseLightingSchedName_optional&
        SimRefrigSysElem_CaseLightingSchedName () const;

        SimRefrigSysElem_CaseLightingSchedName_optional&
        SimRefrigSysElem_CaseLightingSchedName ();

        void
        SimRefrigSysElem_CaseLightingSchedName (const SimRefrigSysElem_CaseLightingSchedName_type& x);

        void
        SimRefrigSysElem_CaseLightingSchedName (const SimRefrigSysElem_CaseLightingSchedName_optional& x);

        void
        SimRefrigSysElem_CaseLightingSchedName (::std::auto_ptr< SimRefrigSysElem_CaseLightingSchedName_type > p);

        // SimRefrigSysElem_FractLightingEnergyToCase
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_FractLightingEnergyToCase_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_FractLightingEnergyToCase_type > SimRefrigSysElem_FractLightingEnergyToCase_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_FractLightingEnergyToCase_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_FractLightingEnergyToCase_traits;

        const SimRefrigSysElem_FractLightingEnergyToCase_optional&
        SimRefrigSysElem_FractLightingEnergyToCase () const;

        SimRefrigSysElem_FractLightingEnergyToCase_optional&
        SimRefrigSysElem_FractLightingEnergyToCase ();

        void
        SimRefrigSysElem_FractLightingEnergyToCase (const SimRefrigSysElem_FractLightingEnergyToCase_type& x);

        void
        SimRefrigSysElem_FractLightingEnergyToCase (const SimRefrigSysElem_FractLightingEnergyToCase_optional& x);

        // SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_type > SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_traits;

        const SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_optional&
        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength () const;

        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_optional&
        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength ();

        void
        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength (const SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength (const SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_type > SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_traits;

        const SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_optional&
        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength () const;

        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_optional&
        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength ();

        void
        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength (const SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength (const SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_AntiSweatHeatCntlType
        //
        typedef ::xml_schema::string SimRefrigSysElem_AntiSweatHeatCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AntiSweatHeatCntlType_type > SimRefrigSysElem_AntiSweatHeatCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AntiSweatHeatCntlType_type, char > SimRefrigSysElem_AntiSweatHeatCntlType_traits;

        const SimRefrigSysElem_AntiSweatHeatCntlType_optional&
        SimRefrigSysElem_AntiSweatHeatCntlType () const;

        SimRefrigSysElem_AntiSweatHeatCntlType_optional&
        SimRefrigSysElem_AntiSweatHeatCntlType ();

        void
        SimRefrigSysElem_AntiSweatHeatCntlType (const SimRefrigSysElem_AntiSweatHeatCntlType_type& x);

        void
        SimRefrigSysElem_AntiSweatHeatCntlType (const SimRefrigSysElem_AntiSweatHeatCntlType_optional& x);

        void
        SimRefrigSysElem_AntiSweatHeatCntlType (::std::auto_ptr< SimRefrigSysElem_AntiSweatHeatCntlType_type > p);

        // SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_type > SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_traits;

        const SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_optional&
        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy () const;

        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_optional&
        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy ();

        void
        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy (const SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_type& x);

        void
        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy (const SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_optional& x);

        // SimRefrigSysElem_CaseHeight
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CaseHeight_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseHeight_type > SimRefrigSysElem_CaseHeight_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseHeight_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CaseHeight_traits;

        const SimRefrigSysElem_CaseHeight_optional&
        SimRefrigSysElem_CaseHeight () const;

        SimRefrigSysElem_CaseHeight_optional&
        SimRefrigSysElem_CaseHeight ();

        void
        SimRefrigSysElem_CaseHeight (const SimRefrigSysElem_CaseHeight_type& x);

        void
        SimRefrigSysElem_CaseHeight (const SimRefrigSysElem_CaseHeight_optional& x);

        // SimRefrigSysElem_FractAntiSweatHeatEnergyToCase
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_type > SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_traits;

        const SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_optional&
        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase () const;

        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_optional&
        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase ();

        void
        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase (const SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_type& x);

        void
        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase (const SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_optional& x);

        // SimRefrigSysElem_CaseDefrostPwrPerUnitLength
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_CaseDefrostPwrPerUnitLength_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseDefrostPwrPerUnitLength_type > SimRefrigSysElem_CaseDefrostPwrPerUnitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseDefrostPwrPerUnitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_CaseDefrostPwrPerUnitLength_traits;

        const SimRefrigSysElem_CaseDefrostPwrPerUnitLength_optional&
        SimRefrigSysElem_CaseDefrostPwrPerUnitLength () const;

        SimRefrigSysElem_CaseDefrostPwrPerUnitLength_optional&
        SimRefrigSysElem_CaseDefrostPwrPerUnitLength ();

        void
        SimRefrigSysElem_CaseDefrostPwrPerUnitLength (const SimRefrigSysElem_CaseDefrostPwrPerUnitLength_type& x);

        void
        SimRefrigSysElem_CaseDefrostPwrPerUnitLength (const SimRefrigSysElem_CaseDefrostPwrPerUnitLength_optional& x);

        // SimRefrigSysElem_CaseDefrostType
        //
        typedef ::xml_schema::string SimRefrigSysElem_CaseDefrostType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseDefrostType_type > SimRefrigSysElem_CaseDefrostType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseDefrostType_type, char > SimRefrigSysElem_CaseDefrostType_traits;

        const SimRefrigSysElem_CaseDefrostType_optional&
        SimRefrigSysElem_CaseDefrostType () const;

        SimRefrigSysElem_CaseDefrostType_optional&
        SimRefrigSysElem_CaseDefrostType ();

        void
        SimRefrigSysElem_CaseDefrostType (const SimRefrigSysElem_CaseDefrostType_type& x);

        void
        SimRefrigSysElem_CaseDefrostType (const SimRefrigSysElem_CaseDefrostType_optional& x);

        void
        SimRefrigSysElem_CaseDefrostType (::std::auto_ptr< SimRefrigSysElem_CaseDefrostType_type > p);

        // SimRefrigSysElem_CaseDefrostSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CaseDefrostSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseDefrostSchedName_type > SimRefrigSysElem_CaseDefrostSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseDefrostSchedName_type, char > SimRefrigSysElem_CaseDefrostSchedName_traits;

        const SimRefrigSysElem_CaseDefrostSchedName_optional&
        SimRefrigSysElem_CaseDefrostSchedName () const;

        SimRefrigSysElem_CaseDefrostSchedName_optional&
        SimRefrigSysElem_CaseDefrostSchedName ();

        void
        SimRefrigSysElem_CaseDefrostSchedName (const SimRefrigSysElem_CaseDefrostSchedName_type& x);

        void
        SimRefrigSysElem_CaseDefrostSchedName (const SimRefrigSysElem_CaseDefrostSchedName_optional& x);

        void
        SimRefrigSysElem_CaseDefrostSchedName (::std::auto_ptr< SimRefrigSysElem_CaseDefrostSchedName_type > p);

        // SimRefrigSysElem_CaseDefrostDripDownSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CaseDefrostDripDownSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseDefrostDripDownSchedName_type > SimRefrigSysElem_CaseDefrostDripDownSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseDefrostDripDownSchedName_type, char > SimRefrigSysElem_CaseDefrostDripDownSchedName_traits;

        const SimRefrigSysElem_CaseDefrostDripDownSchedName_optional&
        SimRefrigSysElem_CaseDefrostDripDownSchedName () const;

        SimRefrigSysElem_CaseDefrostDripDownSchedName_optional&
        SimRefrigSysElem_CaseDefrostDripDownSchedName ();

        void
        SimRefrigSysElem_CaseDefrostDripDownSchedName (const SimRefrigSysElem_CaseDefrostDripDownSchedName_type& x);

        void
        SimRefrigSysElem_CaseDefrostDripDownSchedName (const SimRefrigSysElem_CaseDefrostDripDownSchedName_optional& x);

        void
        SimRefrigSysElem_CaseDefrostDripDownSchedName (::std::auto_ptr< SimRefrigSysElem_CaseDefrostDripDownSchedName_type > p);

        // SimRefrigSysElem_DefrostEnergyCorrectCurveType
        //
        typedef ::xml_schema::string SimRefrigSysElem_DefrostEnergyCorrectCurveType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostEnergyCorrectCurveType_type > SimRefrigSysElem_DefrostEnergyCorrectCurveType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostEnergyCorrectCurveType_type, char > SimRefrigSysElem_DefrostEnergyCorrectCurveType_traits;

        const SimRefrigSysElem_DefrostEnergyCorrectCurveType_optional&
        SimRefrigSysElem_DefrostEnergyCorrectCurveType () const;

        SimRefrigSysElem_DefrostEnergyCorrectCurveType_optional&
        SimRefrigSysElem_DefrostEnergyCorrectCurveType ();

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveType (const SimRefrigSysElem_DefrostEnergyCorrectCurveType_type& x);

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveType (const SimRefrigSysElem_DefrostEnergyCorrectCurveType_optional& x);

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveType (::std::auto_ptr< SimRefrigSysElem_DefrostEnergyCorrectCurveType_type > p);

        // SimRefrigSysElem_DefrostEnergyCorrectCurveName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_DefrostEnergyCorrectCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DefrostEnergyCorrectCurveName_type > SimRefrigSysElem_DefrostEnergyCorrectCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DefrostEnergyCorrectCurveName_type, char > SimRefrigSysElem_DefrostEnergyCorrectCurveName_traits;

        const SimRefrigSysElem_DefrostEnergyCorrectCurveName_optional&
        SimRefrigSysElem_DefrostEnergyCorrectCurveName () const;

        SimRefrigSysElem_DefrostEnergyCorrectCurveName_optional&
        SimRefrigSysElem_DefrostEnergyCorrectCurveName ();

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveName (const SimRefrigSysElem_DefrostEnergyCorrectCurveName_type& x);

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveName (const SimRefrigSysElem_DefrostEnergyCorrectCurveName_optional& x);

        void
        SimRefrigSysElem_DefrostEnergyCorrectCurveName (::std::auto_ptr< SimRefrigSysElem_DefrostEnergyCorrectCurveName_type > p);

        // SimRefrigSysElem_UnderCaseHVACRtnAirFract
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_UnderCaseHVACRtnAirFract_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_UnderCaseHVACRtnAirFract_type > SimRefrigSysElem_UnderCaseHVACRtnAirFract_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_UnderCaseHVACRtnAirFract_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_UnderCaseHVACRtnAirFract_traits;

        const SimRefrigSysElem_UnderCaseHVACRtnAirFract_optional&
        SimRefrigSysElem_UnderCaseHVACRtnAirFract () const;

        SimRefrigSysElem_UnderCaseHVACRtnAirFract_optional&
        SimRefrigSysElem_UnderCaseHVACRtnAirFract ();

        void
        SimRefrigSysElem_UnderCaseHVACRtnAirFract (const SimRefrigSysElem_UnderCaseHVACRtnAirFract_type& x);

        void
        SimRefrigSysElem_UnderCaseHVACRtnAirFract (const SimRefrigSysElem_UnderCaseHVACRtnAirFract_optional& x);

        // SimRefrigSysElem_RefrigCaseRestockingSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_RefrigCaseRestockingSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RefrigCaseRestockingSchedName_type > SimRefrigSysElem_RefrigCaseRestockingSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RefrigCaseRestockingSchedName_type, char > SimRefrigSysElem_RefrigCaseRestockingSchedName_traits;

        const SimRefrigSysElem_RefrigCaseRestockingSchedName_optional&
        SimRefrigSysElem_RefrigCaseRestockingSchedName () const;

        SimRefrigSysElem_RefrigCaseRestockingSchedName_optional&
        SimRefrigSysElem_RefrigCaseRestockingSchedName ();

        void
        SimRefrigSysElem_RefrigCaseRestockingSchedName (const SimRefrigSysElem_RefrigCaseRestockingSchedName_type& x);

        void
        SimRefrigSysElem_RefrigCaseRestockingSchedName (const SimRefrigSysElem_RefrigCaseRestockingSchedName_optional& x);

        void
        SimRefrigSysElem_RefrigCaseRestockingSchedName (::std::auto_ptr< SimRefrigSysElem_RefrigCaseRestockingSchedName_type > p);

        // SimRefrigSysElem_CaseCreditFractSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CaseCreditFractSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CaseCreditFractSchedName_type > SimRefrigSysElem_CaseCreditFractSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CaseCreditFractSchedName_type, char > SimRefrigSysElem_CaseCreditFractSchedName_traits;

        const SimRefrigSysElem_CaseCreditFractSchedName_optional&
        SimRefrigSysElem_CaseCreditFractSchedName () const;

        SimRefrigSysElem_CaseCreditFractSchedName_optional&
        SimRefrigSysElem_CaseCreditFractSchedName ();

        void
        SimRefrigSysElem_CaseCreditFractSchedName (const SimRefrigSysElem_CaseCreditFractSchedName_type& x);

        void
        SimRefrigSysElem_CaseCreditFractSchedName (const SimRefrigSysElem_CaseCreditFractSchedName_optional& x);

        void
        SimRefrigSysElem_CaseCreditFractSchedName (::std::auto_ptr< SimRefrigSysElem_CaseCreditFractSchedName_type > p);

        // SimRefrigSysElem_DesignEvapTempOrBrineInletTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_type > SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_traits;

        const SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_optional&
        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp () const;

        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_optional&
        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp ();

        void
        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp (const SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_type& x);

        void
        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp (const SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_optional& x);

        // SimRefrigSysElem_AverageRefrigChargeInvent
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_AverageRefrigChargeInvent_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AverageRefrigChargeInvent_type > SimRefrigSysElem_AverageRefrigChargeInvent_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AverageRefrigChargeInvent_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_AverageRefrigChargeInvent_traits;

        const SimRefrigSysElem_AverageRefrigChargeInvent_optional&
        SimRefrigSysElem_AverageRefrigChargeInvent () const;

        SimRefrigSysElem_AverageRefrigChargeInvent_optional&
        SimRefrigSysElem_AverageRefrigChargeInvent ();

        void
        SimRefrigSysElem_AverageRefrigChargeInvent (const SimRefrigSysElem_AverageRefrigChargeInvent_type& x);

        void
        SimRefrigSysElem_AverageRefrigChargeInvent (const SimRefrigSysElem_AverageRefrigChargeInvent_optional& x);

        // Constructors.
        //
        SimRefrigerationSystemElement_RefrigeratedCase (const RefId_type&);

        SimRefrigerationSystemElement_RefrigeratedCase (const ::xercesc::DOMElement& e,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

        SimRefrigerationSystemElement_RefrigeratedCase (const SimRefrigerationSystemElement_RefrigeratedCase& x,
                                                        ::xml_schema::flags f = 0,
                                                        ::xml_schema::container* c = 0);

        virtual SimRefrigerationSystemElement_RefrigeratedCase*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimRefrigerationSystemElement_RefrigeratedCase&
        operator= (const SimRefrigerationSystemElement_RefrigeratedCase& x);

        virtual 
        ~SimRefrigerationSystemElement_RefrigeratedCase ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimRefrigSysElem_AvailSchedName_optional SimRefrigSysElem_AvailSchedName_;
        SimRefrigSysElem_ZoneName_optional SimRefrigSysElem_ZoneName_;
        SimRefrigSysElem_RatedAmbTemp_optional SimRefrigSysElem_RatedAmbTemp_;
        SimRefrigSysElem_RatedAmbRelHumid_optional SimRefrigSysElem_RatedAmbRelHumid_;
        SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_optional SimRefrigSysElem_RatedTotalCoolingCapPerUnitLength_;
        SimRefrigSysElem_RatedLatentHeatRatio_optional SimRefrigSysElem_RatedLatentHeatRatio_;
        SimRefrigSysElem_RatedRuntimeFract_optional SimRefrigSysElem_RatedRuntimeFract_;
        SimRefrigSysElem_CaseLength_optional SimRefrigSysElem_CaseLength_;
        SimRefrigSysElem_CaseOperatTemp_optional SimRefrigSysElem_CaseOperatTemp_;
        SimRefrigSysElem_LatentCaseCreditCurveType_optional SimRefrigSysElem_LatentCaseCreditCurveType_;
        SimRefrigSysElem_LatentCaseCreditCurveName_optional SimRefrigSysElem_LatentCaseCreditCurveName_;
        SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_optional SimRefrigSysElem_StandardCaseFanPwrPerUnitLength_;
        SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_optional SimRefrigSysElem_OperatCaseFanPwrPerUnitLength_;
        SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_optional SimRefrigSysElem_StandardCaseLightingPwrPerUnitLength_;
        SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_optional SimRefrigSysElem_stalledCaseLightingPwrPerUnitLength_;
        SimRefrigSysElem_CaseLightingSchedName_optional SimRefrigSysElem_CaseLightingSchedName_;
        SimRefrigSysElem_FractLightingEnergyToCase_optional SimRefrigSysElem_FractLightingEnergyToCase_;
        SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_optional SimRefrigSysElem_CaseAntiSweatHeatPwrPerUnitLength_;
        SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_optional SimRefrigSysElem_MinAntiSweatHeatPwrPerUnitLength_;
        SimRefrigSysElem_AntiSweatHeatCntlType_optional SimRefrigSysElem_AntiSweatHeatCntlType_;
        SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_optional SimRefrigSysElem_HumidAtZeroAntiSweatHeatEnergy_;
        SimRefrigSysElem_CaseHeight_optional SimRefrigSysElem_CaseHeight_;
        SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_optional SimRefrigSysElem_FractAntiSweatHeatEnergyToCase_;
        SimRefrigSysElem_CaseDefrostPwrPerUnitLength_optional SimRefrigSysElem_CaseDefrostPwrPerUnitLength_;
        SimRefrigSysElem_CaseDefrostType_optional SimRefrigSysElem_CaseDefrostType_;
        SimRefrigSysElem_CaseDefrostSchedName_optional SimRefrigSysElem_CaseDefrostSchedName_;
        SimRefrigSysElem_CaseDefrostDripDownSchedName_optional SimRefrigSysElem_CaseDefrostDripDownSchedName_;
        SimRefrigSysElem_DefrostEnergyCorrectCurveType_optional SimRefrigSysElem_DefrostEnergyCorrectCurveType_;
        SimRefrigSysElem_DefrostEnergyCorrectCurveName_optional SimRefrigSysElem_DefrostEnergyCorrectCurveName_;
        SimRefrigSysElem_UnderCaseHVACRtnAirFract_optional SimRefrigSysElem_UnderCaseHVACRtnAirFract_;
        SimRefrigSysElem_RefrigCaseRestockingSchedName_optional SimRefrigSysElem_RefrigCaseRestockingSchedName_;
        SimRefrigSysElem_CaseCreditFractSchedName_optional SimRefrigSysElem_CaseCreditFractSchedName_;
        SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_optional SimRefrigSysElem_DesignEvapTempOrBrineInletTemp_;
        SimRefrigSysElem_AverageRefrigChargeInvent_optional SimRefrigSysElem_AverageRefrigChargeInvent_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_REFRIGERATION_SYSTEM_ELEMENT_REFRIGERATED_CASE_HXX
