// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_COOLING_TOWER_SINGLE_SPEED_HXX
#define SIM_FLOW_PLANT_COOLING_TOWER_SINGLE_SPEED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_CoolingTower_SingleSpeed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_coolingtower.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowPlant_CoolingTower_SingleSpeed: public ::namespaces::Sim::MepModel::SimFlowPlant_CoolingTower
      {
        public:
        // SimFlowPlant_WaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_WaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_WaterInletNodeName_type > SimFlowPlant_WaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_WaterInletNodeName_type, char > SimFlowPlant_WaterInletNodeName_traits;

        const SimFlowPlant_WaterInletNodeName_optional&
        SimFlowPlant_WaterInletNodeName () const;

        SimFlowPlant_WaterInletNodeName_optional&
        SimFlowPlant_WaterInletNodeName ();

        void
        SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_type& x);

        void
        SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_optional& x);

        void
        SimFlowPlant_WaterInletNodeName (::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > p);

        // SimFlowPlant_WaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_WaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_WaterOutletNodeName_type > SimFlowPlant_WaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_WaterOutletNodeName_type, char > SimFlowPlant_WaterOutletNodeName_traits;

        const SimFlowPlant_WaterOutletNodeName_optional&
        SimFlowPlant_WaterOutletNodeName () const;

        SimFlowPlant_WaterOutletNodeName_optional&
        SimFlowPlant_WaterOutletNodeName ();

        void
        SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_type& x);

        void
        SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_optional& x);

        void
        SimFlowPlant_WaterOutletNodeName (::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > p);

        // SimFlowPlant_NomCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomCap_type > SimFlowPlant_NomCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomCap_traits;

        const SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap () const;

        SimFlowPlant_NomCap_optional&
        SimFlowPlant_NomCap ();

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x);

        void
        SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x);

        // SimFlowPlant_DesignWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignWaterFlowRate_type > SimFlowPlant_DesignWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignWaterFlowRate_traits;

        const SimFlowPlant_DesignWaterFlowRate_optional&
        SimFlowPlant_DesignWaterFlowRate () const;

        SimFlowPlant_DesignWaterFlowRate_optional&
        SimFlowPlant_DesignWaterFlowRate ();

        void
        SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_type& x);

        void
        SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_optional& x);

        // SimFlowPlant_SizingFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_SizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SizingFactor_type > SimFlowPlant_SizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_SizingFactor_traits;

        const SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor () const;

        SimFlowPlant_SizingFactor_optional&
        SimFlowPlant_SizingFactor ();

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x);

        void
        SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x);

        // SimFlowPlant_BasinHeatCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_BasinHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BasinHeatCap_type > SimFlowPlant_BasinHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BasinHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_BasinHeatCap_traits;

        const SimFlowPlant_BasinHeatCap_optional&
        SimFlowPlant_BasinHeatCap () const;

        SimFlowPlant_BasinHeatCap_optional&
        SimFlowPlant_BasinHeatCap ();

        void
        SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_type& x);

        void
        SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_optional& x);

        // SimFlowPlant_BasinHeatSetpointTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_BasinHeatSetpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BasinHeatSetpointTemp_type > SimFlowPlant_BasinHeatSetpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BasinHeatSetpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_BasinHeatSetpointTemp_traits;

        const SimFlowPlant_BasinHeatSetpointTemp_optional&
        SimFlowPlant_BasinHeatSetpointTemp () const;

        SimFlowPlant_BasinHeatSetpointTemp_optional&
        SimFlowPlant_BasinHeatSetpointTemp ();

        void
        SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_type& x);

        void
        SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_optional& x);

        // SimFlowPlant_BasinHeatOperatSchedName
        //
        typedef ::xml_schema::idref SimFlowPlant_BasinHeatOperatSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BasinHeatOperatSchedName_type > SimFlowPlant_BasinHeatOperatSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BasinHeatOperatSchedName_type, char > SimFlowPlant_BasinHeatOperatSchedName_traits;

        const SimFlowPlant_BasinHeatOperatSchedName_optional&
        SimFlowPlant_BasinHeatOperatSchedName () const;

        SimFlowPlant_BasinHeatOperatSchedName_optional&
        SimFlowPlant_BasinHeatOperatSchedName ();

        void
        SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_type& x);

        void
        SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_optional& x);

        void
        SimFlowPlant_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowPlant_BasinHeatOperatSchedName_type > p);

        // SimFlowPlant_DesignAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_DesignAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DesignAirFlowRate_type > SimFlowPlant_DesignAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DesignAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DesignAirFlowRate_traits;

        const SimFlowPlant_DesignAirFlowRate_optional&
        SimFlowPlant_DesignAirFlowRate () const;

        SimFlowPlant_DesignAirFlowRate_optional&
        SimFlowPlant_DesignAirFlowRate ();

        void
        SimFlowPlant_DesignAirFlowRate (const SimFlowPlant_DesignAirFlowRate_type& x);

        void
        SimFlowPlant_DesignAirFlowRate (const SimFlowPlant_DesignAirFlowRate_optional& x);

        // SimFlowPlant_FanPwrAtDesignAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_FanPwrAtDesignAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FanPwrAtDesignAirFlowRate_type > SimFlowPlant_FanPwrAtDesignAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FanPwrAtDesignAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FanPwrAtDesignAirFlowRate_traits;

        const SimFlowPlant_FanPwrAtDesignAirFlowRate_optional&
        SimFlowPlant_FanPwrAtDesignAirFlowRate () const;

        SimFlowPlant_FanPwrAtDesignAirFlowRate_optional&
        SimFlowPlant_FanPwrAtDesignAirFlowRate ();

        void
        SimFlowPlant_FanPwrAtDesignAirFlowRate (const SimFlowPlant_FanPwrAtDesignAirFlowRate_type& x);

        void
        SimFlowPlant_FanPwrAtDesignAirFlowRate (const SimFlowPlant_FanPwrAtDesignAirFlowRate_optional& x);

        // SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_type > SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_traits;

        const SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_optional&
        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate () const;

        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_optional&
        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate ();

        void
        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate (const SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_type& x);

        void
        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate (const SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_optional& x);

        // SimFlowPlant_AirFlowRateFreeConvRegime
        //
        typedef ::xml_schema::double_ SimFlowPlant_AirFlowRateFreeConvRegime_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirFlowRateFreeConvRegime_type > SimFlowPlant_AirFlowRateFreeConvRegime_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirFlowRateFreeConvRegime_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_AirFlowRateFreeConvRegime_traits;

        const SimFlowPlant_AirFlowRateFreeConvRegime_optional&
        SimFlowPlant_AirFlowRateFreeConvRegime () const;

        SimFlowPlant_AirFlowRateFreeConvRegime_optional&
        SimFlowPlant_AirFlowRateFreeConvRegime ();

        void
        SimFlowPlant_AirFlowRateFreeConvRegime (const SimFlowPlant_AirFlowRateFreeConvRegime_type& x);

        void
        SimFlowPlant_AirFlowRateFreeConvRegime (const SimFlowPlant_AirFlowRateFreeConvRegime_optional& x);

        // SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_type > SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_traits;

        const SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_optional&
        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate () const;

        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_optional&
        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate ();

        void
        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate (const SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_type& x);

        void
        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate (const SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_optional& x);

        // SimFlowPlant_PerfInputMeth
        //
        typedef ::xml_schema::string SimFlowPlant_PerfInputMeth_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PerfInputMeth_type > SimFlowPlant_PerfInputMeth_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PerfInputMeth_type, char > SimFlowPlant_PerfInputMeth_traits;

        const SimFlowPlant_PerfInputMeth_optional&
        SimFlowPlant_PerfInputMeth () const;

        SimFlowPlant_PerfInputMeth_optional&
        SimFlowPlant_PerfInputMeth ();

        void
        SimFlowPlant_PerfInputMeth (const SimFlowPlant_PerfInputMeth_type& x);

        void
        SimFlowPlant_PerfInputMeth (const SimFlowPlant_PerfInputMeth_optional& x);

        void
        SimFlowPlant_PerfInputMeth (::std::auto_ptr< SimFlowPlant_PerfInputMeth_type > p);

        // SimFlowPlant_FreeConvCap
        //
        typedef ::xml_schema::double_ SimFlowPlant_FreeConvCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FreeConvCap_type > SimFlowPlant_FreeConvCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FreeConvCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FreeConvCap_traits;

        const SimFlowPlant_FreeConvCap_optional&
        SimFlowPlant_FreeConvCap () const;

        SimFlowPlant_FreeConvCap_optional&
        SimFlowPlant_FreeConvCap ();

        void
        SimFlowPlant_FreeConvCap (const SimFlowPlant_FreeConvCap_type& x);

        void
        SimFlowPlant_FreeConvCap (const SimFlowPlant_FreeConvCap_optional& x);

        // SimFlowPlant_EvapLossMode
        //
        typedef ::xml_schema::string SimFlowPlant_EvapLossMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_EvapLossMode_type > SimFlowPlant_EvapLossMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_EvapLossMode_type, char > SimFlowPlant_EvapLossMode_traits;

        const SimFlowPlant_EvapLossMode_optional&
        SimFlowPlant_EvapLossMode () const;

        SimFlowPlant_EvapLossMode_optional&
        SimFlowPlant_EvapLossMode ();

        void
        SimFlowPlant_EvapLossMode (const SimFlowPlant_EvapLossMode_type& x);

        void
        SimFlowPlant_EvapLossMode (const SimFlowPlant_EvapLossMode_optional& x);

        void
        SimFlowPlant_EvapLossMode (::std::auto_ptr< SimFlowPlant_EvapLossMode_type > p);

        // SimFlowPlant_EvapLossFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_EvapLossFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_EvapLossFactor_type > SimFlowPlant_EvapLossFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_EvapLossFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_EvapLossFactor_traits;

        const SimFlowPlant_EvapLossFactor_optional&
        SimFlowPlant_EvapLossFactor () const;

        SimFlowPlant_EvapLossFactor_optional&
        SimFlowPlant_EvapLossFactor ();

        void
        SimFlowPlant_EvapLossFactor (const SimFlowPlant_EvapLossFactor_type& x);

        void
        SimFlowPlant_EvapLossFactor (const SimFlowPlant_EvapLossFactor_optional& x);

        // SimFlowPlant_DriftLossPercent
        //
        typedef ::xml_schema::double_ SimFlowPlant_DriftLossPercent_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_DriftLossPercent_type > SimFlowPlant_DriftLossPercent_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_DriftLossPercent_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_DriftLossPercent_traits;

        const SimFlowPlant_DriftLossPercent_optional&
        SimFlowPlant_DriftLossPercent () const;

        SimFlowPlant_DriftLossPercent_optional&
        SimFlowPlant_DriftLossPercent ();

        void
        SimFlowPlant_DriftLossPercent (const SimFlowPlant_DriftLossPercent_type& x);

        void
        SimFlowPlant_DriftLossPercent (const SimFlowPlant_DriftLossPercent_optional& x);

        // SimFlowPlant_BlowdownCalcMode
        //
        typedef ::xml_schema::string SimFlowPlant_BlowdownCalcMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BlowdownCalcMode_type > SimFlowPlant_BlowdownCalcMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BlowdownCalcMode_type, char > SimFlowPlant_BlowdownCalcMode_traits;

        const SimFlowPlant_BlowdownCalcMode_optional&
        SimFlowPlant_BlowdownCalcMode () const;

        SimFlowPlant_BlowdownCalcMode_optional&
        SimFlowPlant_BlowdownCalcMode ();

        void
        SimFlowPlant_BlowdownCalcMode (const SimFlowPlant_BlowdownCalcMode_type& x);

        void
        SimFlowPlant_BlowdownCalcMode (const SimFlowPlant_BlowdownCalcMode_optional& x);

        void
        SimFlowPlant_BlowdownCalcMode (::std::auto_ptr< SimFlowPlant_BlowdownCalcMode_type > p);

        // SimFlowPlant_BlowdownConcentrationRatio
        //
        typedef ::xml_schema::double_ SimFlowPlant_BlowdownConcentrationRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BlowdownConcentrationRatio_type > SimFlowPlant_BlowdownConcentrationRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BlowdownConcentrationRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_BlowdownConcentrationRatio_traits;

        const SimFlowPlant_BlowdownConcentrationRatio_optional&
        SimFlowPlant_BlowdownConcentrationRatio () const;

        SimFlowPlant_BlowdownConcentrationRatio_optional&
        SimFlowPlant_BlowdownConcentrationRatio ();

        void
        SimFlowPlant_BlowdownConcentrationRatio (const SimFlowPlant_BlowdownConcentrationRatio_type& x);

        void
        SimFlowPlant_BlowdownConcentrationRatio (const SimFlowPlant_BlowdownConcentrationRatio_optional& x);

        // SimFlowPlant_BlowdownMakeupWaterUsageSchedName
        //
        typedef ::xml_schema::idref SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type > SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type, char > SimFlowPlant_BlowdownMakeupWaterUsageSchedName_traits;

        const SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional&
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName () const;

        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional&
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName ();

        void
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName (const SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type& x);

        void
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName (const SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional& x);

        void
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName (::std::auto_ptr< SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type > p);

        // SimFlowPlant_SupWaterStoTankName
        //
        typedef ::xml_schema::idref SimFlowPlant_SupWaterStoTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_SupWaterStoTankName_type > SimFlowPlant_SupWaterStoTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_SupWaterStoTankName_type, char > SimFlowPlant_SupWaterStoTankName_traits;

        const SimFlowPlant_SupWaterStoTankName_optional&
        SimFlowPlant_SupWaterStoTankName () const;

        SimFlowPlant_SupWaterStoTankName_optional&
        SimFlowPlant_SupWaterStoTankName ();

        void
        SimFlowPlant_SupWaterStoTankName (const SimFlowPlant_SupWaterStoTankName_type& x);

        void
        SimFlowPlant_SupWaterStoTankName (const SimFlowPlant_SupWaterStoTankName_optional& x);

        void
        SimFlowPlant_SupWaterStoTankName (::std::auto_ptr< SimFlowPlant_SupWaterStoTankName_type > p);

        // SimFlowPlant_OutdrAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_OutdrAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_OutdrAirInletNodeName_type > SimFlowPlant_OutdrAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_OutdrAirInletNodeName_type, char > SimFlowPlant_OutdrAirInletNodeName_traits;

        const SimFlowPlant_OutdrAirInletNodeName_optional&
        SimFlowPlant_OutdrAirInletNodeName () const;

        SimFlowPlant_OutdrAirInletNodeName_optional&
        SimFlowPlant_OutdrAirInletNodeName ();

        void
        SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_type& x);

        void
        SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_optional& x);

        void
        SimFlowPlant_OutdrAirInletNodeName (::std::auto_ptr< SimFlowPlant_OutdrAirInletNodeName_type > p);

        // SimFlowPlant_CapCntl
        //
        typedef ::xml_schema::string SimFlowPlant_CapCntl_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CapCntl_type > SimFlowPlant_CapCntl_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CapCntl_type, char > SimFlowPlant_CapCntl_traits;

        const SimFlowPlant_CapCntl_optional&
        SimFlowPlant_CapCntl () const;

        SimFlowPlant_CapCntl_optional&
        SimFlowPlant_CapCntl ();

        void
        SimFlowPlant_CapCntl (const SimFlowPlant_CapCntl_type& x);

        void
        SimFlowPlant_CapCntl (const SimFlowPlant_CapCntl_optional& x);

        void
        SimFlowPlant_CapCntl (::std::auto_ptr< SimFlowPlant_CapCntl_type > p);

        // SimFlowPlant_NumberOfCells
        //
        typedef ::xml_schema::int_ SimFlowPlant_NumberOfCells_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NumberOfCells_type > SimFlowPlant_NumberOfCells_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NumberOfCells_type, char > SimFlowPlant_NumberOfCells_traits;

        const SimFlowPlant_NumberOfCells_optional&
        SimFlowPlant_NumberOfCells () const;

        SimFlowPlant_NumberOfCells_optional&
        SimFlowPlant_NumberOfCells ();

        void
        SimFlowPlant_NumberOfCells (const SimFlowPlant_NumberOfCells_type& x);

        void
        SimFlowPlant_NumberOfCells (const SimFlowPlant_NumberOfCells_optional& x);

        // SimFlowPlant_CellControl
        //
        typedef ::xml_schema::string SimFlowPlant_CellControl_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CellControl_type > SimFlowPlant_CellControl_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CellControl_type, char > SimFlowPlant_CellControl_traits;

        const SimFlowPlant_CellControl_optional&
        SimFlowPlant_CellControl () const;

        SimFlowPlant_CellControl_optional&
        SimFlowPlant_CellControl ();

        void
        SimFlowPlant_CellControl (const SimFlowPlant_CellControl_type& x);

        void
        SimFlowPlant_CellControl (const SimFlowPlant_CellControl_optional& x);

        void
        SimFlowPlant_CellControl (::std::auto_ptr< SimFlowPlant_CellControl_type > p);

        // SimFlowPlant_CellMinWaterFlowRateFraction
        //
        typedef ::xml_schema::double_ SimFlowPlant_CellMinWaterFlowRateFraction_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CellMinWaterFlowRateFraction_type > SimFlowPlant_CellMinWaterFlowRateFraction_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CellMinWaterFlowRateFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_CellMinWaterFlowRateFraction_traits;

        const SimFlowPlant_CellMinWaterFlowRateFraction_optional&
        SimFlowPlant_CellMinWaterFlowRateFraction () const;

        SimFlowPlant_CellMinWaterFlowRateFraction_optional&
        SimFlowPlant_CellMinWaterFlowRateFraction ();

        void
        SimFlowPlant_CellMinWaterFlowRateFraction (const SimFlowPlant_CellMinWaterFlowRateFraction_type& x);

        void
        SimFlowPlant_CellMinWaterFlowRateFraction (const SimFlowPlant_CellMinWaterFlowRateFraction_optional& x);

        // SimFlowPlant_CellMaxWaterFlowRateFraction
        //
        typedef ::xml_schema::double_ SimFlowPlant_CellMaxWaterFlowRateFraction_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CellMaxWaterFlowRateFraction_type > SimFlowPlant_CellMaxWaterFlowRateFraction_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CellMaxWaterFlowRateFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_CellMaxWaterFlowRateFraction_traits;

        const SimFlowPlant_CellMaxWaterFlowRateFraction_optional&
        SimFlowPlant_CellMaxWaterFlowRateFraction () const;

        SimFlowPlant_CellMaxWaterFlowRateFraction_optional&
        SimFlowPlant_CellMaxWaterFlowRateFraction ();

        void
        SimFlowPlant_CellMaxWaterFlowRateFraction (const SimFlowPlant_CellMaxWaterFlowRateFraction_type& x);

        void
        SimFlowPlant_CellMaxWaterFlowRateFraction (const SimFlowPlant_CellMaxWaterFlowRateFraction_optional& x);

        // Constructors.
        //
        SimFlowPlant_CoolingTower_SingleSpeed (const RefId_type&);

        SimFlowPlant_CoolingTower_SingleSpeed (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        SimFlowPlant_CoolingTower_SingleSpeed (const SimFlowPlant_CoolingTower_SingleSpeed& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        virtual SimFlowPlant_CoolingTower_SingleSpeed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_CoolingTower_SingleSpeed&
        operator= (const SimFlowPlant_CoolingTower_SingleSpeed& x);

        virtual 
        ~SimFlowPlant_CoolingTower_SingleSpeed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_WaterInletNodeName_optional SimFlowPlant_WaterInletNodeName_;
        SimFlowPlant_WaterOutletNodeName_optional SimFlowPlant_WaterOutletNodeName_;
        SimFlowPlant_NomCap_optional SimFlowPlant_NomCap_;
        SimFlowPlant_DesignWaterFlowRate_optional SimFlowPlant_DesignWaterFlowRate_;
        SimFlowPlant_SizingFactor_optional SimFlowPlant_SizingFactor_;
        SimFlowPlant_BasinHeatCap_optional SimFlowPlant_BasinHeatCap_;
        SimFlowPlant_BasinHeatSetpointTemp_optional SimFlowPlant_BasinHeatSetpointTemp_;
        SimFlowPlant_BasinHeatOperatSchedName_optional SimFlowPlant_BasinHeatOperatSchedName_;
        SimFlowPlant_DesignAirFlowRate_optional SimFlowPlant_DesignAirFlowRate_;
        SimFlowPlant_FanPwrAtDesignAirFlowRate_optional SimFlowPlant_FanPwrAtDesignAirFlowRate_;
        SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_optional SimFlowPlant_UFactorTimesAreaValAtDesignAirFlowRate_;
        SimFlowPlant_AirFlowRateFreeConvRegime_optional SimFlowPlant_AirFlowRateFreeConvRegime_;
        SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_optional SimFlowPlant_UFactorTimesAreaValAtFreeConvAirFlowRate_;
        SimFlowPlant_PerfInputMeth_optional SimFlowPlant_PerfInputMeth_;
        SimFlowPlant_FreeConvCap_optional SimFlowPlant_FreeConvCap_;
        SimFlowPlant_EvapLossMode_optional SimFlowPlant_EvapLossMode_;
        SimFlowPlant_EvapLossFactor_optional SimFlowPlant_EvapLossFactor_;
        SimFlowPlant_DriftLossPercent_optional SimFlowPlant_DriftLossPercent_;
        SimFlowPlant_BlowdownCalcMode_optional SimFlowPlant_BlowdownCalcMode_;
        SimFlowPlant_BlowdownConcentrationRatio_optional SimFlowPlant_BlowdownConcentrationRatio_;
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional SimFlowPlant_BlowdownMakeupWaterUsageSchedName_;
        SimFlowPlant_SupWaterStoTankName_optional SimFlowPlant_SupWaterStoTankName_;
        SimFlowPlant_OutdrAirInletNodeName_optional SimFlowPlant_OutdrAirInletNodeName_;
        SimFlowPlant_CapCntl_optional SimFlowPlant_CapCntl_;
        SimFlowPlant_NumberOfCells_optional SimFlowPlant_NumberOfCells_;
        SimFlowPlant_CellControl_optional SimFlowPlant_CellControl_;
        SimFlowPlant_CellMinWaterFlowRateFraction_optional SimFlowPlant_CellMinWaterFlowRateFraction_;
        SimFlowPlant_CellMaxWaterFlowRateFraction_optional SimFlowPlant_CellMaxWaterFlowRateFraction_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_COOLING_TOWER_SINGLE_SPEED_HXX
