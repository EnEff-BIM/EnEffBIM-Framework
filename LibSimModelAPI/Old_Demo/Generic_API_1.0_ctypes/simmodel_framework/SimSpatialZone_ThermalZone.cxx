// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSpatialZone_ThermalZone.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSpatialZone_ThermalZone
      // 

      const SimSpatialZone_ThermalZone::ZoneConditioningRequirement_optional& SimSpatialZone_ThermalZone::
      ZoneConditioningRequirement () const
      {
        return this->ZoneConditioningRequirement_;
      }

      SimSpatialZone_ThermalZone::ZoneConditioningRequirement_optional& SimSpatialZone_ThermalZone::
      ZoneConditioningRequirement ()
      {
        return this->ZoneConditioningRequirement_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneConditioningRequirement (const ZoneConditioningRequirement_type& x)
      {
        this->ZoneConditioningRequirement_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneConditioningRequirement (const ZoneConditioningRequirement_optional& x)
      {
        this->ZoneConditioningRequirement_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneConditioningRequirement (::std::auto_ptr< ZoneConditioningRequirement_type > x)
      {
        this->ZoneConditioningRequirement_.set (x);
      }

      const SimSpatialZone_ThermalZone::HVACSystemType_optional& SimSpatialZone_ThermalZone::
      HVACSystemType () const
      {
        return this->HVACSystemType_;
      }

      SimSpatialZone_ThermalZone::HVACSystemType_optional& SimSpatialZone_ThermalZone::
      HVACSystemType ()
      {
        return this->HVACSystemType_;
      }

      void SimSpatialZone_ThermalZone::
      HVACSystemType (const HVACSystemType_type& x)
      {
        this->HVACSystemType_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      HVACSystemType (const HVACSystemType_optional& x)
      {
        this->HVACSystemType_ = x;
      }

      void SimSpatialZone_ThermalZone::
      HVACSystemType (::std::auto_ptr< HVACSystemType_type > x)
      {
        this->HVACSystemType_.set (x);
      }

      const SimSpatialZone_ThermalZone::UserDefinedHVACSystemType_optional& SimSpatialZone_ThermalZone::
      UserDefinedHVACSystemType () const
      {
        return this->UserDefinedHVACSystemType_;
      }

      SimSpatialZone_ThermalZone::UserDefinedHVACSystemType_optional& SimSpatialZone_ThermalZone::
      UserDefinedHVACSystemType ()
      {
        return this->UserDefinedHVACSystemType_;
      }

      void SimSpatialZone_ThermalZone::
      UserDefinedHVACSystemType (const UserDefinedHVACSystemType_type& x)
      {
        this->UserDefinedHVACSystemType_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      UserDefinedHVACSystemType (const UserDefinedHVACSystemType_optional& x)
      {
        this->UserDefinedHVACSystemType_ = x;
      }

      void SimSpatialZone_ThermalZone::
      UserDefinedHVACSystemType (::std::auto_ptr< UserDefinedHVACSystemType_type > x)
      {
        this->UserDefinedHVACSystemType_.set (x);
      }

      const SimSpatialZone_ThermalZone::InfiltrationRate_optional& SimSpatialZone_ThermalZone::
      InfiltrationRate () const
      {
        return this->InfiltrationRate_;
      }

      SimSpatialZone_ThermalZone::InfiltrationRate_optional& SimSpatialZone_ThermalZone::
      InfiltrationRate ()
      {
        return this->InfiltrationRate_;
      }

      void SimSpatialZone_ThermalZone::
      InfiltrationRate (const InfiltrationRate_type& x)
      {
        this->InfiltrationRate_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      InfiltrationRate (const InfiltrationRate_optional& x)
      {
        this->InfiltrationRate_ = x;
      }

      const SimSpatialZone_ThermalZone::IsDaylitZone_optional& SimSpatialZone_ThermalZone::
      IsDaylitZone () const
      {
        return this->IsDaylitZone_;
      }

      SimSpatialZone_ThermalZone::IsDaylitZone_optional& SimSpatialZone_ThermalZone::
      IsDaylitZone ()
      {
        return this->IsDaylitZone_;
      }

      void SimSpatialZone_ThermalZone::
      IsDaylitZone (const IsDaylitZone_type& x)
      {
        this->IsDaylitZone_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      IsDaylitZone (const IsDaylitZone_optional& x)
      {
        this->IsDaylitZone_ = x;
      }

      const SimSpatialZone_ThermalZone::NumberOfDaylightingSensors_optional& SimSpatialZone_ThermalZone::
      NumberOfDaylightingSensors () const
      {
        return this->NumberOfDaylightingSensors_;
      }

      SimSpatialZone_ThermalZone::NumberOfDaylightingSensors_optional& SimSpatialZone_ThermalZone::
      NumberOfDaylightingSensors ()
      {
        return this->NumberOfDaylightingSensors_;
      }

      void SimSpatialZone_ThermalZone::
      NumberOfDaylightingSensors (const NumberOfDaylightingSensors_type& x)
      {
        this->NumberOfDaylightingSensors_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      NumberOfDaylightingSensors (const NumberOfDaylightingSensors_optional& x)
      {
        this->NumberOfDaylightingSensors_ = x;
      }

      const SimSpatialZone_ThermalZone::DesignIlluminance_optional& SimSpatialZone_ThermalZone::
      DesignIlluminance () const
      {
        return this->DesignIlluminance_;
      }

      SimSpatialZone_ThermalZone::DesignIlluminance_optional& SimSpatialZone_ThermalZone::
      DesignIlluminance ()
      {
        return this->DesignIlluminance_;
      }

      void SimSpatialZone_ThermalZone::
      DesignIlluminance (const DesignIlluminance_type& x)
      {
        this->DesignIlluminance_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      DesignIlluminance (const DesignIlluminance_optional& x)
      {
        this->DesignIlluminance_ = x;
      }

      const SimSpatialZone_ThermalZone::LightingControlsType_optional& SimSpatialZone_ThermalZone::
      LightingControlsType () const
      {
        return this->LightingControlsType_;
      }

      SimSpatialZone_ThermalZone::LightingControlsType_optional& SimSpatialZone_ThermalZone::
      LightingControlsType ()
      {
        return this->LightingControlsType_;
      }

      void SimSpatialZone_ThermalZone::
      LightingControlsType (const LightingControlsType_type& x)
      {
        this->LightingControlsType_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      LightingControlsType (const LightingControlsType_optional& x)
      {
        this->LightingControlsType_ = x;
      }

      void SimSpatialZone_ThermalZone::
      LightingControlsType (::std::auto_ptr< LightingControlsType_type > x)
      {
        this->LightingControlsType_.set (x);
      }

      const SimSpatialZone_ThermalZone::ClassRef_ZoneTypeEnergy_optional& SimSpatialZone_ThermalZone::
      ClassRef_ZoneTypeEnergy () const
      {
        return this->ClassRef_ZoneTypeEnergy_;
      }

      SimSpatialZone_ThermalZone::ClassRef_ZoneTypeEnergy_optional& SimSpatialZone_ThermalZone::
      ClassRef_ZoneTypeEnergy ()
      {
        return this->ClassRef_ZoneTypeEnergy_;
      }

      void SimSpatialZone_ThermalZone::
      ClassRef_ZoneTypeEnergy (const ClassRef_ZoneTypeEnergy_type& x)
      {
        this->ClassRef_ZoneTypeEnergy_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ClassRef_ZoneTypeEnergy (const ClassRef_ZoneTypeEnergy_optional& x)
      {
        this->ClassRef_ZoneTypeEnergy_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ClassRef_ZoneTypeEnergy (::std::auto_ptr< ClassRef_ZoneTypeEnergy_type > x)
      {
        this->ClassRef_ZoneTypeEnergy_.set (x);
      }

      const SimSpatialZone_ThermalZone::AssignedSchedule_optional& SimSpatialZone_ThermalZone::
      AssignedSchedule () const
      {
        return this->AssignedSchedule_;
      }

      SimSpatialZone_ThermalZone::AssignedSchedule_optional& SimSpatialZone_ThermalZone::
      AssignedSchedule ()
      {
        return this->AssignedSchedule_;
      }

      void SimSpatialZone_ThermalZone::
      AssignedSchedule (const AssignedSchedule_type& x)
      {
        this->AssignedSchedule_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      AssignedSchedule (const AssignedSchedule_optional& x)
      {
        this->AssignedSchedule_ = x;
      }

      void SimSpatialZone_ThermalZone::
      AssignedSchedule (::std::auto_ptr< AssignedSchedule_type > x)
      {
        this->AssignedSchedule_.set (x);
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_DirRelNorth_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_DirRelNorth () const
      {
        return this->SimSpatialZone_DirRelNorth_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_DirRelNorth_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_DirRelNorth ()
      {
        return this->SimSpatialZone_DirRelNorth_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_DirRelNorth (const SimSpatialZone_DirRelNorth_type& x)
      {
        this->SimSpatialZone_DirRelNorth_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_DirRelNorth (const SimSpatialZone_DirRelNorth_optional& x)
      {
        this->SimSpatialZone_DirRelNorth_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_XOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_XOrigin () const
      {
        return this->SimSpatialZone_XOrigin_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_XOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_XOrigin ()
      {
        return this->SimSpatialZone_XOrigin_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_XOrigin (const SimSpatialZone_XOrigin_type& x)
      {
        this->SimSpatialZone_XOrigin_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_XOrigin (const SimSpatialZone_XOrigin_optional& x)
      {
        this->SimSpatialZone_XOrigin_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_YOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_YOrigin () const
      {
        return this->SimSpatialZone_YOrigin_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_YOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_YOrigin ()
      {
        return this->SimSpatialZone_YOrigin_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_YOrigin (const SimSpatialZone_YOrigin_type& x)
      {
        this->SimSpatialZone_YOrigin_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_YOrigin (const SimSpatialZone_YOrigin_optional& x)
      {
        this->SimSpatialZone_YOrigin_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_ZOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZOrigin () const
      {
        return this->SimSpatialZone_ZOrigin_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_ZOrigin_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZOrigin ()
      {
        return this->SimSpatialZone_ZOrigin_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZOrigin (const SimSpatialZone_ZOrigin_type& x)
      {
        this->SimSpatialZone_ZOrigin_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZOrigin (const SimSpatialZone_ZOrigin_optional& x)
      {
        this->SimSpatialZone_ZOrigin_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_Type_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Type () const
      {
        return this->SimSpatialZone_Type_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_Type_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Type ()
      {
        return this->SimSpatialZone_Type_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Type (const SimSpatialZone_Type_type& x)
      {
        this->SimSpatialZone_Type_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Type (const SimSpatialZone_Type_optional& x)
      {
        this->SimSpatialZone_Type_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_Mult_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Mult () const
      {
        return this->SimSpatialZone_Mult_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_Mult_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Mult ()
      {
        return this->SimSpatialZone_Mult_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Mult (const SimSpatialZone_Mult_type& x)
      {
        this->SimSpatialZone_Mult_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Mult (const SimSpatialZone_Mult_optional& x)
      {
        this->SimSpatialZone_Mult_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_CeilingHt_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_CeilingHt () const
      {
        return this->SimSpatialZone_CeilingHt_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_CeilingHt_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_CeilingHt ()
      {
        return this->SimSpatialZone_CeilingHt_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_CeilingHt (const SimSpatialZone_CeilingHt_type& x)
      {
        this->SimSpatialZone_CeilingHt_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_CeilingHt (const SimSpatialZone_CeilingHt_optional& x)
      {
        this->SimSpatialZone_CeilingHt_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_Volume_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Volume () const
      {
        return this->SimSpatialZone_Volume_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_Volume_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_Volume ()
      {
        return this->SimSpatialZone_Volume_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Volume (const SimSpatialZone_Volume_type& x)
      {
        this->SimSpatialZone_Volume_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_Volume (const SimSpatialZone_Volume_optional& x)
      {
        this->SimSpatialZone_Volume_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_FloorArea_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_FloorArea () const
      {
        return this->SimSpatialZone_FloorArea_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_FloorArea_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_FloorArea ()
      {
        return this->SimSpatialZone_FloorArea_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_FloorArea (const SimSpatialZone_FloorArea_type& x)
      {
        this->SimSpatialZone_FloorArea_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_FloorArea (const SimSpatialZone_FloorArea_optional& x)
      {
        this->SimSpatialZone_FloorArea_ = x;
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_ZoneInsideConvAlgo_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneInsideConvAlgo () const
      {
        return this->SimSpatialZone_ZoneInsideConvAlgo_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_ZoneInsideConvAlgo_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneInsideConvAlgo ()
      {
        return this->SimSpatialZone_ZoneInsideConvAlgo_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneInsideConvAlgo (const SimSpatialZone_ZoneInsideConvAlgo_type& x)
      {
        this->SimSpatialZone_ZoneInsideConvAlgo_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneInsideConvAlgo (const SimSpatialZone_ZoneInsideConvAlgo_optional& x)
      {
        this->SimSpatialZone_ZoneInsideConvAlgo_ = x;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneInsideConvAlgo (::std::auto_ptr< SimSpatialZone_ZoneInsideConvAlgo_type > x)
      {
        this->SimSpatialZone_ZoneInsideConvAlgo_.set (x);
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_ZoneOutsdConvAlgo_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneOutsdConvAlgo () const
      {
        return this->SimSpatialZone_ZoneOutsdConvAlgo_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_ZoneOutsdConvAlgo_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneOutsdConvAlgo ()
      {
        return this->SimSpatialZone_ZoneOutsdConvAlgo_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneOutsdConvAlgo (const SimSpatialZone_ZoneOutsdConvAlgo_type& x)
      {
        this->SimSpatialZone_ZoneOutsdConvAlgo_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneOutsdConvAlgo (const SimSpatialZone_ZoneOutsdConvAlgo_optional& x)
      {
        this->SimSpatialZone_ZoneOutsdConvAlgo_ = x;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_ZoneOutsdConvAlgo (::std::auto_ptr< SimSpatialZone_ZoneOutsdConvAlgo_type > x)
      {
        this->SimSpatialZone_ZoneOutsdConvAlgo_.set (x);
      }

      const SimSpatialZone_ThermalZone::SimSpatialZone_PartTotalFlrArea_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_PartTotalFlrArea () const
      {
        return this->SimSpatialZone_PartTotalFlrArea_;
      }

      SimSpatialZone_ThermalZone::SimSpatialZone_PartTotalFlrArea_optional& SimSpatialZone_ThermalZone::
      SimSpatialZone_PartTotalFlrArea ()
      {
        return this->SimSpatialZone_PartTotalFlrArea_;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_PartTotalFlrArea (const SimSpatialZone_PartTotalFlrArea_type& x)
      {
        this->SimSpatialZone_PartTotalFlrArea_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_PartTotalFlrArea (const SimSpatialZone_PartTotalFlrArea_optional& x)
      {
        this->SimSpatialZone_PartTotalFlrArea_ = x;
      }

      void SimSpatialZone_ThermalZone::
      SimSpatialZone_PartTotalFlrArea (::std::auto_ptr< SimSpatialZone_PartTotalFlrArea_type > x)
      {
        this->SimSpatialZone_PartTotalFlrArea_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ZoneName_optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ZoneName () const
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ZoneName_;
      }

      SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ZoneName_optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ZoneName ()
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ZoneName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ZoneName (const ZoneProp_UserViewFactors_bySurfName_ZoneName_type& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ZoneName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ZoneName (const ZoneProp_UserViewFactors_bySurfName_ZoneName_optional& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ZoneName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ZoneName (::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ZoneName_type > x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ZoneName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_ () const
      {
        return this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__;
      }

      SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_ ()
      {
        return this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_ (const ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__type& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_ (const ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__optional& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_ (::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__type > x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_ () const
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__;
      }

      SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_ ()
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_ (const ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__type& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_ (const ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__optional& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_ (::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__type > x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_ () const
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__;
      }

      SimSpatialZone_ThermalZone::ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__optional& SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_ ()
      {
        return this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_ (const ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__type& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_ (const ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__optional& x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_ (::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__type > x)
      {
        this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__.set (x);
      }

      const SimSpatialZone_ThermalZone::RmAirModelType_RoomAiTherModType_optional& SimSpatialZone_ThermalZone::
      RmAirModelType_RoomAiTherModType () const
      {
        return this->RmAirModelType_RoomAiTherModType_;
      }

      SimSpatialZone_ThermalZone::RmAirModelType_RoomAiTherModType_optional& SimSpatialZone_ThermalZone::
      RmAirModelType_RoomAiTherModType ()
      {
        return this->RmAirModelType_RoomAiTherModType_;
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_RoomAiTherModType (const RmAirModelType_RoomAiTherModType_type& x)
      {
        this->RmAirModelType_RoomAiTherModType_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_RoomAiTherModType (const RmAirModelType_RoomAiTherModType_optional& x)
      {
        this->RmAirModelType_RoomAiTherModType_ = x;
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_RoomAiTherModType (::std::auto_ptr< RmAirModelType_RoomAiTherModType_type > x)
      {
        this->RmAirModelType_RoomAiTherModType_.set (x);
      }

      const SimSpatialZone_ThermalZone::RmAirModelType_AirTempCplngStrat_optional& SimSpatialZone_ThermalZone::
      RmAirModelType_AirTempCplngStrat () const
      {
        return this->RmAirModelType_AirTempCplngStrat_;
      }

      SimSpatialZone_ThermalZone::RmAirModelType_AirTempCplngStrat_optional& SimSpatialZone_ThermalZone::
      RmAirModelType_AirTempCplngStrat ()
      {
        return this->RmAirModelType_AirTempCplngStrat_;
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_AirTempCplngStrat (const RmAirModelType_AirTempCplngStrat_type& x)
      {
        this->RmAirModelType_AirTempCplngStrat_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_AirTempCplngStrat (const RmAirModelType_AirTempCplngStrat_optional& x)
      {
        this->RmAirModelType_AirTempCplngStrat_ = x;
      }

      void SimSpatialZone_ThermalZone::
      RmAirModelType_AirTempCplngStrat (::std::auto_ptr< RmAirModelType_AirTempCplngStrat_type > x)
      {
        this->RmAirModelType_AirTempCplngStrat_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_AirBalanceMethod_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_AirBalanceMethod () const
      {
        return this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_;
      }

      SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_AirBalanceMethod_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_AirBalanceMethod ()
      {
        return this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_AirBalanceMethod (const ZoneAirBalance_OutdoorAir_AirBalanceMethod_type& x)
      {
        this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_AirBalanceMethod (const ZoneAirBalance_OutdoorAir_AirBalanceMethod_optional& x)
      {
        this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_AirBalanceMethod (::std::auto_ptr< ZoneAirBalance_OutdoorAir_AirBalanceMethod_type > x)
      {
        this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak () const
      {
        return this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_;
      }

      SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak ()
      {
        return this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak (const ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_type& x)
      {
        this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak (const ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_optional& x)
      {
        this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_ = x;
      }

      const SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName () const
      {
        return this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_;
      }

      SimSpatialZone_ThermalZone::ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_optional& SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName ()
      {
        return this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName (const ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_type& x)
      {
        this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName (const ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_optional& x)
      {
        this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName (::std::auto_ptr< ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_type > x)
      {
        this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneCondEqmtListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneCondEqmtListName () const
      {
        return this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_;
      }

      SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneCondEqmtListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneCondEqmtListName ()
      {
        return this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneCondEqmtListName (const ZoneHVAC_EquipConnections_ZoneCondEqmtListName_type& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneCondEqmtListName (const ZoneHVAC_EquipConnections_ZoneCondEqmtListName_optional& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneCondEqmtListName (::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneCondEqmtListName_type > x)
      {
        this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName () const
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_;
      }

      SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName ()
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName (const ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_type& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName (const ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_optional& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName (::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_type > x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName () const
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_;
      }

      SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName ()
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName (const ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_type& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName (const ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_optional& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName (::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_type > x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirNodeName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirNodeName () const
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirNodeName_;
      }

      SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneAirNodeName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirNodeName ()
      {
        return this->ZoneHVAC_EquipConnections_ZoneAirNodeName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirNodeName (const ZoneHVAC_EquipConnections_ZoneAirNodeName_type& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirNodeName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirNodeName (const ZoneHVAC_EquipConnections_ZoneAirNodeName_optional& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirNodeName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneAirNodeName (::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirNodeName_type > x)
      {
        this->ZoneHVAC_EquipConnections_ZoneAirNodeName_.set (x);
      }

      const SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneReturnAirNodeName () const
      {
        return this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_;
      }

      SimSpatialZone_ThermalZone::ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_optional& SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneReturnAirNodeName ()
      {
        return this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneReturnAirNodeName (const ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_type& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_.set (x);
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneReturnAirNodeName (const ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_optional& x)
      {
        this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_ = x;
      }

      void SimSpatialZone_ThermalZone::
      ZoneHVAC_EquipConnections_ZoneReturnAirNodeName (::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_type > x)
      {
        this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSpatialZone_ThermalZone
      //

      SimSpatialZone_ThermalZone::
      SimSpatialZone_ThermalZone (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSpatialZone (RefId),
        ZoneConditioningRequirement_ (this),
        HVACSystemType_ (this),
        UserDefinedHVACSystemType_ (this),
        InfiltrationRate_ (this),
        IsDaylitZone_ (this),
        NumberOfDaylightingSensors_ (this),
        DesignIlluminance_ (this),
        LightingControlsType_ (this),
        ClassRef_ZoneTypeEnergy_ (this),
        AssignedSchedule_ (this),
        SimSpatialZone_DirRelNorth_ (this),
        SimSpatialZone_XOrigin_ (this),
        SimSpatialZone_YOrigin_ (this),
        SimSpatialZone_ZOrigin_ (this),
        SimSpatialZone_Type_ (this),
        SimSpatialZone_Mult_ (this),
        SimSpatialZone_CeilingHt_ (this),
        SimSpatialZone_Volume_ (this),
        SimSpatialZone_FloorArea_ (this),
        SimSpatialZone_ZoneInsideConvAlgo_ (this),
        SimSpatialZone_ZoneOutsdConvAlgo_ (this),
        SimSpatialZone_PartTotalFlrArea_ (this),
        ZoneProp_UserViewFactors_bySurfName_ZoneName_ (this),
        ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__ (this),
        ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__ (this),
        ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__ (this),
        RmAirModelType_RoomAiTherModType_ (this),
        RmAirModelType_AirTempCplngStrat_ (this),
        ZoneAirBalance_OutdoorAir_AirBalanceMethod_ (this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_ (this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_ (this),
        ZoneHVAC_EquipConnections_ZoneCondEqmtListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirNodeName_ (this),
        ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_ (this)
      {
      }

      SimSpatialZone_ThermalZone::
      SimSpatialZone_ThermalZone (const SimSpatialZone_ThermalZone& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpatialZone (x, f, c),
        ZoneConditioningRequirement_ (x.ZoneConditioningRequirement_, f, this),
        HVACSystemType_ (x.HVACSystemType_, f, this),
        UserDefinedHVACSystemType_ (x.UserDefinedHVACSystemType_, f, this),
        InfiltrationRate_ (x.InfiltrationRate_, f, this),
        IsDaylitZone_ (x.IsDaylitZone_, f, this),
        NumberOfDaylightingSensors_ (x.NumberOfDaylightingSensors_, f, this),
        DesignIlluminance_ (x.DesignIlluminance_, f, this),
        LightingControlsType_ (x.LightingControlsType_, f, this),
        ClassRef_ZoneTypeEnergy_ (x.ClassRef_ZoneTypeEnergy_, f, this),
        AssignedSchedule_ (x.AssignedSchedule_, f, this),
        SimSpatialZone_DirRelNorth_ (x.SimSpatialZone_DirRelNorth_, f, this),
        SimSpatialZone_XOrigin_ (x.SimSpatialZone_XOrigin_, f, this),
        SimSpatialZone_YOrigin_ (x.SimSpatialZone_YOrigin_, f, this),
        SimSpatialZone_ZOrigin_ (x.SimSpatialZone_ZOrigin_, f, this),
        SimSpatialZone_Type_ (x.SimSpatialZone_Type_, f, this),
        SimSpatialZone_Mult_ (x.SimSpatialZone_Mult_, f, this),
        SimSpatialZone_CeilingHt_ (x.SimSpatialZone_CeilingHt_, f, this),
        SimSpatialZone_Volume_ (x.SimSpatialZone_Volume_, f, this),
        SimSpatialZone_FloorArea_ (x.SimSpatialZone_FloorArea_, f, this),
        SimSpatialZone_ZoneInsideConvAlgo_ (x.SimSpatialZone_ZoneInsideConvAlgo_, f, this),
        SimSpatialZone_ZoneOutsdConvAlgo_ (x.SimSpatialZone_ZoneOutsdConvAlgo_, f, this),
        SimSpatialZone_PartTotalFlrArea_ (x.SimSpatialZone_PartTotalFlrArea_, f, this),
        ZoneProp_UserViewFactors_bySurfName_ZoneName_ (x.ZoneProp_UserViewFactors_bySurfName_ZoneName_, f, this),
        ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__ (x.ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__, f, this),
        ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__ (x.ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__, f, this),
        ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__ (x.ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__, f, this),
        RmAirModelType_RoomAiTherModType_ (x.RmAirModelType_RoomAiTherModType_, f, this),
        RmAirModelType_AirTempCplngStrat_ (x.RmAirModelType_AirTempCplngStrat_, f, this),
        ZoneAirBalance_OutdoorAir_AirBalanceMethod_ (x.ZoneAirBalance_OutdoorAir_AirBalanceMethod_, f, this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_ (x.ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_, f, this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_ (x.ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_, f, this),
        ZoneHVAC_EquipConnections_ZoneCondEqmtListName_ (x.ZoneHVAC_EquipConnections_ZoneCondEqmtListName_, f, this),
        ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_ (x.ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_, f, this),
        ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_ (x.ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_, f, this),
        ZoneHVAC_EquipConnections_ZoneAirNodeName_ (x.ZoneHVAC_EquipConnections_ZoneAirNodeName_, f, this),
        ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_ (x.ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_, f, this)
      {
      }

      SimSpatialZone_ThermalZone::
      SimSpatialZone_ThermalZone (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpatialZone (e, f | ::xml_schema::flags::base, c),
        ZoneConditioningRequirement_ (this),
        HVACSystemType_ (this),
        UserDefinedHVACSystemType_ (this),
        InfiltrationRate_ (this),
        IsDaylitZone_ (this),
        NumberOfDaylightingSensors_ (this),
        DesignIlluminance_ (this),
        LightingControlsType_ (this),
        ClassRef_ZoneTypeEnergy_ (this),
        AssignedSchedule_ (this),
        SimSpatialZone_DirRelNorth_ (this),
        SimSpatialZone_XOrigin_ (this),
        SimSpatialZone_YOrigin_ (this),
        SimSpatialZone_ZOrigin_ (this),
        SimSpatialZone_Type_ (this),
        SimSpatialZone_Mult_ (this),
        SimSpatialZone_CeilingHt_ (this),
        SimSpatialZone_Volume_ (this),
        SimSpatialZone_FloorArea_ (this),
        SimSpatialZone_ZoneInsideConvAlgo_ (this),
        SimSpatialZone_ZoneOutsdConvAlgo_ (this),
        SimSpatialZone_PartTotalFlrArea_ (this),
        ZoneProp_UserViewFactors_bySurfName_ZoneName_ (this),
        ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__ (this),
        ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__ (this),
        ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__ (this),
        RmAirModelType_RoomAiTherModType_ (this),
        RmAirModelType_AirTempCplngStrat_ (this),
        ZoneAirBalance_OutdoorAir_AirBalanceMethod_ (this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_ (this),
        ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_ (this),
        ZoneHVAC_EquipConnections_ZoneCondEqmtListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_ (this),
        ZoneHVAC_EquipConnections_ZoneAirNodeName_ (this),
        ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSpatialZone_ThermalZone::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSpatialZone::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ZoneConditioningRequirement
          //
          if (n.name () == "ZoneConditioningRequirement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneConditioningRequirement_type > r (
              ZoneConditioningRequirement_traits::create (i, f, this));

            if (!this->ZoneConditioningRequirement_)
            {
              this->ZoneConditioningRequirement_.set (r);
              continue;
            }
          }

          // HVACSystemType
          //
          if (n.name () == "HVACSystemType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< HVACSystemType_type > r (
              HVACSystemType_traits::create (i, f, this));

            if (!this->HVACSystemType_)
            {
              this->HVACSystemType_.set (r);
              continue;
            }
          }

          // UserDefinedHVACSystemType
          //
          if (n.name () == "UserDefinedHVACSystemType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< UserDefinedHVACSystemType_type > r (
              UserDefinedHVACSystemType_traits::create (i, f, this));

            if (!this->UserDefinedHVACSystemType_)
            {
              this->UserDefinedHVACSystemType_.set (r);
              continue;
            }
          }

          // InfiltrationRate
          //
          if (n.name () == "InfiltrationRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->InfiltrationRate_)
            {
              this->InfiltrationRate_.set (InfiltrationRate_traits::create (i, f, this));
              continue;
            }
          }

          // IsDaylitZone
          //
          if (n.name () == "IsDaylitZone" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->IsDaylitZone_)
            {
              this->IsDaylitZone_.set (IsDaylitZone_traits::create (i, f, this));
              continue;
            }
          }

          // NumberOfDaylightingSensors
          //
          if (n.name () == "NumberOfDaylightingSensors" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->NumberOfDaylightingSensors_)
            {
              this->NumberOfDaylightingSensors_.set (NumberOfDaylightingSensors_traits::create (i, f, this));
              continue;
            }
          }

          // DesignIlluminance
          //
          if (n.name () == "DesignIlluminance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DesignIlluminance_)
            {
              this->DesignIlluminance_.set (DesignIlluminance_traits::create (i, f, this));
              continue;
            }
          }

          // LightingControlsType
          //
          if (n.name () == "LightingControlsType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< LightingControlsType_type > r (
              LightingControlsType_traits::create (i, f, this));

            if (!this->LightingControlsType_)
            {
              this->LightingControlsType_.set (r);
              continue;
            }
          }

          // ClassRef_ZoneTypeEnergy
          //
          if (n.name () == "ClassRef_ZoneTypeEnergy" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_ZoneTypeEnergy_type > r (
              ClassRef_ZoneTypeEnergy_traits::create (i, f, this));

            if (!this->ClassRef_ZoneTypeEnergy_)
            {
              this->ClassRef_ZoneTypeEnergy_.set (r);
              continue;
            }
          }

          // AssignedSchedule
          //
          if (n.name () == "AssignedSchedule" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< AssignedSchedule_type > r (
              AssignedSchedule_traits::create (i, f, this));

            if (!this->AssignedSchedule_)
            {
              this->AssignedSchedule_.set (r);
              continue;
            }
          }

          // SimSpatialZone_DirRelNorth
          //
          if (n.name () == "SimSpatialZone_DirRelNorth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_DirRelNorth_)
            {
              this->SimSpatialZone_DirRelNorth_.set (SimSpatialZone_DirRelNorth_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_XOrigin
          //
          if (n.name () == "SimSpatialZone_XOrigin" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_XOrigin_)
            {
              this->SimSpatialZone_XOrigin_.set (SimSpatialZone_XOrigin_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_YOrigin
          //
          if (n.name () == "SimSpatialZone_YOrigin" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_YOrigin_)
            {
              this->SimSpatialZone_YOrigin_.set (SimSpatialZone_YOrigin_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_ZOrigin
          //
          if (n.name () == "SimSpatialZone_ZOrigin" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_ZOrigin_)
            {
              this->SimSpatialZone_ZOrigin_.set (SimSpatialZone_ZOrigin_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_Type
          //
          if (n.name () == "SimSpatialZone_Type" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_Type_)
            {
              this->SimSpatialZone_Type_.set (SimSpatialZone_Type_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_Mult
          //
          if (n.name () == "SimSpatialZone_Mult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_Mult_)
            {
              this->SimSpatialZone_Mult_.set (SimSpatialZone_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_CeilingHt
          //
          if (n.name () == "SimSpatialZone_CeilingHt" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_CeilingHt_)
            {
              this->SimSpatialZone_CeilingHt_.set (SimSpatialZone_CeilingHt_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_Volume
          //
          if (n.name () == "SimSpatialZone_Volume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_Volume_)
            {
              this->SimSpatialZone_Volume_.set (SimSpatialZone_Volume_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_FloorArea
          //
          if (n.name () == "SimSpatialZone_FloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSpatialZone_FloorArea_)
            {
              this->SimSpatialZone_FloorArea_.set (SimSpatialZone_FloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimSpatialZone_ZoneInsideConvAlgo
          //
          if (n.name () == "SimSpatialZone_ZoneInsideConvAlgo" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSpatialZone_ZoneInsideConvAlgo_type > r (
              SimSpatialZone_ZoneInsideConvAlgo_traits::create (i, f, this));

            if (!this->SimSpatialZone_ZoneInsideConvAlgo_)
            {
              this->SimSpatialZone_ZoneInsideConvAlgo_.set (r);
              continue;
            }
          }

          // SimSpatialZone_ZoneOutsdConvAlgo
          //
          if (n.name () == "SimSpatialZone_ZoneOutsdConvAlgo" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSpatialZone_ZoneOutsdConvAlgo_type > r (
              SimSpatialZone_ZoneOutsdConvAlgo_traits::create (i, f, this));

            if (!this->SimSpatialZone_ZoneOutsdConvAlgo_)
            {
              this->SimSpatialZone_ZoneOutsdConvAlgo_.set (r);
              continue;
            }
          }

          // SimSpatialZone_PartTotalFlrArea
          //
          if (n.name () == "SimSpatialZone_PartTotalFlrArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSpatialZone_PartTotalFlrArea_type > r (
              SimSpatialZone_PartTotalFlrArea_traits::create (i, f, this));

            if (!this->SimSpatialZone_PartTotalFlrArea_)
            {
              this->SimSpatialZone_PartTotalFlrArea_.set (r);
              continue;
            }
          }

          // ZoneProp_UserViewFactors_bySurfName_ZoneName
          //
          if (n.name () == "ZoneProp_UserViewFactors_bySurfName_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ZoneName_type > r (
              ZoneProp_UserViewFactors_bySurfName_ZoneName_traits::create (i, f, this));

            if (!this->ZoneProp_UserViewFactors_bySurfName_ZoneName_)
            {
              this->ZoneProp_UserViewFactors_bySurfName_ZoneName_.set (r);
              continue;
            }
          }

          // ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_
          //
          if (n.name () == "ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121_" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__type > r (
              ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__traits::create (i, f, this));

            if (!this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__)
            {
              this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__.set (r);
              continue;
            }
          }

          // ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_
          //
          if (n.name () == "ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121_" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__type > r (
              ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__traits::create (i, f, this));

            if (!this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__)
            {
              this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__.set (r);
              continue;
            }
          }

          // ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_
          //
          if (n.name () == "ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121_" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__type > r (
              ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__traits::create (i, f, this));

            if (!this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__)
            {
              this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__.set (r);
              continue;
            }
          }

          // RmAirModelType_RoomAiTherModType
          //
          if (n.name () == "RmAirModelType_RoomAiTherModType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< RmAirModelType_RoomAiTherModType_type > r (
              RmAirModelType_RoomAiTherModType_traits::create (i, f, this));

            if (!this->RmAirModelType_RoomAiTherModType_)
            {
              this->RmAirModelType_RoomAiTherModType_.set (r);
              continue;
            }
          }

          // RmAirModelType_AirTempCplngStrat
          //
          if (n.name () == "RmAirModelType_AirTempCplngStrat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< RmAirModelType_AirTempCplngStrat_type > r (
              RmAirModelType_AirTempCplngStrat_traits::create (i, f, this));

            if (!this->RmAirModelType_AirTempCplngStrat_)
            {
              this->RmAirModelType_AirTempCplngStrat_.set (r);
              continue;
            }
          }

          // ZoneAirBalance_OutdoorAir_AirBalanceMethod
          //
          if (n.name () == "ZoneAirBalance_OutdoorAir_AirBalanceMethod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneAirBalance_OutdoorAir_AirBalanceMethod_type > r (
              ZoneAirBalance_OutdoorAir_AirBalanceMethod_traits::create (i, f, this));

            if (!this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_)
            {
              this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_.set (r);
              continue;
            }
          }

          // ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak
          //
          if (n.name () == "ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_)
            {
              this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_.set (ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_traits::create (i, f, this));
              continue;
            }
          }

          // ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName
          //
          if (n.name () == "ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_type > r (
              ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_traits::create (i, f, this));

            if (!this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_)
            {
              this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_.set (r);
              continue;
            }
          }

          // ZoneHVAC_EquipConnections_ZoneCondEqmtListName
          //
          if (n.name () == "ZoneHVAC_EquipConnections_ZoneCondEqmtListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneCondEqmtListName_type > r (
              ZoneHVAC_EquipConnections_ZoneCondEqmtListName_traits::create (i, f, this));

            if (!this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_)
            {
              this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_.set (r);
              continue;
            }
          }

          // ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName
          //
          if (n.name () == "ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_type > r (
              ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_traits::create (i, f, this));

            if (!this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_)
            {
              this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_.set (r);
              continue;
            }
          }

          // ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName
          //
          if (n.name () == "ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_type > r (
              ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_traits::create (i, f, this));

            if (!this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_)
            {
              this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_.set (r);
              continue;
            }
          }

          // ZoneHVAC_EquipConnections_ZoneAirNodeName
          //
          if (n.name () == "ZoneHVAC_EquipConnections_ZoneAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneAirNodeName_type > r (
              ZoneHVAC_EquipConnections_ZoneAirNodeName_traits::create (i, f, this));

            if (!this->ZoneHVAC_EquipConnections_ZoneAirNodeName_)
            {
              this->ZoneHVAC_EquipConnections_ZoneAirNodeName_.set (r);
              continue;
            }
          }

          // ZoneHVAC_EquipConnections_ZoneReturnAirNodeName
          //
          if (n.name () == "ZoneHVAC_EquipConnections_ZoneReturnAirNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_type > r (
              ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_traits::create (i, f, this));

            if (!this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_)
            {
              this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSpatialZone_ThermalZone* SimSpatialZone_ThermalZone::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSpatialZone_ThermalZone (*this, f, c);
      }

      SimSpatialZone_ThermalZone& SimSpatialZone_ThermalZone::
      operator= (const SimSpatialZone_ThermalZone& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSpatialZone& > (*this) = x;
          this->ZoneConditioningRequirement_ = x.ZoneConditioningRequirement_;
          this->HVACSystemType_ = x.HVACSystemType_;
          this->UserDefinedHVACSystemType_ = x.UserDefinedHVACSystemType_;
          this->InfiltrationRate_ = x.InfiltrationRate_;
          this->IsDaylitZone_ = x.IsDaylitZone_;
          this->NumberOfDaylightingSensors_ = x.NumberOfDaylightingSensors_;
          this->DesignIlluminance_ = x.DesignIlluminance_;
          this->LightingControlsType_ = x.LightingControlsType_;
          this->ClassRef_ZoneTypeEnergy_ = x.ClassRef_ZoneTypeEnergy_;
          this->AssignedSchedule_ = x.AssignedSchedule_;
          this->SimSpatialZone_DirRelNorth_ = x.SimSpatialZone_DirRelNorth_;
          this->SimSpatialZone_XOrigin_ = x.SimSpatialZone_XOrigin_;
          this->SimSpatialZone_YOrigin_ = x.SimSpatialZone_YOrigin_;
          this->SimSpatialZone_ZOrigin_ = x.SimSpatialZone_ZOrigin_;
          this->SimSpatialZone_Type_ = x.SimSpatialZone_Type_;
          this->SimSpatialZone_Mult_ = x.SimSpatialZone_Mult_;
          this->SimSpatialZone_CeilingHt_ = x.SimSpatialZone_CeilingHt_;
          this->SimSpatialZone_Volume_ = x.SimSpatialZone_Volume_;
          this->SimSpatialZone_FloorArea_ = x.SimSpatialZone_FloorArea_;
          this->SimSpatialZone_ZoneInsideConvAlgo_ = x.SimSpatialZone_ZoneInsideConvAlgo_;
          this->SimSpatialZone_ZoneOutsdConvAlgo_ = x.SimSpatialZone_ZoneOutsdConvAlgo_;
          this->SimSpatialZone_PartTotalFlrArea_ = x.SimSpatialZone_PartTotalFlrArea_;
          this->ZoneProp_UserViewFactors_bySurfName_ZoneName_ = x.ZoneProp_UserViewFactors_bySurfName_ZoneName_;
          this->ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__ = x.ZoneProp_UserViewFactors_bySurfName_FromSurface_1_121__;
          this->ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__ = x.ZoneProp_UserViewFactors_bySurfName_ToSurface_1_121__;
          this->ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__ = x.ZoneProp_UserViewFactors_bySurfName_ViewFactor_1_121__;
          this->RmAirModelType_RoomAiTherModType_ = x.RmAirModelType_RoomAiTherModType_;
          this->RmAirModelType_AirTempCplngStrat_ = x.RmAirModelType_AirTempCplngStrat_;
          this->ZoneAirBalance_OutdoorAir_AirBalanceMethod_ = x.ZoneAirBalance_OutdoorAir_AirBalanceMethod_;
          this->ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_ = x.ZoneAirBalance_OutdoorAir_InducedOutdrAirDueToUnbalDuctLeak_;
          this->ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_ = x.ZoneAirBalance_OutdoorAir_InducedOutdrAirScheduleName_;
          this->ZoneHVAC_EquipConnections_ZoneCondEqmtListName_ = x.ZoneHVAC_EquipConnections_ZoneCondEqmtListName_;
          this->ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_ = x.ZoneHVAC_EquipConnections_ZoneAirInletNodeOrNodeListName_;
          this->ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_ = x.ZoneHVAC_EquipConnections_ZoneAirExhaustNodeOrNodeListName_;
          this->ZoneHVAC_EquipConnections_ZoneAirNodeName_ = x.ZoneHVAC_EquipConnections_ZoneAirNodeName_;
          this->ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_ = x.ZoneHVAC_EquipConnections_ZoneReturnAirNodeName_;
        }

        return *this;
      }

      SimSpatialZone_ThermalZone::
      ~SimSpatialZone_ThermalZone ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

