// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRefrigerationSystemElement_Condenser_AirCooled.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Condenser_AirCooled
      // 

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_EndUseSubCat () const
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_EndUseSubCat ()
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName () const
      {
        return this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName ()
      {
        return this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_type& x)
      {
        this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_optional& x)
      {
        this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName (::std::auto_ptr< SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_type > x)
      {
        this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedSubcoolingTempDiff_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff () const
      {
        return this->SimRefrigSysElem_RatedSubcoolingTempDiff_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedSubcoolingTempDiff_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff ()
      {
        return this->SimRefrigSysElem_RatedSubcoolingTempDiff_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_type& x)
      {
        this->SimRefrigSysElem_RatedSubcoolingTempDiff_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_optional& x)
      {
        this->SimRefrigSysElem_RatedSubcoolingTempDiff_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_CondFanSpeedCntlType_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_CondFanSpeedCntlType () const
      {
        return this->SimRefrigSysElem_CondFanSpeedCntlType_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_CondFanSpeedCntlType_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_CondFanSpeedCntlType ()
      {
        return this->SimRefrigSysElem_CondFanSpeedCntlType_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_CondFanSpeedCntlType (const SimRefrigSysElem_CondFanSpeedCntlType_type& x)
      {
        this->SimRefrigSysElem_CondFanSpeedCntlType_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_CondFanSpeedCntlType (const SimRefrigSysElem_CondFanSpeedCntlType_optional& x)
      {
        this->SimRefrigSysElem_CondFanSpeedCntlType_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_CondFanSpeedCntlType (::std::auto_ptr< SimRefrigSysElem_CondFanSpeedCntlType_type > x)
      {
        this->SimRefrigSysElem_CondFanSpeedCntlType_.set (x);
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedFanPwr () const
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedFanPwr ()
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_type& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_optional& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_MinFanAirFlowRatio () const
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_MinFanAirFlowRatio ()
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_type& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_optional& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_ = x;
      }

      const SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_AirInletNodeNameorZoneName_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_AirInletNodeNameorZoneName () const
      {
        return this->SimRefrigSysElem_AirInletNodeNameorZoneName_;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::SimRefrigSysElem_AirInletNodeNameorZoneName_optional& SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_AirInletNodeNameorZoneName ()
      {
        return this->SimRefrigSysElem_AirInletNodeNameorZoneName_;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_AirInletNodeNameorZoneName (const SimRefrigSysElem_AirInletNodeNameorZoneName_type& x)
      {
        this->SimRefrigSysElem_AirInletNodeNameorZoneName_.set (x);
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_AirInletNodeNameorZoneName (const SimRefrigSysElem_AirInletNodeNameorZoneName_optional& x)
      {
        this->SimRefrigSysElem_AirInletNodeNameorZoneName_ = x;
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigSysElem_AirInletNodeNameorZoneName (::std::auto_ptr< SimRefrigSysElem_AirInletNodeNameorZoneName_type > x)
      {
        this->SimRefrigSysElem_AirInletNodeNameorZoneName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_Condenser_AirCooled
      //

      SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigerationSystemElement_Condenser_AirCooled (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser (RefId),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_ (this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (this),
        SimRefrigSysElem_CondFanSpeedCntlType_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_AirInletNodeNameorZoneName_ (this)
      {
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigerationSystemElement_Condenser_AirCooled (const SimRefrigerationSystemElement_Condenser_AirCooled& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser (x, f, c),
        SimRefrigSysElem_EndUseSubCat_ (x.SimRefrigSysElem_EndUseSubCat_, f, this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_ (x.SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_, f, this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (x.SimRefrigSysElem_RatedSubcoolingTempDiff_, f, this),
        SimRefrigSysElem_CondFanSpeedCntlType_ (x.SimRefrigSysElem_CondFanSpeedCntlType_, f, this),
        SimRefrigSysElem_RatedFanPwr_ (x.SimRefrigSysElem_RatedFanPwr_, f, this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (x.SimRefrigSysElem_MinFanAirFlowRatio_, f, this),
        SimRefrigSysElem_AirInletNodeNameorZoneName_ (x.SimRefrigSysElem_AirInletNodeNameorZoneName_, f, this)
      {
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::
      SimRefrigerationSystemElement_Condenser_AirCooled (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser (e, f | ::xml_schema::flags::base, c),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_ (this),
        SimRefrigSysElem_RatedSubcoolingTempDiff_ (this),
        SimRefrigSysElem_CondFanSpeedCntlType_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_AirInletNodeNameorZoneName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRefrigerationSystemElement_Condenser_AirCooled::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimRefrigSysElem_EndUseSubCat
          //
          if (n.name () == "SimRefrigSysElem_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > r (
              SimRefrigSysElem_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EndUseSubCat_)
            {
              this->SimRefrigSysElem_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName
          //
          if (n.name () == "SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_type > r (
              SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_)
            {
              this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedSubcoolingTempDiff
          //
          if (n.name () == "SimRefrigSysElem_RatedSubcoolingTempDiff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedSubcoolingTempDiff_)
            {
              this->SimRefrigSysElem_RatedSubcoolingTempDiff_.set (SimRefrigSysElem_RatedSubcoolingTempDiff_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_CondFanSpeedCntlType
          //
          if (n.name () == "SimRefrigSysElem_CondFanSpeedCntlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_CondFanSpeedCntlType_type > r (
              SimRefrigSysElem_CondFanSpeedCntlType_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_CondFanSpeedCntlType_)
            {
              this->SimRefrigSysElem_CondFanSpeedCntlType_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedFanPwr
          //
          if (n.name () == "SimRefrigSysElem_RatedFanPwr" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedFanPwr_)
            {
              this->SimRefrigSysElem_RatedFanPwr_.set (SimRefrigSysElem_RatedFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MinFanAirFlowRatio
          //
          if (n.name () == "SimRefrigSysElem_MinFanAirFlowRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimRefrigSysElem_MinFanAirFlowRatio_)
            {
              this->SimRefrigSysElem_MinFanAirFlowRatio_.set (SimRefrigSysElem_MinFanAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_AirInletNodeNameorZoneName
          //
          if (n.name () == "SimRefrigSysElem_AirInletNodeNameorZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_AirInletNodeNameorZoneName_type > r (
              SimRefrigSysElem_AirInletNodeNameorZoneName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_AirInletNodeNameorZoneName_)
            {
              this->SimRefrigSysElem_AirInletNodeNameorZoneName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimRefrigerationSystemElement_Condenser_AirCooled* SimRefrigerationSystemElement_Condenser_AirCooled::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRefrigerationSystemElement_Condenser_AirCooled (*this, f, c);
      }

      SimRefrigerationSystemElement_Condenser_AirCooled& SimRefrigerationSystemElement_Condenser_AirCooled::
      operator= (const SimRefrigerationSystemElement_Condenser_AirCooled& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser& > (*this) = x;
          this->SimRefrigSysElem_EndUseSubCat_ = x.SimRefrigSysElem_EndUseSubCat_;
          this->SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_ = x.SimRefrigSysElem_RatedEffecTotalHeatRejectionRateCurveName_;
          this->SimRefrigSysElem_RatedSubcoolingTempDiff_ = x.SimRefrigSysElem_RatedSubcoolingTempDiff_;
          this->SimRefrigSysElem_CondFanSpeedCntlType_ = x.SimRefrigSysElem_CondFanSpeedCntlType_;
          this->SimRefrigSysElem_RatedFanPwr_ = x.SimRefrigSysElem_RatedFanPwr_;
          this->SimRefrigSysElem_MinFanAirFlowRatio_ = x.SimRefrigSysElem_MinFanAirFlowRatio_;
          this->SimRefrigSysElem_AirInletNodeNameorZoneName_ = x.SimRefrigSysElem_AirInletNodeNameorZoneName_;
        }

        return *this;
      }

      SimRefrigerationSystemElement_Condenser_AirCooled::
      ~SimRefrigerationSystemElement_Condenser_AirCooled ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

