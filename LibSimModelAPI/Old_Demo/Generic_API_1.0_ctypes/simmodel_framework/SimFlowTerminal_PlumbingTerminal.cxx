// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_PlumbingTerminal.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_PlumbingTerminal
      // 

      const SimFlowTerminal_PlumbingTerminal::FlowTerminalObjectType_optional& SimFlowTerminal_PlumbingTerminal::
      FlowTerminalObjectType () const
      {
        return this->FlowTerminalObjectType_;
      }

      SimFlowTerminal_PlumbingTerminal::FlowTerminalObjectType_optional& SimFlowTerminal_PlumbingTerminal::
      FlowTerminalObjectType ()
      {
        return this->FlowTerminalObjectType_;
      }

      void SimFlowTerminal_PlumbingTerminal::
      FlowTerminalObjectType (const FlowTerminalObjectType_type& x)
      {
        this->FlowTerminalObjectType_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal::
      FlowTerminalObjectType (const FlowTerminalObjectType_optional& x)
      {
        this->FlowTerminalObjectType_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal::
      FlowTerminalObjectType (::std::auto_ptr< FlowTerminalObjectType_type > x)
      {
        this->FlowTerminalObjectType_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal::ConstructionType_optional& SimFlowTerminal_PlumbingTerminal::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimFlowTerminal_PlumbingTerminal::ConstructionType_optional& SimFlowTerminal_PlumbingTerminal::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimFlowTerminal_PlumbingTerminal::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal::ClassRef_UniFormat_optional& SimFlowTerminal_PlumbingTerminal::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimFlowTerminal_PlumbingTerminal::ClassRef_UniFormat_optional& SimFlowTerminal_PlumbingTerminal::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimFlowTerminal_PlumbingTerminal::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimFlowTerminal_PlumbingTerminal::VerticalCircSystem_optional& SimFlowTerminal_PlumbingTerminal::
      VerticalCircSystem () const
      {
        return this->VerticalCircSystem_;
      }

      SimFlowTerminal_PlumbingTerminal::VerticalCircSystem_optional& SimFlowTerminal_PlumbingTerminal::
      VerticalCircSystem ()
      {
        return this->VerticalCircSystem_;
      }

      void SimFlowTerminal_PlumbingTerminal::
      VerticalCircSystem (const VerticalCircSystem_type& x)
      {
        this->VerticalCircSystem_.set (x);
      }

      void SimFlowTerminal_PlumbingTerminal::
      VerticalCircSystem (const VerticalCircSystem_optional& x)
      {
        this->VerticalCircSystem_ = x;
      }

      void SimFlowTerminal_PlumbingTerminal::
      VerticalCircSystem (::std::auto_ptr< VerticalCircSystem_type > x)
      {
        this->VerticalCircSystem_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowTerminal_PlumbingTerminal
      //

      SimFlowTerminal_PlumbingTerminal::
      SimFlowTerminal_PlumbingTerminal (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowTerminal (RefId),
        FlowTerminalObjectType_ (this),
        ConstructionType_ (this),
        ClassRef_UniFormat_ (this),
        VerticalCircSystem_ (this)
      {
      }

      SimFlowTerminal_PlumbingTerminal::
      SimFlowTerminal_PlumbingTerminal (const SimFlowTerminal_PlumbingTerminal& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal (x, f, c),
        FlowTerminalObjectType_ (x.FlowTerminalObjectType_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        VerticalCircSystem_ (x.VerticalCircSystem_, f, this)
      {
      }

      SimFlowTerminal_PlumbingTerminal::
      SimFlowTerminal_PlumbingTerminal (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowTerminal (e, f | ::xml_schema::flags::base, c),
        FlowTerminalObjectType_ (this),
        ConstructionType_ (this),
        ClassRef_UniFormat_ (this),
        VerticalCircSystem_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_PlumbingTerminal::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // FlowTerminalObjectType
          //
          if (n.name () == "FlowTerminalObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< FlowTerminalObjectType_type > r (
              FlowTerminalObjectType_traits::create (i, f, this));

            if (!this->FlowTerminalObjectType_)
            {
              this->FlowTerminalObjectType_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // VerticalCircSystem
          //
          if (n.name () == "VerticalCircSystem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< VerticalCircSystem_type > r (
              VerticalCircSystem_traits::create (i, f, this));

            if (!this->VerticalCircSystem_)
            {
              this->VerticalCircSystem_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_PlumbingTerminal* SimFlowTerminal_PlumbingTerminal::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_PlumbingTerminal (*this, f, c);
      }

      SimFlowTerminal_PlumbingTerminal& SimFlowTerminal_PlumbingTerminal::
      operator= (const SimFlowTerminal_PlumbingTerminal& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowTerminal& > (*this) = x;
          this->FlowTerminalObjectType_ = x.FlowTerminalObjectType_;
          this->ConstructionType_ = x.ConstructionType_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->VerticalCircSystem_ = x.VerticalCircSystem_;
        }

        return *this;
      }

      SimFlowTerminal_PlumbingTerminal::
      ~SimFlowTerminal_PlumbingTerminal ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

