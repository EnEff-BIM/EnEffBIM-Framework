// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimResultsVariables.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimResultsVariables
      // 

      const SimResultsVariables::VariableName_optional& SimResultsVariables::
      VariableName () const
      {
        return this->VariableName_;
      }

      SimResultsVariables::VariableName_optional& SimResultsVariables::
      VariableName ()
      {
        return this->VariableName_;
      }

      void SimResultsVariables::
      VariableName (const VariableName_type& x)
      {
        this->VariableName_.set (x);
      }

      void SimResultsVariables::
      VariableName (const VariableName_optional& x)
      {
        this->VariableName_ = x;
      }

      void SimResultsVariables::
      VariableName (::std::auto_ptr< VariableName_type > x)
      {
        this->VariableName_.set (x);
      }

      const SimResultsVariables::VariableType_optional& SimResultsVariables::
      VariableType () const
      {
        return this->VariableType_;
      }

      SimResultsVariables::VariableType_optional& SimResultsVariables::
      VariableType ()
      {
        return this->VariableType_;
      }

      void SimResultsVariables::
      VariableType (const VariableType_type& x)
      {
        this->VariableType_.set (x);
      }

      void SimResultsVariables::
      VariableType (const VariableType_optional& x)
      {
        this->VariableType_ = x;
      }

      void SimResultsVariables::
      VariableType (::std::auto_ptr< VariableType_type > x)
      {
        this->VariableType_.set (x);
      }

      const SimResultsVariables::LegendName_optional& SimResultsVariables::
      LegendName () const
      {
        return this->LegendName_;
      }

      SimResultsVariables::LegendName_optional& SimResultsVariables::
      LegendName ()
      {
        return this->LegendName_;
      }

      void SimResultsVariables::
      LegendName (const LegendName_type& x)
      {
        this->LegendName_.set (x);
      }

      void SimResultsVariables::
      LegendName (const LegendName_optional& x)
      {
        this->LegendName_ = x;
      }

      void SimResultsVariables::
      LegendName (::std::auto_ptr< LegendName_type > x)
      {
        this->LegendName_.set (x);
      }

      const SimResultsVariables::SimulationRun_optional& SimResultsVariables::
      SimulationRun () const
      {
        return this->SimulationRun_;
      }

      SimResultsVariables::SimulationRun_optional& SimResultsVariables::
      SimulationRun ()
      {
        return this->SimulationRun_;
      }

      void SimResultsVariables::
      SimulationRun (const SimulationRun_type& x)
      {
        this->SimulationRun_.set (x);
      }

      void SimResultsVariables::
      SimulationRun (const SimulationRun_optional& x)
      {
        this->SimulationRun_ = x;
      }

      void SimResultsVariables::
      SimulationRun (::std::auto_ptr< SimulationRun_type > x)
      {
        this->SimulationRun_.set (x);
      }

      const SimResultsVariables::KeyValue_optional& SimResultsVariables::
      KeyValue () const
      {
        return this->KeyValue_;
      }

      SimResultsVariables::KeyValue_optional& SimResultsVariables::
      KeyValue ()
      {
        return this->KeyValue_;
      }

      void SimResultsVariables::
      KeyValue (const KeyValue_type& x)
      {
        this->KeyValue_.set (x);
      }

      void SimResultsVariables::
      KeyValue (const KeyValue_optional& x)
      {
        this->KeyValue_ = x;
      }

      void SimResultsVariables::
      KeyValue (::std::auto_ptr< KeyValue_type > x)
      {
        this->KeyValue_.set (x);
      }

      const SimResultsVariables::ReportVariableDDIndex_optional& SimResultsVariables::
      ReportVariableDDIndex () const
      {
        return this->ReportVariableDDIndex_;
      }

      SimResultsVariables::ReportVariableDDIndex_optional& SimResultsVariables::
      ReportVariableDDIndex ()
      {
        return this->ReportVariableDDIndex_;
      }

      void SimResultsVariables::
      ReportVariableDDIndex (const ReportVariableDDIndex_type& x)
      {
        this->ReportVariableDDIndex_.set (x);
      }

      void SimResultsVariables::
      ReportVariableDDIndex (const ReportVariableDDIndex_optional& x)
      {
        this->ReportVariableDDIndex_ = x;
      }

      const SimResultsVariables::FillColor_optional& SimResultsVariables::
      FillColor () const
      {
        return this->FillColor_;
      }

      SimResultsVariables::FillColor_optional& SimResultsVariables::
      FillColor ()
      {
        return this->FillColor_;
      }

      void SimResultsVariables::
      FillColor (const FillColor_type& x)
      {
        this->FillColor_.set (x);
      }

      void SimResultsVariables::
      FillColor (const FillColor_optional& x)
      {
        this->FillColor_ = x;
      }

      void SimResultsVariables::
      FillColor (::std::auto_ptr< FillColor_type > x)
      {
        this->FillColor_.set (x);
      }

      const SimResultsVariables::FillColorTransparency_optional& SimResultsVariables::
      FillColorTransparency () const
      {
        return this->FillColorTransparency_;
      }

      SimResultsVariables::FillColorTransparency_optional& SimResultsVariables::
      FillColorTransparency ()
      {
        return this->FillColorTransparency_;
      }

      void SimResultsVariables::
      FillColorTransparency (const FillColorTransparency_type& x)
      {
        this->FillColorTransparency_.set (x);
      }

      void SimResultsVariables::
      FillColorTransparency (const FillColorTransparency_optional& x)
      {
        this->FillColorTransparency_ = x;
      }

      const SimResultsVariables::BorderColor_optional& SimResultsVariables::
      BorderColor () const
      {
        return this->BorderColor_;
      }

      SimResultsVariables::BorderColor_optional& SimResultsVariables::
      BorderColor ()
      {
        return this->BorderColor_;
      }

      void SimResultsVariables::
      BorderColor (const BorderColor_type& x)
      {
        this->BorderColor_.set (x);
      }

      void SimResultsVariables::
      BorderColor (const BorderColor_optional& x)
      {
        this->BorderColor_ = x;
      }

      void SimResultsVariables::
      BorderColor (::std::auto_ptr< BorderColor_type > x)
      {
        this->BorderColor_.set (x);
      }

      const SimResultsVariables::ShowLabels_optional& SimResultsVariables::
      ShowLabels () const
      {
        return this->ShowLabels_;
      }

      SimResultsVariables::ShowLabels_optional& SimResultsVariables::
      ShowLabels ()
      {
        return this->ShowLabels_;
      }

      void SimResultsVariables::
      ShowLabels (const ShowLabels_type& x)
      {
        this->ShowLabels_.set (x);
      }

      void SimResultsVariables::
      ShowLabels (const ShowLabels_optional& x)
      {
        this->ShowLabels_ = x;
      }

      const SimResultsVariables::Environment_optional& SimResultsVariables::
      Environment () const
      {
        return this->Environment_;
      }

      SimResultsVariables::Environment_optional& SimResultsVariables::
      Environment ()
      {
        return this->Environment_;
      }

      void SimResultsVariables::
      Environment (const Environment_type& x)
      {
        this->Environment_.set (x);
      }

      void SimResultsVariables::
      Environment (const Environment_optional& x)
      {
        this->Environment_ = x;
      }

      void SimResultsVariables::
      Environment (::std::auto_ptr< Environment_type > x)
      {
        this->Environment_.set (x);
      }

      const SimResultsVariables::AlternativeName_optional& SimResultsVariables::
      AlternativeName () const
      {
        return this->AlternativeName_;
      }

      SimResultsVariables::AlternativeName_optional& SimResultsVariables::
      AlternativeName ()
      {
        return this->AlternativeName_;
      }

      void SimResultsVariables::
      AlternativeName (const AlternativeName_type& x)
      {
        this->AlternativeName_.set (x);
      }

      void SimResultsVariables::
      AlternativeName (const AlternativeName_optional& x)
      {
        this->AlternativeName_ = x;
      }

      void SimResultsVariables::
      AlternativeName (::std::auto_ptr< AlternativeName_type > x)
      {
        this->AlternativeName_.set (x);
      }

      const SimResultsVariables::ConfigurationName_optional& SimResultsVariables::
      ConfigurationName () const
      {
        return this->ConfigurationName_;
      }

      SimResultsVariables::ConfigurationName_optional& SimResultsVariables::
      ConfigurationName ()
      {
        return this->ConfigurationName_;
      }

      void SimResultsVariables::
      ConfigurationName (const ConfigurationName_type& x)
      {
        this->ConfigurationName_.set (x);
      }

      void SimResultsVariables::
      ConfigurationName (const ConfigurationName_optional& x)
      {
        this->ConfigurationName_ = x;
      }

      void SimResultsVariables::
      ConfigurationName (::std::auto_ptr< ConfigurationName_type > x)
      {
        this->ConfigurationName_.set (x);
      }

      const SimResultsVariables::RunName_optional& SimResultsVariables::
      RunName () const
      {
        return this->RunName_;
      }

      SimResultsVariables::RunName_optional& SimResultsVariables::
      RunName ()
      {
        return this->RunName_;
      }

      void SimResultsVariables::
      RunName (const RunName_type& x)
      {
        this->RunName_.set (x);
      }

      void SimResultsVariables::
      RunName (const RunName_optional& x)
      {
        this->RunName_ = x;
      }

      void SimResultsVariables::
      RunName (::std::auto_ptr< RunName_type > x)
      {
        this->RunName_.set (x);
      }

      const SimResultsVariables::Unit_optional& SimResultsVariables::
      Unit () const
      {
        return this->Unit_;
      }

      SimResultsVariables::Unit_optional& SimResultsVariables::
      Unit ()
      {
        return this->Unit_;
      }

      void SimResultsVariables::
      Unit (const Unit_type& x)
      {
        this->Unit_.set (x);
      }

      void SimResultsVariables::
      Unit (const Unit_optional& x)
      {
        this->Unit_ = x;
      }

      void SimResultsVariables::
      Unit (::std::auto_ptr< Unit_type > x)
      {
        this->Unit_.set (x);
      }

      const SimResultsVariables::LegendText_optional& SimResultsVariables::
      LegendText () const
      {
        return this->LegendText_;
      }

      SimResultsVariables::LegendText_optional& SimResultsVariables::
      LegendText ()
      {
        return this->LegendText_;
      }

      void SimResultsVariables::
      LegendText (const LegendText_type& x)
      {
        this->LegendText_.set (x);
      }

      void SimResultsVariables::
      LegendText (const LegendText_optional& x)
      {
        this->LegendText_ = x;
      }

      void SimResultsVariables::
      LegendText (::std::auto_ptr< LegendText_type > x)
      {
        this->LegendText_.set (x);
      }

      const SimResultsVariables::Area_optional& SimResultsVariables::
      Area () const
      {
        return this->Area_;
      }

      SimResultsVariables::Area_optional& SimResultsVariables::
      Area ()
      {
        return this->Area_;
      }

      void SimResultsVariables::
      Area (const Area_type& x)
      {
        this->Area_.set (x);
      }

      void SimResultsVariables::
      Area (const Area_optional& x)
      {
        this->Area_ = x;
      }

      void SimResultsVariables::
      Area (::std::auto_ptr< Area_type > x)
      {
        this->Area_.set (x);
      }

      const SimResultsVariables::TimeStep_optional& SimResultsVariables::
      TimeStep () const
      {
        return this->TimeStep_;
      }

      SimResultsVariables::TimeStep_optional& SimResultsVariables::
      TimeStep ()
      {
        return this->TimeStep_;
      }

      void SimResultsVariables::
      TimeStep (const TimeStep_type& x)
      {
        this->TimeStep_.set (x);
      }

      void SimResultsVariables::
      TimeStep (const TimeStep_optional& x)
      {
        this->TimeStep_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimResultsVariables
      //

      SimResultsVariables::
      SimResultsVariables (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (RefId),
        VariableName_ (this),
        VariableType_ (this),
        LegendName_ (this),
        SimulationRun_ (this),
        KeyValue_ (this),
        ReportVariableDDIndex_ (this),
        FillColor_ (this),
        FillColorTransparency_ (this),
        BorderColor_ (this),
        ShowLabels_ (this),
        Environment_ (this),
        AlternativeName_ (this),
        ConfigurationName_ (this),
        RunName_ (this),
        Unit_ (this),
        LegendText_ (this),
        Area_ (this),
        TimeStep_ (this)
      {
      }

      SimResultsVariables::
      SimResultsVariables (const SimResultsVariables& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (x, f, c),
        VariableName_ (x.VariableName_, f, this),
        VariableType_ (x.VariableType_, f, this),
        LegendName_ (x.LegendName_, f, this),
        SimulationRun_ (x.SimulationRun_, f, this),
        KeyValue_ (x.KeyValue_, f, this),
        ReportVariableDDIndex_ (x.ReportVariableDDIndex_, f, this),
        FillColor_ (x.FillColor_, f, this),
        FillColorTransparency_ (x.FillColorTransparency_, f, this),
        BorderColor_ (x.BorderColor_, f, this),
        ShowLabels_ (x.ShowLabels_, f, this),
        Environment_ (x.Environment_, f, this),
        AlternativeName_ (x.AlternativeName_, f, this),
        ConfigurationName_ (x.ConfigurationName_, f, this),
        RunName_ (x.RunName_, f, this),
        Unit_ (x.Unit_, f, this),
        LegendText_ (x.LegendText_, f, this),
        Area_ (x.Area_, f, this),
        TimeStep_ (x.TimeStep_, f, this)
      {
      }

      SimResultsVariables::
      SimResultsVariables (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization (e, f | ::xml_schema::flags::base, c),
        VariableName_ (this),
        VariableType_ (this),
        LegendName_ (this),
        SimulationRun_ (this),
        KeyValue_ (this),
        ReportVariableDDIndex_ (this),
        FillColor_ (this),
        FillColorTransparency_ (this),
        BorderColor_ (this),
        ShowLabels_ (this),
        Environment_ (this),
        AlternativeName_ (this),
        ConfigurationName_ (this),
        RunName_ (this),
        Unit_ (this),
        LegendText_ (this),
        Area_ (this),
        TimeStep_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimResultsVariables::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimResultsVisualization::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // VariableName
          //
          if (n.name () == "VariableName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< VariableName_type > r (
              VariableName_traits::create (i, f, this));

            if (!this->VariableName_)
            {
              this->VariableName_.set (r);
              continue;
            }
          }

          // VariableType
          //
          if (n.name () == "VariableType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< VariableType_type > r (
              VariableType_traits::create (i, f, this));

            if (!this->VariableType_)
            {
              this->VariableType_.set (r);
              continue;
            }
          }

          // LegendName
          //
          if (n.name () == "LegendName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< LegendName_type > r (
              LegendName_traits::create (i, f, this));

            if (!this->LegendName_)
            {
              this->LegendName_.set (r);
              continue;
            }
          }

          // SimulationRun
          //
          if (n.name () == "SimulationRun" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimulationRun_type > r (
              SimulationRun_traits::create (i, f, this));

            if (!this->SimulationRun_)
            {
              this->SimulationRun_.set (r);
              continue;
            }
          }

          // KeyValue
          //
          if (n.name () == "KeyValue" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< KeyValue_type > r (
              KeyValue_traits::create (i, f, this));

            if (!this->KeyValue_)
            {
              this->KeyValue_.set (r);
              continue;
            }
          }

          // ReportVariableDDIndex
          //
          if (n.name () == "ReportVariableDDIndex" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ReportVariableDDIndex_)
            {
              this->ReportVariableDDIndex_.set (ReportVariableDDIndex_traits::create (i, f, this));
              continue;
            }
          }

          // FillColor
          //
          if (n.name () == "FillColor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< FillColor_type > r (
              FillColor_traits::create (i, f, this));

            if (!this->FillColor_)
            {
              this->FillColor_.set (r);
              continue;
            }
          }

          // FillColorTransparency
          //
          if (n.name () == "FillColorTransparency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->FillColorTransparency_)
            {
              this->FillColorTransparency_.set (FillColorTransparency_traits::create (i, f, this));
              continue;
            }
          }

          // BorderColor
          //
          if (n.name () == "BorderColor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< BorderColor_type > r (
              BorderColor_traits::create (i, f, this));

            if (!this->BorderColor_)
            {
              this->BorderColor_.set (r);
              continue;
            }
          }

          // ShowLabels
          //
          if (n.name () == "ShowLabels" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->ShowLabels_)
            {
              this->ShowLabels_.set (ShowLabels_traits::create (i, f, this));
              continue;
            }
          }

          // Environment
          //
          if (n.name () == "Environment" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Environment_type > r (
              Environment_traits::create (i, f, this));

            if (!this->Environment_)
            {
              this->Environment_.set (r);
              continue;
            }
          }

          // AlternativeName
          //
          if (n.name () == "AlternativeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< AlternativeName_type > r (
              AlternativeName_traits::create (i, f, this));

            if (!this->AlternativeName_)
            {
              this->AlternativeName_.set (r);
              continue;
            }
          }

          // ConfigurationName
          //
          if (n.name () == "ConfigurationName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ConfigurationName_type > r (
              ConfigurationName_traits::create (i, f, this));

            if (!this->ConfigurationName_)
            {
              this->ConfigurationName_.set (r);
              continue;
            }
          }

          // RunName
          //
          if (n.name () == "RunName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< RunName_type > r (
              RunName_traits::create (i, f, this));

            if (!this->RunName_)
            {
              this->RunName_.set (r);
              continue;
            }
          }

          // Unit
          //
          if (n.name () == "Unit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Unit_type > r (
              Unit_traits::create (i, f, this));

            if (!this->Unit_)
            {
              this->Unit_.set (r);
              continue;
            }
          }

          // LegendText
          //
          if (n.name () == "LegendText" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< LegendText_type > r (
              LegendText_traits::create (i, f, this));

            if (!this->LegendText_)
            {
              this->LegendText_.set (r);
              continue;
            }
          }

          // Area
          //
          if (n.name () == "Area" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< Area_type > r (
              Area_traits::create (i, f, this));

            if (!this->Area_)
            {
              this->Area_.set (r);
              continue;
            }
          }

          // TimeStep
          //
          if (n.name () == "TimeStep" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TimeStep_)
            {
              this->TimeStep_.set (TimeStep_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimResultsVariables* SimResultsVariables::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimResultsVariables (*this, f, c);
      }

      SimResultsVariables& SimResultsVariables::
      operator= (const SimResultsVariables& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimResultsVisualization& > (*this) = x;
          this->VariableName_ = x.VariableName_;
          this->VariableType_ = x.VariableType_;
          this->LegendName_ = x.LegendName_;
          this->SimulationRun_ = x.SimulationRun_;
          this->KeyValue_ = x.KeyValue_;
          this->ReportVariableDDIndex_ = x.ReportVariableDDIndex_;
          this->FillColor_ = x.FillColor_;
          this->FillColorTransparency_ = x.FillColorTransparency_;
          this->BorderColor_ = x.BorderColor_;
          this->ShowLabels_ = x.ShowLabels_;
          this->Environment_ = x.Environment_;
          this->AlternativeName_ = x.AlternativeName_;
          this->ConfigurationName_ = x.ConfigurationName_;
          this->RunName_ = x.RunName_;
          this->Unit_ = x.Unit_;
          this->LegendText_ = x.LegendText_;
          this->Area_ = x.Area_;
          this->TimeStep_ = x.TimeStep_;
        }

        return *this;
      }

      SimResultsVariables::
      ~SimResultsVariables ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

