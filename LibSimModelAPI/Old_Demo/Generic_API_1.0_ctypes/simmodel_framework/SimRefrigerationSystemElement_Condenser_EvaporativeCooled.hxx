// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_REFRIGERATION_SYSTEM_ELEMENT_CONDENSER_EVAPORATIVE_COOLED_HXX
#define SIM_REFRIGERATION_SYSTEM_ELEMENT_CONDENSER_EVAPORATIVE_COOLED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_Condenser_EvaporativeCooled;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simrefrigerationsystemelement_condenser.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_Condenser_EvaporativeCooled: public ::namespaces::Sim::MepModel::SimRefrigerationSystemElement_Condenser
      {
        public:
        // SimRefrigSysElem_EvapCondAvailSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_EvapCondAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapCondAvailSchedName_type > SimRefrigSysElem_EvapCondAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapCondAvailSchedName_type, char > SimRefrigSysElem_EvapCondAvailSchedName_traits;

        const SimRefrigSysElem_EvapCondAvailSchedName_optional&
        SimRefrigSysElem_EvapCondAvailSchedName () const;

        SimRefrigSysElem_EvapCondAvailSchedName_optional&
        SimRefrigSysElem_EvapCondAvailSchedName ();

        void
        SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_type& x);

        void
        SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_optional& x);

        void
        SimRefrigSysElem_EvapCondAvailSchedName (::std::auto_ptr< SimRefrigSysElem_EvapCondAvailSchedName_type > p);

        // SimRefrigSysElem_BasinHeatCap
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_BasinHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_BasinHeatCap_type > SimRefrigSysElem_BasinHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_BasinHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_BasinHeatCap_traits;

        const SimRefrigSysElem_BasinHeatCap_optional&
        SimRefrigSysElem_BasinHeatCap () const;

        SimRefrigSysElem_BasinHeatCap_optional&
        SimRefrigSysElem_BasinHeatCap ();

        void
        SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_type& x);

        void
        SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_optional& x);

        // SimRefrigSysElem_BasinHeatSetpointTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_BasinHeatSetpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_BasinHeatSetpointTemp_type > SimRefrigSysElem_BasinHeatSetpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_BasinHeatSetpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_BasinHeatSetpointTemp_traits;

        const SimRefrigSysElem_BasinHeatSetpointTemp_optional&
        SimRefrigSysElem_BasinHeatSetpointTemp () const;

        SimRefrigSysElem_BasinHeatSetpointTemp_optional&
        SimRefrigSysElem_BasinHeatSetpointTemp ();

        void
        SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_type& x);

        void
        SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_optional& x);

        // SimRefrigSysElem_EvapWaterSupplyTankName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_EvapWaterSupplyTankName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapWaterSupplyTankName_type > SimRefrigSysElem_EvapWaterSupplyTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapWaterSupplyTankName_type, char > SimRefrigSysElem_EvapWaterSupplyTankName_traits;

        const SimRefrigSysElem_EvapWaterSupplyTankName_optional&
        SimRefrigSysElem_EvapWaterSupplyTankName () const;

        SimRefrigSysElem_EvapWaterSupplyTankName_optional&
        SimRefrigSysElem_EvapWaterSupplyTankName ();

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_type& x);

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_optional& x);

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (::std::auto_ptr< SimRefrigSysElem_EvapWaterSupplyTankName_type > p);

        // SimRefrigSysElem_EndUseSubCat
        //
        typedef ::xml_schema::string SimRefrigSysElem_EndUseSubCat_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EndUseSubCat_type > SimRefrigSysElem_EndUseSubCat_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EndUseSubCat_type, char > SimRefrigSysElem_EndUseSubCat_traits;

        const SimRefrigSysElem_EndUseSubCat_optional&
        SimRefrigSysElem_EndUseSubCat () const;

        SimRefrigSysElem_EndUseSubCat_optional&
        SimRefrigSysElem_EndUseSubCat ();

        void
        SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x);

        void
        SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x);

        void
        SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > p);

        // SimRefrigSysElem_RatedSubcoolingTempDiff
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedSubcoolingTempDiff_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedSubcoolingTempDiff_type > SimRefrigSysElem_RatedSubcoolingTempDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedSubcoolingTempDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedSubcoolingTempDiff_traits;

        const SimRefrigSysElem_RatedSubcoolingTempDiff_optional&
        SimRefrigSysElem_RatedSubcoolingTempDiff () const;

        SimRefrigSysElem_RatedSubcoolingTempDiff_optional&
        SimRefrigSysElem_RatedSubcoolingTempDiff ();

        void
        SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_type& x);

        void
        SimRefrigSysElem_RatedSubcoolingTempDiff (const SimRefrigSysElem_RatedSubcoolingTempDiff_optional& x);

        // SimRefrigSysElem_RatedFanPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedFanPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedFanPwr_type > SimRefrigSysElem_RatedFanPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedFanPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedFanPwr_traits;

        const SimRefrigSysElem_RatedFanPwr_optional&
        SimRefrigSysElem_RatedFanPwr () const;

        SimRefrigSysElem_RatedFanPwr_optional&
        SimRefrigSysElem_RatedFanPwr ();

        void
        SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_type& x);

        void
        SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_optional& x);

        // SimRefrigSysElem_MinFanAirFlowRatio
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MinFanAirFlowRatio_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MinFanAirFlowRatio_type > SimRefrigSysElem_MinFanAirFlowRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MinFanAirFlowRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MinFanAirFlowRatio_traits;

        const SimRefrigSysElem_MinFanAirFlowRatio_optional&
        SimRefrigSysElem_MinFanAirFlowRatio () const;

        SimRefrigSysElem_MinFanAirFlowRatio_optional&
        SimRefrigSysElem_MinFanAirFlowRatio ();

        void
        SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_type& x);

        void
        SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_optional& x);

        // SimRefrigSysElem_RatedEffecTotalHeatRejectionRate
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_type > SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_traits;

        const SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional&
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate () const;

        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional&
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate ();

        void
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_type& x);

        void
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate (const SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional& x);

        // SimRefrigSysElem_FanSpeedCntlType
        //
        typedef ::xml_schema::string SimRefrigSysElem_FanSpeedCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_FanSpeedCntlType_type > SimRefrigSysElem_FanSpeedCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_FanSpeedCntlType_type, char > SimRefrigSysElem_FanSpeedCntlType_traits;

        const SimRefrigSysElem_FanSpeedCntlType_optional&
        SimRefrigSysElem_FanSpeedCntlType () const;

        SimRefrigSysElem_FanSpeedCntlType_optional&
        SimRefrigSysElem_FanSpeedCntlType ();

        void
        SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_type& x);

        void
        SimRefrigSysElem_FanSpeedCntlType (const SimRefrigSysElem_FanSpeedCntlType_optional& x);

        void
        SimRefrigSysElem_FanSpeedCntlType (::std::auto_ptr< SimRefrigSysElem_FanSpeedCntlType_type > p);

        // SimRefrigSysElem_AppTempConstTerm
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_AppTempConstTerm_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AppTempConstTerm_type > SimRefrigSysElem_AppTempConstTerm_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AppTempConstTerm_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_AppTempConstTerm_traits;

        const SimRefrigSysElem_AppTempConstTerm_optional&
        SimRefrigSysElem_AppTempConstTerm () const;

        SimRefrigSysElem_AppTempConstTerm_optional&
        SimRefrigSysElem_AppTempConstTerm ();

        void
        SimRefrigSysElem_AppTempConstTerm (const SimRefrigSysElem_AppTempConstTerm_type& x);

        void
        SimRefrigSysElem_AppTempConstTerm (const SimRefrigSysElem_AppTempConstTerm_optional& x);

        // SimRefrigSysElem_ApproachTempCoef2
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_ApproachTempCoef2_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_ApproachTempCoef2_type > SimRefrigSysElem_ApproachTempCoef2_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_ApproachTempCoef2_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_ApproachTempCoef2_traits;

        const SimRefrigSysElem_ApproachTempCoef2_optional&
        SimRefrigSysElem_ApproachTempCoef2 () const;

        SimRefrigSysElem_ApproachTempCoef2_optional&
        SimRefrigSysElem_ApproachTempCoef2 ();

        void
        SimRefrigSysElem_ApproachTempCoef2 (const SimRefrigSysElem_ApproachTempCoef2_type& x);

        void
        SimRefrigSysElem_ApproachTempCoef2 (const SimRefrigSysElem_ApproachTempCoef2_optional& x);

        // SimRefrigSysElem_ApproachTempCoef3
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_ApproachTempCoef3_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_ApproachTempCoef3_type > SimRefrigSysElem_ApproachTempCoef3_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_ApproachTempCoef3_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_ApproachTempCoef3_traits;

        const SimRefrigSysElem_ApproachTempCoef3_optional&
        SimRefrigSysElem_ApproachTempCoef3 () const;

        SimRefrigSysElem_ApproachTempCoef3_optional&
        SimRefrigSysElem_ApproachTempCoef3 ();

        void
        SimRefrigSysElem_ApproachTempCoef3 (const SimRefrigSysElem_ApproachTempCoef3_type& x);

        void
        SimRefrigSysElem_ApproachTempCoef3 (const SimRefrigSysElem_ApproachTempCoef3_optional& x);

        // SimRefrigSysElem_ApproachTempCoef4
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_ApproachTempCoef4_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_ApproachTempCoef4_type > SimRefrigSysElem_ApproachTempCoef4_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_ApproachTempCoef4_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_ApproachTempCoef4_traits;

        const SimRefrigSysElem_ApproachTempCoef4_optional&
        SimRefrigSysElem_ApproachTempCoef4 () const;

        SimRefrigSysElem_ApproachTempCoef4_optional&
        SimRefrigSysElem_ApproachTempCoef4 ();

        void
        SimRefrigSysElem_ApproachTempCoef4 (const SimRefrigSysElem_ApproachTempCoef4_type& x);

        void
        SimRefrigSysElem_ApproachTempCoef4 (const SimRefrigSysElem_ApproachTempCoef4_optional& x);

        // SimRefrigSysElem_MinCapFactor
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MinCapFactor_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MinCapFactor_type > SimRefrigSysElem_MinCapFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MinCapFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MinCapFactor_traits;

        const SimRefrigSysElem_MinCapFactor_optional&
        SimRefrigSysElem_MinCapFactor () const;

        SimRefrigSysElem_MinCapFactor_optional&
        SimRefrigSysElem_MinCapFactor ();

        void
        SimRefrigSysElem_MinCapFactor (const SimRefrigSysElem_MinCapFactor_type& x);

        void
        SimRefrigSysElem_MinCapFactor (const SimRefrigSysElem_MinCapFactor_optional& x);

        // SimRefrigSysElem_MaxCapFactor
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_MaxCapFactor_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_MaxCapFactor_type > SimRefrigSysElem_MaxCapFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_MaxCapFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_MaxCapFactor_traits;

        const SimRefrigSysElem_MaxCapFactor_optional&
        SimRefrigSysElem_MaxCapFactor () const;

        SimRefrigSysElem_MaxCapFactor_optional&
        SimRefrigSysElem_MaxCapFactor ();

        void
        SimRefrigSysElem_MaxCapFactor (const SimRefrigSysElem_MaxCapFactor_type& x);

        void
        SimRefrigSysElem_MaxCapFactor (const SimRefrigSysElem_MaxCapFactor_optional& x);

        // SimRefrigSysElem_AirInNodeName
        //
        typedef ::xml_schema::string SimRefrigSysElem_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_AirInNodeName_type > SimRefrigSysElem_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_AirInNodeName_type, char > SimRefrigSysElem_AirInNodeName_traits;

        const SimRefrigSysElem_AirInNodeName_optional&
        SimRefrigSysElem_AirInNodeName () const;

        SimRefrigSysElem_AirInNodeName_optional&
        SimRefrigSysElem_AirInNodeName ();

        void
        SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_type& x);

        void
        SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_optional& x);

        void
        SimRefrigSysElem_AirInNodeName (::std::auto_ptr< SimRefrigSysElem_AirInNodeName_type > p);

        // SimRefrigSysElem_RatedAirFlowRate
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedAirFlowRate_type > SimRefrigSysElem_RatedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedAirFlowRate_traits;

        const SimRefrigSysElem_RatedAirFlowRate_optional&
        SimRefrigSysElem_RatedAirFlowRate () const;

        SimRefrigSysElem_RatedAirFlowRate_optional&
        SimRefrigSysElem_RatedAirFlowRate ();

        void
        SimRefrigSysElem_RatedAirFlowRate (const SimRefrigSysElem_RatedAirFlowRate_type& x);

        void
        SimRefrigSysElem_RatedAirFlowRate (const SimRefrigSysElem_RatedAirFlowRate_optional& x);

        // SimRefrigSysElem_RatedWaterPumpPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_RatedWaterPumpPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RatedWaterPumpPwr_type > SimRefrigSysElem_RatedWaterPumpPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RatedWaterPumpPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_RatedWaterPumpPwr_traits;

        const SimRefrigSysElem_RatedWaterPumpPwr_optional&
        SimRefrigSysElem_RatedWaterPumpPwr () const;

        SimRefrigSysElem_RatedWaterPumpPwr_optional&
        SimRefrigSysElem_RatedWaterPumpPwr ();

        void
        SimRefrigSysElem_RatedWaterPumpPwr (const SimRefrigSysElem_RatedWaterPumpPwr_type& x);

        void
        SimRefrigSysElem_RatedWaterPumpPwr (const SimRefrigSysElem_RatedWaterPumpPwr_optional& x);

        // Constructors.
        //
        SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const RefId_type&);

        SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const ::xercesc::DOMElement& e,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        SimRefrigerationSystemElement_Condenser_EvaporativeCooled (const SimRefrigerationSystemElement_Condenser_EvaporativeCooled& x,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        virtual SimRefrigerationSystemElement_Condenser_EvaporativeCooled*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimRefrigerationSystemElement_Condenser_EvaporativeCooled&
        operator= (const SimRefrigerationSystemElement_Condenser_EvaporativeCooled& x);

        virtual 
        ~SimRefrigerationSystemElement_Condenser_EvaporativeCooled ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimRefrigSysElem_EvapCondAvailSchedName_optional SimRefrigSysElem_EvapCondAvailSchedName_;
        SimRefrigSysElem_BasinHeatCap_optional SimRefrigSysElem_BasinHeatCap_;
        SimRefrigSysElem_BasinHeatSetpointTemp_optional SimRefrigSysElem_BasinHeatSetpointTemp_;
        SimRefrigSysElem_EvapWaterSupplyTankName_optional SimRefrigSysElem_EvapWaterSupplyTankName_;
        SimRefrigSysElem_EndUseSubCat_optional SimRefrigSysElem_EndUseSubCat_;
        SimRefrigSysElem_RatedSubcoolingTempDiff_optional SimRefrigSysElem_RatedSubcoolingTempDiff_;
        SimRefrigSysElem_RatedFanPwr_optional SimRefrigSysElem_RatedFanPwr_;
        SimRefrigSysElem_MinFanAirFlowRatio_optional SimRefrigSysElem_MinFanAirFlowRatio_;
        SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_optional SimRefrigSysElem_RatedEffecTotalHeatRejectionRate_;
        SimRefrigSysElem_FanSpeedCntlType_optional SimRefrigSysElem_FanSpeedCntlType_;
        SimRefrigSysElem_AppTempConstTerm_optional SimRefrigSysElem_AppTempConstTerm_;
        SimRefrigSysElem_ApproachTempCoef2_optional SimRefrigSysElem_ApproachTempCoef2_;
        SimRefrigSysElem_ApproachTempCoef3_optional SimRefrigSysElem_ApproachTempCoef3_;
        SimRefrigSysElem_ApproachTempCoef4_optional SimRefrigSysElem_ApproachTempCoef4_;
        SimRefrigSysElem_MinCapFactor_optional SimRefrigSysElem_MinCapFactor_;
        SimRefrigSysElem_MaxCapFactor_optional SimRefrigSysElem_MaxCapFactor_;
        SimRefrigSysElem_AirInNodeName_optional SimRefrigSysElem_AirInNodeName_;
        SimRefrigSysElem_RatedAirFlowRate_optional SimRefrigSysElem_RatedAirFlowRate_;
        SimRefrigSysElem_RatedWaterPumpPwr_optional SimRefrigSysElem_RatedWaterPumpPwr_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_REFRIGERATION_SYSTEM_ELEMENT_CONDENSER_EVAPORATIVE_COOLED_HXX
