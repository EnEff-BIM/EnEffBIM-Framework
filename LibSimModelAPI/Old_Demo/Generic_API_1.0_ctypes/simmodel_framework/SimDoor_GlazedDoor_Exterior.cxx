// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDoor_GlazedDoor_Exterior.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_GlazedDoor_Exterior
      // 

      const SimDoor_GlazedDoor_Exterior::DoorTypeTag_optional& SimDoor_GlazedDoor_Exterior::
      DoorTypeTag () const
      {
        return this->DoorTypeTag_;
      }

      SimDoor_GlazedDoor_Exterior::DoorTypeTag_optional& SimDoor_GlazedDoor_Exterior::
      DoorTypeTag ()
      {
        return this->DoorTypeTag_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorTypeTag (const DoorTypeTag_type& x)
      {
        this->DoorTypeTag_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorTypeTag (const DoorTypeTag_optional& x)
      {
        this->DoorTypeTag_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorTypeTag (::std::auto_ptr< DoorTypeTag_type > x)
      {
        this->DoorTypeTag_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::DoorPanelOperation_optional& SimDoor_GlazedDoor_Exterior::
      DoorPanelOperation () const
      {
        return this->DoorPanelOperation_;
      }

      SimDoor_GlazedDoor_Exterior::DoorPanelOperation_optional& SimDoor_GlazedDoor_Exterior::
      DoorPanelOperation ()
      {
        return this->DoorPanelOperation_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorPanelOperation (const DoorPanelOperation_type& x)
      {
        this->DoorPanelOperation_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorPanelOperation (const DoorPanelOperation_optional& x)
      {
        this->DoorPanelOperation_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorPanelOperation (::std::auto_ptr< DoorPanelOperation_type > x)
      {
        this->DoorPanelOperation_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::DoorConstructionType_optional& SimDoor_GlazedDoor_Exterior::
      DoorConstructionType () const
      {
        return this->DoorConstructionType_;
      }

      SimDoor_GlazedDoor_Exterior::DoorConstructionType_optional& SimDoor_GlazedDoor_Exterior::
      DoorConstructionType ()
      {
        return this->DoorConstructionType_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorConstructionType (const DoorConstructionType_type& x)
      {
        this->DoorConstructionType_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorConstructionType (const DoorConstructionType_optional& x)
      {
        this->DoorConstructionType_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorConstructionType (::std::auto_ptr< DoorConstructionType_type > x)
      {
        this->DoorConstructionType_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::DoorIsExternal_optional& SimDoor_GlazedDoor_Exterior::
      DoorIsExternal () const
      {
        return this->DoorIsExternal_;
      }

      SimDoor_GlazedDoor_Exterior::DoorIsExternal_optional& SimDoor_GlazedDoor_Exterior::
      DoorIsExternal ()
      {
        return this->DoorIsExternal_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorIsExternal (const DoorIsExternal_type& x)
      {
        this->DoorIsExternal_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorIsExternal (const DoorIsExternal_optional& x)
      {
        this->DoorIsExternal_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::CompositeThermalTransmittance_optional& SimDoor_GlazedDoor_Exterior::
      CompositeThermalTransmittance () const
      {
        return this->CompositeThermalTransmittance_;
      }

      SimDoor_GlazedDoor_Exterior::CompositeThermalTransmittance_optional& SimDoor_GlazedDoor_Exterior::
      CompositeThermalTransmittance ()
      {
        return this->CompositeThermalTransmittance_;
      }

      void SimDoor_GlazedDoor_Exterior::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_type& x)
      {
        this->CompositeThermalTransmittance_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_optional& x)
      {
        this->CompositeThermalTransmittance_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorHeight_optional& SimDoor_GlazedDoor_Exterior::
      DoorHeight () const
      {
        return this->DoorHeight_;
      }

      SimDoor_GlazedDoor_Exterior::DoorHeight_optional& SimDoor_GlazedDoor_Exterior::
      DoorHeight ()
      {
        return this->DoorHeight_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorHeight (const DoorHeight_type& x)
      {
        this->DoorHeight_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorHeight (const DoorHeight_optional& x)
      {
        this->DoorHeight_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorWidth_optional& SimDoor_GlazedDoor_Exterior::
      DoorWidth () const
      {
        return this->DoorWidth_;
      }

      SimDoor_GlazedDoor_Exterior::DoorWidth_optional& SimDoor_GlazedDoor_Exterior::
      DoorWidth ()
      {
        return this->DoorWidth_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorWidth (const DoorWidth_type& x)
      {
        this->DoorWidth_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorWidth (const DoorWidth_optional& x)
      {
        this->DoorWidth_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorArea_optional& SimDoor_GlazedDoor_Exterior::
      DoorArea () const
      {
        return this->DoorArea_;
      }

      SimDoor_GlazedDoor_Exterior::DoorArea_optional& SimDoor_GlazedDoor_Exterior::
      DoorArea ()
      {
        return this->DoorArea_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorArea (const DoorArea_type& x)
      {
        this->DoorArea_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorArea (const DoorArea_optional& x)
      {
        this->DoorArea_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorPerimeter_optional& SimDoor_GlazedDoor_Exterior::
      DoorPerimeter () const
      {
        return this->DoorPerimeter_;
      }

      SimDoor_GlazedDoor_Exterior::DoorPerimeter_optional& SimDoor_GlazedDoor_Exterior::
      DoorPerimeter ()
      {
        return this->DoorPerimeter_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorPerimeter (const DoorPerimeter_type& x)
      {
        this->DoorPerimeter_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorPerimeter (const DoorPerimeter_optional& x)
      {
        this->DoorPerimeter_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorFrameDepth_optional& SimDoor_GlazedDoor_Exterior::
      DoorFrameDepth () const
      {
        return this->DoorFrameDepth_;
      }

      SimDoor_GlazedDoor_Exterior::DoorFrameDepth_optional& SimDoor_GlazedDoor_Exterior::
      DoorFrameDepth ()
      {
        return this->DoorFrameDepth_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorFrameDepth (const DoorFrameDepth_type& x)
      {
        this->DoorFrameDepth_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorFrameDepth (const DoorFrameDepth_optional& x)
      {
        this->DoorFrameDepth_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorFrameThickness_optional& SimDoor_GlazedDoor_Exterior::
      DoorFrameThickness () const
      {
        return this->DoorFrameThickness_;
      }

      SimDoor_GlazedDoor_Exterior::DoorFrameThickness_optional& SimDoor_GlazedDoor_Exterior::
      DoorFrameThickness ()
      {
        return this->DoorFrameThickness_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorFrameThickness (const DoorFrameThickness_type& x)
      {
        this->DoorFrameThickness_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorFrameThickness (const DoorFrameThickness_optional& x)
      {
        this->DoorFrameThickness_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::DoorLeafThickness_optional& SimDoor_GlazedDoor_Exterior::
      DoorLeafThickness () const
      {
        return this->DoorLeafThickness_;
      }

      SimDoor_GlazedDoor_Exterior::DoorLeafThickness_optional& SimDoor_GlazedDoor_Exterior::
      DoorLeafThickness ()
      {
        return this->DoorLeafThickness_;
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorLeafThickness (const DoorLeafThickness_type& x)
      {
        this->DoorLeafThickness_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      DoorLeafThickness (const DoorLeafThickness_optional& x)
      {
        this->DoorLeafThickness_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::ClassRef_UniFormat_optional& SimDoor_GlazedDoor_Exterior::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimDoor_GlazedDoor_Exterior::ClassRef_UniFormat_optional& SimDoor_GlazedDoor_Exterior::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimDoor_GlazedDoor_Exterior::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::MaterialList_optional& SimDoor_GlazedDoor_Exterior::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimDoor_GlazedDoor_Exterior::MaterialList_optional& SimDoor_GlazedDoor_Exterior::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimDoor_GlazedDoor_Exterior::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::VoidsInDoor_optional& SimDoor_GlazedDoor_Exterior::
      VoidsInDoor () const
      {
        return this->VoidsInDoor_;
      }

      SimDoor_GlazedDoor_Exterior::VoidsInDoor_optional& SimDoor_GlazedDoor_Exterior::
      VoidsInDoor ()
      {
        return this->VoidsInDoor_;
      }

      void SimDoor_GlazedDoor_Exterior::
      VoidsInDoor (const VoidsInDoor_type& x)
      {
        this->VoidsInDoor_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      VoidsInDoor (const VoidsInDoor_optional& x)
      {
        this->VoidsInDoor_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      VoidsInDoor (::std::auto_ptr< VoidsInDoor_type > x)
      {
        this->VoidsInDoor_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::OpeningFilledByDoor_optional& SimDoor_GlazedDoor_Exterior::
      OpeningFilledByDoor () const
      {
        return this->OpeningFilledByDoor_;
      }

      SimDoor_GlazedDoor_Exterior::OpeningFilledByDoor_optional& SimDoor_GlazedDoor_Exterior::
      OpeningFilledByDoor ()
      {
        return this->OpeningFilledByDoor_;
      }

      void SimDoor_GlazedDoor_Exterior::
      OpeningFilledByDoor (const OpeningFilledByDoor_type& x)
      {
        this->OpeningFilledByDoor_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      OpeningFilledByDoor (const OpeningFilledByDoor_optional& x)
      {
        this->OpeningFilledByDoor_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      OpeningFilledByDoor (::std::auto_ptr< OpeningFilledByDoor_type > x)
      {
        this->OpeningFilledByDoor_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_ConstructionName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_ConstructionName () const
      {
        return this->SimDoor_ConstructionName_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_ConstructionName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_ConstructionName ()
      {
        return this->SimDoor_ConstructionName_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ConstructionName (const SimDoor_ConstructionName_type& x)
      {
        this->SimDoor_ConstructionName_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ConstructionName (const SimDoor_ConstructionName_optional& x)
      {
        this->SimDoor_ConstructionName_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ConstructionName (::std::auto_ptr< SimDoor_ConstructionName_type > x)
      {
        this->SimDoor_ConstructionName_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_BldgSurfName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_BldgSurfName () const
      {
        return this->SimDoor_BldgSurfName_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_BldgSurfName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_BldgSurfName ()
      {
        return this->SimDoor_BldgSurfName_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_BldgSurfName (const SimDoor_BldgSurfName_type& x)
      {
        this->SimDoor_BldgSurfName_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_BldgSurfName (const SimDoor_BldgSurfName_optional& x)
      {
        this->SimDoor_BldgSurfName_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_BldgSurfName (::std::auto_ptr< SimDoor_BldgSurfName_type > x)
      {
        this->SimDoor_BldgSurfName_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_ShadingContName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_ShadingContName () const
      {
        return this->SimDoor_ShadingContName_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_ShadingContName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_ShadingContName ()
      {
        return this->SimDoor_ShadingContName_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ShadingContName (const SimDoor_ShadingContName_type& x)
      {
        this->SimDoor_ShadingContName_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ShadingContName (const SimDoor_ShadingContName_optional& x)
      {
        this->SimDoor_ShadingContName_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_ShadingContName (::std::auto_ptr< SimDoor_ShadingContName_type > x)
      {
        this->SimDoor_ShadingContName_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_FrmAndDivName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_FrmAndDivName () const
      {
        return this->SimDoor_FrmAndDivName_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_FrmAndDivName_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_FrmAndDivName ()
      {
        return this->SimDoor_FrmAndDivName_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_FrmAndDivName (const SimDoor_FrmAndDivName_type& x)
      {
        this->SimDoor_FrmAndDivName_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_FrmAndDivName (const SimDoor_FrmAndDivName_optional& x)
      {
        this->SimDoor_FrmAndDivName_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_FrmAndDivName (::std::auto_ptr< SimDoor_FrmAndDivName_type > x)
      {
        this->SimDoor_FrmAndDivName_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_Mult_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Mult () const
      {
        return this->SimDoor_Mult_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_Mult_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Mult ()
      {
        return this->SimDoor_Mult_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Mult (const SimDoor_Mult_type& x)
      {
        this->SimDoor_Mult_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Mult (const SimDoor_Mult_optional& x)
      {
        this->SimDoor_Mult_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_StartXCoord_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_StartXCoord () const
      {
        return this->SimDoor_StartXCoord_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_StartXCoord_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_StartXCoord ()
      {
        return this->SimDoor_StartXCoord_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_StartXCoord (const SimDoor_StartXCoord_type& x)
      {
        this->SimDoor_StartXCoord_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_StartXCoord (const SimDoor_StartXCoord_optional& x)
      {
        this->SimDoor_StartXCoord_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_StartZCoord_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_StartZCoord () const
      {
        return this->SimDoor_StartZCoord_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_StartZCoord_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_StartZCoord ()
      {
        return this->SimDoor_StartZCoord_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_StartZCoord (const SimDoor_StartZCoord_type& x)
      {
        this->SimDoor_StartZCoord_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_StartZCoord (const SimDoor_StartZCoord_optional& x)
      {
        this->SimDoor_StartZCoord_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_Length_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Length () const
      {
        return this->SimDoor_Length_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_Length_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Length ()
      {
        return this->SimDoor_Length_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Length (const SimDoor_Length_type& x)
      {
        this->SimDoor_Length_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Length (const SimDoor_Length_optional& x)
      {
        this->SimDoor_Length_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::SimDoor_Ht_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Ht () const
      {
        return this->SimDoor_Ht_;
      }

      SimDoor_GlazedDoor_Exterior::SimDoor_Ht_optional& SimDoor_GlazedDoor_Exterior::
      SimDoor_Ht ()
      {
        return this->SimDoor_Ht_;
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Ht (const SimDoor_Ht_type& x)
      {
        this->SimDoor_Ht_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      SimDoor_Ht (const SimDoor_Ht_optional& x)
      {
        this->SimDoor_Ht_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x;
      }

      const SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      SimDoor_GlazedDoor_Exterior::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (x);
      }

      void SimDoor_GlazedDoor_Exterior::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_GlazedDoor_Exterior
      //

      SimDoor_GlazedDoor_Exterior::
      SimDoor_GlazedDoor_Exterior (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (RefId),
        DoorTypeTag_ (this),
        DoorPanelOperation_ (this),
        DoorConstructionType_ (this),
        DoorIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        DoorHeight_ (this),
        DoorWidth_ (this),
        DoorArea_ (this),
        DoorPerimeter_ (this),
        DoorFrameDepth_ (this),
        DoorFrameThickness_ (this),
        DoorLeafThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInDoor_ (this),
        OpeningFilledByDoor_ (this),
        SimDoor_ConstructionName_ (this),
        SimDoor_BldgSurfName_ (this),
        SimDoor_ShadingContName_ (this),
        SimDoor_FrmAndDivName_ (this),
        SimDoor_Mult_ (this),
        SimDoor_StartXCoord_ (this),
        SimDoor_StartZCoord_ (this),
        SimDoor_Length_ (this),
        SimDoor_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimDoor_GlazedDoor_Exterior::
      SimDoor_GlazedDoor_Exterior (const SimDoor_GlazedDoor_Exterior& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (x, f, c),
        DoorTypeTag_ (x.DoorTypeTag_, f, this),
        DoorPanelOperation_ (x.DoorPanelOperation_, f, this),
        DoorConstructionType_ (x.DoorConstructionType_, f, this),
        DoorIsExternal_ (x.DoorIsExternal_, f, this),
        CompositeThermalTransmittance_ (x.CompositeThermalTransmittance_, f, this),
        DoorHeight_ (x.DoorHeight_, f, this),
        DoorWidth_ (x.DoorWidth_, f, this),
        DoorArea_ (x.DoorArea_, f, this),
        DoorPerimeter_ (x.DoorPerimeter_, f, this),
        DoorFrameDepth_ (x.DoorFrameDepth_, f, this),
        DoorFrameThickness_ (x.DoorFrameThickness_, f, this),
        DoorLeafThickness_ (x.DoorLeafThickness_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        VoidsInDoor_ (x.VoidsInDoor_, f, this),
        OpeningFilledByDoor_ (x.OpeningFilledByDoor_, f, this),
        SimDoor_ConstructionName_ (x.SimDoor_ConstructionName_, f, this),
        SimDoor_BldgSurfName_ (x.SimDoor_BldgSurfName_, f, this),
        SimDoor_ShadingContName_ (x.SimDoor_ShadingContName_, f, this),
        SimDoor_FrmAndDivName_ (x.SimDoor_FrmAndDivName_, f, this),
        SimDoor_Mult_ (x.SimDoor_Mult_, f, this),
        SimDoor_StartXCoord_ (x.SimDoor_StartXCoord_, f, this),
        SimDoor_StartZCoord_ (x.SimDoor_StartZCoord_, f, this),
        SimDoor_Length_ (x.SimDoor_Length_, f, this),
        SimDoor_Ht_ (x.SimDoor_Ht_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_, f, this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_, f, this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_, f, this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_, f, this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_, f, this)
      {
      }

      SimDoor_GlazedDoor_Exterior::
      SimDoor_GlazedDoor_Exterior (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (e, f | ::xml_schema::flags::base, c),
        DoorTypeTag_ (this),
        DoorPanelOperation_ (this),
        DoorConstructionType_ (this),
        DoorIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        DoorHeight_ (this),
        DoorWidth_ (this),
        DoorArea_ (this),
        DoorPerimeter_ (this),
        DoorFrameDepth_ (this),
        DoorFrameThickness_ (this),
        DoorLeafThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInDoor_ (this),
        OpeningFilledByDoor_ (this),
        SimDoor_ConstructionName_ (this),
        SimDoor_BldgSurfName_ (this),
        SimDoor_ShadingContName_ (this),
        SimDoor_FrmAndDivName_ (this),
        SimDoor_Mult_ (this),
        SimDoor_StartXCoord_ (this),
        SimDoor_StartZCoord_ (this),
        SimDoor_Length_ (this),
        SimDoor_Ht_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDoor_GlazedDoor_Exterior::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DoorTypeTag
          //
          if (n.name () == "DoorTypeTag" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< DoorTypeTag_type > r (
              DoorTypeTag_traits::create (i, f, this));

            if (!this->DoorTypeTag_)
            {
              this->DoorTypeTag_.set (r);
              continue;
            }
          }

          // DoorPanelOperation
          //
          if (n.name () == "DoorPanelOperation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< DoorPanelOperation_type > r (
              DoorPanelOperation_traits::create (i, f, this));

            if (!this->DoorPanelOperation_)
            {
              this->DoorPanelOperation_.set (r);
              continue;
            }
          }

          // DoorConstructionType
          //
          if (n.name () == "DoorConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< DoorConstructionType_type > r (
              DoorConstructionType_traits::create (i, f, this));

            if (!this->DoorConstructionType_)
            {
              this->DoorConstructionType_.set (r);
              continue;
            }
          }

          // DoorIsExternal
          //
          if (n.name () == "DoorIsExternal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorIsExternal_)
            {
              this->DoorIsExternal_.set (DoorIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTransmittance
          //
          if (n.name () == "CompositeThermalTransmittance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->CompositeThermalTransmittance_)
            {
              this->CompositeThermalTransmittance_.set (CompositeThermalTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // DoorHeight
          //
          if (n.name () == "DoorHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorHeight_)
            {
              this->DoorHeight_.set (DoorHeight_traits::create (i, f, this));
              continue;
            }
          }

          // DoorWidth
          //
          if (n.name () == "DoorWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorWidth_)
            {
              this->DoorWidth_.set (DoorWidth_traits::create (i, f, this));
              continue;
            }
          }

          // DoorArea
          //
          if (n.name () == "DoorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorArea_)
            {
              this->DoorArea_.set (DoorArea_traits::create (i, f, this));
              continue;
            }
          }

          // DoorPerimeter
          //
          if (n.name () == "DoorPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorPerimeter_)
            {
              this->DoorPerimeter_.set (DoorPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // DoorFrameDepth
          //
          if (n.name () == "DoorFrameDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorFrameDepth_)
            {
              this->DoorFrameDepth_.set (DoorFrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // DoorFrameThickness
          //
          if (n.name () == "DoorFrameThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorFrameThickness_)
            {
              this->DoorFrameThickness_.set (DoorFrameThickness_traits::create (i, f, this));
              continue;
            }
          }

          // DoorLeafThickness
          //
          if (n.name () == "DoorLeafThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->DoorLeafThickness_)
            {
              this->DoorLeafThickness_.set (DoorLeafThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // VoidsInDoor
          //
          if (n.name () == "VoidsInDoor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VoidsInDoor_type > r (
              VoidsInDoor_traits::create (i, f, this));

            if (!this->VoidsInDoor_)
            {
              this->VoidsInDoor_.set (r);
              continue;
            }
          }

          // OpeningFilledByDoor
          //
          if (n.name () == "OpeningFilledByDoor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< OpeningFilledByDoor_type > r (
              OpeningFilledByDoor_traits::create (i, f, this));

            if (!this->OpeningFilledByDoor_)
            {
              this->OpeningFilledByDoor_.set (r);
              continue;
            }
          }

          // SimDoor_ConstructionName
          //
          if (n.name () == "SimDoor_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_ConstructionName_type > r (
              SimDoor_ConstructionName_traits::create (i, f, this));

            if (!this->SimDoor_ConstructionName_)
            {
              this->SimDoor_ConstructionName_.set (r);
              continue;
            }
          }

          // SimDoor_BldgSurfName
          //
          if (n.name () == "SimDoor_BldgSurfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_BldgSurfName_type > r (
              SimDoor_BldgSurfName_traits::create (i, f, this));

            if (!this->SimDoor_BldgSurfName_)
            {
              this->SimDoor_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimDoor_ShadingContName
          //
          if (n.name () == "SimDoor_ShadingContName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_ShadingContName_type > r (
              SimDoor_ShadingContName_traits::create (i, f, this));

            if (!this->SimDoor_ShadingContName_)
            {
              this->SimDoor_ShadingContName_.set (r);
              continue;
            }
          }

          // SimDoor_FrmAndDivName
          //
          if (n.name () == "SimDoor_FrmAndDivName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_FrmAndDivName_type > r (
              SimDoor_FrmAndDivName_traits::create (i, f, this));

            if (!this->SimDoor_FrmAndDivName_)
            {
              this->SimDoor_FrmAndDivName_.set (r);
              continue;
            }
          }

          // SimDoor_Mult
          //
          if (n.name () == "SimDoor_Mult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Mult_)
            {
              this->SimDoor_Mult_.set (SimDoor_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_StartXCoord
          //
          if (n.name () == "SimDoor_StartXCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_StartXCoord_)
            {
              this->SimDoor_StartXCoord_.set (SimDoor_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_StartZCoord
          //
          if (n.name () == "SimDoor_StartZCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_StartZCoord_)
            {
              this->SimDoor_StartZCoord_.set (SimDoor_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_Length
          //
          if (n.name () == "SimDoor_Length" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Length_)
            {
              this->SimDoor_Length_.set (SimDoor_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_Ht
          //
          if (n.name () == "SimDoor_Ht" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_Ht_)
            {
              this->SimDoor_Ht_.set (SimDoor_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > r (
              Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_)
            {
              this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_)
            {
              this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_)
            {
              this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_)
            {
              this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_DischargeCoef
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_DischargeCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_)
            {
              this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimDoor_GlazedDoor_Exterior* SimDoor_GlazedDoor_Exterior::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDoor_GlazedDoor_Exterior (*this, f, c);
      }

      SimDoor_GlazedDoor_Exterior& SimDoor_GlazedDoor_Exterior::
      operator= (const SimDoor_GlazedDoor_Exterior& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor& > (*this) = x;
          this->DoorTypeTag_ = x.DoorTypeTag_;
          this->DoorPanelOperation_ = x.DoorPanelOperation_;
          this->DoorConstructionType_ = x.DoorConstructionType_;
          this->DoorIsExternal_ = x.DoorIsExternal_;
          this->CompositeThermalTransmittance_ = x.CompositeThermalTransmittance_;
          this->DoorHeight_ = x.DoorHeight_;
          this->DoorWidth_ = x.DoorWidth_;
          this->DoorArea_ = x.DoorArea_;
          this->DoorPerimeter_ = x.DoorPerimeter_;
          this->DoorFrameDepth_ = x.DoorFrameDepth_;
          this->DoorFrameThickness_ = x.DoorFrameThickness_;
          this->DoorLeafThickness_ = x.DoorLeafThickness_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->VoidsInDoor_ = x.VoidsInDoor_;
          this->OpeningFilledByDoor_ = x.OpeningFilledByDoor_;
          this->SimDoor_ConstructionName_ = x.SimDoor_ConstructionName_;
          this->SimDoor_BldgSurfName_ = x.SimDoor_BldgSurfName_;
          this->SimDoor_ShadingContName_ = x.SimDoor_ShadingContName_;
          this->SimDoor_FrmAndDivName_ = x.SimDoor_FrmAndDivName_;
          this->SimDoor_Mult_ = x.SimDoor_Mult_;
          this->SimDoor_StartXCoord_ = x.SimDoor_StartXCoord_;
          this->SimDoor_StartZCoord_ = x.SimDoor_StartZCoord_;
          this->SimDoor_Length_ = x.SimDoor_Length_;
          this->SimDoor_Ht_ = x.SimDoor_Ht_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
          this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
          this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
          this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
          this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
        }

        return *this;
      }

      SimDoor_GlazedDoor_Exterior::
      ~SimDoor_GlazedDoor_Exterior ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

