// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowMover_Fan.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowMover_Fan
      // 

      const SimFlowMover_Fan::SimFlowMover_FanEfficiency_optional& SimFlowMover_Fan::
      SimFlowMover_FanEfficiency () const
      {
        return this->SimFlowMover_FanEfficiency_;
      }

      SimFlowMover_Fan::SimFlowMover_FanEfficiency_optional& SimFlowMover_Fan::
      SimFlowMover_FanEfficiency ()
      {
        return this->SimFlowMover_FanEfficiency_;
      }

      void SimFlowMover_Fan::
      SimFlowMover_FanEfficiency (const SimFlowMover_FanEfficiency_type& x)
      {
        this->SimFlowMover_FanEfficiency_.set (x);
      }

      void SimFlowMover_Fan::
      SimFlowMover_FanEfficiency (const SimFlowMover_FanEfficiency_optional& x)
      {
        this->SimFlowMover_FanEfficiency_ = x;
      }

      const SimFlowMover_Fan::SimFlowMover_PresRise_optional& SimFlowMover_Fan::
      SimFlowMover_PresRise () const
      {
        return this->SimFlowMover_PresRise_;
      }

      SimFlowMover_Fan::SimFlowMover_PresRise_optional& SimFlowMover_Fan::
      SimFlowMover_PresRise ()
      {
        return this->SimFlowMover_PresRise_;
      }

      void SimFlowMover_Fan::
      SimFlowMover_PresRise (const SimFlowMover_PresRise_type& x)
      {
        this->SimFlowMover_PresRise_.set (x);
      }

      void SimFlowMover_Fan::
      SimFlowMover_PresRise (const SimFlowMover_PresRise_optional& x)
      {
        this->SimFlowMover_PresRise_ = x;
      }

      const SimFlowMover_Fan::SimFlowMover_MaxFlowRate_optional& SimFlowMover_Fan::
      SimFlowMover_MaxFlowRate () const
      {
        return this->SimFlowMover_MaxFlowRate_;
      }

      SimFlowMover_Fan::SimFlowMover_MaxFlowRate_optional& SimFlowMover_Fan::
      SimFlowMover_MaxFlowRate ()
      {
        return this->SimFlowMover_MaxFlowRate_;
      }

      void SimFlowMover_Fan::
      SimFlowMover_MaxFlowRate (const SimFlowMover_MaxFlowRate_type& x)
      {
        this->SimFlowMover_MaxFlowRate_.set (x);
      }

      void SimFlowMover_Fan::
      SimFlowMover_MaxFlowRate (const SimFlowMover_MaxFlowRate_optional& x)
      {
        this->SimFlowMover_MaxFlowRate_ = x;
      }

      const SimFlowMover_Fan::FanPerf_NightVent_FanName_optional& SimFlowMover_Fan::
      FanPerf_NightVent_FanName () const
      {
        return this->FanPerf_NightVent_FanName_;
      }

      SimFlowMover_Fan::FanPerf_NightVent_FanName_optional& SimFlowMover_Fan::
      FanPerf_NightVent_FanName ()
      {
        return this->FanPerf_NightVent_FanName_;
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_FanName (const FanPerf_NightVent_FanName_type& x)
      {
        this->FanPerf_NightVent_FanName_.set (x);
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_FanName (const FanPerf_NightVent_FanName_optional& x)
      {
        this->FanPerf_NightVent_FanName_ = x;
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_FanName (::std::auto_ptr< FanPerf_NightVent_FanName_type > x)
      {
        this->FanPerf_NightVent_FanName_.set (x);
      }

      const SimFlowMover_Fan::FanPerf_NightVent_MotorEff_optional& SimFlowMover_Fan::
      FanPerf_NightVent_MotorEff () const
      {
        return this->FanPerf_NightVent_MotorEff_;
      }

      SimFlowMover_Fan::FanPerf_NightVent_MotorEff_optional& SimFlowMover_Fan::
      FanPerf_NightVent_MotorEff ()
      {
        return this->FanPerf_NightVent_MotorEff_;
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_MotorEff (const FanPerf_NightVent_MotorEff_type& x)
      {
        this->FanPerf_NightVent_MotorEff_.set (x);
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_MotorEff (const FanPerf_NightVent_MotorEff_optional& x)
      {
        this->FanPerf_NightVent_MotorEff_ = x;
      }

      const SimFlowMover_Fan::FanPerf_NightVent_MotorInAirstreamFrac_optional& SimFlowMover_Fan::
      FanPerf_NightVent_MotorInAirstreamFrac () const
      {
        return this->FanPerf_NightVent_MotorInAirstreamFrac_;
      }

      SimFlowMover_Fan::FanPerf_NightVent_MotorInAirstreamFrac_optional& SimFlowMover_Fan::
      FanPerf_NightVent_MotorInAirstreamFrac ()
      {
        return this->FanPerf_NightVent_MotorInAirstreamFrac_;
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_MotorInAirstreamFrac (const FanPerf_NightVent_MotorInAirstreamFrac_type& x)
      {
        this->FanPerf_NightVent_MotorInAirstreamFrac_.set (x);
      }

      void SimFlowMover_Fan::
      FanPerf_NightVent_MotorInAirstreamFrac (const FanPerf_NightVent_MotorInAirstreamFrac_optional& x)
      {
        this->FanPerf_NightVent_MotorInAirstreamFrac_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowMover_Fan
      //

      SimFlowMover_Fan::
      SimFlowMover_Fan (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowMover (RefId),
        SimFlowMover_FanEfficiency_ (this),
        SimFlowMover_PresRise_ (this),
        SimFlowMover_MaxFlowRate_ (this),
        FanPerf_NightVent_FanName_ (this),
        FanPerf_NightVent_MotorEff_ (this),
        FanPerf_NightVent_MotorInAirstreamFrac_ (this)
      {
      }

      SimFlowMover_Fan::
      SimFlowMover_Fan (const SimFlowMover_Fan& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowMover (x, f, c),
        SimFlowMover_FanEfficiency_ (x.SimFlowMover_FanEfficiency_, f, this),
        SimFlowMover_PresRise_ (x.SimFlowMover_PresRise_, f, this),
        SimFlowMover_MaxFlowRate_ (x.SimFlowMover_MaxFlowRate_, f, this),
        FanPerf_NightVent_FanName_ (x.FanPerf_NightVent_FanName_, f, this),
        FanPerf_NightVent_MotorEff_ (x.FanPerf_NightVent_MotorEff_, f, this),
        FanPerf_NightVent_MotorInAirstreamFrac_ (x.FanPerf_NightVent_MotorInAirstreamFrac_, f, this)
      {
      }

      SimFlowMover_Fan::
      SimFlowMover_Fan (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowMover (e, f | ::xml_schema::flags::base, c),
        SimFlowMover_FanEfficiency_ (this),
        SimFlowMover_PresRise_ (this),
        SimFlowMover_MaxFlowRate_ (this),
        FanPerf_NightVent_FanName_ (this),
        FanPerf_NightVent_MotorEff_ (this),
        FanPerf_NightVent_MotorInAirstreamFrac_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowMover_Fan::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowMover::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowMover_FanEfficiency
          //
          if (n.name () == "SimFlowMover_FanEfficiency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowMover_FanEfficiency_)
            {
              this->SimFlowMover_FanEfficiency_.set (SimFlowMover_FanEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_PresRise
          //
          if (n.name () == "SimFlowMover_PresRise" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowMover_PresRise_)
            {
              this->SimFlowMover_PresRise_.set (SimFlowMover_PresRise_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowMover_MaxFlowRate
          //
          if (n.name () == "SimFlowMover_MaxFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowMover_MaxFlowRate_)
            {
              this->SimFlowMover_MaxFlowRate_.set (SimFlowMover_MaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // FanPerf_NightVent_FanName
          //
          if (n.name () == "FanPerf_NightVent_FanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< FanPerf_NightVent_FanName_type > r (
              FanPerf_NightVent_FanName_traits::create (i, f, this));

            if (!this->FanPerf_NightVent_FanName_)
            {
              this->FanPerf_NightVent_FanName_.set (r);
              continue;
            }
          }

          // FanPerf_NightVent_MotorEff
          //
          if (n.name () == "FanPerf_NightVent_MotorEff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->FanPerf_NightVent_MotorEff_)
            {
              this->FanPerf_NightVent_MotorEff_.set (FanPerf_NightVent_MotorEff_traits::create (i, f, this));
              continue;
            }
          }

          // FanPerf_NightVent_MotorInAirstreamFrac
          //
          if (n.name () == "FanPerf_NightVent_MotorInAirstreamFrac" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->FanPerf_NightVent_MotorInAirstreamFrac_)
            {
              this->FanPerf_NightVent_MotorInAirstreamFrac_.set (FanPerf_NightVent_MotorInAirstreamFrac_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowMover_Fan* SimFlowMover_Fan::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowMover_Fan (*this, f, c);
      }

      SimFlowMover_Fan& SimFlowMover_Fan::
      operator= (const SimFlowMover_Fan& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowMover& > (*this) = x;
          this->SimFlowMover_FanEfficiency_ = x.SimFlowMover_FanEfficiency_;
          this->SimFlowMover_PresRise_ = x.SimFlowMover_PresRise_;
          this->SimFlowMover_MaxFlowRate_ = x.SimFlowMover_MaxFlowRate_;
          this->FanPerf_NightVent_FanName_ = x.FanPerf_NightVent_FanName_;
          this->FanPerf_NightVent_MotorEff_ = x.FanPerf_NightVent_MotorEff_;
          this->FanPerf_NightVent_MotorInAirstreamFrac_ = x.FanPerf_NightVent_MotorInAirstreamFrac_;
        }

        return *this;
      }

      SimFlowMover_Fan::
      ~SimFlowMover_Fan ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

