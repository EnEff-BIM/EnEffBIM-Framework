// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_HEAT_PUMP_HXX
#define SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_HEAT_PUMP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransferStorage_HotWaterTank_HeatPump;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransferstorage_hotwatertank.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransferStorage_HotWaterTank_HeatPump: public ::namespaces::Sim::MepModel::SimFlowEnergyTransferStorage_HotWaterTank
      {
        public:
        // SimFlowEnergyTransSto_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AvailSchedName_type > SimFlowEnergyTransSto_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AvailSchedName_type, char > SimFlowEnergyTransSto_AvailSchedName_traits;

        const SimFlowEnergyTransSto_AvailSchedName_optional&
        SimFlowEnergyTransSto_AvailSchedName () const;

        SimFlowEnergyTransSto_AvailSchedName_optional&
        SimFlowEnergyTransSto_AvailSchedName ();

        void
        SimFlowEnergyTransSto_AvailSchedName (const SimFlowEnergyTransSto_AvailSchedName_type& x);

        void
        SimFlowEnergyTransSto_AvailSchedName (const SimFlowEnergyTransSto_AvailSchedName_optional& x);

        void
        SimFlowEnergyTransSto_AvailSchedName (::std::auto_ptr< SimFlowEnergyTransSto_AvailSchedName_type > p);

        // SimFlowEnergyTransSto_CompSetpointTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_CompSetpointTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CompSetpointTempSchedName_type > SimFlowEnergyTransSto_CompSetpointTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CompSetpointTempSchedName_type, char > SimFlowEnergyTransSto_CompSetpointTempSchedName_traits;

        const SimFlowEnergyTransSto_CompSetpointTempSchedName_optional&
        SimFlowEnergyTransSto_CompSetpointTempSchedName () const;

        SimFlowEnergyTransSto_CompSetpointTempSchedName_optional&
        SimFlowEnergyTransSto_CompSetpointTempSchedName ();

        void
        SimFlowEnergyTransSto_CompSetpointTempSchedName (const SimFlowEnergyTransSto_CompSetpointTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_CompSetpointTempSchedName (const SimFlowEnergyTransSto_CompSetpointTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_CompSetpointTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_CompSetpointTempSchedName_type > p);

        // SimFlowEnergyTransSto_DeadBandTempDiff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_DeadBandTempDiff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_DeadBandTempDiff_type > SimFlowEnergyTransSto_DeadBandTempDiff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_DeadBandTempDiff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_DeadBandTempDiff_traits;

        const SimFlowEnergyTransSto_DeadBandTempDiff_optional&
        SimFlowEnergyTransSto_DeadBandTempDiff () const;

        SimFlowEnergyTransSto_DeadBandTempDiff_optional&
        SimFlowEnergyTransSto_DeadBandTempDiff ();

        void
        SimFlowEnergyTransSto_DeadBandTempDiff (const SimFlowEnergyTransSto_DeadBandTempDiff_type& x);

        void
        SimFlowEnergyTransSto_DeadBandTempDiff (const SimFlowEnergyTransSto_DeadBandTempDiff_optional& x);

        // SimFlowEnergyTransSto_CondWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_CondWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CondWaterInletNodeName_type > SimFlowEnergyTransSto_CondWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CondWaterInletNodeName_type, char > SimFlowEnergyTransSto_CondWaterInletNodeName_traits;

        const SimFlowEnergyTransSto_CondWaterInletNodeName_optional&
        SimFlowEnergyTransSto_CondWaterInletNodeName () const;

        SimFlowEnergyTransSto_CondWaterInletNodeName_optional&
        SimFlowEnergyTransSto_CondWaterInletNodeName ();

        void
        SimFlowEnergyTransSto_CondWaterInletNodeName (const SimFlowEnergyTransSto_CondWaterInletNodeName_type& x);

        void
        SimFlowEnergyTransSto_CondWaterInletNodeName (const SimFlowEnergyTransSto_CondWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_CondWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_CondWaterInletNodeName_type > p);

        // SimFlowEnergyTransSto_CondWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_CondWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CondWaterOutletNodeName_type > SimFlowEnergyTransSto_CondWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CondWaterOutletNodeName_type, char > SimFlowEnergyTransSto_CondWaterOutletNodeName_traits;

        const SimFlowEnergyTransSto_CondWaterOutletNodeName_optional&
        SimFlowEnergyTransSto_CondWaterOutletNodeName () const;

        SimFlowEnergyTransSto_CondWaterOutletNodeName_optional&
        SimFlowEnergyTransSto_CondWaterOutletNodeName ();

        void
        SimFlowEnergyTransSto_CondWaterOutletNodeName (const SimFlowEnergyTransSto_CondWaterOutletNodeName_type& x);

        void
        SimFlowEnergyTransSto_CondWaterOutletNodeName (const SimFlowEnergyTransSto_CondWaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_CondWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_CondWaterOutletNodeName_type > p);

        // SimFlowEnergyTransSto_CondWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_CondWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CondWaterFlowRate_type > SimFlowEnergyTransSto_CondWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CondWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_CondWaterFlowRate_traits;

        const SimFlowEnergyTransSto_CondWaterFlowRate_optional&
        SimFlowEnergyTransSto_CondWaterFlowRate () const;

        SimFlowEnergyTransSto_CondWaterFlowRate_optional&
        SimFlowEnergyTransSto_CondWaterFlowRate ();

        void
        SimFlowEnergyTransSto_CondWaterFlowRate (const SimFlowEnergyTransSto_CondWaterFlowRate_type& x);

        void
        SimFlowEnergyTransSto_CondWaterFlowRate (const SimFlowEnergyTransSto_CondWaterFlowRate_optional& x);

        // SimFlowEnergyTransSto_EvapAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_EvapAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_EvapAirFlowRate_type > SimFlowEnergyTransSto_EvapAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_EvapAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_EvapAirFlowRate_traits;

        const SimFlowEnergyTransSto_EvapAirFlowRate_optional&
        SimFlowEnergyTransSto_EvapAirFlowRate () const;

        SimFlowEnergyTransSto_EvapAirFlowRate_optional&
        SimFlowEnergyTransSto_EvapAirFlowRate ();

        void
        SimFlowEnergyTransSto_EvapAirFlowRate (const SimFlowEnergyTransSto_EvapAirFlowRate_type& x);

        void
        SimFlowEnergyTransSto_EvapAirFlowRate (const SimFlowEnergyTransSto_EvapAirFlowRate_optional& x);

        // SimFlowEnergyTransSto_InletAirConfiguration
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_InletAirConfiguration_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirConfiguration_type > SimFlowEnergyTransSto_InletAirConfiguration_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirConfiguration_type, char > SimFlowEnergyTransSto_InletAirConfiguration_traits;

        const SimFlowEnergyTransSto_InletAirConfiguration_optional&
        SimFlowEnergyTransSto_InletAirConfiguration () const;

        SimFlowEnergyTransSto_InletAirConfiguration_optional&
        SimFlowEnergyTransSto_InletAirConfiguration ();

        void
        SimFlowEnergyTransSto_InletAirConfiguration (const SimFlowEnergyTransSto_InletAirConfiguration_type& x);

        void
        SimFlowEnergyTransSto_InletAirConfiguration (const SimFlowEnergyTransSto_InletAirConfiguration_optional& x);

        void
        SimFlowEnergyTransSto_InletAirConfiguration (::std::auto_ptr< SimFlowEnergyTransSto_InletAirConfiguration_type > p);

        // SimFlowEnergyTransSto_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AirInNodeName_type > SimFlowEnergyTransSto_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AirInNodeName_type, char > SimFlowEnergyTransSto_AirInNodeName_traits;

        const SimFlowEnergyTransSto_AirInNodeName_optional&
        SimFlowEnergyTransSto_AirInNodeName () const;

        SimFlowEnergyTransSto_AirInNodeName_optional&
        SimFlowEnergyTransSto_AirInNodeName ();

        void
        SimFlowEnergyTransSto_AirInNodeName (const SimFlowEnergyTransSto_AirInNodeName_type& x);

        void
        SimFlowEnergyTransSto_AirInNodeName (const SimFlowEnergyTransSto_AirInNodeName_optional& x);

        void
        SimFlowEnergyTransSto_AirInNodeName (::std::auto_ptr< SimFlowEnergyTransSto_AirInNodeName_type > p);

        // SimFlowEnergyTransSto_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_AirOutNodeName_type > SimFlowEnergyTransSto_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_AirOutNodeName_type, char > SimFlowEnergyTransSto_AirOutNodeName_traits;

        const SimFlowEnergyTransSto_AirOutNodeName_optional&
        SimFlowEnergyTransSto_AirOutNodeName () const;

        SimFlowEnergyTransSto_AirOutNodeName_optional&
        SimFlowEnergyTransSto_AirOutNodeName ();

        void
        SimFlowEnergyTransSto_AirOutNodeName (const SimFlowEnergyTransSto_AirOutNodeName_type& x);

        void
        SimFlowEnergyTransSto_AirOutNodeName (const SimFlowEnergyTransSto_AirOutNodeName_optional& x);

        void
        SimFlowEnergyTransSto_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTransSto_AirOutNodeName_type > p);

        // SimFlowEnergyTransSto_OutdrAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_OutdrAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OutdrAirNodeName_type > SimFlowEnergyTransSto_OutdrAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OutdrAirNodeName_type, char > SimFlowEnergyTransSto_OutdrAirNodeName_traits;

        const SimFlowEnergyTransSto_OutdrAirNodeName_optional&
        SimFlowEnergyTransSto_OutdrAirNodeName () const;

        SimFlowEnergyTransSto_OutdrAirNodeName_optional&
        SimFlowEnergyTransSto_OutdrAirNodeName ();

        void
        SimFlowEnergyTransSto_OutdrAirNodeName (const SimFlowEnergyTransSto_OutdrAirNodeName_type& x);

        void
        SimFlowEnergyTransSto_OutdrAirNodeName (const SimFlowEnergyTransSto_OutdrAirNodeName_optional& x);

        void
        SimFlowEnergyTransSto_OutdrAirNodeName (::std::auto_ptr< SimFlowEnergyTransSto_OutdrAirNodeName_type > p);

        // SimFlowEnergyTransSto_ExhAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_ExhAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_ExhAirNodeName_type > SimFlowEnergyTransSto_ExhAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_ExhAirNodeName_type, char > SimFlowEnergyTransSto_ExhAirNodeName_traits;

        const SimFlowEnergyTransSto_ExhAirNodeName_optional&
        SimFlowEnergyTransSto_ExhAirNodeName () const;

        SimFlowEnergyTransSto_ExhAirNodeName_optional&
        SimFlowEnergyTransSto_ExhAirNodeName ();

        void
        SimFlowEnergyTransSto_ExhAirNodeName (const SimFlowEnergyTransSto_ExhAirNodeName_type& x);

        void
        SimFlowEnergyTransSto_ExhAirNodeName (const SimFlowEnergyTransSto_ExhAirNodeName_optional& x);

        void
        SimFlowEnergyTransSto_ExhAirNodeName (::std::auto_ptr< SimFlowEnergyTransSto_ExhAirNodeName_type > p);

        // SimFlowEnergyTransSto_InletAirTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_InletAirTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirTempSchedName_type > SimFlowEnergyTransSto_InletAirTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirTempSchedName_type, char > SimFlowEnergyTransSto_InletAirTempSchedName_traits;

        const SimFlowEnergyTransSto_InletAirTempSchedName_optional&
        SimFlowEnergyTransSto_InletAirTempSchedName () const;

        SimFlowEnergyTransSto_InletAirTempSchedName_optional&
        SimFlowEnergyTransSto_InletAirTempSchedName ();

        void
        SimFlowEnergyTransSto_InletAirTempSchedName (const SimFlowEnergyTransSto_InletAirTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_InletAirTempSchedName (const SimFlowEnergyTransSto_InletAirTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_InletAirTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_InletAirTempSchedName_type > p);

        // SimFlowEnergyTransSto_InletAirHumidSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_InletAirHumidSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirHumidSchedName_type > SimFlowEnergyTransSto_InletAirHumidSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirHumidSchedName_type, char > SimFlowEnergyTransSto_InletAirHumidSchedName_traits;

        const SimFlowEnergyTransSto_InletAirHumidSchedName_optional&
        SimFlowEnergyTransSto_InletAirHumidSchedName () const;

        SimFlowEnergyTransSto_InletAirHumidSchedName_optional&
        SimFlowEnergyTransSto_InletAirHumidSchedName ();

        void
        SimFlowEnergyTransSto_InletAirHumidSchedName (const SimFlowEnergyTransSto_InletAirHumidSchedName_type& x);

        void
        SimFlowEnergyTransSto_InletAirHumidSchedName (const SimFlowEnergyTransSto_InletAirHumidSchedName_optional& x);

        void
        SimFlowEnergyTransSto_InletAirHumidSchedName (::std::auto_ptr< SimFlowEnergyTransSto_InletAirHumidSchedName_type > p);

        // SimFlowEnergyTransSto_InletAirZoneName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_InletAirZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirZoneName_type > SimFlowEnergyTransSto_InletAirZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirZoneName_type, char > SimFlowEnergyTransSto_InletAirZoneName_traits;

        const SimFlowEnergyTransSto_InletAirZoneName_optional&
        SimFlowEnergyTransSto_InletAirZoneName () const;

        SimFlowEnergyTransSto_InletAirZoneName_optional&
        SimFlowEnergyTransSto_InletAirZoneName ();

        void
        SimFlowEnergyTransSto_InletAirZoneName (const SimFlowEnergyTransSto_InletAirZoneName_type& x);

        void
        SimFlowEnergyTransSto_InletAirZoneName (const SimFlowEnergyTransSto_InletAirZoneName_optional& x);

        void
        SimFlowEnergyTransSto_InletAirZoneName (::std::auto_ptr< SimFlowEnergyTransSto_InletAirZoneName_type > p);

        // SimFlowEnergyTransSto_TankObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_TankObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_TankObjType_type > SimFlowEnergyTransSto_TankObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_TankObjType_type, char > SimFlowEnergyTransSto_TankObjType_traits;

        const SimFlowEnergyTransSto_TankObjType_optional&
        SimFlowEnergyTransSto_TankObjType () const;

        SimFlowEnergyTransSto_TankObjType_optional&
        SimFlowEnergyTransSto_TankObjType ();

        void
        SimFlowEnergyTransSto_TankObjType (const SimFlowEnergyTransSto_TankObjType_type& x);

        void
        SimFlowEnergyTransSto_TankObjType (const SimFlowEnergyTransSto_TankObjType_optional& x);

        void
        SimFlowEnergyTransSto_TankObjType (::std::auto_ptr< SimFlowEnergyTransSto_TankObjType_type > p);

        // SimFlowEnergyTransSto_TankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_TankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_TankName_type > SimFlowEnergyTransSto_TankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_TankName_type, char > SimFlowEnergyTransSto_TankName_traits;

        const SimFlowEnergyTransSto_TankName_optional&
        SimFlowEnergyTransSto_TankName () const;

        SimFlowEnergyTransSto_TankName_optional&
        SimFlowEnergyTransSto_TankName ();

        void
        SimFlowEnergyTransSto_TankName (const SimFlowEnergyTransSto_TankName_type& x);

        void
        SimFlowEnergyTransSto_TankName (const SimFlowEnergyTransSto_TankName_optional& x);

        void
        SimFlowEnergyTransSto_TankName (::std::auto_ptr< SimFlowEnergyTransSto_TankName_type > p);

        // SimFlowEnergyTransSto_TankUseSideInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_TankUseSideInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_TankUseSideInletNodeName_type > SimFlowEnergyTransSto_TankUseSideInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_TankUseSideInletNodeName_type, char > SimFlowEnergyTransSto_TankUseSideInletNodeName_traits;

        const SimFlowEnergyTransSto_TankUseSideInletNodeName_optional&
        SimFlowEnergyTransSto_TankUseSideInletNodeName () const;

        SimFlowEnergyTransSto_TankUseSideInletNodeName_optional&
        SimFlowEnergyTransSto_TankUseSideInletNodeName ();

        void
        SimFlowEnergyTransSto_TankUseSideInletNodeName (const SimFlowEnergyTransSto_TankUseSideInletNodeName_type& x);

        void
        SimFlowEnergyTransSto_TankUseSideInletNodeName (const SimFlowEnergyTransSto_TankUseSideInletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_TankUseSideInletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_TankUseSideInletNodeName_type > p);

        // SimFlowEnergyTransSto_TankUseSideOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_TankUseSideOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_TankUseSideOutletNodeName_type > SimFlowEnergyTransSto_TankUseSideOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_TankUseSideOutletNodeName_type, char > SimFlowEnergyTransSto_TankUseSideOutletNodeName_traits;

        const SimFlowEnergyTransSto_TankUseSideOutletNodeName_optional&
        SimFlowEnergyTransSto_TankUseSideOutletNodeName () const;

        SimFlowEnergyTransSto_TankUseSideOutletNodeName_optional&
        SimFlowEnergyTransSto_TankUseSideOutletNodeName ();

        void
        SimFlowEnergyTransSto_TankUseSideOutletNodeName (const SimFlowEnergyTransSto_TankUseSideOutletNodeName_type& x);

        void
        SimFlowEnergyTransSto_TankUseSideOutletNodeName (const SimFlowEnergyTransSto_TankUseSideOutletNodeName_optional& x);

        void
        SimFlowEnergyTransSto_TankUseSideOutletNodeName (::std::auto_ptr< SimFlowEnergyTransSto_TankUseSideOutletNodeName_type > p);

        // SimFlowEnergyTransSto_DXCoilObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_DXCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_DXCoilObjType_type > SimFlowEnergyTransSto_DXCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_DXCoilObjType_type, char > SimFlowEnergyTransSto_DXCoilObjType_traits;

        const SimFlowEnergyTransSto_DXCoilObjType_optional&
        SimFlowEnergyTransSto_DXCoilObjType () const;

        SimFlowEnergyTransSto_DXCoilObjType_optional&
        SimFlowEnergyTransSto_DXCoilObjType ();

        void
        SimFlowEnergyTransSto_DXCoilObjType (const SimFlowEnergyTransSto_DXCoilObjType_type& x);

        void
        SimFlowEnergyTransSto_DXCoilObjType (const SimFlowEnergyTransSto_DXCoilObjType_optional& x);

        void
        SimFlowEnergyTransSto_DXCoilObjType (::std::auto_ptr< SimFlowEnergyTransSto_DXCoilObjType_type > p);

        // SimFlowEnergyTransSto_DXCoilName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_DXCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_DXCoilName_type > SimFlowEnergyTransSto_DXCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_DXCoilName_type, char > SimFlowEnergyTransSto_DXCoilName_traits;

        const SimFlowEnergyTransSto_DXCoilName_optional&
        SimFlowEnergyTransSto_DXCoilName () const;

        SimFlowEnergyTransSto_DXCoilName_optional&
        SimFlowEnergyTransSto_DXCoilName ();

        void
        SimFlowEnergyTransSto_DXCoilName (const SimFlowEnergyTransSto_DXCoilName_type& x);

        void
        SimFlowEnergyTransSto_DXCoilName (const SimFlowEnergyTransSto_DXCoilName_optional& x);

        void
        SimFlowEnergyTransSto_DXCoilName (::std::auto_ptr< SimFlowEnergyTransSto_DXCoilName_type > p);

        // SimFlowEnergyTransSto_MinInletAirTempForCompOp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_MinInletAirTempForCompOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_MinInletAirTempForCompOp_type > SimFlowEnergyTransSto_MinInletAirTempForCompOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_MinInletAirTempForCompOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_MinInletAirTempForCompOp_traits;

        const SimFlowEnergyTransSto_MinInletAirTempForCompOp_optional&
        SimFlowEnergyTransSto_MinInletAirTempForCompOp () const;

        SimFlowEnergyTransSto_MinInletAirTempForCompOp_optional&
        SimFlowEnergyTransSto_MinInletAirTempForCompOp ();

        void
        SimFlowEnergyTransSto_MinInletAirTempForCompOp (const SimFlowEnergyTransSto_MinInletAirTempForCompOp_type& x);

        void
        SimFlowEnergyTransSto_MinInletAirTempForCompOp (const SimFlowEnergyTransSto_MinInletAirTempForCompOp_optional& x);

        // SimFlowEnergyTransSto_CompLocation
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_CompLocation_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CompLocation_type > SimFlowEnergyTransSto_CompLocation_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CompLocation_type, char > SimFlowEnergyTransSto_CompLocation_traits;

        const SimFlowEnergyTransSto_CompLocation_optional&
        SimFlowEnergyTransSto_CompLocation () const;

        SimFlowEnergyTransSto_CompLocation_optional&
        SimFlowEnergyTransSto_CompLocation ();

        void
        SimFlowEnergyTransSto_CompLocation (const SimFlowEnergyTransSto_CompLocation_type& x);

        void
        SimFlowEnergyTransSto_CompLocation (const SimFlowEnergyTransSto_CompLocation_optional& x);

        void
        SimFlowEnergyTransSto_CompLocation (::std::auto_ptr< SimFlowEnergyTransSto_CompLocation_type > p);

        // SimFlowEnergyTransSto_CompAmbTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_CompAmbTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_CompAmbTempSchedName_type > SimFlowEnergyTransSto_CompAmbTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_CompAmbTempSchedName_type, char > SimFlowEnergyTransSto_CompAmbTempSchedName_traits;

        const SimFlowEnergyTransSto_CompAmbTempSchedName_optional&
        SimFlowEnergyTransSto_CompAmbTempSchedName () const;

        SimFlowEnergyTransSto_CompAmbTempSchedName_optional&
        SimFlowEnergyTransSto_CompAmbTempSchedName ();

        void
        SimFlowEnergyTransSto_CompAmbTempSchedName (const SimFlowEnergyTransSto_CompAmbTempSchedName_type& x);

        void
        SimFlowEnergyTransSto_CompAmbTempSchedName (const SimFlowEnergyTransSto_CompAmbTempSchedName_optional& x);

        void
        SimFlowEnergyTransSto_CompAmbTempSchedName (::std::auto_ptr< SimFlowEnergyTransSto_CompAmbTempSchedName_type > p);

        // SimFlowEnergyTransSto_FanObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_FanObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_FanObjType_type > SimFlowEnergyTransSto_FanObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_FanObjType_type, char > SimFlowEnergyTransSto_FanObjType_traits;

        const SimFlowEnergyTransSto_FanObjType_optional&
        SimFlowEnergyTransSto_FanObjType () const;

        SimFlowEnergyTransSto_FanObjType_optional&
        SimFlowEnergyTransSto_FanObjType ();

        void
        SimFlowEnergyTransSto_FanObjType (const SimFlowEnergyTransSto_FanObjType_type& x);

        void
        SimFlowEnergyTransSto_FanObjType (const SimFlowEnergyTransSto_FanObjType_optional& x);

        void
        SimFlowEnergyTransSto_FanObjType (::std::auto_ptr< SimFlowEnergyTransSto_FanObjType_type > p);

        // SimFlowEnergyTransSto_FanName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_FanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_FanName_type > SimFlowEnergyTransSto_FanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_FanName_type, char > SimFlowEnergyTransSto_FanName_traits;

        const SimFlowEnergyTransSto_FanName_optional&
        SimFlowEnergyTransSto_FanName () const;

        SimFlowEnergyTransSto_FanName_optional&
        SimFlowEnergyTransSto_FanName ();

        void
        SimFlowEnergyTransSto_FanName (const SimFlowEnergyTransSto_FanName_type& x);

        void
        SimFlowEnergyTransSto_FanName (const SimFlowEnergyTransSto_FanName_optional& x);

        void
        SimFlowEnergyTransSto_FanName (::std::auto_ptr< SimFlowEnergyTransSto_FanName_type > p);

        // SimFlowEnergyTransSto_FanPlacement
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_FanPlacement_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_FanPlacement_type > SimFlowEnergyTransSto_FanPlacement_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_FanPlacement_type, char > SimFlowEnergyTransSto_FanPlacement_traits;

        const SimFlowEnergyTransSto_FanPlacement_optional&
        SimFlowEnergyTransSto_FanPlacement () const;

        SimFlowEnergyTransSto_FanPlacement_optional&
        SimFlowEnergyTransSto_FanPlacement ();

        void
        SimFlowEnergyTransSto_FanPlacement (const SimFlowEnergyTransSto_FanPlacement_type& x);

        void
        SimFlowEnergyTransSto_FanPlacement (const SimFlowEnergyTransSto_FanPlacement_optional& x);

        void
        SimFlowEnergyTransSto_FanPlacement (::std::auto_ptr< SimFlowEnergyTransSto_FanPlacement_type > p);

        // SimFlowEnergyTransSto_OnCycleParasiticElecLoad
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_OnCycleParasiticElecLoad_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OnCycleParasiticElecLoad_type > SimFlowEnergyTransSto_OnCycleParasiticElecLoad_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OnCycleParasiticElecLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_OnCycleParasiticElecLoad_traits;

        const SimFlowEnergyTransSto_OnCycleParasiticElecLoad_optional&
        SimFlowEnergyTransSto_OnCycleParasiticElecLoad () const;

        SimFlowEnergyTransSto_OnCycleParasiticElecLoad_optional&
        SimFlowEnergyTransSto_OnCycleParasiticElecLoad ();

        void
        SimFlowEnergyTransSto_OnCycleParasiticElecLoad (const SimFlowEnergyTransSto_OnCycleParasiticElecLoad_type& x);

        void
        SimFlowEnergyTransSto_OnCycleParasiticElecLoad (const SimFlowEnergyTransSto_OnCycleParasiticElecLoad_optional& x);

        // SimFlowEnergyTransSto_fCycleParasiticElecLoad
        //
        typedef ::xml_schema::double_ SimFlowEnergyTransSto_fCycleParasiticElecLoad_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_fCycleParasiticElecLoad_type > SimFlowEnergyTransSto_fCycleParasiticElecLoad_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_fCycleParasiticElecLoad_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTransSto_fCycleParasiticElecLoad_traits;

        const SimFlowEnergyTransSto_fCycleParasiticElecLoad_optional&
        SimFlowEnergyTransSto_fCycleParasiticElecLoad () const;

        SimFlowEnergyTransSto_fCycleParasiticElecLoad_optional&
        SimFlowEnergyTransSto_fCycleParasiticElecLoad ();

        void
        SimFlowEnergyTransSto_fCycleParasiticElecLoad (const SimFlowEnergyTransSto_fCycleParasiticElecLoad_type& x);

        void
        SimFlowEnergyTransSto_fCycleParasiticElecLoad (const SimFlowEnergyTransSto_fCycleParasiticElecLoad_optional& x);

        // SimFlowEnergyTransSto_ParasiticHeatRejectionLocation
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_type > SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_type, char > SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_traits;

        const SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_optional&
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation () const;

        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_optional&
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation ();

        void
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation (const SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_type& x);

        void
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation (const SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_optional& x);

        void
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation (::std::auto_ptr< SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_type > p);

        // SimFlowEnergyTransSto_InletAirMixerNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_InletAirMixerNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirMixerNodeName_type > SimFlowEnergyTransSto_InletAirMixerNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirMixerNodeName_type, char > SimFlowEnergyTransSto_InletAirMixerNodeName_traits;

        const SimFlowEnergyTransSto_InletAirMixerNodeName_optional&
        SimFlowEnergyTransSto_InletAirMixerNodeName () const;

        SimFlowEnergyTransSto_InletAirMixerNodeName_optional&
        SimFlowEnergyTransSto_InletAirMixerNodeName ();

        void
        SimFlowEnergyTransSto_InletAirMixerNodeName (const SimFlowEnergyTransSto_InletAirMixerNodeName_type& x);

        void
        SimFlowEnergyTransSto_InletAirMixerNodeName (const SimFlowEnergyTransSto_InletAirMixerNodeName_optional& x);

        void
        SimFlowEnergyTransSto_InletAirMixerNodeName (::std::auto_ptr< SimFlowEnergyTransSto_InletAirMixerNodeName_type > p);

        // SimFlowEnergyTransSto_OutletAirSplitterNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_OutletAirSplitterNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_OutletAirSplitterNodeName_type > SimFlowEnergyTransSto_OutletAirSplitterNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_OutletAirSplitterNodeName_type, char > SimFlowEnergyTransSto_OutletAirSplitterNodeName_traits;

        const SimFlowEnergyTransSto_OutletAirSplitterNodeName_optional&
        SimFlowEnergyTransSto_OutletAirSplitterNodeName () const;

        SimFlowEnergyTransSto_OutletAirSplitterNodeName_optional&
        SimFlowEnergyTransSto_OutletAirSplitterNodeName ();

        void
        SimFlowEnergyTransSto_OutletAirSplitterNodeName (const SimFlowEnergyTransSto_OutletAirSplitterNodeName_type& x);

        void
        SimFlowEnergyTransSto_OutletAirSplitterNodeName (const SimFlowEnergyTransSto_OutletAirSplitterNodeName_optional& x);

        void
        SimFlowEnergyTransSto_OutletAirSplitterNodeName (::std::auto_ptr< SimFlowEnergyTransSto_OutletAirSplitterNodeName_type > p);

        // SimFlowEnergyTransSto_InletAirMixerSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTransSto_InletAirMixerSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_InletAirMixerSchedName_type > SimFlowEnergyTransSto_InletAirMixerSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_InletAirMixerSchedName_type, char > SimFlowEnergyTransSto_InletAirMixerSchedName_traits;

        const SimFlowEnergyTransSto_InletAirMixerSchedName_optional&
        SimFlowEnergyTransSto_InletAirMixerSchedName () const;

        SimFlowEnergyTransSto_InletAirMixerSchedName_optional&
        SimFlowEnergyTransSto_InletAirMixerSchedName ();

        void
        SimFlowEnergyTransSto_InletAirMixerSchedName (const SimFlowEnergyTransSto_InletAirMixerSchedName_type& x);

        void
        SimFlowEnergyTransSto_InletAirMixerSchedName (const SimFlowEnergyTransSto_InletAirMixerSchedName_optional& x);

        void
        SimFlowEnergyTransSto_InletAirMixerSchedName (::std::auto_ptr< SimFlowEnergyTransSto_InletAirMixerSchedName_type > p);

        // SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank
        //
        typedef ::xml_schema::string SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_type > SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_type, char > SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_traits;

        const SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_optional&
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank () const;

        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_optional&
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank ();

        void
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank (const SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_type& x);

        void
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank (const SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_optional& x);

        void
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank (::std::auto_ptr< SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_type > p);

        // Constructors.
        //
        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump (const RefId_type&);

        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump (const ::xercesc::DOMElement& e,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump (const SimFlowEnergyTransferStorage_HotWaterTank_HeatPump& x,
                                                            ::xml_schema::flags f = 0,
                                                            ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransferStorage_HotWaterTank_HeatPump*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransferStorage_HotWaterTank_HeatPump&
        operator= (const SimFlowEnergyTransferStorage_HotWaterTank_HeatPump& x);

        virtual 
        ~SimFlowEnergyTransferStorage_HotWaterTank_HeatPump ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTransSto_AvailSchedName_optional SimFlowEnergyTransSto_AvailSchedName_;
        SimFlowEnergyTransSto_CompSetpointTempSchedName_optional SimFlowEnergyTransSto_CompSetpointTempSchedName_;
        SimFlowEnergyTransSto_DeadBandTempDiff_optional SimFlowEnergyTransSto_DeadBandTempDiff_;
        SimFlowEnergyTransSto_CondWaterInletNodeName_optional SimFlowEnergyTransSto_CondWaterInletNodeName_;
        SimFlowEnergyTransSto_CondWaterOutletNodeName_optional SimFlowEnergyTransSto_CondWaterOutletNodeName_;
        SimFlowEnergyTransSto_CondWaterFlowRate_optional SimFlowEnergyTransSto_CondWaterFlowRate_;
        SimFlowEnergyTransSto_EvapAirFlowRate_optional SimFlowEnergyTransSto_EvapAirFlowRate_;
        SimFlowEnergyTransSto_InletAirConfiguration_optional SimFlowEnergyTransSto_InletAirConfiguration_;
        SimFlowEnergyTransSto_AirInNodeName_optional SimFlowEnergyTransSto_AirInNodeName_;
        SimFlowEnergyTransSto_AirOutNodeName_optional SimFlowEnergyTransSto_AirOutNodeName_;
        SimFlowEnergyTransSto_OutdrAirNodeName_optional SimFlowEnergyTransSto_OutdrAirNodeName_;
        SimFlowEnergyTransSto_ExhAirNodeName_optional SimFlowEnergyTransSto_ExhAirNodeName_;
        SimFlowEnergyTransSto_InletAirTempSchedName_optional SimFlowEnergyTransSto_InletAirTempSchedName_;
        SimFlowEnergyTransSto_InletAirHumidSchedName_optional SimFlowEnergyTransSto_InletAirHumidSchedName_;
        SimFlowEnergyTransSto_InletAirZoneName_optional SimFlowEnergyTransSto_InletAirZoneName_;
        SimFlowEnergyTransSto_TankObjType_optional SimFlowEnergyTransSto_TankObjType_;
        SimFlowEnergyTransSto_TankName_optional SimFlowEnergyTransSto_TankName_;
        SimFlowEnergyTransSto_TankUseSideInletNodeName_optional SimFlowEnergyTransSto_TankUseSideInletNodeName_;
        SimFlowEnergyTransSto_TankUseSideOutletNodeName_optional SimFlowEnergyTransSto_TankUseSideOutletNodeName_;
        SimFlowEnergyTransSto_DXCoilObjType_optional SimFlowEnergyTransSto_DXCoilObjType_;
        SimFlowEnergyTransSto_DXCoilName_optional SimFlowEnergyTransSto_DXCoilName_;
        SimFlowEnergyTransSto_MinInletAirTempForCompOp_optional SimFlowEnergyTransSto_MinInletAirTempForCompOp_;
        SimFlowEnergyTransSto_CompLocation_optional SimFlowEnergyTransSto_CompLocation_;
        SimFlowEnergyTransSto_CompAmbTempSchedName_optional SimFlowEnergyTransSto_CompAmbTempSchedName_;
        SimFlowEnergyTransSto_FanObjType_optional SimFlowEnergyTransSto_FanObjType_;
        SimFlowEnergyTransSto_FanName_optional SimFlowEnergyTransSto_FanName_;
        SimFlowEnergyTransSto_FanPlacement_optional SimFlowEnergyTransSto_FanPlacement_;
        SimFlowEnergyTransSto_OnCycleParasiticElecLoad_optional SimFlowEnergyTransSto_OnCycleParasiticElecLoad_;
        SimFlowEnergyTransSto_fCycleParasiticElecLoad_optional SimFlowEnergyTransSto_fCycleParasiticElecLoad_;
        SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_optional SimFlowEnergyTransSto_ParasiticHeatRejectionLocation_;
        SimFlowEnergyTransSto_InletAirMixerNodeName_optional SimFlowEnergyTransSto_InletAirMixerNodeName_;
        SimFlowEnergyTransSto_OutletAirSplitterNodeName_optional SimFlowEnergyTransSto_OutletAirSplitterNodeName_;
        SimFlowEnergyTransSto_InletAirMixerSchedName_optional SimFlowEnergyTransSto_InletAirMixerSchedName_;
        SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_optional SimFlowEnergyTransSto_ControlSensorLocInStratifiedTank_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_STORAGE_HOT_WATER_TANK_HEAT_PUMP_HXX
