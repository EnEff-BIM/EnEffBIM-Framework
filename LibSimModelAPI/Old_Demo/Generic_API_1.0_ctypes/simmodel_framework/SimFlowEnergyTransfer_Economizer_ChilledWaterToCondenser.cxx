// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser
      // 

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_HeatExchngType_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngType () const
      {
        return this->SimFlowEnergyTrans_HeatExchngType_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_HeatExchngType_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngType ()
      {
        return this->SimFlowEnergyTrans_HeatExchngType_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngType (const SimFlowEnergyTrans_HeatExchngType_type& x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngType (const SimFlowEnergyTrans_HeatExchngType_optional& x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngType (::std::auto_ptr< SimFlowEnergyTrans_HeatExchngType_type > x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondInletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondInletNodeName () const
      {
        return this->SimFlowEnergyTrans_CondInletNodeName_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondInletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondInletNodeName ()
      {
        return this->SimFlowEnergyTrans_CondInletNodeName_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondInletNodeName (const SimFlowEnergyTrans_CondInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_CondInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondInletNodeName (const SimFlowEnergyTrans_CondInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_CondInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_CondInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondOutletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_CondOutletNodeName_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondOutletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_CondOutletNodeName_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondOutletNodeName (const SimFlowEnergyTrans_CondOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_CondOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondOutletNodeName (const SimFlowEnergyTrans_CondOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_CondOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_CondOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterInletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_ChilledWaterInletNodeName_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterInletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_ChilledWaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterInletNodeName (const SimFlowEnergyTrans_ChilledWaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterInletNodeName (const SimFlowEnergyTrans_ChilledWaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ChilledWaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ChilledWaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterOutletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterOutletNodeName_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterOutletNodeName (const SimFlowEnergyTrans_ChilledWaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterOutletNodeName (const SimFlowEnergyTrans_ChilledWaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ChilledWaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate () const
      {
        return this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate ()
      {
        return this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate (const SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate (const SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondSideMaxFlowRate_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondSideMaxFlowRate () const
      {
        return this->SimFlowEnergyTrans_CondSideMaxFlowRate_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_CondSideMaxFlowRate_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondSideMaxFlowRate ()
      {
        return this->SimFlowEnergyTrans_CondSideMaxFlowRate_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondSideMaxFlowRate (const SimFlowEnergyTrans_CondSideMaxFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_CondSideMaxFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_CondSideMaxFlowRate (const SimFlowEnergyTrans_CondSideMaxFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_CondSideMaxFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal () const
      {
        return this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal ()
      {
        return this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal (const SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_type& x)
      {
        this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal (const SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_optional& x)
      {
        this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_ = x;
      }

      const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng () const
      {
        return this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_optional& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng ()
      {
        return this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_;
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng (const SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_type& x)
      {
        this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_.set (x);
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng (const SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_optional& x)
      {
        this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser
      //

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Economizer (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_HeatExchngType_ (this),
        SimFlowEnergyTrans_CondInletNodeName_ (this),
        SimFlowEnergyTrans_CondOutletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterInletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterOutletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_ (this),
        SimFlowEnergyTrans_CondSideMaxFlowRate_ (this),
        SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_ (this),
        SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_ (this)
      {
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser (const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser& x,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Economizer (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_HeatExchngType_ (x.SimFlowEnergyTrans_HeatExchngType_, f, this),
        SimFlowEnergyTrans_CondInletNodeName_ (x.SimFlowEnergyTrans_CondInletNodeName_, f, this),
        SimFlowEnergyTrans_CondOutletNodeName_ (x.SimFlowEnergyTrans_CondOutletNodeName_, f, this),
        SimFlowEnergyTrans_ChilledWaterInletNodeName_ (x.SimFlowEnergyTrans_ChilledWaterInletNodeName_, f, this),
        SimFlowEnergyTrans_ChilledWaterOutletNodeName_ (x.SimFlowEnergyTrans_ChilledWaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_ (x.SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_, f, this),
        SimFlowEnergyTrans_CondSideMaxFlowRate_ (x.SimFlowEnergyTrans_CondSideMaxFlowRate_, f, this),
        SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_ (x.SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_, f, this),
        SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_ (x.SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_, f, this)
      {
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser (const ::xercesc::DOMElement& e,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Economizer (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_HeatExchngType_ (this),
        SimFlowEnergyTrans_CondInletNodeName_ (this),
        SimFlowEnergyTrans_CondOutletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterInletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterOutletNodeName_ (this),
        SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_ (this),
        SimFlowEnergyTrans_CondSideMaxFlowRate_ (this),
        SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_ (this),
        SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Economizer::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatExchngType
          //
          if (n.name () == "SimFlowEnergyTrans_HeatExchngType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatExchngType_type > r (
              SimFlowEnergyTrans_HeatExchngType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatExchngType_)
            {
              this->SimFlowEnergyTrans_HeatExchngType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_CondInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondInletNodeName_type > r (
              SimFlowEnergyTrans_CondInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondInletNodeName_)
            {
              this->SimFlowEnergyTrans_CondInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CondOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_CondOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_CondOutletNodeName_type > r (
              SimFlowEnergyTrans_CondOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_CondOutletNodeName_)
            {
              this->SimFlowEnergyTrans_CondOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ChilledWaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ChilledWaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ChilledWaterInletNodeName_type > r (
              SimFlowEnergyTrans_ChilledWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ChilledWaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_ChilledWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ChilledWaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ChilledWaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ChilledWaterOutletNodeName_type > r (
              SimFlowEnergyTrans_ChilledWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_)
            {
              this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_.set (SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_CondSideMaxFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_CondSideMaxFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_CondSideMaxFlowRate_)
            {
              this->SimFlowEnergyTrans_CondSideMaxFlowRate_.set (SimFlowEnergyTrans_CondSideMaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal
          //
          if (n.name () == "SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_)
            {
              this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_.set (SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng
          //
          if (n.name () == "SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_)
            {
              this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_.set (SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser* SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser (*this, f, c);
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser& SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      operator= (const SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_Economizer& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_HeatExchngType_ = x.SimFlowEnergyTrans_HeatExchngType_;
          this->SimFlowEnergyTrans_CondInletNodeName_ = x.SimFlowEnergyTrans_CondInletNodeName_;
          this->SimFlowEnergyTrans_CondOutletNodeName_ = x.SimFlowEnergyTrans_CondOutletNodeName_;
          this->SimFlowEnergyTrans_ChilledWaterInletNodeName_ = x.SimFlowEnergyTrans_ChilledWaterInletNodeName_;
          this->SimFlowEnergyTrans_ChilledWaterOutletNodeName_ = x.SimFlowEnergyTrans_ChilledWaterOutletNodeName_;
          this->SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_ = x.SimFlowEnergyTrans_ChilledWaterSideMaxFlowRate_;
          this->SimFlowEnergyTrans_CondSideMaxFlowRate_ = x.SimFlowEnergyTrans_CondSideMaxFlowRate_;
          this->SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_ = x.SimFlowEnergyTrans_HeatExchngUFactorTimesAreaVal_;
          this->SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_ = x.SimFlowEnergyTrans_MinTempDiffToActivateHeatExchng_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser::
      ~SimFlowEnergyTransfer_Economizer_ChilledWaterToCondenser ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

