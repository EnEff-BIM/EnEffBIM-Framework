// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSolarShade_Fin.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSolarShade_Fin
      // 

      const SimSolarShade_Fin::SolarShadeObjectType_optional& SimSolarShade_Fin::
      SolarShadeObjectType () const
      {
        return this->SolarShadeObjectType_;
      }

      SimSolarShade_Fin::SolarShadeObjectType_optional& SimSolarShade_Fin::
      SolarShadeObjectType ()
      {
        return this->SolarShadeObjectType_;
      }

      void SimSolarShade_Fin::
      SolarShadeObjectType (const SolarShadeObjectType_type& x)
      {
        this->SolarShadeObjectType_.set (x);
      }

      void SimSolarShade_Fin::
      SolarShadeObjectType (const SolarShadeObjectType_optional& x)
      {
        this->SolarShadeObjectType_ = x;
      }

      void SimSolarShade_Fin::
      SolarShadeObjectType (::std::auto_ptr< SolarShadeObjectType_type > x)
      {
        this->SolarShadeObjectType_.set (x);
      }

      const SimSolarShade_Fin::ShadingDeviceType_optional& SimSolarShade_Fin::
      ShadingDeviceType () const
      {
        return this->ShadingDeviceType_;
      }

      SimSolarShade_Fin::ShadingDeviceType_optional& SimSolarShade_Fin::
      ShadingDeviceType ()
      {
        return this->ShadingDeviceType_;
      }

      void SimSolarShade_Fin::
      ShadingDeviceType (const ShadingDeviceType_type& x)
      {
        this->ShadingDeviceType_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingDeviceType (const ShadingDeviceType_optional& x)
      {
        this->ShadingDeviceType_ = x;
      }

      void SimSolarShade_Fin::
      ShadingDeviceType (::std::auto_ptr< ShadingDeviceType_type > x)
      {
        this->ShadingDeviceType_.set (x);
      }

      const SimSolarShade_Fin::Azimuth_optional& SimSolarShade_Fin::
      Azimuth () const
      {
        return this->Azimuth_;
      }

      SimSolarShade_Fin::Azimuth_optional& SimSolarShade_Fin::
      Azimuth ()
      {
        return this->Azimuth_;
      }

      void SimSolarShade_Fin::
      Azimuth (const Azimuth_type& x)
      {
        this->Azimuth_.set (x);
      }

      void SimSolarShade_Fin::
      Azimuth (const Azimuth_optional& x)
      {
        this->Azimuth_ = x;
      }

      const SimSolarShade_Fin::Inclination_optional& SimSolarShade_Fin::
      Inclination () const
      {
        return this->Inclination_;
      }

      SimSolarShade_Fin::Inclination_optional& SimSolarShade_Fin::
      Inclination ()
      {
        return this->Inclination_;
      }

      void SimSolarShade_Fin::
      Inclination (const Inclination_type& x)
      {
        this->Inclination_.set (x);
      }

      void SimSolarShade_Fin::
      Inclination (const Inclination_optional& x)
      {
        this->Inclination_ = x;
      }

      const SimSolarShade_Fin::TiltRange_optional& SimSolarShade_Fin::
      TiltRange () const
      {
        return this->TiltRange_;
      }

      SimSolarShade_Fin::TiltRange_optional& SimSolarShade_Fin::
      TiltRange ()
      {
        return this->TiltRange_;
      }

      void SimSolarShade_Fin::
      TiltRange (const TiltRange_type& x)
      {
        this->TiltRange_.set (x);
      }

      void SimSolarShade_Fin::
      TiltRange (const TiltRange_optional& x)
      {
        this->TiltRange_ = x;
      }

      const SimSolarShade_Fin::AverageSolarTransmittance_optional& SimSolarShade_Fin::
      AverageSolarTransmittance () const
      {
        return this->AverageSolarTransmittance_;
      }

      SimSolarShade_Fin::AverageSolarTransmittance_optional& SimSolarShade_Fin::
      AverageSolarTransmittance ()
      {
        return this->AverageSolarTransmittance_;
      }

      void SimSolarShade_Fin::
      AverageSolarTransmittance (const AverageSolarTransmittance_type& x)
      {
        this->AverageSolarTransmittance_.set (x);
      }

      void SimSolarShade_Fin::
      AverageSolarTransmittance (const AverageSolarTransmittance_optional& x)
      {
        this->AverageSolarTransmittance_ = x;
      }

      const SimSolarShade_Fin::AverageVisibleTransmittance_optional& SimSolarShade_Fin::
      AverageVisibleTransmittance () const
      {
        return this->AverageVisibleTransmittance_;
      }

      SimSolarShade_Fin::AverageVisibleTransmittance_optional& SimSolarShade_Fin::
      AverageVisibleTransmittance ()
      {
        return this->AverageVisibleTransmittance_;
      }

      void SimSolarShade_Fin::
      AverageVisibleTransmittance (const AverageVisibleTransmittance_type& x)
      {
        this->AverageVisibleTransmittance_.set (x);
      }

      void SimSolarShade_Fin::
      AverageVisibleTransmittance (const AverageVisibleTransmittance_optional& x)
      {
        this->AverageVisibleTransmittance_ = x;
      }

      const SimSolarShade_Fin::Reflectance_optional& SimSolarShade_Fin::
      Reflectance () const
      {
        return this->Reflectance_;
      }

      SimSolarShade_Fin::Reflectance_optional& SimSolarShade_Fin::
      Reflectance ()
      {
        return this->Reflectance_;
      }

      void SimSolarShade_Fin::
      Reflectance (const Reflectance_type& x)
      {
        this->Reflectance_.set (x);
      }

      void SimSolarShade_Fin::
      Reflectance (const Reflectance_optional& x)
      {
        this->Reflectance_ = x;
      }

      const SimSolarShade_Fin::Roughness_optional& SimSolarShade_Fin::
      Roughness () const
      {
        return this->Roughness_;
      }

      SimSolarShade_Fin::Roughness_optional& SimSolarShade_Fin::
      Roughness ()
      {
        return this->Roughness_;
      }

      void SimSolarShade_Fin::
      Roughness (const Roughness_type& x)
      {
        this->Roughness_.set (x);
      }

      void SimSolarShade_Fin::
      Roughness (const Roughness_optional& x)
      {
        this->Roughness_ = x;
      }

      const SimSolarShade_Fin::Color_optional& SimSolarShade_Fin::
      Color () const
      {
        return this->Color_;
      }

      SimSolarShade_Fin::Color_optional& SimSolarShade_Fin::
      Color ()
      {
        return this->Color_;
      }

      void SimSolarShade_Fin::
      Color (const Color_type& x)
      {
        this->Color_.set (x);
      }

      void SimSolarShade_Fin::
      Color (const Color_optional& x)
      {
        this->Color_ = x;
      }

      void SimSolarShade_Fin::
      Color (::std::auto_ptr< Color_type > x)
      {
        this->Color_.set (x);
      }

      const SimSolarShade_Fin::ClassRef_UniFormat_optional& SimSolarShade_Fin::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimSolarShade_Fin::ClassRef_UniFormat_optional& SimSolarShade_Fin::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimSolarShade_Fin::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimSolarShade_Fin::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimSolarShade_Fin::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimSolarShade_Fin::MaterialList_optional& SimSolarShade_Fin::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimSolarShade_Fin::MaterialList_optional& SimSolarShade_Fin::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimSolarShade_Fin::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimSolarShade_Fin::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimSolarShade_Fin::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimSolarShade_Fin::SimSolarShade_WindOrDoorName_optional& SimSolarShade_Fin::
      SimSolarShade_WindOrDoorName () const
      {
        return this->SimSolarShade_WindOrDoorName_;
      }

      SimSolarShade_Fin::SimSolarShade_WindOrDoorName_optional& SimSolarShade_Fin::
      SimSolarShade_WindOrDoorName ()
      {
        return this->SimSolarShade_WindOrDoorName_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_WindOrDoorName (const SimSolarShade_WindOrDoorName_type& x)
      {
        this->SimSolarShade_WindOrDoorName_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_WindOrDoorName (const SimSolarShade_WindOrDoorName_optional& x)
      {
        this->SimSolarShade_WindOrDoorName_ = x;
      }

      void SimSolarShade_Fin::
      SimSolarShade_WindOrDoorName (::std::auto_ptr< SimSolarShade_WindOrDoorName_type > x)
      {
        this->SimSolarShade_WindOrDoorName_.set (x);
      }

      const SimSolarShade_Fin::SimSolarShade_LeftExtFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_LeftExtFromWind_Door () const
      {
        return this->SimSolarShade_LeftExtFromWind_Door_;
      }

      SimSolarShade_Fin::SimSolarShade_LeftExtFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_LeftExtFromWind_Door ()
      {
        return this->SimSolarShade_LeftExtFromWind_Door_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftExtFromWind_Door (const SimSolarShade_LeftExtFromWind_Door_type& x)
      {
        this->SimSolarShade_LeftExtFromWind_Door_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftExtFromWind_Door (const SimSolarShade_LeftExtFromWind_Door_optional& x)
      {
        this->SimSolarShade_LeftExtFromWind_Door_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_LeftDistAbvTopWind_optional& SimSolarShade_Fin::
      SimSolarShade_LeftDistAbvTopWind () const
      {
        return this->SimSolarShade_LeftDistAbvTopWind_;
      }

      SimSolarShade_Fin::SimSolarShade_LeftDistAbvTopWind_optional& SimSolarShade_Fin::
      SimSolarShade_LeftDistAbvTopWind ()
      {
        return this->SimSolarShade_LeftDistAbvTopWind_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftDistAbvTopWind (const SimSolarShade_LeftDistAbvTopWind_type& x)
      {
        this->SimSolarShade_LeftDistAbvTopWind_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftDistAbvTopWind (const SimSolarShade_LeftDistAbvTopWind_optional& x)
      {
        this->SimSolarShade_LeftDistAbvTopWind_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_LeftDistBelowBotWind_optional& SimSolarShade_Fin::
      SimSolarShade_LeftDistBelowBotWind () const
      {
        return this->SimSolarShade_LeftDistBelowBotWind_;
      }

      SimSolarShade_Fin::SimSolarShade_LeftDistBelowBotWind_optional& SimSolarShade_Fin::
      SimSolarShade_LeftDistBelowBotWind ()
      {
        return this->SimSolarShade_LeftDistBelowBotWind_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftDistBelowBotWind (const SimSolarShade_LeftDistBelowBotWind_type& x)
      {
        this->SimSolarShade_LeftDistBelowBotWind_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftDistBelowBotWind (const SimSolarShade_LeftDistBelowBotWind_optional& x)
      {
        this->SimSolarShade_LeftDistBelowBotWind_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_LeftTiltAngFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_LeftTiltAngFromWind_Door () const
      {
        return this->SimSolarShade_LeftTiltAngFromWind_Door_;
      }

      SimSolarShade_Fin::SimSolarShade_LeftTiltAngFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_LeftTiltAngFromWind_Door ()
      {
        return this->SimSolarShade_LeftTiltAngFromWind_Door_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftTiltAngFromWind_Door (const SimSolarShade_LeftTiltAngFromWind_Door_type& x)
      {
        this->SimSolarShade_LeftTiltAngFromWind_Door_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_LeftTiltAngFromWind_Door (const SimSolarShade_LeftTiltAngFromWind_Door_optional& x)
      {
        this->SimSolarShade_LeftTiltAngFromWind_Door_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_RightExtFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_RightExtFromWind_Door () const
      {
        return this->SimSolarShade_RightExtFromWind_Door_;
      }

      SimSolarShade_Fin::SimSolarShade_RightExtFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_RightExtFromWind_Door ()
      {
        return this->SimSolarShade_RightExtFromWind_Door_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightExtFromWind_Door (const SimSolarShade_RightExtFromWind_Door_type& x)
      {
        this->SimSolarShade_RightExtFromWind_Door_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightExtFromWind_Door (const SimSolarShade_RightExtFromWind_Door_optional& x)
      {
        this->SimSolarShade_RightExtFromWind_Door_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_RightDistAbvTopWind_optional& SimSolarShade_Fin::
      SimSolarShade_RightDistAbvTopWind () const
      {
        return this->SimSolarShade_RightDistAbvTopWind_;
      }

      SimSolarShade_Fin::SimSolarShade_RightDistAbvTopWind_optional& SimSolarShade_Fin::
      SimSolarShade_RightDistAbvTopWind ()
      {
        return this->SimSolarShade_RightDistAbvTopWind_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightDistAbvTopWind (const SimSolarShade_RightDistAbvTopWind_type& x)
      {
        this->SimSolarShade_RightDistAbvTopWind_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightDistAbvTopWind (const SimSolarShade_RightDistAbvTopWind_optional& x)
      {
        this->SimSolarShade_RightDistAbvTopWind_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_RightDistBelowBotWind_optional& SimSolarShade_Fin::
      SimSolarShade_RightDistBelowBotWind () const
      {
        return this->SimSolarShade_RightDistBelowBotWind_;
      }

      SimSolarShade_Fin::SimSolarShade_RightDistBelowBotWind_optional& SimSolarShade_Fin::
      SimSolarShade_RightDistBelowBotWind ()
      {
        return this->SimSolarShade_RightDistBelowBotWind_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightDistBelowBotWind (const SimSolarShade_RightDistBelowBotWind_type& x)
      {
        this->SimSolarShade_RightDistBelowBotWind_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightDistBelowBotWind (const SimSolarShade_RightDistBelowBotWind_optional& x)
      {
        this->SimSolarShade_RightDistBelowBotWind_ = x;
      }

      const SimSolarShade_Fin::SimSolarShade_RightTiltAngFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_RightTiltAngFromWind_Door () const
      {
        return this->SimSolarShade_RightTiltAngFromWind_Door_;
      }

      SimSolarShade_Fin::SimSolarShade_RightTiltAngFromWind_Door_optional& SimSolarShade_Fin::
      SimSolarShade_RightTiltAngFromWind_Door ()
      {
        return this->SimSolarShade_RightTiltAngFromWind_Door_;
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightTiltAngFromWind_Door (const SimSolarShade_RightTiltAngFromWind_Door_type& x)
      {
        this->SimSolarShade_RightTiltAngFromWind_Door_.set (x);
      }

      void SimSolarShade_Fin::
      SimSolarShade_RightTiltAngFromWind_Door (const SimSolarShade_RightTiltAngFromWind_Door_optional& x)
      {
        this->SimSolarShade_RightTiltAngFromWind_Door_ = x;
      }

      const SimSolarShade_Fin::ShadingProp_Reflectance_ShadingSurfName_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_ShadingSurfName () const
      {
        return this->ShadingProp_Reflectance_ShadingSurfName_;
      }

      SimSolarShade_Fin::ShadingProp_Reflectance_ShadingSurfName_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_ShadingSurfName ()
      {
        return this->ShadingProp_Reflectance_ShadingSurfName_;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_ShadingSurfName (const ShadingProp_Reflectance_ShadingSurfName_type& x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_ShadingSurfName (const ShadingProp_Reflectance_ShadingSurfName_optional& x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_ = x;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_ShadingSurfName (::std::auto_ptr< ShadingProp_Reflectance_ShadingSurfName_type > x)
      {
        this->ShadingProp_Reflectance_ShadingSurfName_.set (x);
      }

      const SimSolarShade_Fin::ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf () const
      {
        return this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
      }

      SimSolarShade_Fin::ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf ()
      {
        return this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_type& x)
      {
        this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_optional& x)
      {
        this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ = x;
      }

      const SimSolarShade_Fin::ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf () const
      {
        return this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
      }

      SimSolarShade_Fin::ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf ()
      {
        return this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_type& x)
      {
        this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf (const ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_optional& x)
      {
        this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ = x;
      }

      const SimSolarShade_Fin::ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed () const
      {
        return this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
      }

      SimSolarShade_Fin::ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed ()
      {
        return this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed (const ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_type& x)
      {
        this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed (const ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_optional& x)
      {
        this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ = x;
      }

      const SimSolarShade_Fin::ShadingProp_Reflectance_GlazingConstructionName_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_GlazingConstructionName () const
      {
        return this->ShadingProp_Reflectance_GlazingConstructionName_;
      }

      SimSolarShade_Fin::ShadingProp_Reflectance_GlazingConstructionName_optional& SimSolarShade_Fin::
      ShadingProp_Reflectance_GlazingConstructionName ()
      {
        return this->ShadingProp_Reflectance_GlazingConstructionName_;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_GlazingConstructionName (const ShadingProp_Reflectance_GlazingConstructionName_type& x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_.set (x);
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_GlazingConstructionName (const ShadingProp_Reflectance_GlazingConstructionName_optional& x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_ = x;
      }

      void SimSolarShade_Fin::
      ShadingProp_Reflectance_GlazingConstructionName (::std::auto_ptr< ShadingProp_Reflectance_GlazingConstructionName_type > x)
      {
        this->ShadingProp_Reflectance_GlazingConstructionName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSolarShade_Fin
      //

      SimSolarShade_Fin::
      SimSolarShade_Fin (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSolarShade (RefId),
        SolarShadeObjectType_ (this),
        ShadingDeviceType_ (this),
        Azimuth_ (this),
        Inclination_ (this),
        TiltRange_ (this),
        AverageSolarTransmittance_ (this),
        AverageVisibleTransmittance_ (this),
        Reflectance_ (this),
        Roughness_ (this),
        Color_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        SimSolarShade_WindOrDoorName_ (this),
        SimSolarShade_LeftExtFromWind_Door_ (this),
        SimSolarShade_LeftDistAbvTopWind_ (this),
        SimSolarShade_LeftDistBelowBotWind_ (this),
        SimSolarShade_LeftTiltAngFromWind_Door_ (this),
        SimSolarShade_RightExtFromWind_Door_ (this),
        SimSolarShade_RightDistAbvTopWind_ (this),
        SimSolarShade_RightDistBelowBotWind_ (this),
        SimSolarShade_RightTiltAngFromWind_Door_ (this),
        ShadingProp_Reflectance_ShadingSurfName_ (this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (this),
        ShadingProp_Reflectance_GlazingConstructionName_ (this)
      {
      }

      SimSolarShade_Fin::
      SimSolarShade_Fin (const SimSolarShade_Fin& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSolarShade (x, f, c),
        SolarShadeObjectType_ (x.SolarShadeObjectType_, f, this),
        ShadingDeviceType_ (x.ShadingDeviceType_, f, this),
        Azimuth_ (x.Azimuth_, f, this),
        Inclination_ (x.Inclination_, f, this),
        TiltRange_ (x.TiltRange_, f, this),
        AverageSolarTransmittance_ (x.AverageSolarTransmittance_, f, this),
        AverageVisibleTransmittance_ (x.AverageVisibleTransmittance_, f, this),
        Reflectance_ (x.Reflectance_, f, this),
        Roughness_ (x.Roughness_, f, this),
        Color_ (x.Color_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        SimSolarShade_WindOrDoorName_ (x.SimSolarShade_WindOrDoorName_, f, this),
        SimSolarShade_LeftExtFromWind_Door_ (x.SimSolarShade_LeftExtFromWind_Door_, f, this),
        SimSolarShade_LeftDistAbvTopWind_ (x.SimSolarShade_LeftDistAbvTopWind_, f, this),
        SimSolarShade_LeftDistBelowBotWind_ (x.SimSolarShade_LeftDistBelowBotWind_, f, this),
        SimSolarShade_LeftTiltAngFromWind_Door_ (x.SimSolarShade_LeftTiltAngFromWind_Door_, f, this),
        SimSolarShade_RightExtFromWind_Door_ (x.SimSolarShade_RightExtFromWind_Door_, f, this),
        SimSolarShade_RightDistAbvTopWind_ (x.SimSolarShade_RightDistAbvTopWind_, f, this),
        SimSolarShade_RightDistBelowBotWind_ (x.SimSolarShade_RightDistBelowBotWind_, f, this),
        SimSolarShade_RightTiltAngFromWind_Door_ (x.SimSolarShade_RightTiltAngFromWind_Door_, f, this),
        ShadingProp_Reflectance_ShadingSurfName_ (x.ShadingProp_Reflectance_ShadingSurfName_, f, this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (x.ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_, f, this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (x.ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_, f, this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (x.ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_, f, this),
        ShadingProp_Reflectance_GlazingConstructionName_ (x.ShadingProp_Reflectance_GlazingConstructionName_, f, this)
      {
      }

      SimSolarShade_Fin::
      SimSolarShade_Fin (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSolarShade (e, f | ::xml_schema::flags::base, c),
        SolarShadeObjectType_ (this),
        ShadingDeviceType_ (this),
        Azimuth_ (this),
        Inclination_ (this),
        TiltRange_ (this),
        AverageSolarTransmittance_ (this),
        AverageVisibleTransmittance_ (this),
        Reflectance_ (this),
        Roughness_ (this),
        Color_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        SimSolarShade_WindOrDoorName_ (this),
        SimSolarShade_LeftExtFromWind_Door_ (this),
        SimSolarShade_LeftDistAbvTopWind_ (this),
        SimSolarShade_LeftDistBelowBotWind_ (this),
        SimSolarShade_LeftTiltAngFromWind_Door_ (this),
        SimSolarShade_RightExtFromWind_Door_ (this),
        SimSolarShade_RightDistAbvTopWind_ (this),
        SimSolarShade_RightDistBelowBotWind_ (this),
        SimSolarShade_RightTiltAngFromWind_Door_ (this),
        ShadingProp_Reflectance_ShadingSurfName_ (this),
        ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ (this),
        ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ (this),
        ShadingProp_Reflectance_GlazingConstructionName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSolarShade_Fin::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSolarShade::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SolarShadeObjectType
          //
          if (n.name () == "SolarShadeObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SolarShadeObjectType_type > r (
              SolarShadeObjectType_traits::create (i, f, this));

            if (!this->SolarShadeObjectType_)
            {
              this->SolarShadeObjectType_.set (r);
              continue;
            }
          }

          // ShadingDeviceType
          //
          if (n.name () == "ShadingDeviceType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ShadingDeviceType_type > r (
              ShadingDeviceType_traits::create (i, f, this));

            if (!this->ShadingDeviceType_)
            {
              this->ShadingDeviceType_.set (r);
              continue;
            }
          }

          // Azimuth
          //
          if (n.name () == "Azimuth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Azimuth_)
            {
              this->Azimuth_.set (Azimuth_traits::create (i, f, this));
              continue;
            }
          }

          // Inclination
          //
          if (n.name () == "Inclination" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Inclination_)
            {
              this->Inclination_.set (Inclination_traits::create (i, f, this));
              continue;
            }
          }

          // TiltRange
          //
          if (n.name () == "TiltRange" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->TiltRange_)
            {
              this->TiltRange_.set (TiltRange_traits::create (i, f, this));
              continue;
            }
          }

          // AverageSolarTransmittance
          //
          if (n.name () == "AverageSolarTransmittance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->AverageSolarTransmittance_)
            {
              this->AverageSolarTransmittance_.set (AverageSolarTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // AverageVisibleTransmittance
          //
          if (n.name () == "AverageVisibleTransmittance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->AverageVisibleTransmittance_)
            {
              this->AverageVisibleTransmittance_.set (AverageVisibleTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // Reflectance
          //
          if (n.name () == "Reflectance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Reflectance_)
            {
              this->Reflectance_.set (Reflectance_traits::create (i, f, this));
              continue;
            }
          }

          // Roughness
          //
          if (n.name () == "Roughness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Roughness_)
            {
              this->Roughness_.set (Roughness_traits::create (i, f, this));
              continue;
            }
          }

          // Color
          //
          if (n.name () == "Color" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Color_type > r (
              Color_traits::create (i, f, this));

            if (!this->Color_)
            {
              this->Color_.set (r);
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // SimSolarShade_WindOrDoorName
          //
          if (n.name () == "SimSolarShade_WindOrDoorName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSolarShade_WindOrDoorName_type > r (
              SimSolarShade_WindOrDoorName_traits::create (i, f, this));

            if (!this->SimSolarShade_WindOrDoorName_)
            {
              this->SimSolarShade_WindOrDoorName_.set (r);
              continue;
            }
          }

          // SimSolarShade_LeftExtFromWind_Door
          //
          if (n.name () == "SimSolarShade_LeftExtFromWind_Door" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_LeftExtFromWind_Door_)
            {
              this->SimSolarShade_LeftExtFromWind_Door_.set (SimSolarShade_LeftExtFromWind_Door_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_LeftDistAbvTopWind
          //
          if (n.name () == "SimSolarShade_LeftDistAbvTopWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_LeftDistAbvTopWind_)
            {
              this->SimSolarShade_LeftDistAbvTopWind_.set (SimSolarShade_LeftDistAbvTopWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_LeftDistBelowBotWind
          //
          if (n.name () == "SimSolarShade_LeftDistBelowBotWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_LeftDistBelowBotWind_)
            {
              this->SimSolarShade_LeftDistBelowBotWind_.set (SimSolarShade_LeftDistBelowBotWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_LeftTiltAngFromWind_Door
          //
          if (n.name () == "SimSolarShade_LeftTiltAngFromWind_Door" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_LeftTiltAngFromWind_Door_)
            {
              this->SimSolarShade_LeftTiltAngFromWind_Door_.set (SimSolarShade_LeftTiltAngFromWind_Door_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_RightExtFromWind_Door
          //
          if (n.name () == "SimSolarShade_RightExtFromWind_Door" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_RightExtFromWind_Door_)
            {
              this->SimSolarShade_RightExtFromWind_Door_.set (SimSolarShade_RightExtFromWind_Door_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_RightDistAbvTopWind
          //
          if (n.name () == "SimSolarShade_RightDistAbvTopWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_RightDistAbvTopWind_)
            {
              this->SimSolarShade_RightDistAbvTopWind_.set (SimSolarShade_RightDistAbvTopWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_RightDistBelowBotWind
          //
          if (n.name () == "SimSolarShade_RightDistBelowBotWind" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_RightDistBelowBotWind_)
            {
              this->SimSolarShade_RightDistBelowBotWind_.set (SimSolarShade_RightDistBelowBotWind_traits::create (i, f, this));
              continue;
            }
          }

          // SimSolarShade_RightTiltAngFromWind_Door
          //
          if (n.name () == "SimSolarShade_RightTiltAngFromWind_Door" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSolarShade_RightTiltAngFromWind_Door_)
            {
              this->SimSolarShade_RightTiltAngFromWind_Door_.set (SimSolarShade_RightTiltAngFromWind_Door_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_ShadingSurfName
          //
          if (n.name () == "ShadingProp_Reflectance_ShadingSurfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ShadingProp_Reflectance_ShadingSurfName_type > r (
              ShadingProp_Reflectance_ShadingSurfName_traits::create (i, f, this));

            if (!this->ShadingProp_Reflectance_ShadingSurfName_)
            {
              this->ShadingProp_Reflectance_ShadingSurfName_.set (r);
              continue;
            }
          }

          // ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf
          //
          if (n.name () == "ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_)
            {
              this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_.set (ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf
          //
          if (n.name () == "ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_)
            {
              this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_.set (ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed
          //
          if (n.name () == "ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_)
            {
              this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_.set (ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingProp_Reflectance_GlazingConstructionName
          //
          if (n.name () == "ShadingProp_Reflectance_GlazingConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ShadingProp_Reflectance_GlazingConstructionName_type > r (
              ShadingProp_Reflectance_GlazingConstructionName_traits::create (i, f, this));

            if (!this->ShadingProp_Reflectance_GlazingConstructionName_)
            {
              this->ShadingProp_Reflectance_GlazingConstructionName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSolarShade_Fin* SimSolarShade_Fin::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSolarShade_Fin (*this, f, c);
      }

      SimSolarShade_Fin& SimSolarShade_Fin::
      operator= (const SimSolarShade_Fin& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSolarShade& > (*this) = x;
          this->SolarShadeObjectType_ = x.SolarShadeObjectType_;
          this->ShadingDeviceType_ = x.ShadingDeviceType_;
          this->Azimuth_ = x.Azimuth_;
          this->Inclination_ = x.Inclination_;
          this->TiltRange_ = x.TiltRange_;
          this->AverageSolarTransmittance_ = x.AverageSolarTransmittance_;
          this->AverageVisibleTransmittance_ = x.AverageVisibleTransmittance_;
          this->Reflectance_ = x.Reflectance_;
          this->Roughness_ = x.Roughness_;
          this->Color_ = x.Color_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->SimSolarShade_WindOrDoorName_ = x.SimSolarShade_WindOrDoorName_;
          this->SimSolarShade_LeftExtFromWind_Door_ = x.SimSolarShade_LeftExtFromWind_Door_;
          this->SimSolarShade_LeftDistAbvTopWind_ = x.SimSolarShade_LeftDistAbvTopWind_;
          this->SimSolarShade_LeftDistBelowBotWind_ = x.SimSolarShade_LeftDistBelowBotWind_;
          this->SimSolarShade_LeftTiltAngFromWind_Door_ = x.SimSolarShade_LeftTiltAngFromWind_Door_;
          this->SimSolarShade_RightExtFromWind_Door_ = x.SimSolarShade_RightExtFromWind_Door_;
          this->SimSolarShade_RightDistAbvTopWind_ = x.SimSolarShade_RightDistAbvTopWind_;
          this->SimSolarShade_RightDistBelowBotWind_ = x.SimSolarShade_RightDistBelowBotWind_;
          this->SimSolarShade_RightTiltAngFromWind_Door_ = x.SimSolarShade_RightTiltAngFromWind_Door_;
          this->ShadingProp_Reflectance_ShadingSurfName_ = x.ShadingProp_Reflectance_ShadingSurfName_;
          this->ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_ = x.ShadingProp_Reflectance_DiffuseSolarReflectanceOfUnglazedPartOfShadingSurf_;
          this->ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_ = x.ShadingProp_Reflectance_DiffuseVisibleReflectanceOfUnglazedPartOfShadingSurf_;
          this->ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_ = x.ShadingProp_Reflectance_FractionOfShadingSurfThatIsGlazed_;
          this->ShadingProp_Reflectance_GlazingConstructionName_ = x.ShadingProp_Reflectance_GlazingConstructionName_;
        }

        return *this;
      }

      SimSolarShade_Fin::
      ~SimSolarShade_Fin ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

