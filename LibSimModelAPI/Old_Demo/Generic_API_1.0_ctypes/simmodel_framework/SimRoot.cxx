// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRoot.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
      // SimRoot
      // 

      const SimRoot::Description_optional& SimRoot::
      Description () const
      {
        return this->Description_;
      }

      SimRoot::Description_optional& SimRoot::
      Description ()
      {
        return this->Description_;
      }

      void SimRoot::
      Description (const Description_type& x)
      {
        this->Description_.set (x);
      }

      void SimRoot::
      Description (const Description_optional& x)
      {
        this->Description_ = x;
      }

      void SimRoot::
      Description (::std::auto_ptr< Description_type > x)
      {
        this->Description_.set (x);
      }

      const SimRoot::ObjectOwnerHistory_optional& SimRoot::
      ObjectOwnerHistory () const
      {
        return this->ObjectOwnerHistory_;
      }

      SimRoot::ObjectOwnerHistory_optional& SimRoot::
      ObjectOwnerHistory ()
      {
        return this->ObjectOwnerHistory_;
      }

      void SimRoot::
      ObjectOwnerHistory (const ObjectOwnerHistory_type& x)
      {
        this->ObjectOwnerHistory_.set (x);
      }

      void SimRoot::
      ObjectOwnerHistory (const ObjectOwnerHistory_optional& x)
      {
        this->ObjectOwnerHistory_ = x;
      }

      void SimRoot::
      ObjectOwnerHistory (::std::auto_ptr< ObjectOwnerHistory_type > x)
      {
        this->ObjectOwnerHistory_.set (x);
      }

      const SimRoot::IfcGlobalID_optional& SimRoot::
      IfcGlobalID () const
      {
        return this->IfcGlobalID_;
      }

      SimRoot::IfcGlobalID_optional& SimRoot::
      IfcGlobalID ()
      {
        return this->IfcGlobalID_;
      }

      void SimRoot::
      IfcGlobalID (const IfcGlobalID_type& x)
      {
        this->IfcGlobalID_.set (x);
      }

      void SimRoot::
      IfcGlobalID (const IfcGlobalID_optional& x)
      {
        this->IfcGlobalID_ = x;
      }

      void SimRoot::
      IfcGlobalID (::std::auto_ptr< IfcGlobalID_type > x)
      {
        this->IfcGlobalID_.set (x);
      }

      const SimRoot::IfcName_optional& SimRoot::
      IfcName () const
      {
        return this->IfcName_;
      }

      SimRoot::IfcName_optional& SimRoot::
      IfcName ()
      {
        return this->IfcName_;
      }

      void SimRoot::
      IfcName (const IfcName_type& x)
      {
        this->IfcName_.set (x);
      }

      void SimRoot::
      IfcName (const IfcName_optional& x)
      {
        this->IfcName_ = x;
      }

      void SimRoot::
      IfcName (::std::auto_ptr< IfcName_type > x)
      {
        this->IfcName_.set (x);
      }

      const SimRoot::SimUniqueID_optional& SimRoot::
      SimUniqueID () const
      {
        return this->SimUniqueID_;
      }

      SimRoot::SimUniqueID_optional& SimRoot::
      SimUniqueID ()
      {
        return this->SimUniqueID_;
      }

      void SimRoot::
      SimUniqueID (const SimUniqueID_type& x)
      {
        this->SimUniqueID_.set (x);
      }

      void SimRoot::
      SimUniqueID (const SimUniqueID_optional& x)
      {
        this->SimUniqueID_ = x;
      }

      void SimRoot::
      SimUniqueID (::std::auto_ptr< SimUniqueID_type > x)
      {
        this->SimUniqueID_.set (x);
      }

      const SimRoot::SimModelType_optional& SimRoot::
      SimModelType () const
      {
        return this->SimModelType_;
      }

      SimRoot::SimModelType_optional& SimRoot::
      SimModelType ()
      {
        return this->SimModelType_;
      }

      void SimRoot::
      SimModelType (const SimModelType_type& x)
      {
        this->SimModelType_.set (x);
      }

      void SimRoot::
      SimModelType (const SimModelType_optional& x)
      {
        this->SimModelType_ = x;
      }

      void SimRoot::
      SimModelType (::std::auto_ptr< SimModelType_type > x)
      {
        this->SimModelType_.set (x);
      }

      const SimRoot::SimModelSubtype_optional& SimRoot::
      SimModelSubtype () const
      {
        return this->SimModelSubtype_;
      }

      SimRoot::SimModelSubtype_optional& SimRoot::
      SimModelSubtype ()
      {
        return this->SimModelSubtype_;
      }

      void SimRoot::
      SimModelSubtype (const SimModelSubtype_type& x)
      {
        this->SimModelSubtype_.set (x);
      }

      void SimRoot::
      SimModelSubtype (const SimModelSubtype_optional& x)
      {
        this->SimModelSubtype_ = x;
      }

      void SimRoot::
      SimModelSubtype (::std::auto_ptr< SimModelSubtype_type > x)
      {
        this->SimModelSubtype_.set (x);
      }

      const SimRoot::SimModelName_optional& SimRoot::
      SimModelName () const
      {
        return this->SimModelName_;
      }

      SimRoot::SimModelName_optional& SimRoot::
      SimModelName ()
      {
        return this->SimModelName_;
      }

      void SimRoot::
      SimModelName (const SimModelName_type& x)
      {
        this->SimModelName_.set (x);
      }

      void SimRoot::
      SimModelName (const SimModelName_optional& x)
      {
        this->SimModelName_ = x;
      }

      void SimRoot::
      SimModelName (::std::auto_ptr< SimModelName_type > x)
      {
        this->SimModelName_.set (x);
      }

      const SimRoot::SourceModelSchema_optional& SimRoot::
      SourceModelSchema () const
      {
        return this->SourceModelSchema_;
      }

      SimRoot::SourceModelSchema_optional& SimRoot::
      SourceModelSchema ()
      {
        return this->SourceModelSchema_;
      }

      void SimRoot::
      SourceModelSchema (const SourceModelSchema_type& x)
      {
        this->SourceModelSchema_.set (x);
      }

      void SimRoot::
      SourceModelSchema (const SourceModelSchema_optional& x)
      {
        this->SourceModelSchema_ = x;
      }

      void SimRoot::
      SourceModelSchema (::std::auto_ptr< SourceModelSchema_type > x)
      {
        this->SourceModelSchema_.set (x);
      }

      const SimRoot::SourceModelObjectType_optional& SimRoot::
      SourceModelObjectType () const
      {
        return this->SourceModelObjectType_;
      }

      SimRoot::SourceModelObjectType_optional& SimRoot::
      SourceModelObjectType ()
      {
        return this->SourceModelObjectType_;
      }

      void SimRoot::
      SourceModelObjectType (const SourceModelObjectType_type& x)
      {
        this->SourceModelObjectType_.set (x);
      }

      void SimRoot::
      SourceModelObjectType (const SourceModelObjectType_optional& x)
      {
        this->SourceModelObjectType_ = x;
      }

      void SimRoot::
      SourceModelObjectType (::std::auto_ptr< SourceModelObjectType_type > x)
      {
        this->SourceModelObjectType_.set (x);
      }

      const SimRoot::RefId_type& SimRoot::
      RefId () const
      {
        return this->RefId_.get ();
      }

      SimRoot::RefId_type& SimRoot::
      RefId ()
      {
        return this->RefId_.get ();
      }

      void SimRoot::
      RefId (const RefId_type& x)
      {
        this->RefId_.set (x);
      }

      void SimRoot::
      RefId (::std::auto_ptr< RefId_type > x)
      {
        this->RefId_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
      // SimRoot
      //

      SimRoot::
      SimRoot (const RefId_type& RefId)
      : ::xml_schema::type (),
        Description_ (this),
        ObjectOwnerHistory_ (this),
        IfcGlobalID_ (this),
        IfcName_ (this),
        SimUniqueID_ (this),
        SimModelType_ (this),
        SimModelSubtype_ (this),
        SimModelName_ (this),
        SourceModelSchema_ (this),
        SourceModelObjectType_ (this),
        RefId_ (RefId, this)
      {
      }

      SimRoot::
      SimRoot (const SimRoot& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Description_ (x.Description_, f, this),
        ObjectOwnerHistory_ (x.ObjectOwnerHistory_, f, this),
        IfcGlobalID_ (x.IfcGlobalID_, f, this),
        IfcName_ (x.IfcName_, f, this),
        SimUniqueID_ (x.SimUniqueID_, f, this),
        SimModelType_ (x.SimModelType_, f, this),
        SimModelSubtype_ (x.SimModelSubtype_, f, this),
        SimModelName_ (x.SimModelName_, f, this),
        SourceModelSchema_ (x.SourceModelSchema_, f, this),
        SourceModelObjectType_ (x.SourceModelObjectType_, f, this),
        RefId_ (x.RefId_, f, this)
      {
      }

      SimRoot::
      SimRoot (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Description_ (this),
        ObjectOwnerHistory_ (this),
        IfcGlobalID_ (this),
        IfcName_ (this),
        SimUniqueID_ (this),
        SimModelType_ (this),
        SimModelSubtype_ (this),
        SimModelName_ (this),
        SourceModelSchema_ (this),
        SourceModelObjectType_ (this),
        RefId_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRoot::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Description
          //
          if (n.name () == "Description" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< Description_type > r (
              Description_traits::create (i, f, this));

            if (!this->Description_)
            {
              this->Description_.set (r);
              continue;
            }
          }

          // ObjectOwnerHistory
          //
          if (n.name () == "ObjectOwnerHistory" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< ObjectOwnerHistory_type > r (
              ObjectOwnerHistory_traits::create (i, f, this));

            if (!this->ObjectOwnerHistory_)
            {
              this->ObjectOwnerHistory_.set (r);
              continue;
            }
          }

          // IfcGlobalID
          //
          if (n.name () == "IfcGlobalID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< IfcGlobalID_type > r (
              IfcGlobalID_traits::create (i, f, this));

            if (!this->IfcGlobalID_)
            {
              this->IfcGlobalID_.set (r);
              continue;
            }
          }

          // IfcName
          //
          if (n.name () == "IfcName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< IfcName_type > r (
              IfcName_traits::create (i, f, this));

            if (!this->IfcName_)
            {
              this->IfcName_.set (r);
              continue;
            }
          }

          // SimUniqueID
          //
          if (n.name () == "SimUniqueID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SimUniqueID_type > r (
              SimUniqueID_traits::create (i, f, this));

            if (!this->SimUniqueID_)
            {
              this->SimUniqueID_.set (r);
              continue;
            }
          }

          // SimModelType
          //
          if (n.name () == "SimModelType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SimModelType_type > r (
              SimModelType_traits::create (i, f, this));

            if (!this->SimModelType_)
            {
              this->SimModelType_.set (r);
              continue;
            }
          }

          // SimModelSubtype
          //
          if (n.name () == "SimModelSubtype" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SimModelSubtype_type > r (
              SimModelSubtype_traits::create (i, f, this));

            if (!this->SimModelSubtype_)
            {
              this->SimModelSubtype_.set (r);
              continue;
            }
          }

          // SimModelName
          //
          if (n.name () == "SimModelName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SimModelName_type > r (
              SimModelName_traits::create (i, f, this));

            if (!this->SimModelName_)
            {
              this->SimModelName_.set (r);
              continue;
            }
          }

          // SourceModelSchema
          //
          if (n.name () == "SourceModelSchema" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SourceModelSchema_type > r (
              SourceModelSchema_traits::create (i, f, this));

            if (!this->SourceModelSchema_)
            {
              this->SourceModelSchema_.set (r);
              continue;
            }
          }

          // SourceModelObjectType
          //
          if (n.name () == "SourceModelObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< SourceModelObjectType_type > r (
              SourceModelObjectType_traits::create (i, f, this));

            if (!this->SourceModelObjectType_)
            {
              this->SourceModelObjectType_.set (r);
              continue;
            }
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "RefId" && n.namespace_ ().empty ())
          {
            this->RefId_.set (RefId_traits::create (i, f, this));
            continue;
          }
        }

        if (!RefId_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "RefId",
            "");
        }
      }

      SimRoot* SimRoot::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRoot (*this, f, c);
      }

      SimRoot& SimRoot::
      operator= (const SimRoot& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::type& > (*this) = x;
          this->Description_ = x.Description_;
          this->ObjectOwnerHistory_ = x.ObjectOwnerHistory_;
          this->IfcGlobalID_ = x.IfcGlobalID_;
          this->IfcName_ = x.IfcName_;
          this->SimUniqueID_ = x.SimUniqueID_;
          this->SimModelType_ = x.SimModelType_;
          this->SimModelSubtype_ = x.SimModelSubtype_;
          this->SimModelName_ = x.SimModelName_;
          this->SourceModelSchema_ = x.SourceModelSchema_;
          this->SourceModelObjectType_ = x.SourceModelObjectType_;
          this->RefId_ = x.RefId_;
        }

        return *this;
      }

      SimRoot::
      ~SimRoot ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

