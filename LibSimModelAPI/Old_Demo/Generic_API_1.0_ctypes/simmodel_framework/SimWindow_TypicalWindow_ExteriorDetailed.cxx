// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_TypicalWindow_ExteriorDetailed.hxx"

#include "doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_ExteriorDetailed
      // 

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowTypeTag_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowTypeTag () const
      {
        return this->WindowTypeTag_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowTypeTag_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowTypeTag ()
      {
        return this->WindowTypeTag_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowTypeTag (const WindowTypeTag_type& x)
      {
        this->WindowTypeTag_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowTypeTag (const WindowTypeTag_optional& x)
      {
        this->WindowTypeTag_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowTypeTag (::std::auto_ptr< WindowTypeTag_type > x)
      {
        this->WindowTypeTag_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowOperationType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowOperationType () const
      {
        return this->WindowOperationType_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowOperationType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowOperationType ()
      {
        return this->WindowOperationType_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowOperationType (const WindowOperationType_type& x)
      {
        this->WindowOperationType_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowOperationType (const WindowOperationType_optional& x)
      {
        this->WindowOperationType_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowOperationType (::std::auto_ptr< WindowOperationType_type > x)
      {
        this->WindowOperationType_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowConstructionType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowConstructionType () const
      {
        return this->WindowConstructionType_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowConstructionType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowConstructionType ()
      {
        return this->WindowConstructionType_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowConstructionType (const WindowConstructionType_type& x)
      {
        this->WindowConstructionType_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowConstructionType (const WindowConstructionType_optional& x)
      {
        this->WindowConstructionType_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowConstructionType (::std::auto_ptr< WindowConstructionType_type > x)
      {
        this->WindowConstructionType_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowIsExternal_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowIsExternal () const
      {
        return this->WindowIsExternal_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowIsExternal_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowIsExternal ()
      {
        return this->WindowIsExternal_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowIsExternal (const WindowIsExternal_type& x)
      {
        this->WindowIsExternal_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowIsExternal (const WindowIsExternal_optional& x)
      {
        this->WindowIsExternal_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::CompositeThermalTransmittance_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      CompositeThermalTransmittance () const
      {
        return this->CompositeThermalTransmittance_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::CompositeThermalTransmittance_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      CompositeThermalTransmittance ()
      {
        return this->CompositeThermalTransmittance_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_type& x)
      {
        this->CompositeThermalTransmittance_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      CompositeThermalTransmittance (const CompositeThermalTransmittance_optional& x)
      {
        this->CompositeThermalTransmittance_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowHeight_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowHeight () const
      {
        return this->WindowHeight_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowHeight_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowHeight ()
      {
        return this->WindowHeight_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowHeight (const WindowHeight_type& x)
      {
        this->WindowHeight_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowHeight (const WindowHeight_optional& x)
      {
        this->WindowHeight_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowWidth_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowWidth () const
      {
        return this->WindowWidth_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowWidth_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowWidth ()
      {
        return this->WindowWidth_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowWidth (const WindowWidth_type& x)
      {
        this->WindowWidth_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowWidth (const WindowWidth_optional& x)
      {
        this->WindowWidth_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowArea_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowArea () const
      {
        return this->WindowArea_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowArea_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowArea ()
      {
        return this->WindowArea_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowArea (const WindowArea_type& x)
      {
        this->WindowArea_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowArea (const WindowArea_optional& x)
      {
        this->WindowArea_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowPerimeter_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowPerimeter () const
      {
        return this->WindowPerimeter_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowPerimeter_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowPerimeter ()
      {
        return this->WindowPerimeter_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowPerimeter (const WindowPerimeter_type& x)
      {
        this->WindowPerimeter_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowPerimeter (const WindowPerimeter_optional& x)
      {
        this->WindowPerimeter_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowFrameDepth_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameDepth () const
      {
        return this->WindowFrameDepth_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowFrameDepth_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameDepth ()
      {
        return this->WindowFrameDepth_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameDepth (const WindowFrameDepth_type& x)
      {
        this->WindowFrameDepth_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameDepth (const WindowFrameDepth_optional& x)
      {
        this->WindowFrameDepth_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowFrameThickness_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameThickness () const
      {
        return this->WindowFrameThickness_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowFrameThickness_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameThickness ()
      {
        return this->WindowFrameThickness_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameThickness (const WindowFrameThickness_type& x)
      {
        this->WindowFrameThickness_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowFrameThickness (const WindowFrameThickness_optional& x)
      {
        this->WindowFrameThickness_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::ClassRef_UniFormat_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::ClassRef_UniFormat_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::MaterialList_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::MaterialList_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::VoidsInWindow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      VoidsInWindow () const
      {
        return this->VoidsInWindow_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::VoidsInWindow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      VoidsInWindow ()
      {
        return this->VoidsInWindow_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      VoidsInWindow (const VoidsInWindow_type& x)
      {
        this->VoidsInWindow_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      VoidsInWindow (const VoidsInWindow_optional& x)
      {
        this->VoidsInWindow_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      VoidsInWindow (::std::auto_ptr< VoidsInWindow_type > x)
      {
        this->VoidsInWindow_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::OpeningFilledByWindow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      OpeningFilledByWindow () const
      {
        return this->OpeningFilledByWindow_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::OpeningFilledByWindow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      OpeningFilledByWindow ()
      {
        return this->OpeningFilledByWindow_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      OpeningFilledByWindow (const OpeningFilledByWindow_type& x)
      {
        this->OpeningFilledByWindow_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      OpeningFilledByWindow (const OpeningFilledByWindow_optional& x)
      {
        this->OpeningFilledByWindow_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      OpeningFilledByWindow (::std::auto_ptr< OpeningFilledByWindow_type > x)
      {
        this->OpeningFilledByWindow_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_SurfType () const
      {
        return this->SimWindow_SurfType_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_SurfType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_SurfType ()
      {
        return this->SimWindow_SurfType_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_type& x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_SurfType (const SimWindow_SurfType_optional& x)
      {
        this->SimWindow_SurfType_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_SurfType (::std::auto_ptr< SimWindow_SurfType_type > x)
      {
        this->SimWindow_SurfType_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ConstructionName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ConstructionName () const
      {
        return this->SimWindow_ConstructionName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ConstructionName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ConstructionName ()
      {
        return this->SimWindow_ConstructionName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_type& x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ConstructionName (const SimWindow_ConstructionName_optional& x)
      {
        this->SimWindow_ConstructionName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ConstructionName (::std::auto_ptr< SimWindow_ConstructionName_type > x)
      {
        this->SimWindow_ConstructionName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_BldgSurfName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_BldgSurfName () const
      {
        return this->SimWindow_BldgSurfName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_BldgSurfName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_BldgSurfName ()
      {
        return this->SimWindow_BldgSurfName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_type& x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_BldgSurfName (const SimWindow_BldgSurfName_optional& x)
      {
        this->SimWindow_BldgSurfName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_BldgSurfName (::std::auto_ptr< SimWindow_BldgSurfName_type > x)
      {
        this->SimWindow_BldgSurfName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_OutsdBndCondObject () const
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_OutsdBndCondObject_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_OutsdBndCondObject ()
      {
        return this->SimWindow_OutsdBndCondObject_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_type& x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (const SimWindow_OutsdBndCondObject_optional& x)
      {
        this->SimWindow_OutsdBndCondObject_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_OutsdBndCondObject (::std::auto_ptr< SimWindow_OutsdBndCondObject_type > x)
      {
        this->SimWindow_OutsdBndCondObject_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ViewFactToGnd () const
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ViewFactToGnd_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ViewFactToGnd ()
      {
        return this->SimWindow_ViewFactToGnd_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_type& x)
      {
        this->SimWindow_ViewFactToGnd_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ViewFactToGnd (const SimWindow_ViewFactToGnd_optional& x)
      {
        this->SimWindow_ViewFactToGnd_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ShadingContName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ShadingContName () const
      {
        return this->SimWindow_ShadingContName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_ShadingContName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ShadingContName ()
      {
        return this->SimWindow_ShadingContName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_type& x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ShadingContName (const SimWindow_ShadingContName_optional& x)
      {
        this->SimWindow_ShadingContName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_ShadingContName (::std::auto_ptr< SimWindow_ShadingContName_type > x)
      {
        this->SimWindow_ShadingContName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_FrmAndDivName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_FrmAndDivName () const
      {
        return this->SimWindow_FrmAndDivName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_FrmAndDivName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_FrmAndDivName ()
      {
        return this->SimWindow_FrmAndDivName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_type& x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_FrmAndDivName (const SimWindow_FrmAndDivName_optional& x)
      {
        this->SimWindow_FrmAndDivName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_FrmAndDivName (::std::auto_ptr< SimWindow_FrmAndDivName_type > x)
      {
        this->SimWindow_FrmAndDivName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_Mult_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_Mult () const
      {
        return this->SimWindow_Mult_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_Mult_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_Mult ()
      {
        return this->SimWindow_Mult_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_Mult (const SimWindow_Mult_type& x)
      {
        this->SimWindow_Mult_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_Mult (const SimWindow_Mult_optional& x)
      {
        this->SimWindow_Mult_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_NumbVerts () const
      {
        return this->SimWindow_NumbVerts_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_NumbVerts_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_NumbVerts ()
      {
        return this->SimWindow_NumbVerts_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_type& x)
      {
        this->SimWindow_NumbVerts_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_NumbVerts (const SimWindow_NumbVerts_optional& x)
      {
        this->SimWindow_NumbVerts_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 () const
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexXCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 ()
      {
        return this->SimWindow_VertexXCoord_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_type& x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (const SimWindow_VertexXCoord_1_4_optional& x)
      {
        this->SimWindow_VertexXCoord_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexXCoord_1_4 (::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > x)
      {
        this->SimWindow_VertexXCoord_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 () const
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexYCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 ()
      {
        return this->SimWindow_VertexYCoord_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_type& x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (const SimWindow_VertexYCoord_1_4_optional& x)
      {
        this->SimWindow_VertexYCoord_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexYCoord_1_4 (::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > x)
      {
        this->SimWindow_VertexYCoord_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 () const
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::SimWindow_VertexZCoord_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 ()
      {
        return this->SimWindow_VertexZCoord_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_type& x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (const SimWindow_VertexZCoord_1_4_optional& x)
      {
        this->SimWindow_VertexZCoord_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_VertexZCoord_1_4 (::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > x)
      {
        this->SimWindow_VertexZCoord_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowSrc_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc () const
      {
        return this->WindowProp_AirflowControl_AirflowSrc_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowSrc_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc ()
      {
        return this->WindowProp_AirflowControl_AirflowSrc_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_type& x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (const WindowProp_AirflowControl_AirflowSrc_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowSrc (::std::auto_ptr< WindowProp_AirflowControl_AirflowSrc_type > x)
      {
        this->WindowProp_AirflowControl_AirflowSrc_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowDestination_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination () const
      {
        return this->WindowProp_AirflowControl_AirflowDestination_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowDestination_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination ()
      {
        return this->WindowProp_AirflowControl_AirflowDestination_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_type& x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (const WindowProp_AirflowControl_AirflowDestination_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowDestination (::std::auto_ptr< WindowProp_AirflowControl_AirflowDestination_type > x)
      {
        this->WindowProp_AirflowControl_AirflowDestination_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_MaxFlowRate_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate () const
      {
        return this->WindowProp_AirflowControl_MaxFlowRate_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_MaxFlowRate_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate ()
      {
        return this->WindowProp_AirflowControl_MaxFlowRate_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_type& x)
      {
        this->WindowProp_AirflowControl_MaxFlowRate_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_MaxFlowRate (const WindowProp_AirflowControl_MaxFlowRate_optional& x)
      {
        this->WindowProp_AirflowControl_MaxFlowRate_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowControlType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType () const
      {
        return this->WindowProp_AirflowControl_AirflowControlType_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowControlType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType ()
      {
        return this->WindowProp_AirflowControl_AirflowControlType_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_type& x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (const WindowProp_AirflowControl_AirflowControlType_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowControlType (::std::auto_ptr< WindowProp_AirflowControl_AirflowControlType_type > x)
      {
        this->WindowProp_AirflowControl_AirflowControlType_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowIsScheduled_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled () const
      {
        return this->WindowProp_AirflowControl_AirflowIsScheduled_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowIsScheduled_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled ()
      {
        return this->WindowProp_AirflowControl_AirflowIsScheduled_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_type& x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (const WindowProp_AirflowControl_AirflowIsScheduled_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowIsScheduled (::std::auto_ptr< WindowProp_AirflowControl_AirflowIsScheduled_type > x)
      {
        this->WindowProp_AirflowControl_AirflowIsScheduled_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName () const
      {
        return this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName ()
      {
        return this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_type& x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (const WindowProp_AirflowControl_AirflowMultiplierScheduleName_optional& x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_AirflowControl_AirflowMultiplierScheduleName (::std::auto_ptr< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > x)
      {
        this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_WindName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_WindName () const
      {
        return this->WindowProp_StormWindow_WindName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_WindName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_WindName ()
      {
        return this->WindowProp_StormWindow_WindName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_type& x)
      {
        this->WindowProp_StormWindow_WindName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_WindName (const WindowProp_StormWindow_WindName_optional& x)
      {
        this->WindowProp_StormWindow_WindName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_WindName (::std::auto_ptr< WindowProp_StormWindow_WindName_type > x)
      {
        this->WindowProp_StormWindow_WindName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_StormGlassLayerName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName () const
      {
        return this->WindowProp_StormWindow_StormGlassLayerName_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_StormGlassLayerName_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName ()
      {
        return this->WindowProp_StormWindow_StormGlassLayerName_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_type& x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (const WindowProp_StormWindow_StormGlassLayerName_optional& x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_StormGlassLayerName (::std::auto_ptr< WindowProp_StormWindow_StormGlassLayerName_type > x)
      {
        this->WindowProp_StormWindow_StormGlassLayerName_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass () const
      {
        return this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass ()
      {
        return this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_type& x)
      {
        this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass (const WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_optional& x)
      {
        this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn () const
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn ()
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_type& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_optional& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn () const
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn ()
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_type& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_optional& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff () const
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff ()
      {
        return this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_type& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_optional& x)
      {
        this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff () const
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff ()
      {
        return this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_type& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff (const WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_optional& x)
      {
        this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType () const
      {
        return this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType ()
      {
        return this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (const Daylight_DELight_CmplxFenestr_ComplexFenestrationType_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_ComplexFenestrationType (::std::auto_ptr< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > x)
      {
        this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation () const
      {
        return this->Daylight_DELight_CmplxFenestr_FenestrationRotation_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation ()
      {
        return this->Daylight_DELight_CmplxFenestr_FenestrationRotation_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_type& x)
      {
        this->Daylight_DELight_CmplxFenestr_FenestrationRotation_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Daylight_DELight_CmplxFenestr_FenestrationRotation (const Daylight_DELight_CmplxFenestr_FenestrationRotation_optional& x)
      {
        this->Daylight_DELight_CmplxFenestr_FenestrationRotation_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed (const Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (const Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis (const Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData (const Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 () const
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 ()
      {
        return this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (const Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_optional& x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4 (::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > x)
      {
        this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (x);
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow (const Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x;
      }

      const SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef () const
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef ()
      {
        return this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_type& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (x);
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      Airflow_MZone_Comp_SmplOpng_DischargeCoef (const Airflow_MZone_Comp_SmplOpng_DischargeCoef_optional& x)
      {
        this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_ExteriorDetailed
      //

      SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_TypicalWindow_ExteriorDetailed (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (RefId),
        WindowTypeTag_ (this),
        WindowOperationType_ (this),
        WindowConstructionType_ (this),
        WindowIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        WindowHeight_ (this),
        WindowWidth_ (this),
        WindowArea_ (this),
        WindowPerimeter_ (this),
        WindowFrameDepth_ (this),
        WindowFrameThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInWindow_ (this),
        OpeningFilledByWindow_ (this),
        SimWindow_SurfType_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        WindowProp_AirflowControl_AirflowSrc_ (this),
        WindowProp_AirflowControl_AirflowDestination_ (this),
        WindowProp_AirflowControl_MaxFlowRate_ (this),
        WindowProp_AirflowControl_AirflowControlType_ (this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (this),
        WindowProp_StormWindow_WindName_ (this),
        WindowProp_StormWindow_StormGlassLayerName_ (this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
      }

      SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_TypicalWindow_ExteriorDetailed (const SimWindow_TypicalWindow_ExteriorDetailed& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (x, f, c),
        WindowTypeTag_ (x.WindowTypeTag_, f, this),
        WindowOperationType_ (x.WindowOperationType_, f, this),
        WindowConstructionType_ (x.WindowConstructionType_, f, this),
        WindowIsExternal_ (x.WindowIsExternal_, f, this),
        CompositeThermalTransmittance_ (x.CompositeThermalTransmittance_, f, this),
        WindowHeight_ (x.WindowHeight_, f, this),
        WindowWidth_ (x.WindowWidth_, f, this),
        WindowArea_ (x.WindowArea_, f, this),
        WindowPerimeter_ (x.WindowPerimeter_, f, this),
        WindowFrameDepth_ (x.WindowFrameDepth_, f, this),
        WindowFrameThickness_ (x.WindowFrameThickness_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        VoidsInWindow_ (x.VoidsInWindow_, f, this),
        OpeningFilledByWindow_ (x.OpeningFilledByWindow_, f, this),
        SimWindow_SurfType_ (x.SimWindow_SurfType_, f, this),
        SimWindow_ConstructionName_ (x.SimWindow_ConstructionName_, f, this),
        SimWindow_BldgSurfName_ (x.SimWindow_BldgSurfName_, f, this),
        SimWindow_OutsdBndCondObject_ (x.SimWindow_OutsdBndCondObject_, f, this),
        SimWindow_ViewFactToGnd_ (x.SimWindow_ViewFactToGnd_, f, this),
        SimWindow_ShadingContName_ (x.SimWindow_ShadingContName_, f, this),
        SimWindow_FrmAndDivName_ (x.SimWindow_FrmAndDivName_, f, this),
        SimWindow_Mult_ (x.SimWindow_Mult_, f, this),
        SimWindow_NumbVerts_ (x.SimWindow_NumbVerts_, f, this),
        SimWindow_VertexXCoord_1_4_ (x.SimWindow_VertexXCoord_1_4_, f, this),
        SimWindow_VertexYCoord_1_4_ (x.SimWindow_VertexYCoord_1_4_, f, this),
        SimWindow_VertexZCoord_1_4_ (x.SimWindow_VertexZCoord_1_4_, f, this),
        WindowProp_AirflowControl_AirflowSrc_ (x.WindowProp_AirflowControl_AirflowSrc_, f, this),
        WindowProp_AirflowControl_AirflowDestination_ (x.WindowProp_AirflowControl_AirflowDestination_, f, this),
        WindowProp_AirflowControl_MaxFlowRate_ (x.WindowProp_AirflowControl_MaxFlowRate_, f, this),
        WindowProp_AirflowControl_AirflowControlType_ (x.WindowProp_AirflowControl_AirflowControlType_, f, this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (x.WindowProp_AirflowControl_AirflowIsScheduled_, f, this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (x.WindowProp_AirflowControl_AirflowMultiplierScheduleName_, f, this),
        WindowProp_StormWindow_WindName_ (x.WindowProp_StormWindow_WindName_, f, this),
        WindowProp_StormWindow_StormGlassLayerName_ (x.WindowProp_StormWindow_StormGlassLayerName_, f, this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (x.WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_, f, this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (x.WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_, f, this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_, f, this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (x.WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_, f, this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_, f, this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (x.Daylight_DELight_CmplxFenestr_ComplexFenestrationType_, f, this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (x.Daylight_DELight_CmplxFenestr_FenestrationRotation_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_, f, this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_, f, this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_, f, this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_, f, this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_, f, this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_, f, this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_, f, this)
      {
      }

      SimWindow_TypicalWindow_ExteriorDetailed::
      SimWindow_TypicalWindow_ExteriorDetailed (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (e, f | ::xml_schema::flags::base, c),
        WindowTypeTag_ (this),
        WindowOperationType_ (this),
        WindowConstructionType_ (this),
        WindowIsExternal_ (this),
        CompositeThermalTransmittance_ (this),
        WindowHeight_ (this),
        WindowWidth_ (this),
        WindowArea_ (this),
        WindowPerimeter_ (this),
        WindowFrameDepth_ (this),
        WindowFrameThickness_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInWindow_ (this),
        OpeningFilledByWindow_ (this),
        SimWindow_SurfType_ (this),
        SimWindow_ConstructionName_ (this),
        SimWindow_BldgSurfName_ (this),
        SimWindow_OutsdBndCondObject_ (this),
        SimWindow_ViewFactToGnd_ (this),
        SimWindow_ShadingContName_ (this),
        SimWindow_FrmAndDivName_ (this),
        SimWindow_Mult_ (this),
        SimWindow_NumbVerts_ (this),
        SimWindow_VertexXCoord_1_4_ (this),
        SimWindow_VertexYCoord_1_4_ (this),
        SimWindow_VertexZCoord_1_4_ (this),
        WindowProp_AirflowControl_AirflowSrc_ (this),
        WindowProp_AirflowControl_AirflowDestination_ (this),
        WindowProp_AirflowControl_MaxFlowRate_ (this),
        WindowProp_AirflowControl_AirflowControlType_ (this),
        WindowProp_AirflowControl_AirflowIsScheduled_ (this),
        WindowProp_AirflowControl_AirflowMultiplierScheduleName_ (this),
        WindowProp_StormWindow_WindName_ (this),
        WindowProp_StormWindow_StormGlassLayerName_ (this),
        WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ (this),
        WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ (this),
        WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ (this),
        Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ (this),
        Daylight_DELight_CmplxFenestr_FenestrationRotation_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ (this),
        Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ (this),
        Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ (this),
        Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ (this),
        Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ (this),
        Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ (this),
        Airflow_MZone_Comp_SmplOpng_DischargeCoef_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_TypicalWindow_ExteriorDetailed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // WindowTypeTag
          //
          if (n.name () == "WindowTypeTag" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowTypeTag_type > r (
              WindowTypeTag_traits::create (i, f, this));

            if (!this->WindowTypeTag_)
            {
              this->WindowTypeTag_.set (r);
              continue;
            }
          }

          // WindowOperationType
          //
          if (n.name () == "WindowOperationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowOperationType_type > r (
              WindowOperationType_traits::create (i, f, this));

            if (!this->WindowOperationType_)
            {
              this->WindowOperationType_.set (r);
              continue;
            }
          }

          // WindowConstructionType
          //
          if (n.name () == "WindowConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowConstructionType_type > r (
              WindowConstructionType_traits::create (i, f, this));

            if (!this->WindowConstructionType_)
            {
              this->WindowConstructionType_.set (r);
              continue;
            }
          }

          // WindowIsExternal
          //
          if (n.name () == "WindowIsExternal" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowIsExternal_)
            {
              this->WindowIsExternal_.set (WindowIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTransmittance
          //
          if (n.name () == "CompositeThermalTransmittance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->CompositeThermalTransmittance_)
            {
              this->CompositeThermalTransmittance_.set (CompositeThermalTransmittance_traits::create (i, f, this));
              continue;
            }
          }

          // WindowHeight
          //
          if (n.name () == "WindowHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowHeight_)
            {
              this->WindowHeight_.set (WindowHeight_traits::create (i, f, this));
              continue;
            }
          }

          // WindowWidth
          //
          if (n.name () == "WindowWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowWidth_)
            {
              this->WindowWidth_.set (WindowWidth_traits::create (i, f, this));
              continue;
            }
          }

          // WindowArea
          //
          if (n.name () == "WindowArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowArea_)
            {
              this->WindowArea_.set (WindowArea_traits::create (i, f, this));
              continue;
            }
          }

          // WindowPerimeter
          //
          if (n.name () == "WindowPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowPerimeter_)
            {
              this->WindowPerimeter_.set (WindowPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // WindowFrameDepth
          //
          if (n.name () == "WindowFrameDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowFrameDepth_)
            {
              this->WindowFrameDepth_.set (WindowFrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // WindowFrameThickness
          //
          if (n.name () == "WindowFrameThickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowFrameThickness_)
            {
              this->WindowFrameThickness_.set (WindowFrameThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // VoidsInWindow
          //
          if (n.name () == "VoidsInWindow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VoidsInWindow_type > r (
              VoidsInWindow_traits::create (i, f, this));

            if (!this->VoidsInWindow_)
            {
              this->VoidsInWindow_.set (r);
              continue;
            }
          }

          // OpeningFilledByWindow
          //
          if (n.name () == "OpeningFilledByWindow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< OpeningFilledByWindow_type > r (
              OpeningFilledByWindow_traits::create (i, f, this));

            if (!this->OpeningFilledByWindow_)
            {
              this->OpeningFilledByWindow_.set (r);
              continue;
            }
          }

          // SimWindow_SurfType
          //
          if (n.name () == "SimWindow_SurfType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_SurfType_type > r (
              SimWindow_SurfType_traits::create (i, f, this));

            if (!this->SimWindow_SurfType_)
            {
              this->SimWindow_SurfType_.set (r);
              continue;
            }
          }

          // SimWindow_ConstructionName
          //
          if (n.name () == "SimWindow_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ConstructionName_type > r (
              SimWindow_ConstructionName_traits::create (i, f, this));

            if (!this->SimWindow_ConstructionName_)
            {
              this->SimWindow_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWindow_BldgSurfName
          //
          if (n.name () == "SimWindow_BldgSurfName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_BldgSurfName_type > r (
              SimWindow_BldgSurfName_traits::create (i, f, this));

            if (!this->SimWindow_BldgSurfName_)
            {
              this->SimWindow_BldgSurfName_.set (r);
              continue;
            }
          }

          // SimWindow_OutsdBndCondObject
          //
          if (n.name () == "SimWindow_OutsdBndCondObject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_OutsdBndCondObject_type > r (
              SimWindow_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWindow_OutsdBndCondObject_)
            {
              this->SimWindow_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWindow_ViewFactToGnd
          //
          if (n.name () == "SimWindow_ViewFactToGnd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_ViewFactToGnd_)
            {
              this->SimWindow_ViewFactToGnd_.set (SimWindow_ViewFactToGnd_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_ShadingContName
          //
          if (n.name () == "SimWindow_ShadingContName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_ShadingContName_type > r (
              SimWindow_ShadingContName_traits::create (i, f, this));

            if (!this->SimWindow_ShadingContName_)
            {
              this->SimWindow_ShadingContName_.set (r);
              continue;
            }
          }

          // SimWindow_FrmAndDivName
          //
          if (n.name () == "SimWindow_FrmAndDivName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_FrmAndDivName_type > r (
              SimWindow_FrmAndDivName_traits::create (i, f, this));

            if (!this->SimWindow_FrmAndDivName_)
            {
              this->SimWindow_FrmAndDivName_.set (r);
              continue;
            }
          }

          // SimWindow_Mult
          //
          if (n.name () == "SimWindow_Mult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_Mult_)
            {
              this->SimWindow_Mult_.set (SimWindow_Mult_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_NumbVerts
          //
          if (n.name () == "SimWindow_NumbVerts" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_NumbVerts_)
            {
              this->SimWindow_NumbVerts_.set (SimWindow_NumbVerts_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_VertexXCoord_1_4
          //
          if (n.name () == "SimWindow_VertexXCoord_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexXCoord_1_4_type > r (
              SimWindow_VertexXCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexXCoord_1_4_)
            {
              this->SimWindow_VertexXCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexYCoord_1_4
          //
          if (n.name () == "SimWindow_VertexYCoord_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexYCoord_1_4_type > r (
              SimWindow_VertexYCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexYCoord_1_4_)
            {
              this->SimWindow_VertexYCoord_1_4_.set (r);
              continue;
            }
          }

          // SimWindow_VertexZCoord_1_4
          //
          if (n.name () == "SimWindow_VertexZCoord_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_VertexZCoord_1_4_type > r (
              SimWindow_VertexZCoord_1_4_traits::create (i, f, this));

            if (!this->SimWindow_VertexZCoord_1_4_)
            {
              this->SimWindow_VertexZCoord_1_4_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowSrc
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowSrc" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowSrc_type > r (
              WindowProp_AirflowControl_AirflowSrc_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowSrc_)
            {
              this->WindowProp_AirflowControl_AirflowSrc_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowDestination
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowDestination" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowDestination_type > r (
              WindowProp_AirflowControl_AirflowDestination_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowDestination_)
            {
              this->WindowProp_AirflowControl_AirflowDestination_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_MaxFlowRate
          //
          if (n.name () == "WindowProp_AirflowControl_MaxFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_AirflowControl_MaxFlowRate_)
            {
              this->WindowProp_AirflowControl_MaxFlowRate_.set (WindowProp_AirflowControl_MaxFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowControlType
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowControlType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowControlType_type > r (
              WindowProp_AirflowControl_AirflowControlType_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowControlType_)
            {
              this->WindowProp_AirflowControl_AirflowControlType_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowIsScheduled
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowIsScheduled" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowIsScheduled_type > r (
              WindowProp_AirflowControl_AirflowIsScheduled_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowIsScheduled_)
            {
              this->WindowProp_AirflowControl_AirflowIsScheduled_.set (r);
              continue;
            }
          }

          // WindowProp_AirflowControl_AirflowMultiplierScheduleName
          //
          if (n.name () == "WindowProp_AirflowControl_AirflowMultiplierScheduleName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_AirflowControl_AirflowMultiplierScheduleName_type > r (
              WindowProp_AirflowControl_AirflowMultiplierScheduleName_traits::create (i, f, this));

            if (!this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_)
            {
              this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_WindName
          //
          if (n.name () == "WindowProp_StormWindow_WindName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_StormWindow_WindName_type > r (
              WindowProp_StormWindow_WindName_traits::create (i, f, this));

            if (!this->WindowProp_StormWindow_WindName_)
            {
              this->WindowProp_StormWindow_WindName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_StormGlassLayerName
          //
          if (n.name () == "WindowProp_StormWindow_StormGlassLayerName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< WindowProp_StormWindow_StormGlassLayerName_type > r (
              WindowProp_StormWindow_StormGlassLayerName_traits::create (i, f, this));

            if (!this->WindowProp_StormWindow_StormGlassLayerName_)
            {
              this->WindowProp_StormWindow_StormGlassLayerName_.set (r);
              continue;
            }
          }

          // WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass
          //
          if (n.name () == "WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_)
            {
              this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_.set (WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_MonththatStormGlassLayerisPutOn
          //
          if (n.name () == "WindowProp_StormWindow_MonththatStormGlassLayerisPutOn" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_)
            {
              this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_.set (WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn
          //
          if (n.name () == "WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_)
            {
              this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_.set (WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff
          //
          if (n.name () == "WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_)
            {
              this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_.set (WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_traits::create (i, f, this));
              continue;
            }
          }

          // WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff
          //
          if (n.name () == "WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_)
            {
              this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_.set (WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_traits::create (i, f, this));
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_ComplexFenestrationType
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_ComplexFenestrationType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Daylight_DELight_CmplxFenestr_ComplexFenestrationType_type > r (
              Daylight_DELight_CmplxFenestr_ComplexFenestrationType_traits::create (i, f, this));

            if (!this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_)
            {
              this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_.set (r);
              continue;
            }
          }

          // Daylight_DELight_CmplxFenestr_FenestrationRotation
          //
          if (n.name () == "Daylight_DELight_CmplxFenestr_FenestrationRotation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Daylight_DELight_CmplxFenestr_FenestrationRotation_)
            {
              this->Daylight_DELight_CmplxFenestr_FenestrationRotation_.set (Daylight_DELight_CmplxFenestr_FenestrationRotation_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_)
            {
              this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_.set (Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_type > r (
              Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_)
            {
              this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_)
            {
              this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_.set (Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_)
            {
              this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_.set (Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4
          //
          if (n.name () == "Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_type > r (
              Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_traits::create (i, f, this));

            if (!this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_)
            {
              this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_.set (r);
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_)
            {
              this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_.set (Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_traits::create (i, f, this));
              continue;
            }
          }

          // Airflow_MZone_Comp_SmplOpng_DischargeCoef
          //
          if (n.name () == "Airflow_MZone_Comp_SmplOpng_DischargeCoef" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_)
            {
              this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_.set (Airflow_MZone_Comp_SmplOpng_DischargeCoef_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWindow_TypicalWindow_ExteriorDetailed* SimWindow_TypicalWindow_ExteriorDetailed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_TypicalWindow_ExteriorDetailed (*this, f, c);
      }

      SimWindow_TypicalWindow_ExteriorDetailed& SimWindow_TypicalWindow_ExteriorDetailed::
      operator= (const SimWindow_TypicalWindow_ExteriorDetailed& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow& > (*this) = x;
          this->WindowTypeTag_ = x.WindowTypeTag_;
          this->WindowOperationType_ = x.WindowOperationType_;
          this->WindowConstructionType_ = x.WindowConstructionType_;
          this->WindowIsExternal_ = x.WindowIsExternal_;
          this->CompositeThermalTransmittance_ = x.CompositeThermalTransmittance_;
          this->WindowHeight_ = x.WindowHeight_;
          this->WindowWidth_ = x.WindowWidth_;
          this->WindowArea_ = x.WindowArea_;
          this->WindowPerimeter_ = x.WindowPerimeter_;
          this->WindowFrameDepth_ = x.WindowFrameDepth_;
          this->WindowFrameThickness_ = x.WindowFrameThickness_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->VoidsInWindow_ = x.VoidsInWindow_;
          this->OpeningFilledByWindow_ = x.OpeningFilledByWindow_;
          this->SimWindow_SurfType_ = x.SimWindow_SurfType_;
          this->SimWindow_ConstructionName_ = x.SimWindow_ConstructionName_;
          this->SimWindow_BldgSurfName_ = x.SimWindow_BldgSurfName_;
          this->SimWindow_OutsdBndCondObject_ = x.SimWindow_OutsdBndCondObject_;
          this->SimWindow_ViewFactToGnd_ = x.SimWindow_ViewFactToGnd_;
          this->SimWindow_ShadingContName_ = x.SimWindow_ShadingContName_;
          this->SimWindow_FrmAndDivName_ = x.SimWindow_FrmAndDivName_;
          this->SimWindow_Mult_ = x.SimWindow_Mult_;
          this->SimWindow_NumbVerts_ = x.SimWindow_NumbVerts_;
          this->SimWindow_VertexXCoord_1_4_ = x.SimWindow_VertexXCoord_1_4_;
          this->SimWindow_VertexYCoord_1_4_ = x.SimWindow_VertexYCoord_1_4_;
          this->SimWindow_VertexZCoord_1_4_ = x.SimWindow_VertexZCoord_1_4_;
          this->WindowProp_AirflowControl_AirflowSrc_ = x.WindowProp_AirflowControl_AirflowSrc_;
          this->WindowProp_AirflowControl_AirflowDestination_ = x.WindowProp_AirflowControl_AirflowDestination_;
          this->WindowProp_AirflowControl_MaxFlowRate_ = x.WindowProp_AirflowControl_MaxFlowRate_;
          this->WindowProp_AirflowControl_AirflowControlType_ = x.WindowProp_AirflowControl_AirflowControlType_;
          this->WindowProp_AirflowControl_AirflowIsScheduled_ = x.WindowProp_AirflowControl_AirflowIsScheduled_;
          this->WindowProp_AirflowControl_AirflowMultiplierScheduleName_ = x.WindowProp_AirflowControl_AirflowMultiplierScheduleName_;
          this->WindowProp_StormWindow_WindName_ = x.WindowProp_StormWindow_WindName_;
          this->WindowProp_StormWindow_StormGlassLayerName_ = x.WindowProp_StormWindow_StormGlassLayerName_;
          this->WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_ = x.WindowProp_StormWindow_DistanceBetweenStormGlassLayerAndAdjacentGlass_;
          this->WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_ = x.WindowProp_StormWindow_MonththatStormGlassLayerisPutOn_;
          this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_ = x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisPutOn_;
          this->WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_ = x.WindowProp_StormWindow_MonththatStormGlassLayerisTakenOff_;
          this->WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_ = x.WindowProp_StormWindow_DayOfMonththatStormGlassLayerisTakenOff_;
          this->Daylight_DELight_CmplxFenestr_ComplexFenestrationType_ = x.Daylight_DELight_CmplxFenestr_ComplexFenestrationType_;
          this->Daylight_DELight_CmplxFenestr_FenestrationRotation_ = x.Daylight_DELight_CmplxFenestr_FenestrationRotation_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowCoefWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_ = x.Airflow_MZone_Comp_DetldOpng_AirMassFlowExpWhenOpngClosed_;
          this->Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_ = x.Airflow_MZone_Comp_DetldOpng_TypeRectangulerLargeVerticalOpngLVO_;
          this->Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_ = x.Airflow_MZone_Comp_DetldOpng_ExtraCrackLengthOrHeightPivotingAxis_;
          this->Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_ = x.Airflow_MZone_Comp_DetldOpng_NumSetsOpngFactorData_;
          this->Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_OpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_DischargeCoefForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_WidthFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_HeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_ = x.Airflow_MZone_Comp_DetldOpng_StartHeightFactorForOpngFactor_1_4_;
          this->Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_ = x.Airflow_MZone_Comp_SmplOpng_MinDensityDiffForTwoWayFlow_;
          this->Airflow_MZone_Comp_SmplOpng_DischargeCoef_ = x.Airflow_MZone_Comp_SmplOpng_DischargeCoef_;
        }

        return *this;
      }

      SimWindow_TypicalWindow_ExteriorDetailed::
      ~SimWindow_TypicalWindow_ExteriorDetailed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

