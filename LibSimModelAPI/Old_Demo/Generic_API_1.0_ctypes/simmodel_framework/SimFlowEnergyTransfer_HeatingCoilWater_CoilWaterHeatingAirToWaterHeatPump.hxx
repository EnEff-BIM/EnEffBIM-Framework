// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_WATER_HEATING_AIR_TO_WATER_HEAT_PUMP_HXX
#define SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_WATER_HEATING_AIR_TO_WATER_HEAT_PUMP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_heatingcoilwater.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump: public ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater
      {
        public:
        // SimFlowEnergyTrans_RatedSensHeatRatio
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedSensHeatRatio_type > SimFlowEnergyTrans_RatedSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedSensHeatRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedSensHeatRatio_traits;

        const SimFlowEnergyTrans_RatedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedSensHeatRatio () const;

        SimFlowEnergyTrans_RatedSensHeatRatio_optional&
        SimFlowEnergyTrans_RatedSensHeatRatio ();

        void
        SimFlowEnergyTrans_RatedSensHeatRatio (const SimFlowEnergyTrans_RatedSensHeatRatio_type& x);

        void
        SimFlowEnergyTrans_RatedSensHeatRatio (const SimFlowEnergyTrans_RatedSensHeatRatio_optional& x);

        // SimFlowEnergyTrans_RatedCOP
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedCOP_type > SimFlowEnergyTrans_RatedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedCOP_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedCOP_traits;

        const SimFlowEnergyTrans_RatedCOP_optional&
        SimFlowEnergyTrans_RatedCOP () const;

        SimFlowEnergyTrans_RatedCOP_optional&
        SimFlowEnergyTrans_RatedCOP ();

        void
        SimFlowEnergyTrans_RatedCOP (const SimFlowEnergyTrans_RatedCOP_type& x);

        void
        SimFlowEnergyTrans_RatedCOP (const SimFlowEnergyTrans_RatedCOP_optional& x);

        // SimFlowEnergyTrans_PartLoadFractCorrelCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type, char > SimFlowEnergyTrans_PartLoadFractCorrelCurveName_traits;

        const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional&
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName () const;

        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional&
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName ();

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type& x);

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& x);

        void
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > p);

        // SimFlowEnergyTrans_CrankcaseHeatCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_CrankcaseHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CrankcaseHeatCap_type > SimFlowEnergyTrans_CrankcaseHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CrankcaseHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_CrankcaseHeatCap_traits;

        const SimFlowEnergyTrans_CrankcaseHeatCap_optional&
        SimFlowEnergyTrans_CrankcaseHeatCap () const;

        SimFlowEnergyTrans_CrankcaseHeatCap_optional&
        SimFlowEnergyTrans_CrankcaseHeatCap ();

        void
        SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_type& x);

        void
        SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_optional& x);

        // SimFlowEnergyTrans_EvapAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_EvapAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapAirInletNodeName_type > SimFlowEnergyTrans_EvapAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapAirInletNodeName_type, char > SimFlowEnergyTrans_EvapAirInletNodeName_traits;

        const SimFlowEnergyTrans_EvapAirInletNodeName_optional&
        SimFlowEnergyTrans_EvapAirInletNodeName () const;

        SimFlowEnergyTrans_EvapAirInletNodeName_optional&
        SimFlowEnergyTrans_EvapAirInletNodeName ();

        void
        SimFlowEnergyTrans_EvapAirInletNodeName (const SimFlowEnergyTrans_EvapAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_EvapAirInletNodeName (const SimFlowEnergyTrans_EvapAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_EvapAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_EvapAirInletNodeName_type > p);

        // SimFlowEnergyTrans_RatedHeatingCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedHeatingCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedHeatingCap_type > SimFlowEnergyTrans_RatedHeatingCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedHeatingCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedHeatingCap_traits;

        const SimFlowEnergyTrans_RatedHeatingCap_optional&
        SimFlowEnergyTrans_RatedHeatingCap () const;

        SimFlowEnergyTrans_RatedHeatingCap_optional&
        SimFlowEnergyTrans_RatedHeatingCap ();

        void
        SimFlowEnergyTrans_RatedHeatingCap (const SimFlowEnergyTrans_RatedHeatingCap_type& x);

        void
        SimFlowEnergyTrans_RatedHeatingCap (const SimFlowEnergyTrans_RatedHeatingCap_optional& x);

        // SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_type > SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_traits;

        const SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_optional&
        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp () const;

        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_optional&
        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp ();

        void
        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp (const SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_type& x);

        void
        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp (const SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_optional& x);

        // SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_type > SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_traits;

        const SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_optional&
        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp () const;

        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_optional&
        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp ();

        void
        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp (const SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_type& x);

        void
        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp (const SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_optional& x);

        // SimFlowEnergyTrans_RatedCondInletWaterTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedCondInletWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedCondInletWaterTemp_type > SimFlowEnergyTrans_RatedCondInletWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedCondInletWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedCondInletWaterTemp_traits;

        const SimFlowEnergyTrans_RatedCondInletWaterTemp_optional&
        SimFlowEnergyTrans_RatedCondInletWaterTemp () const;

        SimFlowEnergyTrans_RatedCondInletWaterTemp_optional&
        SimFlowEnergyTrans_RatedCondInletWaterTemp ();

        void
        SimFlowEnergyTrans_RatedCondInletWaterTemp (const SimFlowEnergyTrans_RatedCondInletWaterTemp_type& x);

        void
        SimFlowEnergyTrans_RatedCondInletWaterTemp (const SimFlowEnergyTrans_RatedCondInletWaterTemp_optional& x);

        // SimFlowEnergyTrans_RatedEvapAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedEvapAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedEvapAirFlowRate_type > SimFlowEnergyTrans_RatedEvapAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedEvapAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedEvapAirFlowRate_traits;

        const SimFlowEnergyTrans_RatedEvapAirFlowRate_optional&
        SimFlowEnergyTrans_RatedEvapAirFlowRate () const;

        SimFlowEnergyTrans_RatedEvapAirFlowRate_optional&
        SimFlowEnergyTrans_RatedEvapAirFlowRate ();

        void
        SimFlowEnergyTrans_RatedEvapAirFlowRate (const SimFlowEnergyTrans_RatedEvapAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_RatedEvapAirFlowRate (const SimFlowEnergyTrans_RatedEvapAirFlowRate_optional& x);

        // SimFlowEnergyTrans_RatedCondWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedCondWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedCondWaterFlowRate_type > SimFlowEnergyTrans_RatedCondWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedCondWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedCondWaterFlowRate_traits;

        const SimFlowEnergyTrans_RatedCondWaterFlowRate_optional&
        SimFlowEnergyTrans_RatedCondWaterFlowRate () const;

        SimFlowEnergyTrans_RatedCondWaterFlowRate_optional&
        SimFlowEnergyTrans_RatedCondWaterFlowRate ();

        void
        SimFlowEnergyTrans_RatedCondWaterFlowRate (const SimFlowEnergyTrans_RatedCondWaterFlowRate_type& x);

        void
        SimFlowEnergyTrans_RatedCondWaterFlowRate (const SimFlowEnergyTrans_RatedCondWaterFlowRate_optional& x);

        // SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_type > SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_type, char > SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_traits;

        const SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_optional&
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP () const;

        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_optional&
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP ();

        void
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP (const SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_type& x);

        void
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP (const SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_optional& x);

        void
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP (::std::auto_ptr< SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_type > p);

        // SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_type > SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_type, char > SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_traits;

        const SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_optional&
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP () const;

        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_optional&
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP ();

        void
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP (const SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_type& x);

        void
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP (const SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_optional& x);

        void
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP (::std::auto_ptr< SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_type > p);

        // SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_type > SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_type, char > SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_traits;

        const SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_optional&
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP () const;

        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_optional&
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP ();

        void
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP (const SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_type& x);

        void
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP (const SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_optional& x);

        void
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP (::std::auto_ptr< SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_type > p);

        // SimFlowEnergyTrans_CondWaterPumpPwr
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_CondWaterPumpPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondWaterPumpPwr_type > SimFlowEnergyTrans_CondWaterPumpPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondWaterPumpPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_CondWaterPumpPwr_traits;

        const SimFlowEnergyTrans_CondWaterPumpPwr_optional&
        SimFlowEnergyTrans_CondWaterPumpPwr () const;

        SimFlowEnergyTrans_CondWaterPumpPwr_optional&
        SimFlowEnergyTrans_CondWaterPumpPwr ();

        void
        SimFlowEnergyTrans_CondWaterPumpPwr (const SimFlowEnergyTrans_CondWaterPumpPwr_type& x);

        void
        SimFlowEnergyTrans_CondWaterPumpPwr (const SimFlowEnergyTrans_CondWaterPumpPwr_optional& x);

        // SimFlowEnergyTrans_FractCondPumpHeatToWater
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_FractCondPumpHeatToWater_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FractCondPumpHeatToWater_type > SimFlowEnergyTrans_FractCondPumpHeatToWater_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FractCondPumpHeatToWater_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_FractCondPumpHeatToWater_traits;

        const SimFlowEnergyTrans_FractCondPumpHeatToWater_optional&
        SimFlowEnergyTrans_FractCondPumpHeatToWater () const;

        SimFlowEnergyTrans_FractCondPumpHeatToWater_optional&
        SimFlowEnergyTrans_FractCondPumpHeatToWater ();

        void
        SimFlowEnergyTrans_FractCondPumpHeatToWater (const SimFlowEnergyTrans_FractCondPumpHeatToWater_type& x);

        void
        SimFlowEnergyTrans_FractCondPumpHeatToWater (const SimFlowEnergyTrans_FractCondPumpHeatToWater_optional& x);

        // SimFlowEnergyTrans_EvapAirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_EvapAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapAirOutletNodeName_type > SimFlowEnergyTrans_EvapAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapAirOutletNodeName_type, char > SimFlowEnergyTrans_EvapAirOutletNodeName_traits;

        const SimFlowEnergyTrans_EvapAirOutletNodeName_optional&
        SimFlowEnergyTrans_EvapAirOutletNodeName () const;

        SimFlowEnergyTrans_EvapAirOutletNodeName_optional&
        SimFlowEnergyTrans_EvapAirOutletNodeName ();

        void
        SimFlowEnergyTrans_EvapAirOutletNodeName (const SimFlowEnergyTrans_EvapAirOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_EvapAirOutletNodeName (const SimFlowEnergyTrans_EvapAirOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_EvapAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_EvapAirOutletNodeName_type > p);

        // SimFlowEnergyTrans_CondWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondWaterInletNodeName_type > SimFlowEnergyTrans_CondWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondWaterInletNodeName_type, char > SimFlowEnergyTrans_CondWaterInletNodeName_traits;

        const SimFlowEnergyTrans_CondWaterInletNodeName_optional&
        SimFlowEnergyTrans_CondWaterInletNodeName () const;

        SimFlowEnergyTrans_CondWaterInletNodeName_optional&
        SimFlowEnergyTrans_CondWaterInletNodeName ();

        void
        SimFlowEnergyTrans_CondWaterInletNodeName (const SimFlowEnergyTrans_CondWaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_CondWaterInletNodeName (const SimFlowEnergyTrans_CondWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CondWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondWaterInletNodeName_type > p);

        // SimFlowEnergyTrans_CondWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondWaterOutletNodeName_type > SimFlowEnergyTrans_CondWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondWaterOutletNodeName_type, char > SimFlowEnergyTrans_CondWaterOutletNodeName_traits;

        const SimFlowEnergyTrans_CondWaterOutletNodeName_optional&
        SimFlowEnergyTrans_CondWaterOutletNodeName () const;

        SimFlowEnergyTrans_CondWaterOutletNodeName_optional&
        SimFlowEnergyTrans_CondWaterOutletNodeName ();

        void
        SimFlowEnergyTrans_CondWaterOutletNodeName (const SimFlowEnergyTrans_CondWaterOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_CondWaterOutletNodeName (const SimFlowEnergyTrans_CondWaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CondWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CondWaterOutletNodeName_type > p);

        // SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_type > SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_traits;

        const SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_optional&
        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp () const;

        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_optional&
        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp ();

        void
        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_type& x);

        void
        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_optional& x);

        // SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_type > SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_type, char > SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_traits;

        const SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_optional&
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs () const;

        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_optional&
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs ();

        void
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs (const SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_type& x);

        void
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs (const SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_optional& x);

        void
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs (::std::auto_ptr< SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_type > p);

        // SimFlowEnergyTrans_HeatingCapFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type > SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type, char > SimFlowEnergyTrans_HeatingCapFuncTempCurveName_traits;

        const SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName () const;

        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName ();

        void
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName (const SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName (const SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_type > SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_type, char > SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_traits;

        const SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName () const;

        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName ();

        void
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName (const SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName (const SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_type > p);

        // SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_type > SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_type, char > SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_traits;

        const SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName () const;

        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName ();

        void
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName (const SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName (const SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_type > p);

        // SimFlowEnergyTrans_HeatingCOPFuncTempCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_type > SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_type, char > SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_traits;

        const SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName () const;

        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName ();

        void
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName (const SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName (const SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_type > p);

        // SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_type > SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_type, char > SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_traits;

        const SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName () const;

        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName ();

        void
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName (const SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName (const SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_type > p);

        // SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_type > SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_type, char > SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_traits;

        const SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName () const;

        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_optional&
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName ();

        void
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName (const SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_type& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName (const SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump (const RefId_type&);

        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump (const ::xercesc::DOMElement& e,
                                                                                   ::xml_schema::flags f = 0,
                                                                                   ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump& x,
                                                                                   ::xml_schema::flags f = 0,
                                                                                   ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump&
        operator= (const SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump& x);

        virtual 
        ~SimFlowEnergyTransfer_HeatingCoilWater_CoilWaterHeatingAirToWaterHeatPump ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_RatedSensHeatRatio_optional SimFlowEnergyTrans_RatedSensHeatRatio_;
        SimFlowEnergyTrans_RatedCOP_optional SimFlowEnergyTrans_RatedCOP_;
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
        SimFlowEnergyTrans_CrankcaseHeatCap_optional SimFlowEnergyTrans_CrankcaseHeatCap_;
        SimFlowEnergyTrans_EvapAirInletNodeName_optional SimFlowEnergyTrans_EvapAirInletNodeName_;
        SimFlowEnergyTrans_RatedHeatingCap_optional SimFlowEnergyTrans_RatedHeatingCap_;
        SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_optional SimFlowEnergyTrans_RatedEvapInletAirDryBulbTemp_;
        SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_optional SimFlowEnergyTrans_RatedEvapInletAirWetBulbTemp_;
        SimFlowEnergyTrans_RatedCondInletWaterTemp_optional SimFlowEnergyTrans_RatedCondInletWaterTemp_;
        SimFlowEnergyTrans_RatedEvapAirFlowRate_optional SimFlowEnergyTrans_RatedEvapAirFlowRate_;
        SimFlowEnergyTrans_RatedCondWaterFlowRate_optional SimFlowEnergyTrans_RatedCondWaterFlowRate_;
        SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_optional SimFlowEnergyTrans_EvapFanPwrcludedRatedCOP_;
        SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_optional SimFlowEnergyTrans_CondPumpPwrcludedRatedCOP_;
        SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_optional SimFlowEnergyTrans_CondPumpHeatcludedRatedHeatingCap_RatedCOP_;
        SimFlowEnergyTrans_CondWaterPumpPwr_optional SimFlowEnergyTrans_CondWaterPumpPwr_;
        SimFlowEnergyTrans_FractCondPumpHeatToWater_optional SimFlowEnergyTrans_FractCondPumpHeatToWater_;
        SimFlowEnergyTrans_EvapAirOutletNodeName_optional SimFlowEnergyTrans_EvapAirOutletNodeName_;
        SimFlowEnergyTrans_CondWaterInletNodeName_optional SimFlowEnergyTrans_CondWaterInletNodeName_;
        SimFlowEnergyTrans_CondWaterOutletNodeName_optional SimFlowEnergyTrans_CondWaterOutletNodeName_;
        SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_optional SimFlowEnergyTrans_MaxAmbTempForCrankcaseHeatOp_;
        SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_optional SimFlowEnergyTrans_EvapAirTempTypeForCurveObjs_;
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional SimFlowEnergyTrans_HeatingCapFuncTempCurveName_;
        SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_optional SimFlowEnergyTrans_HeatingCapFuncAirFlowFractCurveName_;
        SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_optional SimFlowEnergyTrans_HeatingCapFuncWaterFlowFractCurveName_;
        SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_optional SimFlowEnergyTrans_HeatingCOPFuncTempCurveName_;
        SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_optional SimFlowEnergyTrans_HeatingCOPFuncAirFlowFractCurveName_;
        SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_optional SimFlowEnergyTrans_HeatingCOPFuncWaterFlowFractCurveName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_HEATING_COIL_WATER_COIL_WATER_HEATING_AIR_TO_WATER_HEAT_PUMP_HXX
