// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBeam.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimBeam
      // 

      const SimBeam::Name_optional& SimBeam::
      Name () const
      {
        return this->Name_;
      }

      SimBeam::Name_optional& SimBeam::
      Name ()
      {
        return this->Name_;
      }

      void SimBeam::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimBeam::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimBeam::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimBeam::ConstructionType_optional& SimBeam::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimBeam::ConstructionType_optional& SimBeam::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimBeam::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimBeam::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimBeam::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimBeam::BeamLength_optional& SimBeam::
      BeamLength () const
      {
        return this->BeamLength_;
      }

      SimBeam::BeamLength_optional& SimBeam::
      BeamLength ()
      {
        return this->BeamLength_;
      }

      void SimBeam::
      BeamLength (const BeamLength_type& x)
      {
        this->BeamLength_.set (x);
      }

      void SimBeam::
      BeamLength (const BeamLength_optional& x)
      {
        this->BeamLength_ = x;
      }

      const SimBeam::BeamWidth_optional& SimBeam::
      BeamWidth () const
      {
        return this->BeamWidth_;
      }

      SimBeam::BeamWidth_optional& SimBeam::
      BeamWidth ()
      {
        return this->BeamWidth_;
      }

      void SimBeam::
      BeamWidth (const BeamWidth_type& x)
      {
        this->BeamWidth_.set (x);
      }

      void SimBeam::
      BeamWidth (const BeamWidth_optional& x)
      {
        this->BeamWidth_ = x;
      }

      const SimBeam::BeamDepth_optional& SimBeam::
      BeamDepth () const
      {
        return this->BeamDepth_;
      }

      SimBeam::BeamDepth_optional& SimBeam::
      BeamDepth ()
      {
        return this->BeamDepth_;
      }

      void SimBeam::
      BeamDepth (const BeamDepth_type& x)
      {
        this->BeamDepth_.set (x);
      }

      void SimBeam::
      BeamDepth (const BeamDepth_optional& x)
      {
        this->BeamDepth_ = x;
      }

      const SimBeam::BeamNetSurfaceAreaExtrudedSides_optional& SimBeam::
      BeamNetSurfaceAreaExtrudedSides () const
      {
        return this->BeamNetSurfaceAreaExtrudedSides_;
      }

      SimBeam::BeamNetSurfaceAreaExtrudedSides_optional& SimBeam::
      BeamNetSurfaceAreaExtrudedSides ()
      {
        return this->BeamNetSurfaceAreaExtrudedSides_;
      }

      void SimBeam::
      BeamNetSurfaceAreaExtrudedSides (const BeamNetSurfaceAreaExtrudedSides_type& x)
      {
        this->BeamNetSurfaceAreaExtrudedSides_.set (x);
      }

      void SimBeam::
      BeamNetSurfaceAreaExtrudedSides (const BeamNetSurfaceAreaExtrudedSides_optional& x)
      {
        this->BeamNetSurfaceAreaExtrudedSides_ = x;
      }

      const SimBeam::BeamCrossSectionArea_optional& SimBeam::
      BeamCrossSectionArea () const
      {
        return this->BeamCrossSectionArea_;
      }

      SimBeam::BeamCrossSectionArea_optional& SimBeam::
      BeamCrossSectionArea ()
      {
        return this->BeamCrossSectionArea_;
      }

      void SimBeam::
      BeamCrossSectionArea (const BeamCrossSectionArea_type& x)
      {
        this->BeamCrossSectionArea_.set (x);
      }

      void SimBeam::
      BeamCrossSectionArea (const BeamCrossSectionArea_optional& x)
      {
        this->BeamCrossSectionArea_ = x;
      }

      const SimBeam::BeamGrossVolume_optional& SimBeam::
      BeamGrossVolume () const
      {
        return this->BeamGrossVolume_;
      }

      SimBeam::BeamGrossVolume_optional& SimBeam::
      BeamGrossVolume ()
      {
        return this->BeamGrossVolume_;
      }

      void SimBeam::
      BeamGrossVolume (const BeamGrossVolume_type& x)
      {
        this->BeamGrossVolume_.set (x);
      }

      void SimBeam::
      BeamGrossVolume (const BeamGrossVolume_optional& x)
      {
        this->BeamGrossVolume_ = x;
      }

      const SimBeam::BeamNetVolume_optional& SimBeam::
      BeamNetVolume () const
      {
        return this->BeamNetVolume_;
      }

      SimBeam::BeamNetVolume_optional& SimBeam::
      BeamNetVolume ()
      {
        return this->BeamNetVolume_;
      }

      void SimBeam::
      BeamNetVolume (const BeamNetVolume_type& x)
      {
        this->BeamNetVolume_.set (x);
      }

      void SimBeam::
      BeamNetVolume (const BeamNetVolume_optional& x)
      {
        this->BeamNetVolume_ = x;
      }

      const SimBeam::ClassRef_UniFormat_optional& SimBeam::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimBeam::ClassRef_UniFormat_optional& SimBeam::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimBeam::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimBeam::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimBeam::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimBeam::MaterialList_optional& SimBeam::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimBeam::MaterialList_optional& SimBeam::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimBeam::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimBeam::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimBeam::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimBeam::ProfileAssociation_optional& SimBeam::
      ProfileAssociation () const
      {
        return this->ProfileAssociation_;
      }

      SimBeam::ProfileAssociation_optional& SimBeam::
      ProfileAssociation ()
      {
        return this->ProfileAssociation_;
      }

      void SimBeam::
      ProfileAssociation (const ProfileAssociation_type& x)
      {
        this->ProfileAssociation_.set (x);
      }

      void SimBeam::
      ProfileAssociation (const ProfileAssociation_optional& x)
      {
        this->ProfileAssociation_ = x;
      }

      void SimBeam::
      ProfileAssociation (::std::auto_ptr< ProfileAssociation_type > x)
      {
        this->ProfileAssociation_.set (x);
      }

      const SimBeam::VoidsInBeam_optional& SimBeam::
      VoidsInBeam () const
      {
        return this->VoidsInBeam_;
      }

      SimBeam::VoidsInBeam_optional& SimBeam::
      VoidsInBeam ()
      {
        return this->VoidsInBeam_;
      }

      void SimBeam::
      VoidsInBeam (const VoidsInBeam_type& x)
      {
        this->VoidsInBeam_.set (x);
      }

      void SimBeam::
      VoidsInBeam (const VoidsInBeam_optional& x)
      {
        this->VoidsInBeam_ = x;
      }

      void SimBeam::
      VoidsInBeam (::std::auto_ptr< VoidsInBeam_type > x)
      {
        this->VoidsInBeam_.set (x);
      }

      const SimBeam::ConnectedBeams_optional& SimBeam::
      ConnectedBeams () const
      {
        return this->ConnectedBeams_;
      }

      SimBeam::ConnectedBeams_optional& SimBeam::
      ConnectedBeams ()
      {
        return this->ConnectedBeams_;
      }

      void SimBeam::
      ConnectedBeams (const ConnectedBeams_type& x)
      {
        this->ConnectedBeams_.set (x);
      }

      void SimBeam::
      ConnectedBeams (const ConnectedBeams_optional& x)
      {
        this->ConnectedBeams_ = x;
      }

      void SimBeam::
      ConnectedBeams (::std::auto_ptr< ConnectedBeams_type > x)
      {
        this->ConnectedBeams_.set (x);
      }

      const SimBeam::ConnectedColumns_optional& SimBeam::
      ConnectedColumns () const
      {
        return this->ConnectedColumns_;
      }

      SimBeam::ConnectedColumns_optional& SimBeam::
      ConnectedColumns ()
      {
        return this->ConnectedColumns_;
      }

      void SimBeam::
      ConnectedColumns (const ConnectedColumns_type& x)
      {
        this->ConnectedColumns_.set (x);
      }

      void SimBeam::
      ConnectedColumns (const ConnectedColumns_optional& x)
      {
        this->ConnectedColumns_ = x;
      }

      void SimBeam::
      ConnectedColumns (::std::auto_ptr< ConnectedColumns_type > x)
      {
        this->ConnectedColumns_.set (x);
      }

      const SimBeam::Representation_optional& SimBeam::
      Representation () const
      {
        return this->Representation_;
      }

      SimBeam::Representation_optional& SimBeam::
      Representation ()
      {
        return this->Representation_;
      }

      void SimBeam::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimBeam::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimBeam::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimBeam
      //

      SimBeam::
      SimBeam (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimBuildingElement (RefId),
        Name_ (this),
        ConstructionType_ (this),
        BeamLength_ (this),
        BeamWidth_ (this),
        BeamDepth_ (this),
        BeamNetSurfaceAreaExtrudedSides_ (this),
        BeamCrossSectionArea_ (this),
        BeamGrossVolume_ (this),
        BeamNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        ProfileAssociation_ (this),
        VoidsInBeam_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        Representation_ (this)
      {
      }

      SimBeam::
      SimBeam (const SimBeam& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimBuildingElement (x, f, c),
        Name_ (x.Name_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        BeamLength_ (x.BeamLength_, f, this),
        BeamWidth_ (x.BeamWidth_, f, this),
        BeamDepth_ (x.BeamDepth_, f, this),
        BeamNetSurfaceAreaExtrudedSides_ (x.BeamNetSurfaceAreaExtrudedSides_, f, this),
        BeamCrossSectionArea_ (x.BeamCrossSectionArea_, f, this),
        BeamGrossVolume_ (x.BeamGrossVolume_, f, this),
        BeamNetVolume_ (x.BeamNetVolume_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        ProfileAssociation_ (x.ProfileAssociation_, f, this),
        VoidsInBeam_ (x.VoidsInBeam_, f, this),
        ConnectedBeams_ (x.ConnectedBeams_, f, this),
        ConnectedColumns_ (x.ConnectedColumns_, f, this),
        Representation_ (x.Representation_, f, this)
      {
      }

      SimBeam::
      SimBeam (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimBuildingElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        ConstructionType_ (this),
        BeamLength_ (this),
        BeamWidth_ (this),
        BeamDepth_ (this),
        BeamNetSurfaceAreaExtrudedSides_ (this),
        BeamCrossSectionArea_ (this),
        BeamGrossVolume_ (this),
        BeamNetVolume_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        ProfileAssociation_ (this),
        VoidsInBeam_ (this),
        ConnectedBeams_ (this),
        ConnectedColumns_ (this),
        Representation_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBeam::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimBuildingElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // BeamLength
          //
          if (n.name () == "BeamLength" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamLength_)
            {
              this->BeamLength_.set (BeamLength_traits::create (i, f, this));
              continue;
            }
          }

          // BeamWidth
          //
          if (n.name () == "BeamWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamWidth_)
            {
              this->BeamWidth_.set (BeamWidth_traits::create (i, f, this));
              continue;
            }
          }

          // BeamDepth
          //
          if (n.name () == "BeamDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamDepth_)
            {
              this->BeamDepth_.set (BeamDepth_traits::create (i, f, this));
              continue;
            }
          }

          // BeamNetSurfaceAreaExtrudedSides
          //
          if (n.name () == "BeamNetSurfaceAreaExtrudedSides" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamNetSurfaceAreaExtrudedSides_)
            {
              this->BeamNetSurfaceAreaExtrudedSides_.set (BeamNetSurfaceAreaExtrudedSides_traits::create (i, f, this));
              continue;
            }
          }

          // BeamCrossSectionArea
          //
          if (n.name () == "BeamCrossSectionArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamCrossSectionArea_)
            {
              this->BeamCrossSectionArea_.set (BeamCrossSectionArea_traits::create (i, f, this));
              continue;
            }
          }

          // BeamGrossVolume
          //
          if (n.name () == "BeamGrossVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamGrossVolume_)
            {
              this->BeamGrossVolume_.set (BeamGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // BeamNetVolume
          //
          if (n.name () == "BeamNetVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BeamNetVolume_)
            {
              this->BeamNetVolume_.set (BeamNetVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // ProfileAssociation
          //
          if (n.name () == "ProfileAssociation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ProfileAssociation_type > r (
              ProfileAssociation_traits::create (i, f, this));

            if (!this->ProfileAssociation_)
            {
              this->ProfileAssociation_.set (r);
              continue;
            }
          }

          // VoidsInBeam
          //
          if (n.name () == "VoidsInBeam" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< VoidsInBeam_type > r (
              VoidsInBeam_traits::create (i, f, this));

            if (!this->VoidsInBeam_)
            {
              this->VoidsInBeam_.set (r);
              continue;
            }
          }

          // ConnectedBeams
          //
          if (n.name () == "ConnectedBeams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ConnectedBeams_type > r (
              ConnectedBeams_traits::create (i, f, this));

            if (!this->ConnectedBeams_)
            {
              this->ConnectedBeams_.set (r);
              continue;
            }
          }

          // ConnectedColumns
          //
          if (n.name () == "ConnectedColumns" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ConnectedColumns_type > r (
              ConnectedColumns_traits::create (i, f, this));

            if (!this->ConnectedColumns_)
            {
              this->ConnectedColumns_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimBeam* SimBeam::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBeam (*this, f, c);
      }

      SimBeam& SimBeam::
      operator= (const SimBeam& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimBuildingElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->ConstructionType_ = x.ConstructionType_;
          this->BeamLength_ = x.BeamLength_;
          this->BeamWidth_ = x.BeamWidth_;
          this->BeamDepth_ = x.BeamDepth_;
          this->BeamNetSurfaceAreaExtrudedSides_ = x.BeamNetSurfaceAreaExtrudedSides_;
          this->BeamCrossSectionArea_ = x.BeamCrossSectionArea_;
          this->BeamGrossVolume_ = x.BeamGrossVolume_;
          this->BeamNetVolume_ = x.BeamNetVolume_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->ProfileAssociation_ = x.ProfileAssociation_;
          this->VoidsInBeam_ = x.VoidsInBeam_;
          this->ConnectedBeams_ = x.ConnectedBeams_;
          this->ConnectedColumns_ = x.ConnectedColumns_;
          this->Representation_ = x.Representation_;
        }

        return *this;
      }

      SimBeam::
      ~SimBeam ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

