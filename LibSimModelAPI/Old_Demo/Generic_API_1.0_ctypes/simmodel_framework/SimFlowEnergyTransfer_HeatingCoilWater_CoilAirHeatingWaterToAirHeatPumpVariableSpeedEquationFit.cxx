// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit
      // 

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_NumSpeeds_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NumSpeeds () const
      {
        return this->SimFlowEnergyTrans_NumSpeeds_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_NumSpeeds_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NumSpeeds ()
      {
        return this->SimFlowEnergyTrans_NumSpeeds_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_type& x)
      {
        this->SimFlowEnergyTrans_NumSpeeds_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_optional& x)
      {
        this->SimFlowEnergyTrans_NumSpeeds_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_IndoorAirInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_IndoorAirInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_IndoorAirInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_IndoorAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirInletNodeName (const SimFlowEnergyTrans_IndoorAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_IndoorAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirInletNodeName (const SimFlowEnergyTrans_IndoorAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_IndoorAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_IndoorAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_IndoorAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_IndoorAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_IndoorAirOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_IndoorAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_IndoorAirOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirOutletNodeName (const SimFlowEnergyTrans_IndoorAirOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_IndoorAirOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirOutletNodeName (const SimFlowEnergyTrans_IndoorAirOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_IndoorAirOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_IndoorAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_IndoorAirOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_IndoorAirOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_NominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NominalSpeedLevel () const
      {
        return this->SimFlowEnergyTrans_NominalSpeedLevel_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_NominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NominalSpeedLevel ()
      {
        return this->SimFlowEnergyTrans_NominalSpeedLevel_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NominalSpeedLevel (const SimFlowEnergyTrans_NominalSpeedLevel_type& x)
      {
        this->SimFlowEnergyTrans_NominalSpeedLevel_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_NominalSpeedLevel (const SimFlowEnergyTrans_NominalSpeedLevel_optional& x)
      {
        this->SimFlowEnergyTrans_NominalSpeedLevel_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel () const
      {
        return this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel ()
      {
        return this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel (const SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_type& x)
      {
        this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel (const SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_optional& x)
      {
        this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_EnergyPartLoadFractionCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_EnergyPartLoadFractionCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (const SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (const SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel () const
      {
        return this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel ()
      {
        return this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel (const SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_type& x)
      {
        this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel (const SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_optional& x)
      {
        this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName () const
      {
        return this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName ()
      {
        return this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel () const
      {
        return this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel ()
      {
        return this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel (const SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_type& x)
      {
        this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel (const SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_optional& x)
      {
        this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName () const
      {
        return this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_optional& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName ()
      {
        return this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_type& x)
      {
        this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_type > x)
      {
        this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit
      //

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (RefId),
        SimFlowEnergyTrans_NumSpeeds_ (this),
        SimFlowEnergyTrans_IndoorAirInletNodeName_ (this),
        SimFlowEnergyTrans_IndoorAirOutletNodeName_ (this),
        SimFlowEnergyTrans_NominalSpeedLevel_ (this),
        SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_ (this),
        SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_ (this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_ (this),
        SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit& x,
                                                                                                       ::xml_schema::flags f,
                                                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (x, f, c),
        SimFlowEnergyTrans_NumSpeeds_ (x.SimFlowEnergyTrans_NumSpeeds_, f, this),
        SimFlowEnergyTrans_IndoorAirInletNodeName_ (x.SimFlowEnergyTrans_IndoorAirInletNodeName_, f, this),
        SimFlowEnergyTrans_IndoorAirOutletNodeName_ (x.SimFlowEnergyTrans_IndoorAirOutletNodeName_, f, this),
        SimFlowEnergyTrans_NominalSpeedLevel_ (x.SimFlowEnergyTrans_NominalSpeedLevel_, f, this),
        SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_ (x.SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_, f, this),
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_ (x.SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_, f, this),
        SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_ (x.SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_, f, this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_ (x.SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_, f, this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_ (x.SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_, f, this),
        SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_ (x.SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_, f, this),
        SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_ (x.SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit (const ::xercesc::DOMElement& e,
                                                                                                       ::xml_schema::flags f,
                                                                                                       ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_NumSpeeds_ (this),
        SimFlowEnergyTrans_IndoorAirInletNodeName_ (this),
        SimFlowEnergyTrans_IndoorAirOutletNodeName_ (this),
        SimFlowEnergyTrans_NominalSpeedLevel_ (this),
        SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_ (this),
        SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_ (this),
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_ (this),
        SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_ (this),
        SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_NumSpeeds
          //
          if (n.name () == "SimFlowEnergyTrans_NumSpeeds" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NumSpeeds_)
            {
              this->SimFlowEnergyTrans_NumSpeeds_.set (SimFlowEnergyTrans_NumSpeeds_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_IndoorAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_IndoorAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_IndoorAirInletNodeName_type > r (
              SimFlowEnergyTrans_IndoorAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_IndoorAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_IndoorAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_IndoorAirOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_IndoorAirOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_IndoorAirOutletNodeName_type > r (
              SimFlowEnergyTrans_IndoorAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_IndoorAirOutletNodeName_)
            {
              this->SimFlowEnergyTrans_IndoorAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_NominalSpeedLevel
          //
          if (n.name () == "SimFlowEnergyTrans_NominalSpeedLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NominalSpeedLevel_)
            {
              this->SimFlowEnergyTrans_NominalSpeedLevel_.set (SimFlowEnergyTrans_NominalSpeedLevel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel
          //
          if (n.name () == "SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_)
            {
              this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_.set (SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyPartLoadFractionCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyPartLoadFractionCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type > r (
              SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel
          //
          if (n.name () == "SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_)
            {
              this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_.set (SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type > r (
              SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_)
            {
              this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type > r (
              SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_)
            {
              this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel
          //
          if (n.name () == "SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_)
            {
              this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_.set (SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_type > r (
              SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_)
            {
              this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit* SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit& SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      operator= (const SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer_HeatingCoilWater& > (*this) = x;
          this->SimFlowEnergyTrans_NumSpeeds_ = x.SimFlowEnergyTrans_NumSpeeds_;
          this->SimFlowEnergyTrans_IndoorAirInletNodeName_ = x.SimFlowEnergyTrans_IndoorAirInletNodeName_;
          this->SimFlowEnergyTrans_IndoorAirOutletNodeName_ = x.SimFlowEnergyTrans_IndoorAirOutletNodeName_;
          this->SimFlowEnergyTrans_NominalSpeedLevel_ = x.SimFlowEnergyTrans_NominalSpeedLevel_;
          this->SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_ = x.SimFlowEnergyTrans_RatedVolAirFlowRateAtSelectNominalSpeedLevel_;
          this->SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_ = x.SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_;
          this->SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_ = x.SimFlowEnergyTrans_RatedHeatingCapAtSelectedNominalSpeedLevel_;
          this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_ = x.SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_;
          this->SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_ = x.SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_;
          this->SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_ = x.SimFlowEnergyTrans_RatedVolWaterFlowRateAtSelectNominalSpeedLevel_;
          this->SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_ = x.SimFlowEnergyTrans_Speed_1_10_TotHeatingCapFuncofWaterFlowFractionCurveName_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit::
      ~SimFlowEnergyTransfer_HeatingCoilWater_CoilAirHeatingWaterToAirHeatPumpVariableSpeedEquationFit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

