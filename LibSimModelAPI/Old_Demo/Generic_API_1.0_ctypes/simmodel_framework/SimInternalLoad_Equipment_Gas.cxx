// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimInternalLoad_Equipment_Gas.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimInternalLoad_Equipment_Gas
      // 

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_ZoneOrZoneListName_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_ZoneOrZoneListName () const
      {
        return this->SimInternalLoad_ZoneOrZoneListName_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_ZoneOrZoneListName_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_ZoneOrZoneListName ()
      {
        return this->SimInternalLoad_ZoneOrZoneListName_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_ZoneOrZoneListName (const SimInternalLoad_ZoneOrZoneListName_type& x)
      {
        this->SimInternalLoad_ZoneOrZoneListName_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_ZoneOrZoneListName (const SimInternalLoad_ZoneOrZoneListName_optional& x)
      {
        this->SimInternalLoad_ZoneOrZoneListName_ = x;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_ZoneOrZoneListName (::std::auto_ptr< SimInternalLoad_ZoneOrZoneListName_type > x)
      {
        this->SimInternalLoad_ZoneOrZoneListName_.set (x);
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_CO2GenerationRate_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_CO2GenerationRate () const
      {
        return this->SimInternalLoad_CO2GenerationRate_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_CO2GenerationRate_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_CO2GenerationRate ()
      {
        return this->SimInternalLoad_CO2GenerationRate_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_CO2GenerationRate (const SimInternalLoad_CO2GenerationRate_type& x)
      {
        this->SimInternalLoad_CO2GenerationRate_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_CO2GenerationRate (const SimInternalLoad_CO2GenerationRate_optional& x)
      {
        this->SimInternalLoad_CO2GenerationRate_ = x;
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_DesignLevelCalcMeth_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevelCalcMeth () const
      {
        return this->SimInternalLoad_DesignLevelCalcMeth_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_DesignLevelCalcMeth_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevelCalcMeth ()
      {
        return this->SimInternalLoad_DesignLevelCalcMeth_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevelCalcMeth (const SimInternalLoad_DesignLevelCalcMeth_type& x)
      {
        this->SimInternalLoad_DesignLevelCalcMeth_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevelCalcMeth (const SimInternalLoad_DesignLevelCalcMeth_optional& x)
      {
        this->SimInternalLoad_DesignLevelCalcMeth_ = x;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevelCalcMeth (::std::auto_ptr< SimInternalLoad_DesignLevelCalcMeth_type > x)
      {
        this->SimInternalLoad_DesignLevelCalcMeth_.set (x);
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_WattsPerPerson_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_WattsPerPerson () const
      {
        return this->SimInternalLoad_WattsPerPerson_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_WattsPerPerson_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_WattsPerPerson ()
      {
        return this->SimInternalLoad_WattsPerPerson_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_WattsPerPerson (const SimInternalLoad_WattsPerPerson_type& x)
      {
        this->SimInternalLoad_WattsPerPerson_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_WattsPerPerson (const SimInternalLoad_WattsPerPerson_optional& x)
      {
        this->SimInternalLoad_WattsPerPerson_ = x;
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_EndUseSubCat_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_EndUseSubCat () const
      {
        return this->SimInternalLoad_EndUseSubCat_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_EndUseSubCat_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_EndUseSubCat ()
      {
        return this->SimInternalLoad_EndUseSubCat_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_EndUseSubCat (const SimInternalLoad_EndUseSubCat_type& x)
      {
        this->SimInternalLoad_EndUseSubCat_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_EndUseSubCat (const SimInternalLoad_EndUseSubCat_optional& x)
      {
        this->SimInternalLoad_EndUseSubCat_ = x;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_EndUseSubCat (::std::auto_ptr< SimInternalLoad_EndUseSubCat_type > x)
      {
        this->SimInternalLoad_EndUseSubCat_.set (x);
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_DesignLevel_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevel () const
      {
        return this->SimInternalLoad_DesignLevel_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_DesignLevel_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevel ()
      {
        return this->SimInternalLoad_DesignLevel_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevel (const SimInternalLoad_DesignLevel_type& x)
      {
        this->SimInternalLoad_DesignLevel_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_DesignLevel (const SimInternalLoad_DesignLevel_optional& x)
      {
        this->SimInternalLoad_DesignLevel_ = x;
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_FracLatent_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLatent () const
      {
        return this->SimInternalLoad_FracLatent_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_FracLatent_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLatent ()
      {
        return this->SimInternalLoad_FracLatent_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLatent (const SimInternalLoad_FracLatent_type& x)
      {
        this->SimInternalLoad_FracLatent_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLatent (const SimInternalLoad_FracLatent_optional& x)
      {
        this->SimInternalLoad_FracLatent_ = x;
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_FracLost_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLost () const
      {
        return this->SimInternalLoad_FracLost_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_FracLost_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLost ()
      {
        return this->SimInternalLoad_FracLost_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLost (const SimInternalLoad_FracLost_type& x)
      {
        this->SimInternalLoad_FracLost_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_FracLost (const SimInternalLoad_FracLost_optional& x)
      {
        this->SimInternalLoad_FracLost_ = x;
      }

      const SimInternalLoad_Equipment_Gas::SimInternalLoad_PowerPerZoneFloorArea_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_PowerPerZoneFloorArea () const
      {
        return this->SimInternalLoad_PowerPerZoneFloorArea_;
      }

      SimInternalLoad_Equipment_Gas::SimInternalLoad_PowerPerZoneFloorArea_optional& SimInternalLoad_Equipment_Gas::
      SimInternalLoad_PowerPerZoneFloorArea ()
      {
        return this->SimInternalLoad_PowerPerZoneFloorArea_;
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_PowerPerZoneFloorArea (const SimInternalLoad_PowerPerZoneFloorArea_type& x)
      {
        this->SimInternalLoad_PowerPerZoneFloorArea_.set (x);
      }

      void SimInternalLoad_Equipment_Gas::
      SimInternalLoad_PowerPerZoneFloorArea (const SimInternalLoad_PowerPerZoneFloorArea_optional& x)
      {
        this->SimInternalLoad_PowerPerZoneFloorArea_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimInternalLoad_Equipment_Gas
      //

      SimInternalLoad_Equipment_Gas::
      SimInternalLoad_Equipment_Gas (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimInternalLoad_Equipment (RefId),
        SimInternalLoad_ZoneOrZoneListName_ (this),
        SimInternalLoad_CO2GenerationRate_ (this),
        SimInternalLoad_DesignLevelCalcMeth_ (this),
        SimInternalLoad_WattsPerPerson_ (this),
        SimInternalLoad_EndUseSubCat_ (this),
        SimInternalLoad_DesignLevel_ (this),
        SimInternalLoad_FracLatent_ (this),
        SimInternalLoad_FracLost_ (this),
        SimInternalLoad_PowerPerZoneFloorArea_ (this)
      {
      }

      SimInternalLoad_Equipment_Gas::
      SimInternalLoad_Equipment_Gas (const SimInternalLoad_Equipment_Gas& x,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimInternalLoad_Equipment (x, f, c),
        SimInternalLoad_ZoneOrZoneListName_ (x.SimInternalLoad_ZoneOrZoneListName_, f, this),
        SimInternalLoad_CO2GenerationRate_ (x.SimInternalLoad_CO2GenerationRate_, f, this),
        SimInternalLoad_DesignLevelCalcMeth_ (x.SimInternalLoad_DesignLevelCalcMeth_, f, this),
        SimInternalLoad_WattsPerPerson_ (x.SimInternalLoad_WattsPerPerson_, f, this),
        SimInternalLoad_EndUseSubCat_ (x.SimInternalLoad_EndUseSubCat_, f, this),
        SimInternalLoad_DesignLevel_ (x.SimInternalLoad_DesignLevel_, f, this),
        SimInternalLoad_FracLatent_ (x.SimInternalLoad_FracLatent_, f, this),
        SimInternalLoad_FracLost_ (x.SimInternalLoad_FracLost_, f, this),
        SimInternalLoad_PowerPerZoneFloorArea_ (x.SimInternalLoad_PowerPerZoneFloorArea_, f, this)
      {
      }

      SimInternalLoad_Equipment_Gas::
      SimInternalLoad_Equipment_Gas (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f,
                                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimInternalLoad_Equipment (e, f | ::xml_schema::flags::base, c),
        SimInternalLoad_ZoneOrZoneListName_ (this),
        SimInternalLoad_CO2GenerationRate_ (this),
        SimInternalLoad_DesignLevelCalcMeth_ (this),
        SimInternalLoad_WattsPerPerson_ (this),
        SimInternalLoad_EndUseSubCat_ (this),
        SimInternalLoad_DesignLevel_ (this),
        SimInternalLoad_FracLatent_ (this),
        SimInternalLoad_FracLost_ (this),
        SimInternalLoad_PowerPerZoneFloorArea_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimInternalLoad_Equipment_Gas::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimInternalLoad_Equipment::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimInternalLoad_ZoneOrZoneListName
          //
          if (n.name () == "SimInternalLoad_ZoneOrZoneListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimInternalLoad_ZoneOrZoneListName_type > r (
              SimInternalLoad_ZoneOrZoneListName_traits::create (i, f, this));

            if (!this->SimInternalLoad_ZoneOrZoneListName_)
            {
              this->SimInternalLoad_ZoneOrZoneListName_.set (r);
              continue;
            }
          }

          // SimInternalLoad_CO2GenerationRate
          //
          if (n.name () == "SimInternalLoad_CO2GenerationRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_CO2GenerationRate_)
            {
              this->SimInternalLoad_CO2GenerationRate_.set (SimInternalLoad_CO2GenerationRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_DesignLevelCalcMeth
          //
          if (n.name () == "SimInternalLoad_DesignLevelCalcMeth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimInternalLoad_DesignLevelCalcMeth_type > r (
              SimInternalLoad_DesignLevelCalcMeth_traits::create (i, f, this));

            if (!this->SimInternalLoad_DesignLevelCalcMeth_)
            {
              this->SimInternalLoad_DesignLevelCalcMeth_.set (r);
              continue;
            }
          }

          // SimInternalLoad_WattsPerPerson
          //
          if (n.name () == "SimInternalLoad_WattsPerPerson" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_WattsPerPerson_)
            {
              this->SimInternalLoad_WattsPerPerson_.set (SimInternalLoad_WattsPerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_EndUseSubCat
          //
          if (n.name () == "SimInternalLoad_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimInternalLoad_EndUseSubCat_type > r (
              SimInternalLoad_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimInternalLoad_EndUseSubCat_)
            {
              this->SimInternalLoad_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimInternalLoad_DesignLevel
          //
          if (n.name () == "SimInternalLoad_DesignLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_DesignLevel_)
            {
              this->SimInternalLoad_DesignLevel_.set (SimInternalLoad_DesignLevel_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_FracLatent
          //
          if (n.name () == "SimInternalLoad_FracLatent" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_FracLatent_)
            {
              this->SimInternalLoad_FracLatent_.set (SimInternalLoad_FracLatent_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_FracLost
          //
          if (n.name () == "SimInternalLoad_FracLost" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_FracLost_)
            {
              this->SimInternalLoad_FracLost_.set (SimInternalLoad_FracLost_traits::create (i, f, this));
              continue;
            }
          }

          // SimInternalLoad_PowerPerZoneFloorArea
          //
          if (n.name () == "SimInternalLoad_PowerPerZoneFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimInternalLoad_PowerPerZoneFloorArea_)
            {
              this->SimInternalLoad_PowerPerZoneFloorArea_.set (SimInternalLoad_PowerPerZoneFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimInternalLoad_Equipment_Gas* SimInternalLoad_Equipment_Gas::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimInternalLoad_Equipment_Gas (*this, f, c);
      }

      SimInternalLoad_Equipment_Gas& SimInternalLoad_Equipment_Gas::
      operator= (const SimInternalLoad_Equipment_Gas& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimInternalLoad_Equipment& > (*this) = x;
          this->SimInternalLoad_ZoneOrZoneListName_ = x.SimInternalLoad_ZoneOrZoneListName_;
          this->SimInternalLoad_CO2GenerationRate_ = x.SimInternalLoad_CO2GenerationRate_;
          this->SimInternalLoad_DesignLevelCalcMeth_ = x.SimInternalLoad_DesignLevelCalcMeth_;
          this->SimInternalLoad_WattsPerPerson_ = x.SimInternalLoad_WattsPerPerson_;
          this->SimInternalLoad_EndUseSubCat_ = x.SimInternalLoad_EndUseSubCat_;
          this->SimInternalLoad_DesignLevel_ = x.SimInternalLoad_DesignLevel_;
          this->SimInternalLoad_FracLatent_ = x.SimInternalLoad_FracLatent_;
          this->SimInternalLoad_FracLost_ = x.SimInternalLoad_FracLost_;
          this->SimInternalLoad_PowerPerZoneFloorArea_ = x.SimInternalLoad_PowerPerZoneFloorArea_;
        }

        return *this;
      }

      SimInternalLoad_Equipment_Gas::
      ~SimInternalLoad_Equipment_Gas ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

