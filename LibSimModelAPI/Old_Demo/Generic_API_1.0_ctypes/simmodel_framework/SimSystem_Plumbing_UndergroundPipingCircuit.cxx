// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_Plumbing_UndergroundPipingCircuit.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_Plumbing_UndergroundPipingCircuit
      // 

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeThermalCond_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeThermalCond () const
      {
        return this->SimSys_PipeThermalCond_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeThermalCond_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeThermalCond ()
      {
        return this->SimSys_PipeThermalCond_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeThermalCond (const SimSys_PipeThermalCond_type& x)
      {
        this->SimSys_PipeThermalCond_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeThermalCond (const SimSys_PipeThermalCond_optional& x)
      {
        this->SimSys_PipeThermalCond_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeDensity_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeDensity () const
      {
        return this->SimSys_PipeDensity_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeDensity_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeDensity ()
      {
        return this->SimSys_PipeDensity_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeDensity (const SimSys_PipeDensity_type& x)
      {
        this->SimSys_PipeDensity_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeDensity (const SimSys_PipeDensity_optional& x)
      {
        this->SimSys_PipeDensity_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeSpecificHeat_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSpecificHeat () const
      {
        return this->SimSys_PipeSpecificHeat_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeSpecificHeat_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSpecificHeat ()
      {
        return this->SimSys_PipeSpecificHeat_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSpecificHeat (const SimSys_PipeSpecificHeat_type& x)
      {
        this->SimSys_PipeSpecificHeat_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSpecificHeat (const SimSys_PipeSpecificHeat_optional& x)
      {
        this->SimSys_PipeSpecificHeat_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeInnerDiameter_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeInnerDiameter () const
      {
        return this->SimSys_PipeInnerDiameter_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeInnerDiameter_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeInnerDiameter ()
      {
        return this->SimSys_PipeInnerDiameter_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeInnerDiameter (const SimSys_PipeInnerDiameter_type& x)
      {
        this->SimSys_PipeInnerDiameter_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeInnerDiameter (const SimSys_PipeInnerDiameter_optional& x)
      {
        this->SimSys_PipeInnerDiameter_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeOuterDiameter_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeOuterDiameter () const
      {
        return this->SimSys_PipeOuterDiameter_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeOuterDiameter_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeOuterDiameter ()
      {
        return this->SimSys_PipeOuterDiameter_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeOuterDiameter (const SimSys_PipeOuterDiameter_type& x)
      {
        this->SimSys_PipeOuterDiameter_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeOuterDiameter (const SimSys_PipeOuterDiameter_optional& x)
      {
        this->SimSys_PipeOuterDiameter_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_DesignFlowRate_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_DesignFlowRate () const
      {
        return this->SimSys_DesignFlowRate_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_DesignFlowRate_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_DesignFlowRate ()
      {
        return this->SimSys_DesignFlowRate_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_DesignFlowRate (const SimSys_DesignFlowRate_type& x)
      {
        this->SimSys_DesignFlowRate_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_DesignFlowRate (const SimSys_DesignFlowRate_optional& x)
      {
        this->SimSys_DesignFlowRate_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_CircInletNode_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircInletNode () const
      {
        return this->SimSys_CircInletNode_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_CircInletNode_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircInletNode ()
      {
        return this->SimSys_CircInletNode_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircInletNode (const SimSys_CircInletNode_type& x)
      {
        this->SimSys_CircInletNode_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircInletNode (const SimSys_CircInletNode_optional& x)
      {
        this->SimSys_CircInletNode_ = x;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircInletNode (::std::auto_ptr< SimSys_CircInletNode_type > x)
      {
        this->SimSys_CircInletNode_.set (x);
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_CircOutletNode_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircOutletNode () const
      {
        return this->SimSys_CircOutletNode_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_CircOutletNode_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircOutletNode ()
      {
        return this->SimSys_CircOutletNode_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircOutletNode (const SimSys_CircOutletNode_type& x)
      {
        this->SimSys_CircOutletNode_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircOutletNode (const SimSys_CircOutletNode_optional& x)
      {
        this->SimSys_CircOutletNode_ = x;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_CircOutletNode (::std::auto_ptr< SimSys_CircOutletNode_type > x)
      {
        this->SimSys_CircOutletNode_.set (x);
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_ConvergCritInnerRadialIterationLoop_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_ConvergCritInnerRadialIterationLoop () const
      {
        return this->SimSys_ConvergCritInnerRadialIterationLoop_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_ConvergCritInnerRadialIterationLoop_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_ConvergCritInnerRadialIterationLoop ()
      {
        return this->SimSys_ConvergCritInnerRadialIterationLoop_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_ConvergCritInnerRadialIterationLoop (const SimSys_ConvergCritInnerRadialIterationLoop_type& x)
      {
        this->SimSys_ConvergCritInnerRadialIterationLoop_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_ConvergCritInnerRadialIterationLoop (const SimSys_ConvergCritInnerRadialIterationLoop_optional& x)
      {
        this->SimSys_ConvergCritInnerRadialIterationLoop_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_MaxIterationsinInnerRadialIterationLoop_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_MaxIterationsinInnerRadialIterationLoop () const
      {
        return this->SimSys_MaxIterationsinInnerRadialIterationLoop_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_MaxIterationsinInnerRadialIterationLoop_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_MaxIterationsinInnerRadialIterationLoop ()
      {
        return this->SimSys_MaxIterationsinInnerRadialIterationLoop_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_MaxIterationsinInnerRadialIterationLoop (const SimSys_MaxIterationsinInnerRadialIterationLoop_type& x)
      {
        this->SimSys_MaxIterationsinInnerRadialIterationLoop_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_MaxIterationsinInnerRadialIterationLoop (const SimSys_MaxIterationsinInnerRadialIterationLoop_optional& x)
      {
        this->SimSys_MaxIterationsinInnerRadialIterationLoop_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion () const
      {
        return this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion ()
      {
        return this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion (const SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_type& x)
      {
        this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion (const SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_optional& x)
      {
        this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_RadialThicknessInnerRadialNearPipeMeshRegion () const
      {
        return this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_RadialThicknessInnerRadialNearPipeMeshRegion ()
      {
        return this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_RadialThicknessInnerRadialNearPipeMeshRegion (const SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_type& x)
      {
        this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_RadialThicknessInnerRadialNearPipeMeshRegion (const SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_optional& x)
      {
        this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_NumberPipeSegmentsEnteredthisPipeCirc_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberPipeSegmentsEnteredthisPipeCirc () const
      {
        return this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_NumberPipeSegmentsEnteredthisPipeCirc_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberPipeSegmentsEnteredthisPipeCirc ()
      {
        return this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberPipeSegmentsEnteredthisPipeCirc (const SimSys_NumberPipeSegmentsEnteredthisPipeCirc_type& x)
      {
        this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_NumberPipeSegmentsEnteredthisPipeCirc (const SimSys_NumberPipeSegmentsEnteredthisPipeCirc_optional& x)
      {
        this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_ = x;
      }

      const SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeSeg_1_6_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSeg_1_6 () const
      {
        return this->SimSys_PipeSeg_1_6_;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::SimSys_PipeSeg_1_6_optional& SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSeg_1_6 ()
      {
        return this->SimSys_PipeSeg_1_6_;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSeg_1_6 (const SimSys_PipeSeg_1_6_type& x)
      {
        this->SimSys_PipeSeg_1_6_.set (x);
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSeg_1_6 (const SimSys_PipeSeg_1_6_optional& x)
      {
        this->SimSys_PipeSeg_1_6_ = x;
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSys_PipeSeg_1_6 (::std::auto_ptr< SimSys_PipeSeg_1_6_type > x)
      {
        this->SimSys_PipeSeg_1_6_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_Plumbing_UndergroundPipingCircuit
      //

      SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSystem_Plumbing_UndergroundPipingCircuit (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSystem_Plumbing (RefId),
        SimSys_PipeThermalCond_ (this),
        SimSys_PipeDensity_ (this),
        SimSys_PipeSpecificHeat_ (this),
        SimSys_PipeInnerDiameter_ (this),
        SimSys_PipeOuterDiameter_ (this),
        SimSys_DesignFlowRate_ (this),
        SimSys_CircInletNode_ (this),
        SimSys_CircOutletNode_ (this),
        SimSys_ConvergCritInnerRadialIterationLoop_ (this),
        SimSys_MaxIterationsinInnerRadialIterationLoop_ (this),
        SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (this),
        SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_ (this),
        SimSys_NumberPipeSegmentsEnteredthisPipeCirc_ (this),
        SimSys_PipeSeg_1_6_ (this)
      {
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSystem_Plumbing_UndergroundPipingCircuit (const SimSystem_Plumbing_UndergroundPipingCircuit& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_Plumbing (x, f, c),
        SimSys_PipeThermalCond_ (x.SimSys_PipeThermalCond_, f, this),
        SimSys_PipeDensity_ (x.SimSys_PipeDensity_, f, this),
        SimSys_PipeSpecificHeat_ (x.SimSys_PipeSpecificHeat_, f, this),
        SimSys_PipeInnerDiameter_ (x.SimSys_PipeInnerDiameter_, f, this),
        SimSys_PipeOuterDiameter_ (x.SimSys_PipeOuterDiameter_, f, this),
        SimSys_DesignFlowRate_ (x.SimSys_DesignFlowRate_, f, this),
        SimSys_CircInletNode_ (x.SimSys_CircInletNode_, f, this),
        SimSys_CircOutletNode_ (x.SimSys_CircOutletNode_, f, this),
        SimSys_ConvergCritInnerRadialIterationLoop_ (x.SimSys_ConvergCritInnerRadialIterationLoop_, f, this),
        SimSys_MaxIterationsinInnerRadialIterationLoop_ (x.SimSys_MaxIterationsinInnerRadialIterationLoop_, f, this),
        SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (x.SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_, f, this),
        SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_ (x.SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_, f, this),
        SimSys_NumberPipeSegmentsEnteredthisPipeCirc_ (x.SimSys_NumberPipeSegmentsEnteredthisPipeCirc_, f, this),
        SimSys_PipeSeg_1_6_ (x.SimSys_PipeSeg_1_6_, f, this)
      {
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::
      SimSystem_Plumbing_UndergroundPipingCircuit (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_Plumbing (e, f | ::xml_schema::flags::base, c),
        SimSys_PipeThermalCond_ (this),
        SimSys_PipeDensity_ (this),
        SimSys_PipeSpecificHeat_ (this),
        SimSys_PipeInnerDiameter_ (this),
        SimSys_PipeOuterDiameter_ (this),
        SimSys_DesignFlowRate_ (this),
        SimSys_CircInletNode_ (this),
        SimSys_CircOutletNode_ (this),
        SimSys_ConvergCritInnerRadialIterationLoop_ (this),
        SimSys_MaxIterationsinInnerRadialIterationLoop_ (this),
        SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ (this),
        SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_ (this),
        SimSys_NumberPipeSegmentsEnteredthisPipeCirc_ (this),
        SimSys_PipeSeg_1_6_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_Plumbing_UndergroundPipingCircuit::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSystem_Plumbing::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_PipeThermalCond
          //
          if (n.name () == "SimSys_PipeThermalCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PipeThermalCond_)
            {
              this->SimSys_PipeThermalCond_.set (SimSys_PipeThermalCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PipeDensity
          //
          if (n.name () == "SimSys_PipeDensity" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PipeDensity_)
            {
              this->SimSys_PipeDensity_.set (SimSys_PipeDensity_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PipeSpecificHeat
          //
          if (n.name () == "SimSys_PipeSpecificHeat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PipeSpecificHeat_)
            {
              this->SimSys_PipeSpecificHeat_.set (SimSys_PipeSpecificHeat_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PipeInnerDiameter
          //
          if (n.name () == "SimSys_PipeInnerDiameter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PipeInnerDiameter_)
            {
              this->SimSys_PipeInnerDiameter_.set (SimSys_PipeInnerDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PipeOuterDiameter
          //
          if (n.name () == "SimSys_PipeOuterDiameter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PipeOuterDiameter_)
            {
              this->SimSys_PipeOuterDiameter_.set (SimSys_PipeOuterDiameter_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_DesignFlowRate
          //
          if (n.name () == "SimSys_DesignFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_DesignFlowRate_)
            {
              this->SimSys_DesignFlowRate_.set (SimSys_DesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_CircInletNode
          //
          if (n.name () == "SimSys_CircInletNode" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CircInletNode_type > r (
              SimSys_CircInletNode_traits::create (i, f, this));

            if (!this->SimSys_CircInletNode_)
            {
              this->SimSys_CircInletNode_.set (r);
              continue;
            }
          }

          // SimSys_CircOutletNode
          //
          if (n.name () == "SimSys_CircOutletNode" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CircOutletNode_type > r (
              SimSys_CircOutletNode_traits::create (i, f, this));

            if (!this->SimSys_CircOutletNode_)
            {
              this->SimSys_CircOutletNode_.set (r);
              continue;
            }
          }

          // SimSys_ConvergCritInnerRadialIterationLoop
          //
          if (n.name () == "SimSys_ConvergCritInnerRadialIterationLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_ConvergCritInnerRadialIterationLoop_)
            {
              this->SimSys_ConvergCritInnerRadialIterationLoop_.set (SimSys_ConvergCritInnerRadialIterationLoop_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MaxIterationsinInnerRadialIterationLoop
          //
          if (n.name () == "SimSys_MaxIterationsinInnerRadialIterationLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_MaxIterationsinInnerRadialIterationLoop_)
            {
              this->SimSys_MaxIterationsinInnerRadialIterationLoop_.set (SimSys_MaxIterationsinInnerRadialIterationLoop_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion
          //
          if (n.name () == "SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_)
            {
              this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_.set (SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_RadialThicknessInnerRadialNearPipeMeshRegion
          //
          if (n.name () == "SimSys_RadialThicknessInnerRadialNearPipeMeshRegion" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_)
            {
              this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_.set (SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_NumberPipeSegmentsEnteredthisPipeCirc
          //
          if (n.name () == "SimSys_NumberPipeSegmentsEnteredthisPipeCirc" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_)
            {
              this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_.set (SimSys_NumberPipeSegmentsEnteredthisPipeCirc_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PipeSeg_1_6
          //
          if (n.name () == "SimSys_PipeSeg_1_6" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PipeSeg_1_6_type > r (
              SimSys_PipeSeg_1_6_traits::create (i, f, this));

            if (!this->SimSys_PipeSeg_1_6_)
            {
              this->SimSys_PipeSeg_1_6_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSystem_Plumbing_UndergroundPipingCircuit* SimSystem_Plumbing_UndergroundPipingCircuit::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_Plumbing_UndergroundPipingCircuit (*this, f, c);
      }

      SimSystem_Plumbing_UndergroundPipingCircuit& SimSystem_Plumbing_UndergroundPipingCircuit::
      operator= (const SimSystem_Plumbing_UndergroundPipingCircuit& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSystem_Plumbing& > (*this) = x;
          this->SimSys_PipeThermalCond_ = x.SimSys_PipeThermalCond_;
          this->SimSys_PipeDensity_ = x.SimSys_PipeDensity_;
          this->SimSys_PipeSpecificHeat_ = x.SimSys_PipeSpecificHeat_;
          this->SimSys_PipeInnerDiameter_ = x.SimSys_PipeInnerDiameter_;
          this->SimSys_PipeOuterDiameter_ = x.SimSys_PipeOuterDiameter_;
          this->SimSys_DesignFlowRate_ = x.SimSys_DesignFlowRate_;
          this->SimSys_CircInletNode_ = x.SimSys_CircInletNode_;
          this->SimSys_CircOutletNode_ = x.SimSys_CircOutletNode_;
          this->SimSys_ConvergCritInnerRadialIterationLoop_ = x.SimSys_ConvergCritInnerRadialIterationLoop_;
          this->SimSys_MaxIterationsinInnerRadialIterationLoop_ = x.SimSys_MaxIterationsinInnerRadialIterationLoop_;
          this->SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_ = x.SimSys_NumberSoilNodesinInnerRadialNearPipeMeshRegion_;
          this->SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_ = x.SimSys_RadialThicknessInnerRadialNearPipeMeshRegion_;
          this->SimSys_NumberPipeSegmentsEnteredthisPipeCirc_ = x.SimSys_NumberPipeSegmentsEnteredthisPipeCirc_;
          this->SimSys_PipeSeg_1_6_ = x.SimSys_PipeSeg_1_6_;
        }

        return *this;
      }

      SimSystem_Plumbing_UndergroundPipingCircuit::
      ~SimSystem_Plumbing_UndergroundPipingCircuit ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

