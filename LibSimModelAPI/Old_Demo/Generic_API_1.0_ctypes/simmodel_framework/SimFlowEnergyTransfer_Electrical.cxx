// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_Electrical.hxx"

#include "simflowenergytrans_meter_1_10_name.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Electrical
      // 

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedCap_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedCap () const
      {
        return this->SimFlowEnergyTrans_RatedCap_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedCap_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedCap ()
      {
        return this->SimFlowEnergyTrans_RatedCap_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_type& x)
      {
        this->SimFlowEnergyTrans_RatedCap_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedCap (const SimFlowEnergyTrans_RatedCap_optional& x)
      {
        this->SimFlowEnergyTrans_RatedCap_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ZoneName_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ZoneName () const
      {
        return this->SimFlowEnergyTrans_ZoneName_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ZoneName_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ZoneName ()
      {
        return this->SimFlowEnergyTrans_ZoneName_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_type& x)
      {
        this->SimFlowEnergyTrans_ZoneName_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_optional& x)
      {
        this->SimFlowEnergyTrans_ZoneName_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ZoneName (::std::auto_ptr< SimFlowEnergyTrans_ZoneName_type > x)
      {
        this->SimFlowEnergyTrans_ZoneName_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerfInputMeth_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerfInputMeth () const
      {
        return this->SimFlowEnergyTrans_PerfInputMeth_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerfInputMeth_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerfInputMeth ()
      {
        return this->SimFlowEnergyTrans_PerfInputMeth_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_type& x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerfInputMeth (const SimFlowEnergyTrans_PerfInputMeth_optional& x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerfInputMeth (::std::auto_ptr< SimFlowEnergyTrans_PerfInputMeth_type > x)
      {
        this->SimFlowEnergyTrans_PerfInputMeth_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RadiativeFract_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RadiativeFract () const
      {
        return this->SimFlowEnergyTrans_RadiativeFract_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RadiativeFract_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RadiativeFract ()
      {
        return this->SimFlowEnergyTrans_RadiativeFract_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RadiativeFract (const SimFlowEnergyTrans_RadiativeFract_type& x)
      {
        this->SimFlowEnergyTrans_RadiativeFract_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RadiativeFract (const SimFlowEnergyTrans_RadiativeFract_optional& x)
      {
        this->SimFlowEnergyTrans_RadiativeFract_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_TransformUsage_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_TransformUsage () const
      {
        return this->SimFlowEnergyTrans_TransformUsage_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_TransformUsage_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_TransformUsage ()
      {
        return this->SimFlowEnergyTrans_TransformUsage_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_TransformUsage (const SimFlowEnergyTrans_TransformUsage_type& x)
      {
        this->SimFlowEnergyTrans_TransformUsage_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_TransformUsage (const SimFlowEnergyTrans_TransformUsage_optional& x)
      {
        this->SimFlowEnergyTrans_TransformUsage_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_TransformUsage (::std::auto_ptr< SimFlowEnergyTrans_TransformUsage_type > x)
      {
        this->SimFlowEnergyTrans_TransformUsage_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_Phase_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Phase () const
      {
        return this->SimFlowEnergyTrans_Phase_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_Phase_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Phase ()
      {
        return this->SimFlowEnergyTrans_Phase_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Phase (const SimFlowEnergyTrans_Phase_type& x)
      {
        this->SimFlowEnergyTrans_Phase_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Phase (const SimFlowEnergyTrans_Phase_optional& x)
      {
        this->SimFlowEnergyTrans_Phase_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ConductorMaterial_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConductorMaterial () const
      {
        return this->SimFlowEnergyTrans_ConductorMaterial_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ConductorMaterial_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConductorMaterial ()
      {
        return this->SimFlowEnergyTrans_ConductorMaterial_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConductorMaterial (const SimFlowEnergyTrans_ConductorMaterial_type& x)
      {
        this->SimFlowEnergyTrans_ConductorMaterial_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConductorMaterial (const SimFlowEnergyTrans_ConductorMaterial_optional& x)
      {
        this->SimFlowEnergyTrans_ConductorMaterial_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConductorMaterial (::std::auto_ptr< SimFlowEnergyTrans_ConductorMaterial_type > x)
      {
        this->SimFlowEnergyTrans_ConductorMaterial_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_FullLoadTemperatureRise_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FullLoadTemperatureRise () const
      {
        return this->SimFlowEnergyTrans_FullLoadTemperatureRise_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_FullLoadTemperatureRise_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FullLoadTemperatureRise ()
      {
        return this->SimFlowEnergyTrans_FullLoadTemperatureRise_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FullLoadTemperatureRise (const SimFlowEnergyTrans_FullLoadTemperatureRise_type& x)
      {
        this->SimFlowEnergyTrans_FullLoadTemperatureRise_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FullLoadTemperatureRise (const SimFlowEnergyTrans_FullLoadTemperatureRise_optional& x)
      {
        this->SimFlowEnergyTrans_FullLoadTemperatureRise_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_FractionOfEddyCurrentLosses_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FractionOfEddyCurrentLosses () const
      {
        return this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_FractionOfEddyCurrentLosses_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FractionOfEddyCurrentLosses ()
      {
        return this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FractionOfEddyCurrentLosses (const SimFlowEnergyTrans_FractionOfEddyCurrentLosses_type& x)
      {
        this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_FractionOfEddyCurrentLosses (const SimFlowEnergyTrans_FractionOfEddyCurrentLosses_optional& x)
      {
        this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedNoLoadLoss_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedNoLoadLoss () const
      {
        return this->SimFlowEnergyTrans_RatedNoLoadLoss_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedNoLoadLoss_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedNoLoadLoss ()
      {
        return this->SimFlowEnergyTrans_RatedNoLoadLoss_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedNoLoadLoss (const SimFlowEnergyTrans_RatedNoLoadLoss_type& x)
      {
        this->SimFlowEnergyTrans_RatedNoLoadLoss_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedNoLoadLoss (const SimFlowEnergyTrans_RatedNoLoadLoss_optional& x)
      {
        this->SimFlowEnergyTrans_RatedNoLoadLoss_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedLoadLoss_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedLoadLoss () const
      {
        return this->SimFlowEnergyTrans_RatedLoadLoss_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RatedLoadLoss_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedLoadLoss ()
      {
        return this->SimFlowEnergyTrans_RatedLoadLoss_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedLoadLoss (const SimFlowEnergyTrans_RatedLoadLoss_type& x)
      {
        this->SimFlowEnergyTrans_RatedLoadLoss_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RatedLoadLoss (const SimFlowEnergyTrans_RatedLoadLoss_optional& x)
      {
        this->SimFlowEnergyTrans_RatedLoadLoss_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_NameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_NameplateEfficiency () const
      {
        return this->SimFlowEnergyTrans_NameplateEfficiency_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_NameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_NameplateEfficiency ()
      {
        return this->SimFlowEnergyTrans_NameplateEfficiency_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_NameplateEfficiency (const SimFlowEnergyTrans_NameplateEfficiency_type& x)
      {
        this->SimFlowEnergyTrans_NameplateEfficiency_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_NameplateEfficiency (const SimFlowEnergyTrans_NameplateEfficiency_optional& x)
      {
        this->SimFlowEnergyTrans_NameplateEfficiency_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency () const
      {
        return this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency ()
      {
        return this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency (const SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_type& x)
      {
        this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency (const SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_optional& x)
      {
        this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency () const
      {
        return this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency ()
      {
        return this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency (const SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_type& x)
      {
        this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency (const SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_optional& x)
      {
        this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency () const
      {
        return this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency ()
      {
        return this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency (const SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_type& x)
      {
        this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency (const SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_optional& x)
      {
        this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_ = x;
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost () const
      {
        return this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost ()
      {
        return this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost (const SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_type& x)
      {
        this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost (const SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_optional& x)
      {
        this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost (::std::auto_ptr< SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_type > x)
      {
        this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_.set (x);
      }

      const SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_Meter_1_10_Name_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Meter_1_10_Name () const
      {
        return this->SimFlowEnergyTrans_Meter_1_10_Name_;
      }

      SimFlowEnergyTransfer_Electrical::SimFlowEnergyTrans_Meter_1_10_Name_optional& SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Meter_1_10_Name ()
      {
        return this->SimFlowEnergyTrans_Meter_1_10_Name_;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Meter_1_10_Name (const SimFlowEnergyTrans_Meter_1_10_Name_type& x)
      {
        this->SimFlowEnergyTrans_Meter_1_10_Name_.set (x);
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Meter_1_10_Name (const SimFlowEnergyTrans_Meter_1_10_Name_optional& x)
      {
        this->SimFlowEnergyTrans_Meter_1_10_Name_ = x;
      }

      void SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTrans_Meter_1_10_Name (::std::auto_ptr< SimFlowEnergyTrans_Meter_1_10_Name_type > x)
      {
        this->SimFlowEnergyTrans_Meter_1_10_Name_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_Electrical
      //

      SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTransfer_Electrical (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_RatedCap_ (this),
        SimFlowEnergyTrans_ZoneName_ (this),
        SimFlowEnergyTrans_PerfInputMeth_ (this),
        SimFlowEnergyTrans_RadiativeFract_ (this),
        SimFlowEnergyTrans_TransformUsage_ (this),
        SimFlowEnergyTrans_Phase_ (this),
        SimFlowEnergyTrans_ConductorMaterial_ (this),
        SimFlowEnergyTrans_FullLoadTemperatureRise_ (this),
        SimFlowEnergyTrans_FractionOfEddyCurrentLosses_ (this),
        SimFlowEnergyTrans_RatedNoLoadLoss_ (this),
        SimFlowEnergyTrans_RatedLoadLoss_ (this),
        SimFlowEnergyTrans_NameplateEfficiency_ (this),
        SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_ (this),
        SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_ (this),
        SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_ (this),
        SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_ (this),
        SimFlowEnergyTrans_Meter_1_10_Name_ (this)
      {
      }

      SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTransfer_Electrical (const SimFlowEnergyTransfer_Electrical& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_RatedCap_ (x.SimFlowEnergyTrans_RatedCap_, f, this),
        SimFlowEnergyTrans_ZoneName_ (x.SimFlowEnergyTrans_ZoneName_, f, this),
        SimFlowEnergyTrans_PerfInputMeth_ (x.SimFlowEnergyTrans_PerfInputMeth_, f, this),
        SimFlowEnergyTrans_RadiativeFract_ (x.SimFlowEnergyTrans_RadiativeFract_, f, this),
        SimFlowEnergyTrans_TransformUsage_ (x.SimFlowEnergyTrans_TransformUsage_, f, this),
        SimFlowEnergyTrans_Phase_ (x.SimFlowEnergyTrans_Phase_, f, this),
        SimFlowEnergyTrans_ConductorMaterial_ (x.SimFlowEnergyTrans_ConductorMaterial_, f, this),
        SimFlowEnergyTrans_FullLoadTemperatureRise_ (x.SimFlowEnergyTrans_FullLoadTemperatureRise_, f, this),
        SimFlowEnergyTrans_FractionOfEddyCurrentLosses_ (x.SimFlowEnergyTrans_FractionOfEddyCurrentLosses_, f, this),
        SimFlowEnergyTrans_RatedNoLoadLoss_ (x.SimFlowEnergyTrans_RatedNoLoadLoss_, f, this),
        SimFlowEnergyTrans_RatedLoadLoss_ (x.SimFlowEnergyTrans_RatedLoadLoss_, f, this),
        SimFlowEnergyTrans_NameplateEfficiency_ (x.SimFlowEnergyTrans_NameplateEfficiency_, f, this),
        SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_ (x.SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_, f, this),
        SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_ (x.SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_, f, this),
        SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_ (x.SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_, f, this),
        SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_ (x.SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_, f, this),
        SimFlowEnergyTrans_Meter_1_10_Name_ (x.SimFlowEnergyTrans_Meter_1_10_Name_, f, this)
      {
      }

      SimFlowEnergyTransfer_Electrical::
      SimFlowEnergyTransfer_Electrical (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowEnergyTransfer (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_RatedCap_ (this),
        SimFlowEnergyTrans_ZoneName_ (this),
        SimFlowEnergyTrans_PerfInputMeth_ (this),
        SimFlowEnergyTrans_RadiativeFract_ (this),
        SimFlowEnergyTrans_TransformUsage_ (this),
        SimFlowEnergyTrans_Phase_ (this),
        SimFlowEnergyTrans_ConductorMaterial_ (this),
        SimFlowEnergyTrans_FullLoadTemperatureRise_ (this),
        SimFlowEnergyTrans_FractionOfEddyCurrentLosses_ (this),
        SimFlowEnergyTrans_RatedNoLoadLoss_ (this),
        SimFlowEnergyTrans_RatedLoadLoss_ (this),
        SimFlowEnergyTrans_NameplateEfficiency_ (this),
        SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_ (this),
        SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_ (this),
        SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_ (this),
        SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_ (this),
        SimFlowEnergyTrans_Meter_1_10_Name_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_Electrical::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowEnergyTransfer::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedCap
          //
          if (n.name () == "SimFlowEnergyTrans_RatedCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedCap_)
            {
              this->SimFlowEnergyTrans_RatedCap_.set (SimFlowEnergyTrans_RatedCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ZoneName
          //
          if (n.name () == "SimFlowEnergyTrans_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ZoneName_type > r (
              SimFlowEnergyTrans_ZoneName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ZoneName_)
            {
              this->SimFlowEnergyTrans_ZoneName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PerfInputMeth
          //
          if (n.name () == "SimFlowEnergyTrans_PerfInputMeth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PerfInputMeth_type > r (
              SimFlowEnergyTrans_PerfInputMeth_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PerfInputMeth_)
            {
              this->SimFlowEnergyTrans_PerfInputMeth_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RadiativeFract
          //
          if (n.name () == "SimFlowEnergyTrans_RadiativeFract" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RadiativeFract_)
            {
              this->SimFlowEnergyTrans_RadiativeFract_.set (SimFlowEnergyTrans_RadiativeFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_TransformUsage
          //
          if (n.name () == "SimFlowEnergyTrans_TransformUsage" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_TransformUsage_type > r (
              SimFlowEnergyTrans_TransformUsage_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_TransformUsage_)
            {
              this->SimFlowEnergyTrans_TransformUsage_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_Phase
          //
          if (n.name () == "SimFlowEnergyTrans_Phase" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_Phase_)
            {
              this->SimFlowEnergyTrans_Phase_.set (SimFlowEnergyTrans_Phase_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ConductorMaterial
          //
          if (n.name () == "SimFlowEnergyTrans_ConductorMaterial" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ConductorMaterial_type > r (
              SimFlowEnergyTrans_ConductorMaterial_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ConductorMaterial_)
            {
              this->SimFlowEnergyTrans_ConductorMaterial_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_FullLoadTemperatureRise
          //
          if (n.name () == "SimFlowEnergyTrans_FullLoadTemperatureRise" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_FullLoadTemperatureRise_)
            {
              this->SimFlowEnergyTrans_FullLoadTemperatureRise_.set (SimFlowEnergyTrans_FullLoadTemperatureRise_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_FractionOfEddyCurrentLosses
          //
          if (n.name () == "SimFlowEnergyTrans_FractionOfEddyCurrentLosses" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_)
            {
              this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_.set (SimFlowEnergyTrans_FractionOfEddyCurrentLosses_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedNoLoadLoss
          //
          if (n.name () == "SimFlowEnergyTrans_RatedNoLoadLoss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedNoLoadLoss_)
            {
              this->SimFlowEnergyTrans_RatedNoLoadLoss_.set (SimFlowEnergyTrans_RatedNoLoadLoss_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedLoadLoss
          //
          if (n.name () == "SimFlowEnergyTrans_RatedLoadLoss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedLoadLoss_)
            {
              this->SimFlowEnergyTrans_RatedLoadLoss_.set (SimFlowEnergyTrans_RatedLoadLoss_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NameplateEfficiency
          //
          if (n.name () == "SimFlowEnergyTrans_NameplateEfficiency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NameplateEfficiency_)
            {
              this->SimFlowEnergyTrans_NameplateEfficiency_.set (SimFlowEnergyTrans_NameplateEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency
          //
          if (n.name () == "SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_)
            {
              this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_.set (SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency
          //
          if (n.name () == "SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_)
            {
              this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_.set (SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency
          //
          if (n.name () == "SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_)
            {
              this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_.set (SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost
          //
          if (n.name () == "SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_type > r (
              SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_)
            {
              this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_Meter_1_10_Name
          //
          if (n.name () == "SimFlowEnergyTrans_Meter_1_10_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_Meter_1_10_Name_type > r (
              SimFlowEnergyTrans_Meter_1_10_Name_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_Meter_1_10_Name_)
            {
              this->SimFlowEnergyTrans_Meter_1_10_Name_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_Electrical* SimFlowEnergyTransfer_Electrical::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_Electrical (*this, f, c);
      }

      SimFlowEnergyTransfer_Electrical& SimFlowEnergyTransfer_Electrical::
      operator= (const SimFlowEnergyTransfer_Electrical& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowEnergyTransfer& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_RatedCap_ = x.SimFlowEnergyTrans_RatedCap_;
          this->SimFlowEnergyTrans_ZoneName_ = x.SimFlowEnergyTrans_ZoneName_;
          this->SimFlowEnergyTrans_PerfInputMeth_ = x.SimFlowEnergyTrans_PerfInputMeth_;
          this->SimFlowEnergyTrans_RadiativeFract_ = x.SimFlowEnergyTrans_RadiativeFract_;
          this->SimFlowEnergyTrans_TransformUsage_ = x.SimFlowEnergyTrans_TransformUsage_;
          this->SimFlowEnergyTrans_Phase_ = x.SimFlowEnergyTrans_Phase_;
          this->SimFlowEnergyTrans_ConductorMaterial_ = x.SimFlowEnergyTrans_ConductorMaterial_;
          this->SimFlowEnergyTrans_FullLoadTemperatureRise_ = x.SimFlowEnergyTrans_FullLoadTemperatureRise_;
          this->SimFlowEnergyTrans_FractionOfEddyCurrentLosses_ = x.SimFlowEnergyTrans_FractionOfEddyCurrentLosses_;
          this->SimFlowEnergyTrans_RatedNoLoadLoss_ = x.SimFlowEnergyTrans_RatedNoLoadLoss_;
          this->SimFlowEnergyTrans_RatedLoadLoss_ = x.SimFlowEnergyTrans_RatedLoadLoss_;
          this->SimFlowEnergyTrans_NameplateEfficiency_ = x.SimFlowEnergyTrans_NameplateEfficiency_;
          this->SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_ = x.SimFlowEnergyTrans_PerUnitLoadForNameplateEfficiency_;
          this->SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_ = x.SimFlowEnergyTrans_RefTemperatureForNameplateEfficiency_;
          this->SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_ = x.SimFlowEnergyTrans_PerUnitLoadForMaxEfficiency_;
          this->SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_ = x.SimFlowEnergyTrans_ConsiderTransformLossForUtilityCost_;
          this->SimFlowEnergyTrans_Meter_1_10_Name_ = x.SimFlowEnergyTrans_Meter_1_10_Name_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_Electrical::
      ~SimFlowEnergyTransfer_Electrical ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

