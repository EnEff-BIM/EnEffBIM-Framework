// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimConnection_ZoneAirFlow_ZoneCrossMixing.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimConnection_ZoneAirFlow_ZoneCrossMixing
      // 

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_Name_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_Name () const
      {
        return this->SimConnect_Name_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_Name_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_Name ()
      {
        return this->SimConnect_Name_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_Name (const SimConnect_Name_type& x)
      {
        this->SimConnect_Name_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_Name (const SimConnect_Name_optional& x)
      {
        this->SimConnect_Name_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_Name (::std::auto_ptr< SimConnect_Name_type > x)
      {
        this->SimConnect_Name_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_ZoneName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_ZoneName () const
      {
        return this->SimConnect_ZoneName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_ZoneName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_ZoneName ()
      {
        return this->SimConnect_ZoneName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_ZoneName (const SimConnect_ZoneName_type& x)
      {
        this->SimConnect_ZoneName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_ZoneName (const SimConnect_ZoneName_optional& x)
      {
        this->SimConnect_ZoneName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_ZoneName (::std::auto_ptr< SimConnect_ZoneName_type > x)
      {
        this->SimConnect_ZoneName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_SchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SchedName () const
      {
        return this->SimConnect_SchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_SchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SchedName ()
      {
        return this->SimConnect_SchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SchedName (const SimConnect_SchedName_type& x)
      {
        this->SimConnect_SchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SchedName (const SimConnect_SchedName_optional& x)
      {
        this->SimConnect_SchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SchedName (::std::auto_ptr< SimConnect_SchedName_type > x)
      {
        this->SimConnect_SchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DesignFlowRateCalcMeth_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRateCalcMeth () const
      {
        return this->SimConnect_DesignFlowRateCalcMeth_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DesignFlowRateCalcMeth_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRateCalcMeth ()
      {
        return this->SimConnect_DesignFlowRateCalcMeth_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRateCalcMeth (const SimConnect_DesignFlowRateCalcMeth_type& x)
      {
        this->SimConnect_DesignFlowRateCalcMeth_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRateCalcMeth (const SimConnect_DesignFlowRateCalcMeth_optional& x)
      {
        this->SimConnect_DesignFlowRateCalcMeth_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRateCalcMeth (::std::auto_ptr< SimConnect_DesignFlowRateCalcMeth_type > x)
      {
        this->SimConnect_DesignFlowRateCalcMeth_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DesignFlowRate_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRate () const
      {
        return this->SimConnect_DesignFlowRate_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DesignFlowRate_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRate ()
      {
        return this->SimConnect_DesignFlowRate_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRate (const SimConnect_DesignFlowRate_type& x)
      {
        this->SimConnect_DesignFlowRate_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DesignFlowRate (const SimConnect_DesignFlowRate_optional& x)
      {
        this->SimConnect_DesignFlowRate_ = x;
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_FlowRatePerZoneFlrArea_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerZoneFlrArea () const
      {
        return this->SimConnect_FlowRatePerZoneFlrArea_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_FlowRatePerZoneFlrArea_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerZoneFlrArea ()
      {
        return this->SimConnect_FlowRatePerZoneFlrArea_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerZoneFlrArea (const SimConnect_FlowRatePerZoneFlrArea_type& x)
      {
        this->SimConnect_FlowRatePerZoneFlrArea_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerZoneFlrArea (const SimConnect_FlowRatePerZoneFlrArea_optional& x)
      {
        this->SimConnect_FlowRatePerZoneFlrArea_ = x;
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_FlowRatePerPerson_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerPerson () const
      {
        return this->SimConnect_FlowRatePerPerson_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_FlowRatePerPerson_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerPerson ()
      {
        return this->SimConnect_FlowRatePerPerson_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerPerson (const SimConnect_FlowRatePerPerson_type& x)
      {
        this->SimConnect_FlowRatePerPerson_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_FlowRatePerPerson (const SimConnect_FlowRatePerPerson_optional& x)
      {
        this->SimConnect_FlowRatePerPerson_ = x;
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_AirChngPerHour_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_AirChngPerHour () const
      {
        return this->SimConnect_AirChngPerHour_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_AirChngPerHour_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_AirChngPerHour ()
      {
        return this->SimConnect_AirChngPerHour_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_AirChngPerHour (const SimConnect_AirChngPerHour_type& x)
      {
        this->SimConnect_AirChngPerHour_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_AirChngPerHour (const SimConnect_AirChngPerHour_optional& x)
      {
        this->SimConnect_AirChngPerHour_ = x;
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_SrcZoneName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SrcZoneName () const
      {
        return this->SimConnect_SrcZoneName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_SrcZoneName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SrcZoneName ()
      {
        return this->SimConnect_SrcZoneName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SrcZoneName (const SimConnect_SrcZoneName_type& x)
      {
        this->SimConnect_SrcZoneName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SrcZoneName (const SimConnect_SrcZoneName_optional& x)
      {
        this->SimConnect_SrcZoneName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_SrcZoneName (::std::auto_ptr< SimConnect_SrcZoneName_type > x)
      {
        this->SimConnect_SrcZoneName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DeltaTemp_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTemp () const
      {
        return this->SimConnect_DeltaTemp_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DeltaTemp_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTemp ()
      {
        return this->SimConnect_DeltaTemp_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTemp (const SimConnect_DeltaTemp_type& x)
      {
        this->SimConnect_DeltaTemp_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTemp (const SimConnect_DeltaTemp_optional& x)
      {
        this->SimConnect_DeltaTemp_ = x;
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DeltaTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTempSchedName () const
      {
        return this->SimConnect_DeltaTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_DeltaTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTempSchedName ()
      {
        return this->SimConnect_DeltaTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTempSchedName (const SimConnect_DeltaTempSchedName_type& x)
      {
        this->SimConnect_DeltaTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTempSchedName (const SimConnect_DeltaTempSchedName_optional& x)
      {
        this->SimConnect_DeltaTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_DeltaTempSchedName (::std::auto_ptr< SimConnect_DeltaTempSchedName_type > x)
      {
        this->SimConnect_DeltaTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinZoneTempSchedName () const
      {
        return this->SimConnect_MinZoneTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinZoneTempSchedName ()
      {
        return this->SimConnect_MinZoneTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinZoneTempSchedName (const SimConnect_MinZoneTempSchedName_type& x)
      {
        this->SimConnect_MinZoneTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinZoneTempSchedName (const SimConnect_MinZoneTempSchedName_optional& x)
      {
        this->SimConnect_MinZoneTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinZoneTempSchedName (::std::auto_ptr< SimConnect_MinZoneTempSchedName_type > x)
      {
        this->SimConnect_MinZoneTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxZoneTempSchedName () const
      {
        return this->SimConnect_MaxZoneTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxZoneTempSchedName ()
      {
        return this->SimConnect_MaxZoneTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxZoneTempSchedName (const SimConnect_MaxZoneTempSchedName_type& x)
      {
        this->SimConnect_MaxZoneTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxZoneTempSchedName (const SimConnect_MaxZoneTempSchedName_optional& x)
      {
        this->SimConnect_MaxZoneTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxZoneTempSchedName (::std::auto_ptr< SimConnect_MaxZoneTempSchedName_type > x)
      {
        this->SimConnect_MaxZoneTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinSrcZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinSrcZoneTempSchedName () const
      {
        return this->SimConnect_MinSrcZoneTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinSrcZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinSrcZoneTempSchedName ()
      {
        return this->SimConnect_MinSrcZoneTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinSrcZoneTempSchedName (const SimConnect_MinSrcZoneTempSchedName_type& x)
      {
        this->SimConnect_MinSrcZoneTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinSrcZoneTempSchedName (const SimConnect_MinSrcZoneTempSchedName_optional& x)
      {
        this->SimConnect_MinSrcZoneTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinSrcZoneTempSchedName (::std::auto_ptr< SimConnect_MinSrcZoneTempSchedName_type > x)
      {
        this->SimConnect_MinSrcZoneTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxSrcZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxSrcZoneTempSchedName () const
      {
        return this->SimConnect_MaxSrcZoneTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxSrcZoneTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxSrcZoneTempSchedName ()
      {
        return this->SimConnect_MaxSrcZoneTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxSrcZoneTempSchedName (const SimConnect_MaxSrcZoneTempSchedName_type& x)
      {
        this->SimConnect_MaxSrcZoneTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxSrcZoneTempSchedName (const SimConnect_MaxSrcZoneTempSchedName_optional& x)
      {
        this->SimConnect_MaxSrcZoneTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxSrcZoneTempSchedName (::std::auto_ptr< SimConnect_MaxSrcZoneTempSchedName_type > x)
      {
        this->SimConnect_MaxSrcZoneTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinOutdrTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinOutdrTempSchedName () const
      {
        return this->SimConnect_MinOutdrTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MinOutdrTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinOutdrTempSchedName ()
      {
        return this->SimConnect_MinOutdrTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinOutdrTempSchedName (const SimConnect_MinOutdrTempSchedName_type& x)
      {
        this->SimConnect_MinOutdrTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinOutdrTempSchedName (const SimConnect_MinOutdrTempSchedName_optional& x)
      {
        this->SimConnect_MinOutdrTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MinOutdrTempSchedName (::std::auto_ptr< SimConnect_MinOutdrTempSchedName_type > x)
      {
        this->SimConnect_MinOutdrTempSchedName_.set (x);
      }

      const SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxOutdrTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxOutdrTempSchedName () const
      {
        return this->SimConnect_MaxOutdrTempSchedName_;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::SimConnect_MaxOutdrTempSchedName_optional& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxOutdrTempSchedName ()
      {
        return this->SimConnect_MaxOutdrTempSchedName_;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxOutdrTempSchedName (const SimConnect_MaxOutdrTempSchedName_type& x)
      {
        this->SimConnect_MaxOutdrTempSchedName_.set (x);
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxOutdrTempSchedName (const SimConnect_MaxOutdrTempSchedName_optional& x)
      {
        this->SimConnect_MaxOutdrTempSchedName_ = x;
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnect_MaxOutdrTempSchedName (::std::auto_ptr< SimConnect_MaxOutdrTempSchedName_type > x)
      {
        this->SimConnect_MaxOutdrTempSchedName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimConnection_ZoneAirFlow_ZoneCrossMixing
      //

      SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnection_ZoneAirFlow_ZoneCrossMixing (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimConnection_ZoneAirFlow (RefId),
        SimConnect_Name_ (this),
        SimConnect_ZoneName_ (this),
        SimConnect_SchedName_ (this),
        SimConnect_DesignFlowRateCalcMeth_ (this),
        SimConnect_DesignFlowRate_ (this),
        SimConnect_FlowRatePerZoneFlrArea_ (this),
        SimConnect_FlowRatePerPerson_ (this),
        SimConnect_AirChngPerHour_ (this),
        SimConnect_SrcZoneName_ (this),
        SimConnect_DeltaTemp_ (this),
        SimConnect_DeltaTempSchedName_ (this),
        SimConnect_MinZoneTempSchedName_ (this),
        SimConnect_MaxZoneTempSchedName_ (this),
        SimConnect_MinSrcZoneTempSchedName_ (this),
        SimConnect_MaxSrcZoneTempSchedName_ (this),
        SimConnect_MinOutdrTempSchedName_ (this),
        SimConnect_MaxOutdrTempSchedName_ (this)
      {
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnection_ZoneAirFlow_ZoneCrossMixing (const SimConnection_ZoneAirFlow_ZoneCrossMixing& x,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimConnection_ZoneAirFlow (x, f, c),
        SimConnect_Name_ (x.SimConnect_Name_, f, this),
        SimConnect_ZoneName_ (x.SimConnect_ZoneName_, f, this),
        SimConnect_SchedName_ (x.SimConnect_SchedName_, f, this),
        SimConnect_DesignFlowRateCalcMeth_ (x.SimConnect_DesignFlowRateCalcMeth_, f, this),
        SimConnect_DesignFlowRate_ (x.SimConnect_DesignFlowRate_, f, this),
        SimConnect_FlowRatePerZoneFlrArea_ (x.SimConnect_FlowRatePerZoneFlrArea_, f, this),
        SimConnect_FlowRatePerPerson_ (x.SimConnect_FlowRatePerPerson_, f, this),
        SimConnect_AirChngPerHour_ (x.SimConnect_AirChngPerHour_, f, this),
        SimConnect_SrcZoneName_ (x.SimConnect_SrcZoneName_, f, this),
        SimConnect_DeltaTemp_ (x.SimConnect_DeltaTemp_, f, this),
        SimConnect_DeltaTempSchedName_ (x.SimConnect_DeltaTempSchedName_, f, this),
        SimConnect_MinZoneTempSchedName_ (x.SimConnect_MinZoneTempSchedName_, f, this),
        SimConnect_MaxZoneTempSchedName_ (x.SimConnect_MaxZoneTempSchedName_, f, this),
        SimConnect_MinSrcZoneTempSchedName_ (x.SimConnect_MinSrcZoneTempSchedName_, f, this),
        SimConnect_MaxSrcZoneTempSchedName_ (x.SimConnect_MaxSrcZoneTempSchedName_, f, this),
        SimConnect_MinOutdrTempSchedName_ (x.SimConnect_MinOutdrTempSchedName_, f, this),
        SimConnect_MaxOutdrTempSchedName_ (x.SimConnect_MaxOutdrTempSchedName_, f, this)
      {
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::
      SimConnection_ZoneAirFlow_ZoneCrossMixing (const ::xercesc::DOMElement& e,
                                                 ::xml_schema::flags f,
                                                 ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimConnection_ZoneAirFlow (e, f | ::xml_schema::flags::base, c),
        SimConnect_Name_ (this),
        SimConnect_ZoneName_ (this),
        SimConnect_SchedName_ (this),
        SimConnect_DesignFlowRateCalcMeth_ (this),
        SimConnect_DesignFlowRate_ (this),
        SimConnect_FlowRatePerZoneFlrArea_ (this),
        SimConnect_FlowRatePerPerson_ (this),
        SimConnect_AirChngPerHour_ (this),
        SimConnect_SrcZoneName_ (this),
        SimConnect_DeltaTemp_ (this),
        SimConnect_DeltaTempSchedName_ (this),
        SimConnect_MinZoneTempSchedName_ (this),
        SimConnect_MaxZoneTempSchedName_ (this),
        SimConnect_MinSrcZoneTempSchedName_ (this),
        SimConnect_MaxSrcZoneTempSchedName_ (this),
        SimConnect_MinOutdrTempSchedName_ (this),
        SimConnect_MaxOutdrTempSchedName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimConnection_ZoneAirFlow_ZoneCrossMixing::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimConnection_ZoneAirFlow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimConnect_Name
          //
          if (n.name () == "SimConnect_Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_Name_type > r (
              SimConnect_Name_traits::create (i, f, this));

            if (!this->SimConnect_Name_)
            {
              this->SimConnect_Name_.set (r);
              continue;
            }
          }

          // SimConnect_ZoneName
          //
          if (n.name () == "SimConnect_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_ZoneName_type > r (
              SimConnect_ZoneName_traits::create (i, f, this));

            if (!this->SimConnect_ZoneName_)
            {
              this->SimConnect_ZoneName_.set (r);
              continue;
            }
          }

          // SimConnect_SchedName
          //
          if (n.name () == "SimConnect_SchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_SchedName_type > r (
              SimConnect_SchedName_traits::create (i, f, this));

            if (!this->SimConnect_SchedName_)
            {
              this->SimConnect_SchedName_.set (r);
              continue;
            }
          }

          // SimConnect_DesignFlowRateCalcMeth
          //
          if (n.name () == "SimConnect_DesignFlowRateCalcMeth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_DesignFlowRateCalcMeth_type > r (
              SimConnect_DesignFlowRateCalcMeth_traits::create (i, f, this));

            if (!this->SimConnect_DesignFlowRateCalcMeth_)
            {
              this->SimConnect_DesignFlowRateCalcMeth_.set (r);
              continue;
            }
          }

          // SimConnect_DesignFlowRate
          //
          if (n.name () == "SimConnect_DesignFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimConnect_DesignFlowRate_)
            {
              this->SimConnect_DesignFlowRate_.set (SimConnect_DesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_FlowRatePerZoneFlrArea
          //
          if (n.name () == "SimConnect_FlowRatePerZoneFlrArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimConnect_FlowRatePerZoneFlrArea_)
            {
              this->SimConnect_FlowRatePerZoneFlrArea_.set (SimConnect_FlowRatePerZoneFlrArea_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_FlowRatePerPerson
          //
          if (n.name () == "SimConnect_FlowRatePerPerson" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimConnect_FlowRatePerPerson_)
            {
              this->SimConnect_FlowRatePerPerson_.set (SimConnect_FlowRatePerPerson_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_AirChngPerHour
          //
          if (n.name () == "SimConnect_AirChngPerHour" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimConnect_AirChngPerHour_)
            {
              this->SimConnect_AirChngPerHour_.set (SimConnect_AirChngPerHour_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_SrcZoneName
          //
          if (n.name () == "SimConnect_SrcZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_SrcZoneName_type > r (
              SimConnect_SrcZoneName_traits::create (i, f, this));

            if (!this->SimConnect_SrcZoneName_)
            {
              this->SimConnect_SrcZoneName_.set (r);
              continue;
            }
          }

          // SimConnect_DeltaTemp
          //
          if (n.name () == "SimConnect_DeltaTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimConnect_DeltaTemp_)
            {
              this->SimConnect_DeltaTemp_.set (SimConnect_DeltaTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimConnect_DeltaTempSchedName
          //
          if (n.name () == "SimConnect_DeltaTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_DeltaTempSchedName_type > r (
              SimConnect_DeltaTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_DeltaTempSchedName_)
            {
              this->SimConnect_DeltaTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MinZoneTempSchedName
          //
          if (n.name () == "SimConnect_MinZoneTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MinZoneTempSchedName_type > r (
              SimConnect_MinZoneTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MinZoneTempSchedName_)
            {
              this->SimConnect_MinZoneTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MaxZoneTempSchedName
          //
          if (n.name () == "SimConnect_MaxZoneTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MaxZoneTempSchedName_type > r (
              SimConnect_MaxZoneTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MaxZoneTempSchedName_)
            {
              this->SimConnect_MaxZoneTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MinSrcZoneTempSchedName
          //
          if (n.name () == "SimConnect_MinSrcZoneTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MinSrcZoneTempSchedName_type > r (
              SimConnect_MinSrcZoneTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MinSrcZoneTempSchedName_)
            {
              this->SimConnect_MinSrcZoneTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MaxSrcZoneTempSchedName
          //
          if (n.name () == "SimConnect_MaxSrcZoneTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MaxSrcZoneTempSchedName_type > r (
              SimConnect_MaxSrcZoneTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MaxSrcZoneTempSchedName_)
            {
              this->SimConnect_MaxSrcZoneTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MinOutdrTempSchedName
          //
          if (n.name () == "SimConnect_MinOutdrTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MinOutdrTempSchedName_type > r (
              SimConnect_MinOutdrTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MinOutdrTempSchedName_)
            {
              this->SimConnect_MinOutdrTempSchedName_.set (r);
              continue;
            }
          }

          // SimConnect_MaxOutdrTempSchedName
          //
          if (n.name () == "SimConnect_MaxOutdrTempSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimConnect_MaxOutdrTempSchedName_type > r (
              SimConnect_MaxOutdrTempSchedName_traits::create (i, f, this));

            if (!this->SimConnect_MaxOutdrTempSchedName_)
            {
              this->SimConnect_MaxOutdrTempSchedName_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing* SimConnection_ZoneAirFlow_ZoneCrossMixing::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimConnection_ZoneAirFlow_ZoneCrossMixing (*this, f, c);
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing& SimConnection_ZoneAirFlow_ZoneCrossMixing::
      operator= (const SimConnection_ZoneAirFlow_ZoneCrossMixing& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimConnection_ZoneAirFlow& > (*this) = x;
          this->SimConnect_Name_ = x.SimConnect_Name_;
          this->SimConnect_ZoneName_ = x.SimConnect_ZoneName_;
          this->SimConnect_SchedName_ = x.SimConnect_SchedName_;
          this->SimConnect_DesignFlowRateCalcMeth_ = x.SimConnect_DesignFlowRateCalcMeth_;
          this->SimConnect_DesignFlowRate_ = x.SimConnect_DesignFlowRate_;
          this->SimConnect_FlowRatePerZoneFlrArea_ = x.SimConnect_FlowRatePerZoneFlrArea_;
          this->SimConnect_FlowRatePerPerson_ = x.SimConnect_FlowRatePerPerson_;
          this->SimConnect_AirChngPerHour_ = x.SimConnect_AirChngPerHour_;
          this->SimConnect_SrcZoneName_ = x.SimConnect_SrcZoneName_;
          this->SimConnect_DeltaTemp_ = x.SimConnect_DeltaTemp_;
          this->SimConnect_DeltaTempSchedName_ = x.SimConnect_DeltaTempSchedName_;
          this->SimConnect_MinZoneTempSchedName_ = x.SimConnect_MinZoneTempSchedName_;
          this->SimConnect_MaxZoneTempSchedName_ = x.SimConnect_MaxZoneTempSchedName_;
          this->SimConnect_MinSrcZoneTempSchedName_ = x.SimConnect_MinSrcZoneTempSchedName_;
          this->SimConnect_MaxSrcZoneTempSchedName_ = x.SimConnect_MaxSrcZoneTempSchedName_;
          this->SimConnect_MinOutdrTempSchedName_ = x.SimConnect_MinOutdrTempSchedName_;
          this->SimConnect_MaxOutdrTempSchedName_ = x.SimConnect_MaxOutdrTempSchedName_;
        }

        return *this;
      }

      SimConnection_ZoneAirFlow_ZoneCrossMixing::
      ~SimConnection_ZoneAirFlow_ZoneCrossMixing ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

