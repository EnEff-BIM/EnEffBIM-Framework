# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_test_dll', [dirname(__file__)])
        except ImportError:
            import _test_dll
            return _test_dll
        if fp is not None:
            try:
                _mod = imp.load_module('_test_dll', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _test_dll = swig_import_helper()
    del swig_import_helper
else:
    import _test_dll
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _test_dll.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _test_dll.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _test_dll.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _test_dll.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _test_dll.SwigPyIterator_equal(self, x)

    def copy(self):
        return _test_dll.SwigPyIterator_copy(self)

    def next(self):
        return _test_dll.SwigPyIterator_next(self)

    def __next__(self):
        return _test_dll.SwigPyIterator___next__(self)

    def previous(self):
        return _test_dll.SwigPyIterator_previous(self)

    def advance(self, n):
        return _test_dll.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _test_dll.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _test_dll.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _test_dll.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _test_dll.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _test_dll.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _test_dll.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _test_dll.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class element_one(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_one, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_one, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete_element_one
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _test_dll.new_element_one(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _test_dll.element_one_get(self, *args)

    def set(self, *args):
        return _test_dll.element_one_set(self, *args)

    def present(self):
        return _test_dll.element_one_present(self)
element_one_swigregister = _test_dll.element_one_swigregister
element_one_swigregister(element_one)

class element_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_optional, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete_element_optional
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _test_dll.new_element_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _test_dll.element_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _test_dll.element_optional___ref__(self, *args)

    def present(self):
        return _test_dll.element_optional_present(self)

    def get(self, *args):
        return _test_dll.element_optional_get(self, *args)

    def set(self, *args):
        return _test_dll.element_optional_set(self, *args)

    def reset(self):
        return _test_dll.element_optional_reset(self)
element_optional_swigregister = _test_dll.element_optional_swigregister
element_optional_swigregister(element_optional)

class element_sequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_sequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_element_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _test_dll.element_sequence_assign(self, n, x)

    def resize(self, *args):
        return _test_dll.element_sequence_resize(self, *args)

    def size(self):
        return _test_dll.element_sequence_size(self)

    def max_size(self):
        return _test_dll.element_sequence_max_size(self)

    def capacity(self):
        return _test_dll.element_sequence_capacity(self)

    def empty(self):
        return _test_dll.element_sequence_empty(self)

    def reserve(self, n):
        return _test_dll.element_sequence_reserve(self, n)

    def clear(self):
        return _test_dll.element_sequence_clear(self)

    def begin(self, *args):
        return _test_dll.element_sequence_begin(self, *args)

    def end(self, *args):
        return _test_dll.element_sequence_end(self, *args)

    def rbegin(self, *args):
        return _test_dll.element_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _test_dll.element_sequence_rend(self, *args)

    def at(self, *args):
        return _test_dll.element_sequence_at(self, *args)

    def front(self, *args):
        return _test_dll.element_sequence_front(self, *args)

    def back(self, *args):
        return _test_dll.element_sequence_back(self, *args)

    def push_back(self, *args):
        return _test_dll.element_sequence_push_back(self, *args)

    def pop_back(self):
        return _test_dll.element_sequence_pop_back(self)

    def insert(self, *args):
        return _test_dll.element_sequence_insert(self, *args)

    def erase(self, *args):
        return _test_dll.element_sequence_erase(self, *args)

    def swap(self, x):
        return _test_dll.element_sequence_swap(self, x)
    __swig_destroy__ = _test_dll.delete_element_sequence
    __del__ = lambda self: None
element_sequence_swigregister = _test_dll.element_sequence_swigregister
element_sequence_swigregister(element_sequence)

class attribute_set_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attribute_set_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attribute_set_common, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _test_dll.new_attribute_set_common()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_attribute_set_common
    __del__ = lambda self: None
attribute_set_common_swigregister = _test_dll.attribute_set_common_swigregister
attribute_set_common_swigregister(attribute_set_common)

class flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flags, name)
    __repr__ = _swig_repr
    keep_dom = _test_dll.flags_keep_dom
    own_dom = _test_dll.flags_own_dom
    dont_validate = _test_dll.flags_dont_validate
    extract_content = _test_dll.flags_extract_content
    dont_initialize = _test_dll.flags_dont_initialize
    no_xml_declaration = _test_dll.flags_no_xml_declaration
    dont_pretty_print = _test_dll.flags_dont_pretty_print
    base = _test_dll.flags_base

    def __init__(self, x=0):
        this = _test_dll.new_flags(x)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_flags
    __del__ = lambda self: None
flags_swigregister = _test_dll.flags_swigregister
flags_swigregister(flags)

class content_order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, content_order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, content_order, name)
    __repr__ = _swig_repr

    def __init__(self, id, index=0):
        this = _test_dll.new_content_order(id, index)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["id"] = _test_dll.content_order_id_set
    __swig_getmethods__["id"] = _test_dll.content_order_id_get
    if _newclass:
        id = _swig_property(_test_dll.content_order_id_get, _test_dll.content_order_id_set)
    __swig_setmethods__["index"] = _test_dll.content_order_index_set
    __swig_getmethods__["index"] = _test_dll.content_order_index_get
    if _newclass:
        index = _swig_property(_test_dll.content_order_index_get, _test_dll.content_order_index_set)
    __swig_destroy__ = _test_dll.delete_content_order
    __del__ = lambda self: None
content_order_swigregister = _test_dll.content_order_swigregister
content_order_swigregister(content_order)


def __eq__(*args):
    return _test_dll.__eq__(*args)
__eq__ = _test_dll.__eq__

def __ne__(*args):
    return _test_dll.__ne__(*args)
__ne__ = _test_dll.__ne__

def __lt__(arg1, arg2):
    return _test_dll.__lt__(arg1, arg2)
__lt__ = _test_dll.__lt__
class identity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, identity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, identity, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete_identity
    __del__ = lambda self: None

    def before(self, arg2):
        return _test_dll.identity_before(self, arg2)

    def throw_duplicate_id(self):
        return _test_dll.identity_throw_duplicate_id(self)
identity_swigregister = _test_dll.identity_swigregister
identity_swigregister(identity)

class _type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _type, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete__type
    __del__ = lambda self: None

    def _clone(self, *args):
        return _test_dll._type__clone(self, *args)

    def __init__(self, *args):
        this = _test_dll.new__type(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def dom_content(self, *args):
        return _test_dll._type_dom_content(self, *args)

    def dom_content_document(self, *args):
        return _test_dll._type_dom_content_document(self, *args)

    def null_content(self):
        return _test_dll._type_null_content(self)

    def _container(self, *args):
        return _test_dll._type__container(self, *args)

    def _root(self, *args):
        return _test_dll._type__root(self, *args)

    def _node(self, *args):
        return _test_dll._type__node(self, *args)

    def _register_id(self, i, t):
        return _test_dll._type__register_id(self, i, t)

    def _unregister_id(self, id):
        return _test_dll._type__unregister_id(self, id)

    def _lookup_id(self, id):
        return _test_dll._type__lookup_id(self, id)
_type_swigregister = _test_dll._type_swigregister
_type_swigregister(_type)

class schema_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, schema_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, schema_type, name)
    __repr__ = _swig_repr
    other = _test_dll.schema_type_other
    double_ = _test_dll.schema_type_double_
    decimal = _test_dll.schema_type_decimal

    def __init__(self):
        this = _test_dll.new_schema_type()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_schema_type
    __del__ = lambda self: None
schema_type_swigregister = _test_dll.schema_type_swigregister
schema_type_swigregister(schema_type)

class sequence_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequence_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequence_common, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_sequence_common(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self):
        return _test_dll.sequence_common_size(self)

    def max_size(self):
        return _test_dll.sequence_common_max_size(self)

    def capacity(self):
        return _test_dll.sequence_common_capacity(self)

    def empty(self):
        return _test_dll.sequence_common_empty(self)

    def reserve(self, n):
        return _test_dll.sequence_common_reserve(self, n)

    def clear(self):
        return _test_dll.sequence_common_clear(self)

    def assign(self, n, x):
        return _test_dll.sequence_common_assign(self, n, x)

    def resize(self, n, x):
        return _test_dll.sequence_common_resize(self, n, x)

    def insert(self, p, n, x):
        return _test_dll.sequence_common_insert(self, p, n, x)
    __swig_setmethods__["container_"] = _test_dll.sequence_common_container__set
    __swig_getmethods__["container_"] = _test_dll.sequence_common_container__get
    if _newclass:
        container_ = _swig_property(_test_dll.sequence_common_container__get, _test_dll.sequence_common_container__set)
    __swig_setmethods__["v_"] = _test_dll.sequence_common_v__set
    __swig_getmethods__["v_"] = _test_dll.sequence_common_v__get
    if _newclass:
        v_ = _swig_property(_test_dll.sequence_common_v__get, _test_dll.sequence_common_v__set)
    __swig_destroy__ = _test_dll.delete_sequence_common
    __del__ = lambda self: None
sequence_common_swigregister = _test_dll.sequence_common_swigregister
sequence_common_swigregister(sequence_common)

class SimRoot(_type):
    __swig_setmethods__ = {}
    for _s in [_type]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRoot, name, value)
    __swig_getmethods__ = {}
    for _s in [_type]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimRoot, name)
    __repr__ = _swig_repr

    def Description(self, *args):
        return _test_dll.SimRoot_Description(self, *args)

    def ObjectOwnerHistory(self, *args):
        return _test_dll.SimRoot_ObjectOwnerHistory(self, *args)

    def IfcGlobalID(self, *args):
        return _test_dll.SimRoot_IfcGlobalID(self, *args)

    def IfcName(self, *args):
        return _test_dll.SimRoot_IfcName(self, *args)

    def SimUniqueID(self, *args):
        return _test_dll.SimRoot_SimUniqueID(self, *args)

    def SimModelType(self, *args):
        return _test_dll.SimRoot_SimModelType(self, *args)

    def SimModelSubtype(self, *args):
        return _test_dll.SimRoot_SimModelSubtype(self, *args)

    def SimModelName(self, *args):
        return _test_dll.SimRoot_SimModelName(self, *args)

    def SourceModelSchema(self, *args):
        return _test_dll.SimRoot_SourceModelSchema(self, *args)

    def SourceModelObjectType(self, *args):
        return _test_dll.SimRoot_SourceModelObjectType(self, *args)

    def RefId(self, *args):
        return _test_dll.SimRoot_RefId(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimRoot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimRoot__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimRoot
    __del__ = lambda self: None
SimRoot_swigregister = _test_dll.SimRoot_swigregister
SimRoot_swigregister(SimRoot)
cvar = _test_dll.cvar
tree_node_key = cvar.tree_node_key

class SimObjectDefinition(SimRoot):
    __swig_setmethods__ = {}
    for _s in [SimRoot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObjectDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRoot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObjectDefinition, name)
    __repr__ = _swig_repr

    def Decomposes(self, *args):
        return _test_dll.SimObjectDefinition_Decomposes(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimObjectDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimObjectDefinition__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimObjectDefinition
    __del__ = lambda self: None
SimObjectDefinition_swigregister = _test_dll.SimObjectDefinition_swigregister
SimObjectDefinition_swigregister(SimObjectDefinition)

class SimObject(SimObjectDefinition):
    __swig_setmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObject, name)
    __repr__ = _swig_repr

    def TypeDefinition(self, *args):
        return _test_dll.SimObject_TypeDefinition(self, *args)

    def ObjectType(self, *args):
        return _test_dll.SimObject_ObjectType(self, *args)

    def ObjectCreationParams(self, *args):
        return _test_dll.SimObject_ObjectCreationParams(self, *args)

    def IsTemplateObject(self, *args):
        return _test_dll.SimObject_IsTemplateObject(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimObject__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimObject
    __del__ = lambda self: None
SimObject_swigregister = _test_dll.SimObject_swigregister
SimObject_swigregister(SimObject)

class SimSpatialStructureElement(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpatialStructureElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpatialStructureElement, name)
    __repr__ = _swig_repr

    def LongName(self, *args):
        return _test_dll.SimSpatialStructureElement_LongName(self, *args)

    def CompositionType(self, *args):
        return _test_dll.SimSpatialStructureElement_CompositionType(self, *args)

    def Placement(self, *args):
        return _test_dll.SimSpatialStructureElement_Placement(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimSpatialStructureElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimSpatialStructureElement__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimSpatialStructureElement
    __del__ = lambda self: None
SimSpatialStructureElement_swigregister = _test_dll.SimSpatialStructureElement_swigregister
SimSpatialStructureElement_swigregister(SimSpatialStructureElement)

class SimBuilding(SimSpatialStructureElement):
    __swig_setmethods__ = {}
    for _s in [SimSpatialStructureElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding, name, value)
    __swig_getmethods__ = {}
    for _s in [SimSpatialStructureElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding, name)
    __repr__ = _swig_repr

    def Name(self, *args):
        return _test_dll.SimBuilding_Name(self, *args)

    def BuildingDatumElevation(self, *args):
        return _test_dll.SimBuilding_BuildingDatumElevation(self, *args)

    def Representation(self, *args):
        return _test_dll.SimBuilding_Representation(self, *args)

    def BuildingConstructionsTemplate(self, *args):
        return _test_dll.SimBuilding_BuildingConstructionsTemplate(self, *args)

    def SpaceBoundsNotCurrent(self, *args):
        return _test_dll.SimBuilding_SpaceBoundsNotCurrent(self, *args)

    def DaylightControlsDefault(self, *args):
        return _test_dll.SimBuilding_DaylightControlsDefault(self, *args)

    def NatVentilationDefault(self, *args):
        return _test_dll.SimBuilding_NatVentilationDefault(self, *args)

    def BuildingInfiltrationType(self, *args):
        return _test_dll.SimBuilding_BuildingInfiltrationType(self, *args)

    def BuildingInfiltrationValue(self, *args):
        return _test_dll.SimBuilding_BuildingInfiltrationValue(self, *args)

    def TemplateOverrideValues(self, *args):
        return _test_dll.SimBuilding_TemplateOverrideValues(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding
    __del__ = lambda self: None
SimBuilding_swigregister = _test_dll.SimBuilding_swigregister
SimBuilding_swigregister(SimBuilding)

class SimBuilding_Building(SimBuilding):
    __swig_setmethods__ = {}
    for _s in [SimBuilding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building, name)
    __repr__ = _swig_repr

    def ElevationOfTerrain(self, *args):
        return _test_dll.SimBuilding_Building_ElevationOfTerrain(self, *args)

    def BuildingAddress(self, *args):
        return _test_dll.SimBuilding_Building_BuildingAddress(self, *args)

    def BuildingOccupancyType(self, *args):
        return _test_dll.SimBuilding_Building_BuildingOccupancyType(self, *args)

    def BuildingGrossPlannedArea(self, *args):
        return _test_dll.SimBuilding_Building_BuildingGrossPlannedArea(self, *args)

    def BuildingNumberofStoreys(self, *args):
        return _test_dll.SimBuilding_Building_BuildingNumberofStoreys(self, *args)

    def BuildingYearOfConstruction(self, *args):
        return _test_dll.SimBuilding_Building_BuildingYearOfConstruction(self, *args)

    def BuildingisLandmarked(self, *args):
        return _test_dll.SimBuilding_Building_BuildingisLandmarked(self, *args)

    def BuildingEnergyTargetUnits(self, *args):
        return _test_dll.SimBuilding_Building_BuildingEnergyTargetUnits(self, *args)

    def BuildingEnergyTargetValue(self, *args):
        return _test_dll.SimBuilding_Building_BuildingEnergyTargetValue(self, *args)

    def BuildingHeight(self, *args):
        return _test_dll.SimBuilding_Building_BuildingHeight(self, *args)

    def BuildingGrossFloorArea(self, *args):
        return _test_dll.SimBuilding_Building_BuildingGrossFloorArea(self, *args)

    def ClassRef_ConstEntByFunction(self, *args):
        return _test_dll.SimBuilding_Building_ClassRef_ConstEntByFunction(self, *args)

    def BuildingInSpatialContainer(self, *args):
        return _test_dll.SimBuilding_Building_BuildingInSpatialContainer(self, *args)

    def SimBuilding_NorthAxis(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_NorthAxis(self, *args)

    def SimBuilding_Terrain(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_Terrain(self, *args)

    def SimBuilding_LoadsConvergTolVal(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_LoadsConvergTolVal(self, *args)

    def SimBuilding_TempConvergTolVal(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_TempConvergTolVal(self, *args)

    def SimBuilding_SolarDist(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_SolarDist(self, *args)

    def SimBuilding_MaxNumWarmupDays(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_MaxNumWarmupDays(self, *args)

    def SimBuilding_MinNumberWarmupDays(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_MinNumberWarmupDays(self, *args)

    def RoofIrrigation_IrrigationModelType(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationModelType(self, *args)

    def RoofIrrigation_IrrigationRateSchedName(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName(self, *args)

    def RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding_Building__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building
    __del__ = lambda self: None
SimBuilding_Building_swigregister = _test_dll.SimBuilding_Building_swigregister
SimBuilding_Building_swigregister(SimBuilding_Building)

class SimBuilding_Building_Default(SimBuilding_Building):
    __swig_setmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building_Default(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding_Building_Default__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building_Default
    __del__ = lambda self: None
SimBuilding_Building_Default_swigregister = _test_dll.SimBuilding_Building_Default_swigregister
SimBuilding_Building_Default_swigregister(SimBuilding_Building_Default)

class SimModel(_type):
    __swig_setmethods__ = {}
    for _s in [_type]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimModel, name, value)
    __swig_getmethods__ = {}
    for _s in [_type]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimModel, name)
    __repr__ = _swig_repr

    def SimBuilding_Building_Default(self, *args):
        return _test_dll.SimModel_SimBuilding_Building_Default(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimModel__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimModel
    __del__ = lambda self: None
SimModel_swigregister = _test_dll.SimModel_swigregister
SimModel_swigregister(SimModel)


def SimModel_(*args):
    return _test_dll.SimModel_(*args)
SimModel_ = _test_dll.SimModel_
class SimBuilding_Building_DefaultVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_DefaultVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_DefaultVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _test_dll.SimBuilding_Building_DefaultVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _test_dll.SimBuilding_Building_DefaultVector___nonzero__(self)

    def __bool__(self):
        return _test_dll.SimBuilding_Building_DefaultVector___bool__(self)

    def __len__(self):
        return _test_dll.SimBuilding_Building_DefaultVector___len__(self)

    def pop(self):
        return _test_dll.SimBuilding_Building_DefaultVector_pop(self)

    def __getslice__(self, i, j):
        return _test_dll.SimBuilding_Building_DefaultVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _test_dll.SimBuilding_Building_DefaultVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector___setitem__(self, *args)

    def append(self, x):
        return _test_dll.SimBuilding_Building_DefaultVector_append(self, x)

    def empty(self):
        return _test_dll.SimBuilding_Building_DefaultVector_empty(self)

    def size(self):
        return _test_dll.SimBuilding_Building_DefaultVector_size(self)

    def clear(self):
        return _test_dll.SimBuilding_Building_DefaultVector_clear(self)

    def swap(self, v):
        return _test_dll.SimBuilding_Building_DefaultVector_swap(self, v)

    def get_allocator(self):
        return _test_dll.SimBuilding_Building_DefaultVector_get_allocator(self)

    def begin(self):
        return _test_dll.SimBuilding_Building_DefaultVector_begin(self)

    def end(self):
        return _test_dll.SimBuilding_Building_DefaultVector_end(self)

    def rbegin(self):
        return _test_dll.SimBuilding_Building_DefaultVector_rbegin(self)

    def rend(self):
        return _test_dll.SimBuilding_Building_DefaultVector_rend(self)

    def pop_back(self):
        return _test_dll.SimBuilding_Building_DefaultVector_pop_back(self)

    def erase(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector_erase(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building_DefaultVector(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _test_dll.SimBuilding_Building_DefaultVector_push_back(self, x)

    def front(self):
        return _test_dll.SimBuilding_Building_DefaultVector_front(self)

    def back(self):
        return _test_dll.SimBuilding_Building_DefaultVector_back(self)

    def assign(self, n, x):
        return _test_dll.SimBuilding_Building_DefaultVector_assign(self, n, x)

    def resize(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector_resize(self, *args)

    def insert(self, *args):
        return _test_dll.SimBuilding_Building_DefaultVector_insert(self, *args)

    def reserve(self, n):
        return _test_dll.SimBuilding_Building_DefaultVector_reserve(self, n)

    def capacity(self):
        return _test_dll.SimBuilding_Building_DefaultVector_capacity(self)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building_DefaultVector
    __del__ = lambda self: None
SimBuilding_Building_DefaultVector_swigregister = _test_dll.SimBuilding_Building_DefaultVector_swigregister
SimBuilding_Building_DefaultVector_swigregister(SimBuilding_Building_DefaultVector)

class fundamental_pBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fundamental_pBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fundamental_pBool, name)
    __repr__ = _swig_repr
    r = _test_dll.fundamental_pBool_r

    def __init__(self):
        this = _test_dll.new_fundamental_pBool()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_fundamental_pBool
    __del__ = lambda self: None
fundamental_pBool_swigregister = _test_dll.fundamental_pBool_swigregister
fundamental_pBool_swigregister(fundamental_pBool)

class SimBuilding_Building_Default_sequence(sequence_common):
    __swig_setmethods__ = {}
    for _s in [sequence_common]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default_sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [sequence_common]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building_Default_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _test_dll.SimBuilding_Building_Default_sequence_assign(self, n, x)

    def begin(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_begin(self, *args)

    def end(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_end(self, *args)

    def rbegin(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_rend(self, *args)

    def at(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_at(self, *args)

    def front(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_front(self, *args)

    def back(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_back(self, *args)

    def push_back(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_push_back(self, *args)

    def pop_back(self):
        return _test_dll.SimBuilding_Building_Default_sequence_pop_back(self)

    def detach_back(self, pop=True):
        return _test_dll.SimBuilding_Building_Default_sequence_detach_back(self, pop)

    def insert(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_insert(self, *args)

    def erase(self, *args):
        return _test_dll.SimBuilding_Building_Default_sequence_erase(self, *args)

    def detach(self, position, r, erase=True):
        return _test_dll.SimBuilding_Building_Default_sequence_detach(self, position, r, erase)

    def swap(self, x):
        return _test_dll.SimBuilding_Building_Default_sequence_swap(self, x)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building_Default_sequence
    __del__ = lambda self: None
SimBuilding_Building_Default_sequence_swigregister = _test_dll.SimBuilding_Building_Default_sequence_swigregister
SimBuilding_Building_Default_sequence_swigregister(SimBuilding_Building_Default_sequence)

class SimBuilding_Building_Default_sequence1(SimBuilding_Building_DefaultVector):
    __swig_setmethods__ = {}
    for _s in [SimBuilding_Building_DefaultVector]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default_sequence1, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding_Building_DefaultVector]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default_sequence1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building_Default_sequence1(*args)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building_Default_sequence1
    __del__ = lambda self: None
SimBuilding_Building_Default_sequence1_swigregister = _test_dll.SimBuilding_Building_Default_sequence1_swigregister
SimBuilding_Building_Default_sequence1_swigregister(SimBuilding_Building_Default_sequence1)

class BuildingHeight_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildingHeight_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildingHeight_optional, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_BuildingHeight_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _test_dll.BuildingHeight_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _test_dll.BuildingHeight_optional___ref__(self, *args)

    def present(self):
        return _test_dll.BuildingHeight_optional_present(self)

    def get(self, *args):
        return _test_dll.BuildingHeight_optional_get(self, *args)

    def getV(self):
        return _test_dll.BuildingHeight_optional_getV(self)

    def set(self, y):
        return _test_dll.BuildingHeight_optional_set(self, y)

    def reset(self):
        return _test_dll.BuildingHeight_optional_reset(self)
    __swig_destroy__ = _test_dll.delete_BuildingHeight_optional
    __del__ = lambda self: None
BuildingHeight_optional_swigregister = _test_dll.BuildingHeight_optional_swigregister
BuildingHeight_optional_swigregister(BuildingHeight_optional)

# This file is compatible with both classic and new-style classes.


