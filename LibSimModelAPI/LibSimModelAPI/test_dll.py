# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_test_dll', [dirname(__file__)])
        except ImportError:
            import _test_dll
            return _test_dll
        if fp is not None:
            try:
                _mod = imp.load_module('_test_dll', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _test_dll = swig_import_helper()
    del swig_import_helper
else:
    import _test_dll
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _test_dll.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _test_dll.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _test_dll.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _test_dll.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _test_dll.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _test_dll.SwigPyIterator_equal(self, x)

    def copy(self):
        return _test_dll.SwigPyIterator_copy(self)

    def next(self):
        return _test_dll.SwigPyIterator_next(self)

    def __next__(self):
        return _test_dll.SwigPyIterator___next__(self)

    def previous(self):
        return _test_dll.SwigPyIterator_previous(self)

    def advance(self, n):
        return _test_dll.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _test_dll.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _test_dll.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _test_dll.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _test_dll.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _test_dll.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _test_dll.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _test_dll.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SimRoot(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRoot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimRoot, name)
    __repr__ = _swig_repr

    def Description(self, *args):
        return _test_dll.SimRoot_Description(self, *args)

    def ObjectOwnerHistory(self, *args):
        return _test_dll.SimRoot_ObjectOwnerHistory(self, *args)

    def IfcGlobalID(self, *args):
        return _test_dll.SimRoot_IfcGlobalID(self, *args)

    def IfcName(self, *args):
        return _test_dll.SimRoot_IfcName(self, *args)

    def SimUniqueID(self, *args):
        return _test_dll.SimRoot_SimUniqueID(self, *args)

    def SimModelType(self, *args):
        return _test_dll.SimRoot_SimModelType(self, *args)

    def SimModelSubtype(self, *args):
        return _test_dll.SimRoot_SimModelSubtype(self, *args)

    def SimModelName(self, *args):
        return _test_dll.SimRoot_SimModelName(self, *args)

    def SourceModelSchema(self, *args):
        return _test_dll.SimRoot_SourceModelSchema(self, *args)

    def SourceModelObjectType(self, *args):
        return _test_dll.SimRoot_SourceModelObjectType(self, *args)

    def RefId(self, *args):
        return _test_dll.SimRoot_RefId(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimRoot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimRoot__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimRoot
    __del__ = lambda self: None
SimRoot_swigregister = _test_dll.SimRoot_swigregister
SimRoot_swigregister(SimRoot)
cvar = _test_dll.cvar
tree_node_key = cvar.tree_node_key

class SimObjectDefinition(SimRoot):
    __swig_setmethods__ = {}
    for _s in [SimRoot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObjectDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRoot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObjectDefinition, name)
    __repr__ = _swig_repr

    def Decomposes(self, *args):
        return _test_dll.SimObjectDefinition_Decomposes(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimObjectDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimObjectDefinition__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimObjectDefinition
    __del__ = lambda self: None
SimObjectDefinition_swigregister = _test_dll.SimObjectDefinition_swigregister
SimObjectDefinition_swigregister(SimObjectDefinition)

class SimObject(SimObjectDefinition):
    __swig_setmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObject, name)
    __repr__ = _swig_repr

    def TypeDefinition(self, *args):
        return _test_dll.SimObject_TypeDefinition(self, *args)

    def ObjectType(self, *args):
        return _test_dll.SimObject_ObjectType(self, *args)

    def ObjectCreationParams(self, *args):
        return _test_dll.SimObject_ObjectCreationParams(self, *args)

    def IsTemplateObject(self, *args):
        return _test_dll.SimObject_IsTemplateObject(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimObject__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimObject
    __del__ = lambda self: None
SimObject_swigregister = _test_dll.SimObject_swigregister
SimObject_swigregister(SimObject)

class SimSpatialStructureElement(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpatialStructureElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpatialStructureElement, name)
    __repr__ = _swig_repr

    def LongName(self, *args):
        return _test_dll.SimSpatialStructureElement_LongName(self, *args)

    def CompositionType(self, *args):
        return _test_dll.SimSpatialStructureElement_CompositionType(self, *args)

    def Placement(self, *args):
        return _test_dll.SimSpatialStructureElement_Placement(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimSpatialStructureElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimSpatialStructureElement__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimSpatialStructureElement
    __del__ = lambda self: None
SimSpatialStructureElement_swigregister = _test_dll.SimSpatialStructureElement_swigregister
SimSpatialStructureElement_swigregister(SimSpatialStructureElement)

class SimBuilding(SimSpatialStructureElement):
    __swig_setmethods__ = {}
    for _s in [SimSpatialStructureElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding, name, value)
    __swig_getmethods__ = {}
    for _s in [SimSpatialStructureElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding, name)
    __repr__ = _swig_repr

    def Name(self, *args):
        return _test_dll.SimBuilding_Name(self, *args)

    def BuildingDatumElevation(self, *args):
        return _test_dll.SimBuilding_BuildingDatumElevation(self, *args)

    def Representation(self, *args):
        return _test_dll.SimBuilding_Representation(self, *args)

    def BuildingConstructionsTemplate(self, *args):
        return _test_dll.SimBuilding_BuildingConstructionsTemplate(self, *args)

    def SpaceBoundsNotCurrent(self, *args):
        return _test_dll.SimBuilding_SpaceBoundsNotCurrent(self, *args)

    def DaylightControlsDefault(self, *args):
        return _test_dll.SimBuilding_DaylightControlsDefault(self, *args)

    def NatVentilationDefault(self, *args):
        return _test_dll.SimBuilding_NatVentilationDefault(self, *args)

    def BuildingInfiltrationType(self, *args):
        return _test_dll.SimBuilding_BuildingInfiltrationType(self, *args)

    def BuildingInfiltrationValue(self, *args):
        return _test_dll.SimBuilding_BuildingInfiltrationValue(self, *args)

    def TemplateOverrideValues(self, *args):
        return _test_dll.SimBuilding_TemplateOverrideValues(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding
    __del__ = lambda self: None
SimBuilding_swigregister = _test_dll.SimBuilding_swigregister
SimBuilding_swigregister(SimBuilding)

class SimBuilding_Building(SimBuilding):
    __swig_setmethods__ = {}
    for _s in [SimBuilding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building, name)
    __repr__ = _swig_repr

    def ElevationOfTerrain(self, *args):
        return _test_dll.SimBuilding_Building_ElevationOfTerrain(self, *args)

    def BuildingAddress(self, *args):
        return _test_dll.SimBuilding_Building_BuildingAddress(self, *args)

    def BuildingOccupancyType(self, *args):
        return _test_dll.SimBuilding_Building_BuildingOccupancyType(self, *args)

    def BuildingGrossPlannedArea(self, *args):
        return _test_dll.SimBuilding_Building_BuildingGrossPlannedArea(self, *args)

    def BuildingNumberofStoreys(self, *args):
        return _test_dll.SimBuilding_Building_BuildingNumberofStoreys(self, *args)

    def BuildingYearOfConstruction(self, *args):
        return _test_dll.SimBuilding_Building_BuildingYearOfConstruction(self, *args)

    def BuildingisLandmarked(self, *args):
        return _test_dll.SimBuilding_Building_BuildingisLandmarked(self, *args)

    def BuildingEnergyTargetUnits(self, *args):
        return _test_dll.SimBuilding_Building_BuildingEnergyTargetUnits(self, *args)

    def BuildingEnergyTargetValue(self, *args):
        return _test_dll.SimBuilding_Building_BuildingEnergyTargetValue(self, *args)

    def BuildingHeight(self, *args):
        return _test_dll.SimBuilding_Building_BuildingHeight(self, *args)

    def BuildingGrossFloorArea(self, *args):
        return _test_dll.SimBuilding_Building_BuildingGrossFloorArea(self, *args)

    def ClassRef_ConstEntByFunction(self, *args):
        return _test_dll.SimBuilding_Building_ClassRef_ConstEntByFunction(self, *args)

    def BuildingInSpatialContainer(self, *args):
        return _test_dll.SimBuilding_Building_BuildingInSpatialContainer(self, *args)

    def SimBuilding_NorthAxis(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_NorthAxis(self, *args)

    def SimBuilding_Terrain(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_Terrain(self, *args)

    def SimBuilding_LoadsConvergTolVal(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_LoadsConvergTolVal(self, *args)

    def SimBuilding_TempConvergTolVal(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_TempConvergTolVal(self, *args)

    def SimBuilding_SolarDist(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_SolarDist(self, *args)

    def SimBuilding_MaxNumWarmupDays(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_MaxNumWarmupDays(self, *args)

    def SimBuilding_MinNumberWarmupDays(self, *args):
        return _test_dll.SimBuilding_Building_SimBuilding_MinNumberWarmupDays(self, *args)

    def RoofIrrigation_IrrigationModelType(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationModelType(self, *args)

    def RoofIrrigation_IrrigationRateSchedName(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName(self, *args)

    def RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args):
        return _test_dll.SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding_Building__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building
    __del__ = lambda self: None
SimBuilding_Building_swigregister = _test_dll.SimBuilding_Building_swigregister
SimBuilding_Building_swigregister(SimBuilding_Building)

class SimBuilding_Building_Default(SimBuilding_Building):
    __swig_setmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _test_dll.new_SimBuilding_Building_Default(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimBuilding_Building_Default__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimBuilding_Building_Default
    __del__ = lambda self: None
SimBuilding_Building_Default_swigregister = _test_dll.SimBuilding_Building_Default_swigregister
SimBuilding_Building_Default_swigregister(SimBuilding_Building_Default)

class SimModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimModel, name)
    __repr__ = _swig_repr

    def SimBuilding_Building_Default(self, *args):
        return _test_dll.SimModel_SimBuilding_Building_Default(self, *args)

    def __init__(self, *args):
        this = _test_dll.new_SimModel(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _test_dll.SimModel__clone(self, f, c)
    __swig_destroy__ = _test_dll.delete_SimModel
    __del__ = lambda self: None
SimModel_swigregister = _test_dll.SimModel_swigregister
SimModel_swigregister(SimModel)


def SimModel_(*args):
    return _test_dll.SimModel_(*args)
SimModel_ = _test_dll.SimModel_
# This file is compatible with both classic and new-style classes.


