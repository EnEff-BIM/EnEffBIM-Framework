// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal
      // 

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::ActiveAreaRatio_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      ActiveAreaRatio () const
      {
        return this->ActiveAreaRatio_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::ActiveAreaRatio_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      ActiveAreaRatio ()
      {
        return this->ActiveAreaRatio_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      ActiveAreaRatio (const ActiveAreaRatio_type& x)
      {
        this->ActiveAreaRatio_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      ActiveAreaRatio (const ActiveAreaRatio_optional& x)
      {
        this->ActiveAreaRatio_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::DCtoACConversionEfficiency_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      DCtoACConversionEfficiency () const
      {
        return this->DCtoACConversionEfficiency_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::DCtoACConversionEfficiency_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      DCtoACConversionEfficiency ()
      {
        return this->DCtoACConversionEfficiency_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      DCtoACConversionEfficiency (const DCtoACConversionEfficiency_type& x)
      {
        this->DCtoACConversionEfficiency_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      DCtoACConversionEfficiency (const DCtoACConversionEfficiency_optional& x)
      {
        this->DCtoACConversionEfficiency_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::PhotovoltaicSurfaceIntegration_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicSurfaceIntegration () const
      {
        return this->PhotovoltaicSurfaceIntegration_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::PhotovoltaicSurfaceIntegration_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicSurfaceIntegration ()
      {
        return this->PhotovoltaicSurfaceIntegration_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicSurfaceIntegration (const PhotovoltaicSurfaceIntegration_type& x)
      {
        this->PhotovoltaicSurfaceIntegration_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicSurfaceIntegration (const PhotovoltaicSurfaceIntegration_optional& x)
      {
        this->PhotovoltaicSurfaceIntegration_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicSurfaceIntegration (::std::auto_ptr< PhotovoltaicSurfaceIntegration_type > x)
      {
        this->PhotovoltaicSurfaceIntegration_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::PhotovoltaicCellEfficiency_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicCellEfficiency () const
      {
        return this->PhotovoltaicCellEfficiency_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::PhotovoltaicCellEfficiency_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicCellEfficiency ()
      {
        return this->PhotovoltaicCellEfficiency_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicCellEfficiency (const PhotovoltaicCellEfficiency_type& x)
      {
        this->PhotovoltaicCellEfficiency_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      PhotovoltaicCellEfficiency (const PhotovoltaicCellEfficiency_optional& x)
      {
        this->PhotovoltaicCellEfficiency_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_Name_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_Name_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_SurfName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SurfName () const
      {
        return this->SimFlowPlant_SurfName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_SurfName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SurfName ()
      {
        return this->SimFlowPlant_SurfName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SurfName (const SimFlowPlant_SurfName_type& x)
      {
        this->SimFlowPlant_SurfName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SurfName (const SimFlowPlant_SurfName_optional& x)
      {
        this->SimFlowPlant_SurfName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SurfName (::std::auto_ptr< SimFlowPlant_SurfName_type > x)
      {
        this->SimFlowPlant_SurfName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_PhotovoltaicThermalModelPerfName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicThermalModelPerfName () const
      {
        return this->SimFlowPlant_PhotovoltaicThermalModelPerfName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_PhotovoltaicThermalModelPerfName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicThermalModelPerfName ()
      {
        return this->SimFlowPlant_PhotovoltaicThermalModelPerfName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicThermalModelPerfName (const SimFlowPlant_PhotovoltaicThermalModelPerfName_type& x)
      {
        this->SimFlowPlant_PhotovoltaicThermalModelPerfName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicThermalModelPerfName (const SimFlowPlant_PhotovoltaicThermalModelPerfName_optional& x)
      {
        this->SimFlowPlant_PhotovoltaicThermalModelPerfName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicThermalModelPerfName (::std::auto_ptr< SimFlowPlant_PhotovoltaicThermalModelPerfName_type > x)
      {
        this->SimFlowPlant_PhotovoltaicThermalModelPerfName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_PhotovoltaicName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicName () const
      {
        return this->SimFlowPlant_PhotovoltaicName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_PhotovoltaicName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicName ()
      {
        return this->SimFlowPlant_PhotovoltaicName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicName (const SimFlowPlant_PhotovoltaicName_type& x)
      {
        this->SimFlowPlant_PhotovoltaicName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicName (const SimFlowPlant_PhotovoltaicName_optional& x)
      {
        this->SimFlowPlant_PhotovoltaicName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_PhotovoltaicName (::std::auto_ptr< SimFlowPlant_PhotovoltaicName_type > x)
      {
        this->SimFlowPlant_PhotovoltaicName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_ThermalWorkingFluidType_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_ThermalWorkingFluidType () const
      {
        return this->SimFlowPlant_ThermalWorkingFluidType_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_ThermalWorkingFluidType_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_ThermalWorkingFluidType ()
      {
        return this->SimFlowPlant_ThermalWorkingFluidType_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_ThermalWorkingFluidType (const SimFlowPlant_ThermalWorkingFluidType_type& x)
      {
        this->SimFlowPlant_ThermalWorkingFluidType_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_ThermalWorkingFluidType (const SimFlowPlant_ThermalWorkingFluidType_optional& x)
      {
        this->SimFlowPlant_ThermalWorkingFluidType_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_ThermalWorkingFluidType (::std::auto_ptr< SimFlowPlant_ThermalWorkingFluidType_type > x)
      {
        this->SimFlowPlant_ThermalWorkingFluidType_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_WaterInletNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterInletNodeName () const
      {
        return this->SimFlowPlant_WaterInletNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_WaterInletNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterInletNodeName ()
      {
        return this->SimFlowPlant_WaterInletNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_type& x)
      {
        this->SimFlowPlant_WaterInletNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_WaterInletNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterInletNodeName (::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > x)
      {
        this->SimFlowPlant_WaterInletNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_WaterOutletNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterOutletNodeName () const
      {
        return this->SimFlowPlant_WaterOutletNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_WaterOutletNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterOutletNodeName ()
      {
        return this->SimFlowPlant_WaterOutletNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_WaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_WaterOutletNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_WaterOutletNodeName (::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_WaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirInNodeName () const
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_AirInNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirInNodeName ()
      {
        return this->SimFlowPlant_AirInNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_type& x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_optional& x)
      {
        this->SimFlowPlant_AirInNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirInNodeName (::std::auto_ptr< SimFlowPlant_AirInNodeName_type > x)
      {
        this->SimFlowPlant_AirInNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_AirOutNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirOutNodeName () const
      {
        return this->SimFlowPlant_AirOutNodeName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_AirOutNodeName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirOutNodeName ()
      {
        return this->SimFlowPlant_AirOutNodeName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_type& x)
      {
        this->SimFlowPlant_AirOutNodeName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_optional& x)
      {
        this->SimFlowPlant_AirOutNodeName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_AirOutNodeName (::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > x)
      {
        this->SimFlowPlant_AirOutNodeName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_DesignFlowRate_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_DesignFlowRate () const
      {
        return this->SimFlowPlant_DesignFlowRate_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SimFlowPlant_DesignFlowRate_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_DesignFlowRate ()
      {
        return this->SimFlowPlant_DesignFlowRate_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_DesignFlowRate (const SimFlowPlant_DesignFlowRate_type& x)
      {
        this->SimFlowPlant_DesignFlowRate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_DesignFlowRate (const SimFlowPlant_DesignFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignFlowRate_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_Name_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_Name () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_Name_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_Name_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_Name ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_Name_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_Name (const SolarCollectPerf_PVTherm_Smpl_Name_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_Name_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_Name (const SolarCollectPerf_PVTherm_Smpl_Name_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_Name_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_Name (::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_Name_type > x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_Name_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect (const SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect (const SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType (::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type > x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed (const SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed (const SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (const SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName (::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type > x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance () const
      {
        return this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance ()
      {
        return this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_;
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance (const SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_type& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance (const SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_optional& x)
      {
        this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal
      //

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal ()
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (),
        ActiveAreaRatio_ (this),
        DCtoACConversionEfficiency_ (this),
        PhotovoltaicSurfaceIntegration_ (this),
        PhotovoltaicCellEfficiency_ (this),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_PhotovoltaicThermalModelPerfName_ (this),
        SimFlowPlant_PhotovoltaicName_ (this),
        SimFlowPlant_ThermalWorkingFluidType_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_DesignFlowRate_ (this),
        SolarCollectPerf_PVTherm_Smpl_Name_ (this),
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ (this),
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ (this),
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (RefId),
        ActiveAreaRatio_ (this),
        DCtoACConversionEfficiency_ (this),
        PhotovoltaicSurfaceIntegration_ (this),
        PhotovoltaicCellEfficiency_ (this),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_PhotovoltaicThermalModelPerfName_ (this),
        SimFlowPlant_PhotovoltaicName_ (this),
        SimFlowPlant_ThermalWorkingFluidType_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_DesignFlowRate_ (this),
        SolarCollectPerf_PVTherm_Smpl_Name_ (this),
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ (this),
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ (this),
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal& x,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (x, f, c),
        ActiveAreaRatio_ (x.ActiveAreaRatio_, f, this),
        DCtoACConversionEfficiency_ (x.DCtoACConversionEfficiency_, f, this),
        PhotovoltaicSurfaceIntegration_ (x.PhotovoltaicSurfaceIntegration_, f, this),
        PhotovoltaicCellEfficiency_ (x.PhotovoltaicCellEfficiency_, f, this),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_SurfName_ (x.SimFlowPlant_SurfName_, f, this),
        SimFlowPlant_PhotovoltaicThermalModelPerfName_ (x.SimFlowPlant_PhotovoltaicThermalModelPerfName_, f, this),
        SimFlowPlant_PhotovoltaicName_ (x.SimFlowPlant_PhotovoltaicName_, f, this),
        SimFlowPlant_ThermalWorkingFluidType_ (x.SimFlowPlant_ThermalWorkingFluidType_, f, this),
        SimFlowPlant_WaterInletNodeName_ (x.SimFlowPlant_WaterInletNodeName_, f, this),
        SimFlowPlant_WaterOutletNodeName_ (x.SimFlowPlant_WaterOutletNodeName_, f, this),
        SimFlowPlant_AirInNodeName_ (x.SimFlowPlant_AirInNodeName_, f, this),
        SimFlowPlant_AirOutNodeName_ (x.SimFlowPlant_AirOutNodeName_, f, this),
        SimFlowPlant_DesignFlowRate_ (x.SimFlowPlant_DesignFlowRate_, f, this),
        SolarCollectPerf_PVTherm_Smpl_Name_ (x.SolarCollectPerf_PVTherm_Smpl_Name_, f, this),
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ (x.SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_, f, this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ (x.SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_, f, this),
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ (x.SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_, f, this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ (x.SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_, f, this),
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ (x.SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_, f, this)
      {
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (const ::xercesc::DOMElement& e,
                                                         ::xml_schema::flags f,
                                                         ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_SolarDevice (e, f | ::xml_schema::flags::base, c),
        ActiveAreaRatio_ (this),
        DCtoACConversionEfficiency_ (this),
        PhotovoltaicSurfaceIntegration_ (this),
        PhotovoltaicCellEfficiency_ (this),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SurfName_ (this),
        SimFlowPlant_PhotovoltaicThermalModelPerfName_ (this),
        SimFlowPlant_PhotovoltaicName_ (this),
        SimFlowPlant_ThermalWorkingFluidType_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_AirInNodeName_ (this),
        SimFlowPlant_AirOutNodeName_ (this),
        SimFlowPlant_DesignFlowRate_ (this),
        SolarCollectPerf_PVTherm_Smpl_Name_ (this),
        SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ (this),
        SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ (this),
        SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ (this),
        SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_SolarDevice::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // ActiveAreaRatio
          //
          if (n.name () == "ActiveAreaRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->ActiveAreaRatio_)
            {
              this->ActiveAreaRatio_.set (ActiveAreaRatio_traits::create (i, f, this));
              continue;
            }
          }

          // DCtoACConversionEfficiency
          //
          if (n.name () == "DCtoACConversionEfficiency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->DCtoACConversionEfficiency_)
            {
              this->DCtoACConversionEfficiency_.set (DCtoACConversionEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // PhotovoltaicSurfaceIntegration
          //
          if (n.name () == "PhotovoltaicSurfaceIntegration" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< PhotovoltaicSurfaceIntegration_type > r (
              PhotovoltaicSurfaceIntegration_traits::create (i, f, this));

            if (!this->PhotovoltaicSurfaceIntegration_)
            {
              this->PhotovoltaicSurfaceIntegration_.set (r);
              continue;
            }
          }

          // PhotovoltaicCellEfficiency
          //
          if (n.name () == "PhotovoltaicCellEfficiency" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->PhotovoltaicCellEfficiency_)
            {
              this->PhotovoltaicCellEfficiency_.set (PhotovoltaicCellEfficiency_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SurfName
          //
          if (n.name () == "SimFlowPlant_SurfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SurfName_type > r (
              SimFlowPlant_SurfName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SurfName_)
            {
              this->SimFlowPlant_SurfName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_PhotovoltaicThermalModelPerfName
          //
          if (n.name () == "SimFlowPlant_PhotovoltaicThermalModelPerfName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PhotovoltaicThermalModelPerfName_type > r (
              SimFlowPlant_PhotovoltaicThermalModelPerfName_traits::create (i, f, this));

            if (!this->SimFlowPlant_PhotovoltaicThermalModelPerfName_)
            {
              this->SimFlowPlant_PhotovoltaicThermalModelPerfName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_PhotovoltaicName
          //
          if (n.name () == "SimFlowPlant_PhotovoltaicName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PhotovoltaicName_type > r (
              SimFlowPlant_PhotovoltaicName_traits::create (i, f, this));

            if (!this->SimFlowPlant_PhotovoltaicName_)
            {
              this->SimFlowPlant_PhotovoltaicName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ThermalWorkingFluidType
          //
          if (n.name () == "SimFlowPlant_ThermalWorkingFluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ThermalWorkingFluidType_type > r (
              SimFlowPlant_ThermalWorkingFluidType_traits::create (i, f, this));

            if (!this->SimFlowPlant_ThermalWorkingFluidType_)
            {
              this->SimFlowPlant_ThermalWorkingFluidType_.set (r);
              continue;
            }
          }

          // SimFlowPlant_WaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > r (
              SimFlowPlant_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_WaterInletNodeName_)
            {
              this->SimFlowPlant_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_WaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > r (
              SimFlowPlant_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_WaterOutletNodeName_)
            {
              this->SimFlowPlant_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirInNodeName
          //
          if (n.name () == "SimFlowPlant_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirInNodeName_type > r (
              SimFlowPlant_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirInNodeName_)
            {
              this->SimFlowPlant_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_AirOutNodeName
          //
          if (n.name () == "SimFlowPlant_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > r (
              SimFlowPlant_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_AirOutNodeName_)
            {
              this->SimFlowPlant_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignFlowRate_)
            {
              this->SimFlowPlant_DesignFlowRate_.set (SimFlowPlant_DesignFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_Name
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_Name_type > r (
              SolarCollectPerf_PVTherm_Smpl_Name_traits::create (i, f, this));

            if (!this->SolarCollectPerf_PVTherm_Smpl_Name_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_Name_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_.set (SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_type > r (
              SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_traits::create (i, f, this));

            if (!this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_.set (SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_type > r (
              SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_traits::create (i, f, this));

            if (!this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_.set (r);
              continue;
            }
          }

          // SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance
          //
          if (n.name () == "SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_)
            {
              this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_.set (SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal* SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal (*this, f, c);
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal& SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      operator= (const SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_SolarDevice& > (*this) = x;
          this->ActiveAreaRatio_ = x.ActiveAreaRatio_;
          this->DCtoACConversionEfficiency_ = x.DCtoACConversionEfficiency_;
          this->PhotovoltaicSurfaceIntegration_ = x.PhotovoltaicSurfaceIntegration_;
          this->PhotovoltaicCellEfficiency_ = x.PhotovoltaicCellEfficiency_;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_SurfName_ = x.SimFlowPlant_SurfName_;
          this->SimFlowPlant_PhotovoltaicThermalModelPerfName_ = x.SimFlowPlant_PhotovoltaicThermalModelPerfName_;
          this->SimFlowPlant_PhotovoltaicName_ = x.SimFlowPlant_PhotovoltaicName_;
          this->SimFlowPlant_ThermalWorkingFluidType_ = x.SimFlowPlant_ThermalWorkingFluidType_;
          this->SimFlowPlant_WaterInletNodeName_ = x.SimFlowPlant_WaterInletNodeName_;
          this->SimFlowPlant_WaterOutletNodeName_ = x.SimFlowPlant_WaterOutletNodeName_;
          this->SimFlowPlant_AirInNodeName_ = x.SimFlowPlant_AirInNodeName_;
          this->SimFlowPlant_AirOutNodeName_ = x.SimFlowPlant_AirOutNodeName_;
          this->SimFlowPlant_DesignFlowRate_ = x.SimFlowPlant_DesignFlowRate_;
          this->SolarCollectPerf_PVTherm_Smpl_Name_ = x.SolarCollectPerf_PVTherm_Smpl_Name_;
          this->SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_ = x.SolarCollectPerf_PVTherm_Smpl_FractSurfAreaWithActiveThermalCollect_;
          this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_ = x.SolarCollectPerf_PVTherm_Smpl_ThermalConvEffInputModeType_;
          this->SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_ = x.SolarCollectPerf_PVTherm_Smpl_ValForThermalConvEffIfFixed_;
          this->SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_ = x.SolarCollectPerf_PVTherm_Smpl_ThermalConvEffSchedName_;
          this->SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_ = x.SolarCollectPerf_PVTherm_Smpl_FrontSurfEmittance_;
        }

        return *this;
      }

      SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal::
      ~SimFlowPlant_SolarDevice_SolarPhotoVoltaicThermal ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

