// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW
      // 

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp () const
      {
        return this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp ()
      {
        return this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& x)
      {
        this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedAirFlowRate (const SimFlowEnergyTrans_HighFanSpeedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedAirFlowRate (const SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedFanPower_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedFanPower () const
      {
        return this->SimFlowEnergyTrans_HighFanSpeedFanPower_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedFanPower_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedFanPower ()
      {
        return this->SimFlowEnergyTrans_HighFanSpeedFanPower_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedFanPower (const SimFlowEnergyTrans_HighFanSpeedFanPower_type& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedFanPower_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedFanPower (const SimFlowEnergyTrans_HighFanSpeedFanPower_optional& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedFanPower_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRate (const SimFlowEnergyTrans_LowFanSpeedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRate (const SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor (const SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor (const SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedFanPower_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPower () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedFanPower_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedFanPower_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPower ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedFanPower_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPower (const SimFlowEnergyTrans_LowFanSpeedFanPower_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedFanPower_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPower (const SimFlowEnergyTrans_LowFanSpeedFanPower_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedFanPower_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor (const SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor (const SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue () const
      {
        return this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue ()
      {
        return this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_type& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional& x)
      {
        this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor () const
      {
        return this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor ()
      {
        return this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor (const SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_type& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor (const SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional& x)
      {
        this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap () const
      {
        return this->SimFlowEnergyTrans_HighSpeedNomCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_HighSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap ()
      {
        return this->SimFlowEnergyTrans_HighSpeedNomCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap (const SimFlowEnergyTrans_HighSpeedNomCap_type& x)
      {
        this->SimFlowEnergyTrans_HighSpeedNomCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_HighSpeedNomCap (const SimFlowEnergyTrans_HighSpeedNomCap_optional& x)
      {
        this->SimFlowEnergyTrans_HighSpeedNomCap_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap () const
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCap_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCap_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap ()
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCap_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap (const SimFlowEnergyTrans_LowSpeedNomCap_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCap_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCap (const SimFlowEnergyTrans_LowSpeedNomCap_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCap_ = x;
      }

      const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCapSizingFactor () const
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_optional& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCapSizingFactor ()
      {
        return this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_;
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCapSizingFactor (const SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_type& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_.set (x);
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTrans_LowSpeedNomCapSizingFactor (const SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_optional& x)
      {
        this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW
      //

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_HighFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ (this),
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ (this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (RefId),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_HighFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ (this),
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ (this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ (this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& x,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (x, f, c),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (x.SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_, f, this),
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ (x.SimFlowEnergyTrans_HighFanSpeedAirFlowRate_, f, this),
        SimFlowEnergyTrans_HighFanSpeedFanPower_ (x.SimFlowEnergyTrans_HighFanSpeedFanPower_, f, this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ (x.SimFlowEnergyTrans_LowFanSpeedAirFlowRate_, f, this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ (x.SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_, f, this),
        SimFlowEnergyTrans_LowFanSpeedFanPower_ (x.SimFlowEnergyTrans_LowFanSpeedFanPower_, f, this),
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ (x.SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_, f, this),
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ (x.SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_, f, this),
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ (x.SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_, f, this),
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ (x.SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_, f, this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (x.SimFlowEnergyTrans_HighSpeedNomCap_, f, this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (x.SimFlowEnergyTrans_LowSpeedNomCap_, f, this),
        SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ (x.SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_, f, this)
      {
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (const ::xercesc::DOMElement& e,
                                                     ::xml_schema::flags f,
                                                     ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ (this),
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_HighFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ (this),
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPower_ (this),
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ (this),
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ (this),
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ (this),
        SimFlowEnergyTrans_HighSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCap_ (this),
        SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_DesignEnterAirWetbulbTemp
          //
          if (n.name () == "SimFlowEnergyTrans_DesignEnterAirWetbulbTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_)
            {
              this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_.set (SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighFanSpeedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_HighFanSpeedAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_.set (SimFlowEnergyTrans_HighFanSpeedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighFanSpeedFanPower
          //
          if (n.name () == "SimFlowEnergyTrans_HighFanSpeedFanPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighFanSpeedFanPower_)
            {
              this->SimFlowEnergyTrans_HighFanSpeedFanPower_.set (SimFlowEnergyTrans_HighFanSpeedFanPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_.set (SimFlowEnergyTrans_LowFanSpeedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_.set (SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedFanPower
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedFanPower" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedFanPower_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedFanPower_.set (SimFlowEnergyTrans_LowFanSpeedFanPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_.set (SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue
          //
          if (n.name () == "SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_)
            {
              this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_.set (SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_.set (SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor
          //
          if (n.name () == "SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_)
            {
              this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_.set (SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HighSpeedNomCap
          //
          if (n.name () == "SimFlowEnergyTrans_HighSpeedNomCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_HighSpeedNomCap_)
            {
              this->SimFlowEnergyTrans_HighSpeedNomCap_.set (SimFlowEnergyTrans_HighSpeedNomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedNomCap
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedNomCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedNomCap_)
            {
              this->SimFlowEnergyTrans_LowSpeedNomCap_.set (SimFlowEnergyTrans_LowSpeedNomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LowSpeedNomCapSizingFactor
          //
          if (n.name () == "SimFlowEnergyTrans_LowSpeedNomCapSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_)
            {
              this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_.set (SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW* SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW (*this, f, c);
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      operator= (const SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler& > (*this) = x;
          this->SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_ = x.SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
          this->SimFlowEnergyTrans_HighFanSpeedAirFlowRate_ = x.SimFlowEnergyTrans_HighFanSpeedAirFlowRate_;
          this->SimFlowEnergyTrans_HighFanSpeedFanPower_ = x.SimFlowEnergyTrans_HighFanSpeedFanPower_;
          this->SimFlowEnergyTrans_LowFanSpeedAirFlowRate_ = x.SimFlowEnergyTrans_LowFanSpeedAirFlowRate_;
          this->SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_ = x.SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_;
          this->SimFlowEnergyTrans_LowFanSpeedFanPower_ = x.SimFlowEnergyTrans_LowFanSpeedFanPower_;
          this->SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_ = x.SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_;
          this->SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_ = x.SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_;
          this->SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_ = x.SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_;
          this->SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_ = x.SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_;
          this->SimFlowEnergyTrans_HighSpeedNomCap_ = x.SimFlowEnergyTrans_HighSpeedNomCap_;
          this->SimFlowEnergyTrans_LowSpeedNomCap_ = x.SimFlowEnergyTrans_LowSpeedNomCap_;
          this->SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_ = x.SimFlowEnergyTrans_LowSpeedNomCapSizingFactor_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW::
      ~SimFlowEnergyTransfer_FluidCooler_TwoSpeed_CW ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

