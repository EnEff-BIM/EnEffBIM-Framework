// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBuildingElementProxy_SiteContextElement_SiteShading.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuildingElementProxy_SiteContextElement_SiteShading
      // 

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SiteContextObjectType_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SiteContextObjectType () const
      {
        return this->SiteContextObjectType_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SiteContextObjectType_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SiteContextObjectType ()
      {
        return this->SiteContextObjectType_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SiteContextObjectType (const SiteContextObjectType_type& x)
      {
        this->SiteContextObjectType_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SiteContextObjectType (const SiteContextObjectType_optional& x)
      {
        this->SiteContextObjectType_ = x;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SiteContextObjectType (::std::auto_ptr< SiteContextObjectType_type > x)
      {
        this->SiteContextObjectType_.set (x);
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Name_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Name () const
      {
        return this->SimBuildingElementProxy_Name_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Name_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Name ()
      {
        return this->SimBuildingElementProxy_Name_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Name (const SimBuildingElementProxy_Name_type& x)
      {
        this->SimBuildingElementProxy_Name_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Name (const SimBuildingElementProxy_Name_optional& x)
      {
        this->SimBuildingElementProxy_Name_ = x;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Name (::std::auto_ptr< SimBuildingElementProxy_Name_type > x)
      {
        this->SimBuildingElementProxy_Name_.set (x);
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_AzimuthAng_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_AzimuthAng () const
      {
        return this->SimBuildingElementProxy_AzimuthAng_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_AzimuthAng_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_AzimuthAng ()
      {
        return this->SimBuildingElementProxy_AzimuthAng_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_AzimuthAng (const SimBuildingElementProxy_AzimuthAng_type& x)
      {
        this->SimBuildingElementProxy_AzimuthAng_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_AzimuthAng (const SimBuildingElementProxy_AzimuthAng_optional& x)
      {
        this->SimBuildingElementProxy_AzimuthAng_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_TiltAng_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_TiltAng () const
      {
        return this->SimBuildingElementProxy_TiltAng_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_TiltAng_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_TiltAng ()
      {
        return this->SimBuildingElementProxy_TiltAng_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_TiltAng (const SimBuildingElementProxy_TiltAng_type& x)
      {
        this->SimBuildingElementProxy_TiltAng_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_TiltAng (const SimBuildingElementProxy_TiltAng_optional& x)
      {
        this->SimBuildingElementProxy_TiltAng_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartXCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartXCoord () const
      {
        return this->SimBuildingElementProxy_StartXCoord_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartXCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartXCoord ()
      {
        return this->SimBuildingElementProxy_StartXCoord_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartXCoord (const SimBuildingElementProxy_StartXCoord_type& x)
      {
        this->SimBuildingElementProxy_StartXCoord_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartXCoord (const SimBuildingElementProxy_StartXCoord_optional& x)
      {
        this->SimBuildingElementProxy_StartXCoord_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartYCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartYCoord () const
      {
        return this->SimBuildingElementProxy_StartYCoord_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartYCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartYCoord ()
      {
        return this->SimBuildingElementProxy_StartYCoord_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartYCoord (const SimBuildingElementProxy_StartYCoord_type& x)
      {
        this->SimBuildingElementProxy_StartYCoord_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartYCoord (const SimBuildingElementProxy_StartYCoord_optional& x)
      {
        this->SimBuildingElementProxy_StartYCoord_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartZCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartZCoord () const
      {
        return this->SimBuildingElementProxy_StartZCoord_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_StartZCoord_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartZCoord ()
      {
        return this->SimBuildingElementProxy_StartZCoord_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartZCoord (const SimBuildingElementProxy_StartZCoord_type& x)
      {
        this->SimBuildingElementProxy_StartZCoord_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_StartZCoord (const SimBuildingElementProxy_StartZCoord_optional& x)
      {
        this->SimBuildingElementProxy_StartZCoord_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Length_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Length () const
      {
        return this->SimBuildingElementProxy_Length_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Length_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Length ()
      {
        return this->SimBuildingElementProxy_Length_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Length (const SimBuildingElementProxy_Length_type& x)
      {
        this->SimBuildingElementProxy_Length_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Length (const SimBuildingElementProxy_Length_optional& x)
      {
        this->SimBuildingElementProxy_Length_ = x;
      }

      const SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Ht_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Ht () const
      {
        return this->SimBuildingElementProxy_Ht_;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::SimBuildingElementProxy_Ht_optional& SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Ht ()
      {
        return this->SimBuildingElementProxy_Ht_;
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Ht (const SimBuildingElementProxy_Ht_type& x)
      {
        this->SimBuildingElementProxy_Ht_.set (x);
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_Ht (const SimBuildingElementProxy_Ht_optional& x)
      {
        this->SimBuildingElementProxy_Ht_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimBuildingElementProxy_SiteContextElement_SiteShading
      //

      SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_SiteContextElement_SiteShading ()
      : ::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement (),
        SiteContextObjectType_ (this),
        SimBuildingElementProxy_Name_ (this),
        SimBuildingElementProxy_AzimuthAng_ (this),
        SimBuildingElementProxy_TiltAng_ (this),
        SimBuildingElementProxy_StartXCoord_ (this),
        SimBuildingElementProxy_StartYCoord_ (this),
        SimBuildingElementProxy_StartZCoord_ (this),
        SimBuildingElementProxy_Length_ (this),
        SimBuildingElementProxy_Ht_ (this)
      {
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_SiteContextElement_SiteShading (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement (RefId),
        SiteContextObjectType_ (this),
        SimBuildingElementProxy_Name_ (this),
        SimBuildingElementProxy_AzimuthAng_ (this),
        SimBuildingElementProxy_TiltAng_ (this),
        SimBuildingElementProxy_StartXCoord_ (this),
        SimBuildingElementProxy_StartYCoord_ (this),
        SimBuildingElementProxy_StartZCoord_ (this),
        SimBuildingElementProxy_Length_ (this),
        SimBuildingElementProxy_Ht_ (this)
      {
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_SiteContextElement_SiteShading (const SimBuildingElementProxy_SiteContextElement_SiteShading& x,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement (x, f, c),
        SiteContextObjectType_ (x.SiteContextObjectType_, f, this),
        SimBuildingElementProxy_Name_ (x.SimBuildingElementProxy_Name_, f, this),
        SimBuildingElementProxy_AzimuthAng_ (x.SimBuildingElementProxy_AzimuthAng_, f, this),
        SimBuildingElementProxy_TiltAng_ (x.SimBuildingElementProxy_TiltAng_, f, this),
        SimBuildingElementProxy_StartXCoord_ (x.SimBuildingElementProxy_StartXCoord_, f, this),
        SimBuildingElementProxy_StartYCoord_ (x.SimBuildingElementProxy_StartYCoord_, f, this),
        SimBuildingElementProxy_StartZCoord_ (x.SimBuildingElementProxy_StartZCoord_, f, this),
        SimBuildingElementProxy_Length_ (x.SimBuildingElementProxy_Length_, f, this),
        SimBuildingElementProxy_Ht_ (x.SimBuildingElementProxy_Ht_, f, this)
      {
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::
      SimBuildingElementProxy_SiteContextElement_SiteShading (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement (e, f | ::xml_schema::flags::base, c),
        SiteContextObjectType_ (this),
        SimBuildingElementProxy_Name_ (this),
        SimBuildingElementProxy_AzimuthAng_ (this),
        SimBuildingElementProxy_TiltAng_ (this),
        SimBuildingElementProxy_StartXCoord_ (this),
        SimBuildingElementProxy_StartYCoord_ (this),
        SimBuildingElementProxy_StartZCoord_ (this),
        SimBuildingElementProxy_Length_ (this),
        SimBuildingElementProxy_Ht_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBuildingElementProxy_SiteContextElement_SiteShading::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SiteContextObjectType
          //
          if (n.name () == "SiteContextObjectType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SiteContextObjectType_type > r (
              SiteContextObjectType_traits::create (i, f, this));

            if (!this->SiteContextObjectType_)
            {
              this->SiteContextObjectType_.set (r);
              continue;
            }
          }

          // SimBuildingElementProxy_Name
          //
          if (n.name () == "SimBuildingElementProxy_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimBuildingElementProxy_Name_type > r (
              SimBuildingElementProxy_Name_traits::create (i, f, this));

            if (!this->SimBuildingElementProxy_Name_)
            {
              this->SimBuildingElementProxy_Name_.set (r);
              continue;
            }
          }

          // SimBuildingElementProxy_AzimuthAng
          //
          if (n.name () == "SimBuildingElementProxy_AzimuthAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_AzimuthAng_)
            {
              this->SimBuildingElementProxy_AzimuthAng_.set (SimBuildingElementProxy_AzimuthAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_TiltAng
          //
          if (n.name () == "SimBuildingElementProxy_TiltAng" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_TiltAng_)
            {
              this->SimBuildingElementProxy_TiltAng_.set (SimBuildingElementProxy_TiltAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_StartXCoord
          //
          if (n.name () == "SimBuildingElementProxy_StartXCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_StartXCoord_)
            {
              this->SimBuildingElementProxy_StartXCoord_.set (SimBuildingElementProxy_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_StartYCoord
          //
          if (n.name () == "SimBuildingElementProxy_StartYCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_StartYCoord_)
            {
              this->SimBuildingElementProxy_StartYCoord_.set (SimBuildingElementProxy_StartYCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_StartZCoord
          //
          if (n.name () == "SimBuildingElementProxy_StartZCoord" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_StartZCoord_)
            {
              this->SimBuildingElementProxy_StartZCoord_.set (SimBuildingElementProxy_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_Length
          //
          if (n.name () == "SimBuildingElementProxy_Length" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_Length_)
            {
              this->SimBuildingElementProxy_Length_.set (SimBuildingElementProxy_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimBuildingElementProxy_Ht
          //
          if (n.name () == "SimBuildingElementProxy_Ht" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimBuildingElementProxy_Ht_)
            {
              this->SimBuildingElementProxy_Ht_.set (SimBuildingElementProxy_Ht_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading* SimBuildingElementProxy_SiteContextElement_SiteShading::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBuildingElementProxy_SiteContextElement_SiteShading (*this, f, c);
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading& SimBuildingElementProxy_SiteContextElement_SiteShading::
      operator= (const SimBuildingElementProxy_SiteContextElement_SiteShading& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimBuildingElementProxy_SiteContextElement& > (*this) = x;
          this->SiteContextObjectType_ = x.SiteContextObjectType_;
          this->SimBuildingElementProxy_Name_ = x.SimBuildingElementProxy_Name_;
          this->SimBuildingElementProxy_AzimuthAng_ = x.SimBuildingElementProxy_AzimuthAng_;
          this->SimBuildingElementProxy_TiltAng_ = x.SimBuildingElementProxy_TiltAng_;
          this->SimBuildingElementProxy_StartXCoord_ = x.SimBuildingElementProxy_StartXCoord_;
          this->SimBuildingElementProxy_StartYCoord_ = x.SimBuildingElementProxy_StartYCoord_;
          this->SimBuildingElementProxy_StartZCoord_ = x.SimBuildingElementProxy_StartZCoord_;
          this->SimBuildingElementProxy_Length_ = x.SimBuildingElementProxy_Length_;
          this->SimBuildingElementProxy_Ht_ = x.SimBuildingElementProxy_Ht_;
        }

        return *this;
      }

      SimBuildingElementProxy_SiteContextElement_SiteShading::
      ~SimBuildingElementProxy_SiteContextElement_SiteShading ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

