// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_CEILING_SLAB_VENTILATED_HXX
#define SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_CEILING_SLAB_VENTILATED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_radiantdevice.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_RadiantDevice
      {
        public:
        // SimFlowEnergyTrans_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Name_type > SimFlowEnergyTrans_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Name_type, char > SimFlowEnergyTrans_Name_traits;

        const SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name () const;

        SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name ();

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x);

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x);

        void
        SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > p);

        // SimFlowEnergyTrans_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailSchedName_type > SimFlowEnergyTrans_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailSchedName_type, char > SimFlowEnergyTrans_AvailSchedName_traits;

        const SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName () const;

        SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName ();

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x);

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x);

        void
        SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > p);

        // SimFlowEnergyTrans_ZoneName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ZoneName_type > SimFlowEnergyTrans_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ZoneName_type, char > SimFlowEnergyTrans_ZoneName_traits;

        const SimFlowEnergyTrans_ZoneName_optional&
        SimFlowEnergyTrans_ZoneName () const;

        SimFlowEnergyTrans_ZoneName_optional&
        SimFlowEnergyTrans_ZoneName ();

        void
        SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_type& x);

        void
        SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_optional& x);

        void
        SimFlowEnergyTrans_ZoneName (::std::auto_ptr< SimFlowEnergyTrans_ZoneName_type > p);

        // SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type > SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type, char > SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_traits;

        const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional&
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName () const;

        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional&
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName ();

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type& x);

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional& x);

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (::std::auto_ptr< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type > p);

        // SimFlowEnergyTrans_TempCntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_TempCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_TempCntlType_type > SimFlowEnergyTrans_TempCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_TempCntlType_type, char > SimFlowEnergyTrans_TempCntlType_traits;

        const SimFlowEnergyTrans_TempCntlType_optional&
        SimFlowEnergyTrans_TempCntlType () const;

        SimFlowEnergyTrans_TempCntlType_optional&
        SimFlowEnergyTrans_TempCntlType ();

        void
        SimFlowEnergyTrans_TempCntlType (const SimFlowEnergyTrans_TempCntlType_type& x);

        void
        SimFlowEnergyTrans_TempCntlType (const SimFlowEnergyTrans_TempCntlType_optional& x);

        void
        SimFlowEnergyTrans_TempCntlType (::std::auto_ptr< SimFlowEnergyTrans_TempCntlType_type > p);

        // SimFlowEnergyTrans_HeatingHighCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type > SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type, char > SimFlowEnergyTrans_HeatingHighCntlTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName () const;

        SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_HeatingLowCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type > SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type, char > SimFlowEnergyTrans_HeatingLowCntlTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName () const;

        SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingHighCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type > SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type, char > SimFlowEnergyTrans_CoolingHighCntlTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName () const;

        SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingLowCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type > SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type, char > SimFlowEnergyTrans_CoolingLowCntlTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName () const;

        SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_MaxAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MaxAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxAirFlowRate_type > SimFlowEnergyTrans_MaxAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MaxAirFlowRate_traits;

        const SimFlowEnergyTrans_MaxAirFlowRate_optional&
        SimFlowEnergyTrans_MaxAirFlowRate () const;

        SimFlowEnergyTrans_MaxAirFlowRate_optional&
        SimFlowEnergyTrans_MaxAirFlowRate ();

        void
        SimFlowEnergyTrans_MaxAirFlowRate (const SimFlowEnergyTrans_MaxAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_MaxAirFlowRate (const SimFlowEnergyTrans_MaxAirFlowRate_optional& x);

        // SimFlowEnergyTrans_OutdrAirCntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_OutdrAirCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_OutdrAirCntlType_type > SimFlowEnergyTrans_OutdrAirCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_OutdrAirCntlType_type, char > SimFlowEnergyTrans_OutdrAirCntlType_traits;

        const SimFlowEnergyTrans_OutdrAirCntlType_optional&
        SimFlowEnergyTrans_OutdrAirCntlType () const;

        SimFlowEnergyTrans_OutdrAirCntlType_optional&
        SimFlowEnergyTrans_OutdrAirCntlType ();

        void
        SimFlowEnergyTrans_OutdrAirCntlType (const SimFlowEnergyTrans_OutdrAirCntlType_type& x);

        void
        SimFlowEnergyTrans_OutdrAirCntlType (const SimFlowEnergyTrans_OutdrAirCntlType_optional& x);

        void
        SimFlowEnergyTrans_OutdrAirCntlType (::std::auto_ptr< SimFlowEnergyTrans_OutdrAirCntlType_type > p);

        // SimFlowEnergyTrans_MinOutdrAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MinOutdrAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MinOutdrAirFlowRate_type > SimFlowEnergyTrans_MinOutdrAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MinOutdrAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MinOutdrAirFlowRate_traits;

        const SimFlowEnergyTrans_MinOutdrAirFlowRate_optional&
        SimFlowEnergyTrans_MinOutdrAirFlowRate () const;

        SimFlowEnergyTrans_MinOutdrAirFlowRate_optional&
        SimFlowEnergyTrans_MinOutdrAirFlowRate ();

        void
        SimFlowEnergyTrans_MinOutdrAirFlowRate (const SimFlowEnergyTrans_MinOutdrAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_MinOutdrAirFlowRate (const SimFlowEnergyTrans_MinOutdrAirFlowRate_optional& x);

        // SimFlowEnergyTrans_MinOutdrAirSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_MinOutdrAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MinOutdrAirSchedName_type > SimFlowEnergyTrans_MinOutdrAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MinOutdrAirSchedName_type, char > SimFlowEnergyTrans_MinOutdrAirSchedName_traits;

        const SimFlowEnergyTrans_MinOutdrAirSchedName_optional&
        SimFlowEnergyTrans_MinOutdrAirSchedName () const;

        SimFlowEnergyTrans_MinOutdrAirSchedName_optional&
        SimFlowEnergyTrans_MinOutdrAirSchedName ();

        void
        SimFlowEnergyTrans_MinOutdrAirSchedName (const SimFlowEnergyTrans_MinOutdrAirSchedName_type& x);

        void
        SimFlowEnergyTrans_MinOutdrAirSchedName (const SimFlowEnergyTrans_MinOutdrAirSchedName_optional& x);

        void
        SimFlowEnergyTrans_MinOutdrAirSchedName (::std::auto_ptr< SimFlowEnergyTrans_MinOutdrAirSchedName_type > p);

        // SimFlowEnergyTrans_MaxOutdrAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MaxOutdrAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxOutdrAirFlowRate_type > SimFlowEnergyTrans_MaxOutdrAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxOutdrAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MaxOutdrAirFlowRate_traits;

        const SimFlowEnergyTrans_MaxOutdrAirFlowRate_optional&
        SimFlowEnergyTrans_MaxOutdrAirFlowRate () const;

        SimFlowEnergyTrans_MaxOutdrAirFlowRate_optional&
        SimFlowEnergyTrans_MaxOutdrAirFlowRate ();

        void
        SimFlowEnergyTrans_MaxOutdrAirFlowRate (const SimFlowEnergyTrans_MaxOutdrAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_MaxOutdrAirFlowRate (const SimFlowEnergyTrans_MaxOutdrAirFlowRate_optional& x);

        // SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_type > SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_type, char > SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_traits;

        const SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_optional&
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName () const;

        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_optional&
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName ();

        void
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName (const SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_type& x);

        void
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName (const SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_type > p);

        // SimFlowEnergyTrans_SysConfigurationType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_SysConfigurationType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SysConfigurationType_type > SimFlowEnergyTrans_SysConfigurationType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SysConfigurationType_type, char > SimFlowEnergyTrans_SysConfigurationType_traits;

        const SimFlowEnergyTrans_SysConfigurationType_optional&
        SimFlowEnergyTrans_SysConfigurationType () const;

        SimFlowEnergyTrans_SysConfigurationType_optional&
        SimFlowEnergyTrans_SysConfigurationType ();

        void
        SimFlowEnergyTrans_SysConfigurationType (const SimFlowEnergyTrans_SysConfigurationType_type& x);

        void
        SimFlowEnergyTrans_SysConfigurationType (const SimFlowEnergyTrans_SysConfigurationType_optional& x);

        void
        SimFlowEnergyTrans_SysConfigurationType (::std::auto_ptr< SimFlowEnergyTrans_SysConfigurationType_type > p);

        // SimFlowEnergyTrans_HollowCoresideDiam
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HollowCoresideDiam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HollowCoresideDiam_type > SimFlowEnergyTrans_HollowCoresideDiam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HollowCoresideDiam_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HollowCoresideDiam_traits;

        const SimFlowEnergyTrans_HollowCoresideDiam_optional&
        SimFlowEnergyTrans_HollowCoresideDiam () const;

        SimFlowEnergyTrans_HollowCoresideDiam_optional&
        SimFlowEnergyTrans_HollowCoresideDiam ();

        void
        SimFlowEnergyTrans_HollowCoresideDiam (const SimFlowEnergyTrans_HollowCoresideDiam_type& x);

        void
        SimFlowEnergyTrans_HollowCoresideDiam (const SimFlowEnergyTrans_HollowCoresideDiam_optional& x);

        // SimFlowEnergyTrans_HollowCoreLength
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HollowCoreLength_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HollowCoreLength_type > SimFlowEnergyTrans_HollowCoreLength_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HollowCoreLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HollowCoreLength_traits;

        const SimFlowEnergyTrans_HollowCoreLength_optional&
        SimFlowEnergyTrans_HollowCoreLength () const;

        SimFlowEnergyTrans_HollowCoreLength_optional&
        SimFlowEnergyTrans_HollowCoreLength ();

        void
        SimFlowEnergyTrans_HollowCoreLength (const SimFlowEnergyTrans_HollowCoreLength_type& x);

        void
        SimFlowEnergyTrans_HollowCoreLength (const SimFlowEnergyTrans_HollowCoreLength_optional& x);

        // SimFlowEnergyTrans_NumCores
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_NumCores_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NumCores_type > SimFlowEnergyTrans_NumCores_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NumCores_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_NumCores_traits;

        const SimFlowEnergyTrans_NumCores_optional&
        SimFlowEnergyTrans_NumCores () const;

        SimFlowEnergyTrans_NumCores_optional&
        SimFlowEnergyTrans_NumCores ();

        void
        SimFlowEnergyTrans_NumCores (const SimFlowEnergyTrans_NumCores_type& x);

        void
        SimFlowEnergyTrans_NumCores (const SimFlowEnergyTrans_NumCores_optional& x);

        // SimFlowEnergyTrans_HeatingHighAirTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingHighAirTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingHighAirTempSchedName_type > SimFlowEnergyTrans_HeatingHighAirTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingHighAirTempSchedName_type, char > SimFlowEnergyTrans_HeatingHighAirTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingHighAirTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighAirTempSchedName () const;

        SimFlowEnergyTrans_HeatingHighAirTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighAirTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingHighAirTempSchedName (const SimFlowEnergyTrans_HeatingHighAirTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingHighAirTempSchedName (const SimFlowEnergyTrans_HeatingHighAirTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingHighAirTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingHighAirTempSchedName_type > p);

        // SimFlowEnergyTrans_HeatingLowAirTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingLowAirTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingLowAirTempSchedName_type > SimFlowEnergyTrans_HeatingLowAirTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingLowAirTempSchedName_type, char > SimFlowEnergyTrans_HeatingLowAirTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingLowAirTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowAirTempSchedName () const;

        SimFlowEnergyTrans_HeatingLowAirTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowAirTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingLowAirTempSchedName (const SimFlowEnergyTrans_HeatingLowAirTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingLowAirTempSchedName (const SimFlowEnergyTrans_HeatingLowAirTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingLowAirTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingLowAirTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingHighAirTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingHighAirTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingHighAirTempSchedName_type > SimFlowEnergyTrans_CoolingHighAirTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingHighAirTempSchedName_type, char > SimFlowEnergyTrans_CoolingHighAirTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingHighAirTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighAirTempSchedName () const;

        SimFlowEnergyTrans_CoolingHighAirTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighAirTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingHighAirTempSchedName (const SimFlowEnergyTrans_CoolingHighAirTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingHighAirTempSchedName (const SimFlowEnergyTrans_CoolingHighAirTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingHighAirTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingHighAirTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingLowAirTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingLowAirTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingLowAirTempSchedName_type > SimFlowEnergyTrans_CoolingLowAirTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingLowAirTempSchedName_type, char > SimFlowEnergyTrans_CoolingLowAirTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingLowAirTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowAirTempSchedName () const;

        SimFlowEnergyTrans_CoolingLowAirTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowAirTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingLowAirTempSchedName (const SimFlowEnergyTrans_CoolingLowAirTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingLowAirTempSchedName (const SimFlowEnergyTrans_CoolingLowAirTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingLowAirTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingLowAirTempSchedName_type > p);

        // SimFlowEnergyTrans_RtnAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_RtnAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RtnAirNodeName_type > SimFlowEnergyTrans_RtnAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RtnAirNodeName_type, char > SimFlowEnergyTrans_RtnAirNodeName_traits;

        const SimFlowEnergyTrans_RtnAirNodeName_optional&
        SimFlowEnergyTrans_RtnAirNodeName () const;

        SimFlowEnergyTrans_RtnAirNodeName_optional&
        SimFlowEnergyTrans_RtnAirNodeName ();

        void
        SimFlowEnergyTrans_RtnAirNodeName (const SimFlowEnergyTrans_RtnAirNodeName_type& x);

        void
        SimFlowEnergyTrans_RtnAirNodeName (const SimFlowEnergyTrans_RtnAirNodeName_optional& x);

        void
        SimFlowEnergyTrans_RtnAirNodeName (::std::auto_ptr< SimFlowEnergyTrans_RtnAirNodeName_type > p);

        // SimFlowEnergyTrans_SlabNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_SlabNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SlabNodeName_type > SimFlowEnergyTrans_SlabNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SlabNodeName_type, char > SimFlowEnergyTrans_SlabNodeName_traits;

        const SimFlowEnergyTrans_SlabNodeName_optional&
        SimFlowEnergyTrans_SlabNodeName () const;

        SimFlowEnergyTrans_SlabNodeName_optional&
        SimFlowEnergyTrans_SlabNodeName ();

        void
        SimFlowEnergyTrans_SlabNodeName (const SimFlowEnergyTrans_SlabNodeName_type& x);

        void
        SimFlowEnergyTrans_SlabNodeName (const SimFlowEnergyTrans_SlabNodeName_optional& x);

        void
        SimFlowEnergyTrans_SlabNodeName (::std::auto_ptr< SimFlowEnergyTrans_SlabNodeName_type > p);

        // SimFlowEnergyTrans_ZoneSupAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ZoneSupAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ZoneSupAirNodeName_type > SimFlowEnergyTrans_ZoneSupAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ZoneSupAirNodeName_type, char > SimFlowEnergyTrans_ZoneSupAirNodeName_traits;

        const SimFlowEnergyTrans_ZoneSupAirNodeName_optional&
        SimFlowEnergyTrans_ZoneSupAirNodeName () const;

        SimFlowEnergyTrans_ZoneSupAirNodeName_optional&
        SimFlowEnergyTrans_ZoneSupAirNodeName ();

        void
        SimFlowEnergyTrans_ZoneSupAirNodeName (const SimFlowEnergyTrans_ZoneSupAirNodeName_type& x);

        void
        SimFlowEnergyTrans_ZoneSupAirNodeName (const SimFlowEnergyTrans_ZoneSupAirNodeName_optional& x);

        void
        SimFlowEnergyTrans_ZoneSupAirNodeName (::std::auto_ptr< SimFlowEnergyTrans_ZoneSupAirNodeName_type > p);

        // SimFlowEnergyTrans_OutdrAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_OutdrAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_OutdrAirNodeName_type > SimFlowEnergyTrans_OutdrAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_OutdrAirNodeName_type, char > SimFlowEnergyTrans_OutdrAirNodeName_traits;

        const SimFlowEnergyTrans_OutdrAirNodeName_optional&
        SimFlowEnergyTrans_OutdrAirNodeName () const;

        SimFlowEnergyTrans_OutdrAirNodeName_optional&
        SimFlowEnergyTrans_OutdrAirNodeName ();

        void
        SimFlowEnergyTrans_OutdrAirNodeName (const SimFlowEnergyTrans_OutdrAirNodeName_type& x);

        void
        SimFlowEnergyTrans_OutdrAirNodeName (const SimFlowEnergyTrans_OutdrAirNodeName_optional& x);

        void
        SimFlowEnergyTrans_OutdrAirNodeName (::std::auto_ptr< SimFlowEnergyTrans_OutdrAirNodeName_type > p);

        // SimFlowEnergyTrans_ReliefAirNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ReliefAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ReliefAirNodeName_type > SimFlowEnergyTrans_ReliefAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ReliefAirNodeName_type, char > SimFlowEnergyTrans_ReliefAirNodeName_traits;

        const SimFlowEnergyTrans_ReliefAirNodeName_optional&
        SimFlowEnergyTrans_ReliefAirNodeName () const;

        SimFlowEnergyTrans_ReliefAirNodeName_optional&
        SimFlowEnergyTrans_ReliefAirNodeName ();

        void
        SimFlowEnergyTrans_ReliefAirNodeName (const SimFlowEnergyTrans_ReliefAirNodeName_type& x);

        void
        SimFlowEnergyTrans_ReliefAirNodeName (const SimFlowEnergyTrans_ReliefAirNodeName_optional& x);

        void
        SimFlowEnergyTrans_ReliefAirNodeName (::std::auto_ptr< SimFlowEnergyTrans_ReliefAirNodeName_type > p);

        // SimFlowEnergyTrans_OutdrAirMixerOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_type > SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_type, char > SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_traits;

        const SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_optional&
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName () const;

        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_optional&
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName ();

        void
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName (const SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName (const SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_type > p);

        // SimFlowEnergyTrans_FanOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_FanOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FanOutletNodeName_type > SimFlowEnergyTrans_FanOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FanOutletNodeName_type, char > SimFlowEnergyTrans_FanOutletNodeName_traits;

        const SimFlowEnergyTrans_FanOutletNodeName_optional&
        SimFlowEnergyTrans_FanOutletNodeName () const;

        SimFlowEnergyTrans_FanOutletNodeName_optional&
        SimFlowEnergyTrans_FanOutletNodeName ();

        void
        SimFlowEnergyTrans_FanOutletNodeName (const SimFlowEnergyTrans_FanOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_FanOutletNodeName (const SimFlowEnergyTrans_FanOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_FanOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_FanOutletNodeName_type > p);

        // SimFlowEnergyTrans_FanName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_FanName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FanName_type > SimFlowEnergyTrans_FanName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FanName_type, char > SimFlowEnergyTrans_FanName_traits;

        const SimFlowEnergyTrans_FanName_optional&
        SimFlowEnergyTrans_FanName () const;

        SimFlowEnergyTrans_FanName_optional&
        SimFlowEnergyTrans_FanName ();

        void
        SimFlowEnergyTrans_FanName (const SimFlowEnergyTrans_FanName_type& x);

        void
        SimFlowEnergyTrans_FanName (const SimFlowEnergyTrans_FanName_optional& x);

        void
        SimFlowEnergyTrans_FanName (::std::auto_ptr< SimFlowEnergyTrans_FanName_type > p);

        // SimFlowEnergyTrans_CoilOptionType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CoilOptionType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoilOptionType_type > SimFlowEnergyTrans_CoilOptionType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoilOptionType_type, char > SimFlowEnergyTrans_CoilOptionType_traits;

        const SimFlowEnergyTrans_CoilOptionType_optional&
        SimFlowEnergyTrans_CoilOptionType () const;

        SimFlowEnergyTrans_CoilOptionType_optional&
        SimFlowEnergyTrans_CoilOptionType ();

        void
        SimFlowEnergyTrans_CoilOptionType (const SimFlowEnergyTrans_CoilOptionType_type& x);

        void
        SimFlowEnergyTrans_CoilOptionType (const SimFlowEnergyTrans_CoilOptionType_optional& x);

        void
        SimFlowEnergyTrans_CoilOptionType (::std::auto_ptr< SimFlowEnergyTrans_CoilOptionType_type > p);

        // SimFlowEnergyTrans_HeatingCoilObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_HeatingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCoilObjType_type > SimFlowEnergyTrans_HeatingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCoilObjType_type, char > SimFlowEnergyTrans_HeatingCoilObjType_traits;

        const SimFlowEnergyTrans_HeatingCoilObjType_optional&
        SimFlowEnergyTrans_HeatingCoilObjType () const;

        SimFlowEnergyTrans_HeatingCoilObjType_optional&
        SimFlowEnergyTrans_HeatingCoilObjType ();

        void
        SimFlowEnergyTrans_HeatingCoilObjType (const SimFlowEnergyTrans_HeatingCoilObjType_type& x);

        void
        SimFlowEnergyTrans_HeatingCoilObjType (const SimFlowEnergyTrans_HeatingCoilObjType_optional& x);

        void
        SimFlowEnergyTrans_HeatingCoilObjType (::std::auto_ptr< SimFlowEnergyTrans_HeatingCoilObjType_type > p);

        // SimFlowEnergyTrans_HeatingCoilName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingCoilName_type > SimFlowEnergyTrans_HeatingCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingCoilName_type, char > SimFlowEnergyTrans_HeatingCoilName_traits;

        const SimFlowEnergyTrans_HeatingCoilName_optional&
        SimFlowEnergyTrans_HeatingCoilName () const;

        SimFlowEnergyTrans_HeatingCoilName_optional&
        SimFlowEnergyTrans_HeatingCoilName ();

        void
        SimFlowEnergyTrans_HeatingCoilName (const SimFlowEnergyTrans_HeatingCoilName_type& x);

        void
        SimFlowEnergyTrans_HeatingCoilName (const SimFlowEnergyTrans_HeatingCoilName_optional& x);

        void
        SimFlowEnergyTrans_HeatingCoilName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCoilName_type > p);

        // SimFlowEnergyTrans_HotWaterOrSteamInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_type > SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_type, char > SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_traits;

        const SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_optional&
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName () const;

        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_optional&
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName ();

        void
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName (const SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_type& x);

        void
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName (const SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_type > p);

        // SimFlowEnergyTrans_CoolingCoilObjType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CoolingCoilObjType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingCoilObjType_type > SimFlowEnergyTrans_CoolingCoilObjType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingCoilObjType_type, char > SimFlowEnergyTrans_CoolingCoilObjType_traits;

        const SimFlowEnergyTrans_CoolingCoilObjType_optional&
        SimFlowEnergyTrans_CoolingCoilObjType () const;

        SimFlowEnergyTrans_CoolingCoilObjType_optional&
        SimFlowEnergyTrans_CoolingCoilObjType ();

        void
        SimFlowEnergyTrans_CoolingCoilObjType (const SimFlowEnergyTrans_CoolingCoilObjType_type& x);

        void
        SimFlowEnergyTrans_CoolingCoilObjType (const SimFlowEnergyTrans_CoolingCoilObjType_optional& x);

        void
        SimFlowEnergyTrans_CoolingCoilObjType (::std::auto_ptr< SimFlowEnergyTrans_CoolingCoilObjType_type > p);

        // SimFlowEnergyTrans_CoolingCoilName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingCoilName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingCoilName_type > SimFlowEnergyTrans_CoolingCoilName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingCoilName_type, char > SimFlowEnergyTrans_CoolingCoilName_traits;

        const SimFlowEnergyTrans_CoolingCoilName_optional&
        SimFlowEnergyTrans_CoolingCoilName () const;

        SimFlowEnergyTrans_CoolingCoilName_optional&
        SimFlowEnergyTrans_CoolingCoilName ();

        void
        SimFlowEnergyTrans_CoolingCoilName (const SimFlowEnergyTrans_CoolingCoilName_type& x);

        void
        SimFlowEnergyTrans_CoolingCoilName (const SimFlowEnergyTrans_CoolingCoilName_optional& x);

        void
        SimFlowEnergyTrans_CoolingCoilName (::std::auto_ptr< SimFlowEnergyTrans_CoolingCoilName_type > p);

        // SimFlowEnergyTrans_ColdWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_ColdWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ColdWaterInletNodeName_type > SimFlowEnergyTrans_ColdWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ColdWaterInletNodeName_type, char > SimFlowEnergyTrans_ColdWaterInletNodeName_traits;

        const SimFlowEnergyTrans_ColdWaterInletNodeName_optional&
        SimFlowEnergyTrans_ColdWaterInletNodeName () const;

        SimFlowEnergyTrans_ColdWaterInletNodeName_optional&
        SimFlowEnergyTrans_ColdWaterInletNodeName ();

        void
        SimFlowEnergyTrans_ColdWaterInletNodeName (const SimFlowEnergyTrans_ColdWaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_ColdWaterInletNodeName (const SimFlowEnergyTrans_ColdWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_ColdWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ColdWaterInletNodeName_type > p);

        // SimFlowEnergyTrans_AvailMngrListName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailMngrListName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailMngrListName_type > SimFlowEnergyTrans_AvailMngrListName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailMngrListName_type, char > SimFlowEnergyTrans_AvailMngrListName_traits;

        const SimFlowEnergyTrans_AvailMngrListName_optional&
        SimFlowEnergyTrans_AvailMngrListName () const;

        SimFlowEnergyTrans_AvailMngrListName_optional&
        SimFlowEnergyTrans_AvailMngrListName ();

        void
        SimFlowEnergyTrans_AvailMngrListName (const SimFlowEnergyTrans_AvailMngrListName_type& x);

        void
        SimFlowEnergyTrans_AvailMngrListName (const SimFlowEnergyTrans_AvailMngrListName_optional& x);

        void
        SimFlowEnergyTrans_AvailMngrListName (::std::auto_ptr< SimFlowEnergyTrans_AvailMngrListName_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated ();

        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated (const RefId_type&);

        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated (const SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated& x,
                                                                    ::xml_schema::flags f = 0,
                                                                    ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated&
        operator= (const SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated& x);

        virtual 
        ~SimFlowEnergyTransfer_RadiantDevice_CeilingSlab_Ventilated ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_Name_optional SimFlowEnergyTrans_Name_;
        SimFlowEnergyTrans_AvailSchedName_optional SimFlowEnergyTrans_AvailSchedName_;
        SimFlowEnergyTrans_ZoneName_optional SimFlowEnergyTrans_ZoneName_;
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_;
        SimFlowEnergyTrans_TempCntlType_optional SimFlowEnergyTrans_TempCntlType_;
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional SimFlowEnergyTrans_HeatingHighCntlTempSchedName_;
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional SimFlowEnergyTrans_HeatingLowCntlTempSchedName_;
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional SimFlowEnergyTrans_CoolingHighCntlTempSchedName_;
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional SimFlowEnergyTrans_CoolingLowCntlTempSchedName_;
        SimFlowEnergyTrans_MaxAirFlowRate_optional SimFlowEnergyTrans_MaxAirFlowRate_;
        SimFlowEnergyTrans_OutdrAirCntlType_optional SimFlowEnergyTrans_OutdrAirCntlType_;
        SimFlowEnergyTrans_MinOutdrAirFlowRate_optional SimFlowEnergyTrans_MinOutdrAirFlowRate_;
        SimFlowEnergyTrans_MinOutdrAirSchedName_optional SimFlowEnergyTrans_MinOutdrAirSchedName_;
        SimFlowEnergyTrans_MaxOutdrAirFlowRate_optional SimFlowEnergyTrans_MaxOutdrAirFlowRate_;
        SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_optional SimFlowEnergyTrans_MaxOutdrAirFractOrTempSchedName_;
        SimFlowEnergyTrans_SysConfigurationType_optional SimFlowEnergyTrans_SysConfigurationType_;
        SimFlowEnergyTrans_HollowCoresideDiam_optional SimFlowEnergyTrans_HollowCoresideDiam_;
        SimFlowEnergyTrans_HollowCoreLength_optional SimFlowEnergyTrans_HollowCoreLength_;
        SimFlowEnergyTrans_NumCores_optional SimFlowEnergyTrans_NumCores_;
        SimFlowEnergyTrans_HeatingHighAirTempSchedName_optional SimFlowEnergyTrans_HeatingHighAirTempSchedName_;
        SimFlowEnergyTrans_HeatingLowAirTempSchedName_optional SimFlowEnergyTrans_HeatingLowAirTempSchedName_;
        SimFlowEnergyTrans_CoolingHighAirTempSchedName_optional SimFlowEnergyTrans_CoolingHighAirTempSchedName_;
        SimFlowEnergyTrans_CoolingLowAirTempSchedName_optional SimFlowEnergyTrans_CoolingLowAirTempSchedName_;
        SimFlowEnergyTrans_RtnAirNodeName_optional SimFlowEnergyTrans_RtnAirNodeName_;
        SimFlowEnergyTrans_SlabNodeName_optional SimFlowEnergyTrans_SlabNodeName_;
        SimFlowEnergyTrans_ZoneSupAirNodeName_optional SimFlowEnergyTrans_ZoneSupAirNodeName_;
        SimFlowEnergyTrans_OutdrAirNodeName_optional SimFlowEnergyTrans_OutdrAirNodeName_;
        SimFlowEnergyTrans_ReliefAirNodeName_optional SimFlowEnergyTrans_ReliefAirNodeName_;
        SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_optional SimFlowEnergyTrans_OutdrAirMixerOutletNodeName_;
        SimFlowEnergyTrans_FanOutletNodeName_optional SimFlowEnergyTrans_FanOutletNodeName_;
        SimFlowEnergyTrans_FanName_optional SimFlowEnergyTrans_FanName_;
        SimFlowEnergyTrans_CoilOptionType_optional SimFlowEnergyTrans_CoilOptionType_;
        SimFlowEnergyTrans_HeatingCoilObjType_optional SimFlowEnergyTrans_HeatingCoilObjType_;
        SimFlowEnergyTrans_HeatingCoilName_optional SimFlowEnergyTrans_HeatingCoilName_;
        SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_optional SimFlowEnergyTrans_HotWaterOrSteamInletNodeName_;
        SimFlowEnergyTrans_CoolingCoilObjType_optional SimFlowEnergyTrans_CoolingCoilObjType_;
        SimFlowEnergyTrans_CoolingCoilName_optional SimFlowEnergyTrans_CoolingCoilName_;
        SimFlowEnergyTrans_ColdWaterInletNodeName_optional SimFlowEnergyTrans_ColdWaterInletNodeName_;
        SimFlowEnergyTrans_AvailMngrListName_optional SimFlowEnergyTrans_AvailMngrListName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_CEILING_SLAB_VENTILATED_HXX
