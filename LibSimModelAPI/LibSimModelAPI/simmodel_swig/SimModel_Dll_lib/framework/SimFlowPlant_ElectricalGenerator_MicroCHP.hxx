// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_CHP_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_CHP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_MicroCHP;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_MicroCHP: public ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_AirInNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirInNodeName_type > SimFlowPlant_AirInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirInNodeName_type, char > SimFlowPlant_AirInNodeName_traits;

        const SimFlowPlant_AirInNodeName_optional&
        SimFlowPlant_AirInNodeName () const;

        SimFlowPlant_AirInNodeName_optional&
        SimFlowPlant_AirInNodeName ();

        void
        SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_type& x);

        void
        SimFlowPlant_AirInNodeName (const SimFlowPlant_AirInNodeName_optional& x);

        void
        SimFlowPlant_AirInNodeName (::std::auto_ptr< SimFlowPlant_AirInNodeName_type > p);

        // SimFlowPlant_AirOutNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_AirOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AirOutNodeName_type > SimFlowPlant_AirOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AirOutNodeName_type, char > SimFlowPlant_AirOutNodeName_traits;

        const SimFlowPlant_AirOutNodeName_optional&
        SimFlowPlant_AirOutNodeName () const;

        SimFlowPlant_AirOutNodeName_optional&
        SimFlowPlant_AirOutNodeName ();

        void
        SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_type& x);

        void
        SimFlowPlant_AirOutNodeName (const SimFlowPlant_AirOutNodeName_optional& x);

        void
        SimFlowPlant_AirOutNodeName (::std::auto_ptr< SimFlowPlant_AirOutNodeName_type > p);

        // SimFlowPlant_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowPlant_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_AvailSchedName_type > SimFlowPlant_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_AvailSchedName_type, char > SimFlowPlant_AvailSchedName_traits;

        const SimFlowPlant_AvailSchedName_optional&
        SimFlowPlant_AvailSchedName () const;

        SimFlowPlant_AvailSchedName_optional&
        SimFlowPlant_AvailSchedName ();

        void
        SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_type& x);

        void
        SimFlowPlant_AvailSchedName (const SimFlowPlant_AvailSchedName_optional& x);

        void
        SimFlowPlant_AvailSchedName (::std::auto_ptr< SimFlowPlant_AvailSchedName_type > p);

        // SimFlowPlant_PerfParamsName
        //
        typedef ::xml_schema::idref SimFlowPlant_PerfParamsName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_PerfParamsName_type > SimFlowPlant_PerfParamsName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_PerfParamsName_type, char > SimFlowPlant_PerfParamsName_traits;

        const SimFlowPlant_PerfParamsName_optional&
        SimFlowPlant_PerfParamsName () const;

        SimFlowPlant_PerfParamsName_optional&
        SimFlowPlant_PerfParamsName ();

        void
        SimFlowPlant_PerfParamsName (const SimFlowPlant_PerfParamsName_type& x);

        void
        SimFlowPlant_PerfParamsName (const SimFlowPlant_PerfParamsName_optional& x);

        void
        SimFlowPlant_PerfParamsName (::std::auto_ptr< SimFlowPlant_PerfParamsName_type > p);

        // SimFlowPlant_ZoneName
        //
        typedef ::xml_schema::idref SimFlowPlant_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ZoneName_type > SimFlowPlant_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ZoneName_type, char > SimFlowPlant_ZoneName_traits;

        const SimFlowPlant_ZoneName_optional&
        SimFlowPlant_ZoneName () const;

        SimFlowPlant_ZoneName_optional&
        SimFlowPlant_ZoneName ();

        void
        SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_type& x);

        void
        SimFlowPlant_ZoneName (const SimFlowPlant_ZoneName_optional& x);

        void
        SimFlowPlant_ZoneName (::std::auto_ptr< SimFlowPlant_ZoneName_type > p);

        // SimFlowPlant_CoolingWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CoolingWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolingWaterInletNodeName_type > SimFlowPlant_CoolingWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolingWaterInletNodeName_type, char > SimFlowPlant_CoolingWaterInletNodeName_traits;

        const SimFlowPlant_CoolingWaterInletNodeName_optional&
        SimFlowPlant_CoolingWaterInletNodeName () const;

        SimFlowPlant_CoolingWaterInletNodeName_optional&
        SimFlowPlant_CoolingWaterInletNodeName ();

        void
        SimFlowPlant_CoolingWaterInletNodeName (const SimFlowPlant_CoolingWaterInletNodeName_type& x);

        void
        SimFlowPlant_CoolingWaterInletNodeName (const SimFlowPlant_CoolingWaterInletNodeName_optional& x);

        void
        SimFlowPlant_CoolingWaterInletNodeName (::std::auto_ptr< SimFlowPlant_CoolingWaterInletNodeName_type > p);

        // SimFlowPlant_CoolingWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_CoolingWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_CoolingWaterOutletNodeName_type > SimFlowPlant_CoolingWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_CoolingWaterOutletNodeName_type, char > SimFlowPlant_CoolingWaterOutletNodeName_traits;

        const SimFlowPlant_CoolingWaterOutletNodeName_optional&
        SimFlowPlant_CoolingWaterOutletNodeName () const;

        SimFlowPlant_CoolingWaterOutletNodeName_optional&
        SimFlowPlant_CoolingWaterOutletNodeName ();

        void
        SimFlowPlant_CoolingWaterOutletNodeName (const SimFlowPlant_CoolingWaterOutletNodeName_type& x);

        void
        SimFlowPlant_CoolingWaterOutletNodeName (const SimFlowPlant_CoolingWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_CoolingWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_CoolingWaterOutletNodeName_type > p);

        // SimFlowPlant_GenFuelSupplyName
        //
        typedef ::xml_schema::idref SimFlowPlant_GenFuelSupplyName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_GenFuelSupplyName_type > SimFlowPlant_GenFuelSupplyName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_GenFuelSupplyName_type, char > SimFlowPlant_GenFuelSupplyName_traits;

        const SimFlowPlant_GenFuelSupplyName_optional&
        SimFlowPlant_GenFuelSupplyName () const;

        SimFlowPlant_GenFuelSupplyName_optional&
        SimFlowPlant_GenFuelSupplyName ();

        void
        SimFlowPlant_GenFuelSupplyName (const SimFlowPlant_GenFuelSupplyName_type& x);

        void
        SimFlowPlant_GenFuelSupplyName (const SimFlowPlant_GenFuelSupplyName_optional& x);

        void
        SimFlowPlant_GenFuelSupplyName (::std::auto_ptr< SimFlowPlant_GenFuelSupplyName_type > p);

        // Generator_MicroCHP_NonNormalizedParams_Name
        //
        typedef ::xml_schema::string Generator_MicroCHP_NonNormalizedParams_Name_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_Name_type > Generator_MicroCHP_NonNormalizedParams_Name_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_Name_type, char > Generator_MicroCHP_NonNormalizedParams_Name_traits;

        const Generator_MicroCHP_NonNormalizedParams_Name_optional&
        Generator_MicroCHP_NonNormalizedParams_Name () const;

        Generator_MicroCHP_NonNormalizedParams_Name_optional&
        Generator_MicroCHP_NonNormalizedParams_Name ();

        void
        Generator_MicroCHP_NonNormalizedParams_Name (const Generator_MicroCHP_NonNormalizedParams_Name_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_Name (const Generator_MicroCHP_NonNormalizedParams_Name_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_Name (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_Name_type > p);

        // Generator_MicroCHP_NonNormalizedParams_MaxElectricPower
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_type > Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_traits;

        const Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower () const;

        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower ();

        void
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower (const Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower (const Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_MinElectricPower
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MinElectricPower_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MinElectricPower_type > Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MinElectricPower_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MinElectricPower_traits;

        const Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional&
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower () const;

        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional&
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower ();

        void
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower (const Generator_MicroCHP_NonNormalizedParams_MinElectricPower_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower (const Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_type > Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_traits;

        const Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional&
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate () const;

        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional&
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate ();

        void
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate (const Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate (const Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_type > Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_traits;

        const Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp () const;

        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp ();

        void
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp (const Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp (const Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName
        //
        typedef ::xml_schema::idref Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type > Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type, char > Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_traits;

        const Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName () const;

        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName ();

        void
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_type > p);

        // Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName
        //
        typedef ::xml_schema::idref Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type > Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type, char > Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_traits;

        const Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName () const;

        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName ();

        void
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (const Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_type > p);

        // Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode
        //
        typedef ::xml_schema::string Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type > Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type, char > Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_traits;

        const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode () const;

        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode ();

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_type > p);

        // Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName
        //
        typedef ::xml_schema::idref Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type > Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type, char > Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_traits;

        const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName () const;

        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName ();

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_type > p);

        // Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName
        //
        typedef ::xml_schema::idref Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type > Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type, char > Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_traits;

        const Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName () const;

        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional&
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName ();

        void
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (const Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_type > p);

        // Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_type > Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_traits;

        const Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange () const;

        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange ();

        void
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_type > Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_traits;

        const Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange () const;

        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional&
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange ();

        void
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange (const Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_type > Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_traits;

        const Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional&
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal () const;

        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional&
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal ();

        void
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal (const Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal (const Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_type > Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_traits;

        const Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional&
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue () const;

        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional&
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue ();

        void
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue (const Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue (const Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_type > Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_traits;

        const Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional&
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract () const;

        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional&
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract ();

        void
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract (const Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract (const Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_type > Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_traits;

        const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional&
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator () const;

        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional&
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator ();

        void
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_type > Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_traits;

        const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional&
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator () const;

        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional&
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator ();

        void
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator (const Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_StandbyPwr
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_StandbyPwr_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_StandbyPwr_type > Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_StandbyPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_StandbyPwr_traits;

        const Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional&
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr () const;

        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional&
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr ();

        void
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr (const Generator_MicroCHP_NonNormalizedParams_StandbyPwr_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr (const Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_WarmUpMode
        //
        typedef ::xml_schema::string Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type > Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type, char > Generator_MicroCHP_NonNormalizedParams_WarmUpMode_traits;

        const Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode () const;

        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode ();

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode (const Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode (const Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_WarmUpMode_type > p);

        // Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_type > Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_traits;

        const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff () const;

        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff ();

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_type > Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_traits;

        const Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional&
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp () const;

        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional&
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp ();

        void
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp (const Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp (const Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_type > Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_traits;

        const Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff () const;

        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff ();

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff (const Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_type > Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_traits;

        const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio () const;

        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio ();

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio (const Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_type > Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_traits;

        const Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime () const;

        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional&
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime ();

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime (const Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime (const Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_CoolDownPower
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_CoolDownPower_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_CoolDownPower_type > Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_CoolDownPower_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_CoolDownPower_traits;

        const Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower () const;

        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower ();

        void
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower (const Generator_MicroCHP_NonNormalizedParams_CoolDownPower_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower (const Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime
        //
        typedef ::xml_schema::double_ Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_type > Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_type, char, ::xsd::cxx::tree::schema_type::double_ > Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_traits;

        const Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime () const;

        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional&
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime ();

        void
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime (const Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime (const Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional& x);

        // Generator_MicroCHP_NonNormalizedParams_RestartMode
        //
        typedef ::xml_schema::string Generator_MicroCHP_NonNormalizedParams_RestartMode_type;
        typedef ::xsd::cxx::tree::optional< Generator_MicroCHP_NonNormalizedParams_RestartMode_type > Generator_MicroCHP_NonNormalizedParams_RestartMode_optional;
        typedef ::xsd::cxx::tree::traits< Generator_MicroCHP_NonNormalizedParams_RestartMode_type, char > Generator_MicroCHP_NonNormalizedParams_RestartMode_traits;

        const Generator_MicroCHP_NonNormalizedParams_RestartMode_optional&
        Generator_MicroCHP_NonNormalizedParams_RestartMode () const;

        Generator_MicroCHP_NonNormalizedParams_RestartMode_optional&
        Generator_MicroCHP_NonNormalizedParams_RestartMode ();

        void
        Generator_MicroCHP_NonNormalizedParams_RestartMode (const Generator_MicroCHP_NonNormalizedParams_RestartMode_type& x);

        void
        Generator_MicroCHP_NonNormalizedParams_RestartMode (const Generator_MicroCHP_NonNormalizedParams_RestartMode_optional& x);

        void
        Generator_MicroCHP_NonNormalizedParams_RestartMode (::std::auto_ptr< Generator_MicroCHP_NonNormalizedParams_RestartMode_type > p);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_MicroCHP ();

        SimFlowPlant_ElectricalGenerator_MicroCHP (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_MicroCHP (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_MicroCHP (const SimFlowPlant_ElectricalGenerator_MicroCHP& x,
                                                   ::xml_schema::flags f = 0,
                                                   ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_MicroCHP*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_MicroCHP&
        operator= (const SimFlowPlant_ElectricalGenerator_MicroCHP& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_MicroCHP ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_AirInNodeName_optional SimFlowPlant_AirInNodeName_;
        SimFlowPlant_AirOutNodeName_optional SimFlowPlant_AirOutNodeName_;
        SimFlowPlant_AvailSchedName_optional SimFlowPlant_AvailSchedName_;
        SimFlowPlant_PerfParamsName_optional SimFlowPlant_PerfParamsName_;
        SimFlowPlant_ZoneName_optional SimFlowPlant_ZoneName_;
        SimFlowPlant_CoolingWaterInletNodeName_optional SimFlowPlant_CoolingWaterInletNodeName_;
        SimFlowPlant_CoolingWaterOutletNodeName_optional SimFlowPlant_CoolingWaterOutletNodeName_;
        SimFlowPlant_GenFuelSupplyName_optional SimFlowPlant_GenFuelSupplyName_;
        Generator_MicroCHP_NonNormalizedParams_Name_optional Generator_MicroCHP_NonNormalizedParams_Name_;
        Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_optional Generator_MicroCHP_NonNormalizedParams_MaxElectricPower_;
        Generator_MicroCHP_NonNormalizedParams_MinElectricPower_optional Generator_MicroCHP_NonNormalizedParams_MinElectricPower_;
        Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_optional Generator_MicroCHP_NonNormalizedParams_MinCoolingWaterFlowRate_;
        Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_optional Generator_MicroCHP_NonNormalizedParams_MaxCoolingWaterTemp_;
        Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_optional Generator_MicroCHP_NonNormalizedParams_ElectricalEfficiencyCurveName_;
        Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_optional Generator_MicroCHP_NonNormalizedParams_ThermalEfficiencyCurveName_;
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_optional Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateMode_;
        Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_optional Generator_MicroCHP_NonNormalizedParams_CoolingWaterFlowRateCurveName_;
        Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_optional Generator_MicroCHP_NonNormalizedParams_AirFlowRateCurveName_;
        Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_optional Generator_MicroCHP_NonNormalizedParams_MaxNetElectricalPowerRateOfChange_;
        Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_optional Generator_MicroCHP_NonNormalizedParams_MaxFuelFlowRateOfChange_;
        Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_optional Generator_MicroCHP_NonNormalizedParams_HeatExchngUFactorTimesAreaVal_;
        Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_optional Generator_MicroCHP_NonNormalizedParams_SkinLossU_FactorTimesAreaValue_;
        Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_optional Generator_MicroCHP_NonNormalizedParams_SkinLossRadiativeFract_;
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_optional Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfEnergyConversionPortionOfGenerator_;
        Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_optional Generator_MicroCHP_NonNormalizedParams_AggregatedThermalMassOfHeatRecoveryPortionOfGenerator_;
        Generator_MicroCHP_NonNormalizedParams_StandbyPwr_optional Generator_MicroCHP_NonNormalizedParams_StandbyPwr_;
        Generator_MicroCHP_NonNormalizedParams_WarmUpMode_optional Generator_MicroCHP_NonNormalizedParams_WarmUpMode_;
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_optional Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateCoeff_;
        Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_optional Generator_MicroCHP_NonNormalizedParams_NominalEngineOperatingTemp_;
        Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_optional Generator_MicroCHP_NonNormalizedParams_WarmUpPowerCoeff_;
        Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_optional Generator_MicroCHP_NonNormalizedParams_WarmUpFuelFlowRateLimitRatio_;
        Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_optional Generator_MicroCHP_NonNormalizedParams_WarmUpDelayTime_;
        Generator_MicroCHP_NonNormalizedParams_CoolDownPower_optional Generator_MicroCHP_NonNormalizedParams_CoolDownPower_;
        Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_optional Generator_MicroCHP_NonNormalizedParams_CoolDownDelayTime_;
        Generator_MicroCHP_NonNormalizedParams_RestartMode_optional Generator_MicroCHP_NonNormalizedParams_RestartMode_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_MICRO_CHP_HXX
