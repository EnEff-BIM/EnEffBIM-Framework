// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_LOCATION_AND_WEATHER_DESIGN_DAY_HXX
#define SIM_LOCATION_AND_WEATHER_DESIGN_DAY_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimLocationAndWeather_DesignDay;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simlocationandweather.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class __declspec(dllexport) SimLocationAndWeather_DesignDay: public ::schema::simxml::ResourcesGeneral::SimLocationAndWeather
      {
        public:
        // SimLocationAndWeather_Name
        //
        typedef ::xml_schema::string SimLocationAndWeather_Name_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_Name_type > SimLocationAndWeather_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_Name_type, char > SimLocationAndWeather_Name_traits;

        const SimLocationAndWeather_Name_optional&
        SimLocationAndWeather_Name () const;

        SimLocationAndWeather_Name_optional&
        SimLocationAndWeather_Name ();

        void
        SimLocationAndWeather_Name (const SimLocationAndWeather_Name_type& x);

        void
        SimLocationAndWeather_Name (const SimLocationAndWeather_Name_optional& x);

        void
        SimLocationAndWeather_Name (::std::auto_ptr< SimLocationAndWeather_Name_type > p);

        // SimLocationAndWeather_Month
        //
        typedef ::xml_schema::int_ SimLocationAndWeather_Month_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_Month_type > SimLocationAndWeather_Month_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_Month_type, char > SimLocationAndWeather_Month_traits;

        const SimLocationAndWeather_Month_optional&
        SimLocationAndWeather_Month () const;

        SimLocationAndWeather_Month_optional&
        SimLocationAndWeather_Month ();

        void
        SimLocationAndWeather_Month (const SimLocationAndWeather_Month_type& x);

        void
        SimLocationAndWeather_Month (const SimLocationAndWeather_Month_optional& x);

        // SimLocationAndWeather_DayOfMonth
        //
        typedef ::xml_schema::int_ SimLocationAndWeather_DayOfMonth_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DayOfMonth_type > SimLocationAndWeather_DayOfMonth_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DayOfMonth_type, char > SimLocationAndWeather_DayOfMonth_traits;

        const SimLocationAndWeather_DayOfMonth_optional&
        SimLocationAndWeather_DayOfMonth () const;

        SimLocationAndWeather_DayOfMonth_optional&
        SimLocationAndWeather_DayOfMonth ();

        void
        SimLocationAndWeather_DayOfMonth (const SimLocationAndWeather_DayOfMonth_type& x);

        void
        SimLocationAndWeather_DayOfMonth (const SimLocationAndWeather_DayOfMonth_optional& x);

        // SimLocationAndWeather_DayType
        //
        typedef ::xml_schema::string SimLocationAndWeather_DayType_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DayType_type > SimLocationAndWeather_DayType_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DayType_type, char > SimLocationAndWeather_DayType_traits;

        const SimLocationAndWeather_DayType_optional&
        SimLocationAndWeather_DayType () const;

        SimLocationAndWeather_DayType_optional&
        SimLocationAndWeather_DayType ();

        void
        SimLocationAndWeather_DayType (const SimLocationAndWeather_DayType_type& x);

        void
        SimLocationAndWeather_DayType (const SimLocationAndWeather_DayType_optional& x);

        void
        SimLocationAndWeather_DayType (::std::auto_ptr< SimLocationAndWeather_DayType_type > p);

        // SimLocationAndWeather_MaxDryBulbTemp
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_MaxDryBulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_MaxDryBulbTemp_type > SimLocationAndWeather_MaxDryBulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_MaxDryBulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_MaxDryBulbTemp_traits;

        const SimLocationAndWeather_MaxDryBulbTemp_optional&
        SimLocationAndWeather_MaxDryBulbTemp () const;

        SimLocationAndWeather_MaxDryBulbTemp_optional&
        SimLocationAndWeather_MaxDryBulbTemp ();

        void
        SimLocationAndWeather_MaxDryBulbTemp (const SimLocationAndWeather_MaxDryBulbTemp_type& x);

        void
        SimLocationAndWeather_MaxDryBulbTemp (const SimLocationAndWeather_MaxDryBulbTemp_optional& x);

        // SimLocationAndWeather_DailyDry_BulbTempRange
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_DailyDry_BulbTempRange_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DailyDry_BulbTempRange_type > SimLocationAndWeather_DailyDry_BulbTempRange_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DailyDry_BulbTempRange_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_DailyDry_BulbTempRange_traits;

        const SimLocationAndWeather_DailyDry_BulbTempRange_optional&
        SimLocationAndWeather_DailyDry_BulbTempRange () const;

        SimLocationAndWeather_DailyDry_BulbTempRange_optional&
        SimLocationAndWeather_DailyDry_BulbTempRange ();

        void
        SimLocationAndWeather_DailyDry_BulbTempRange (const SimLocationAndWeather_DailyDry_BulbTempRange_type& x);

        void
        SimLocationAndWeather_DailyDry_BulbTempRange (const SimLocationAndWeather_DailyDry_BulbTempRange_optional& x);

        // SimLocationAndWeather_DryBulbTempRangeModType
        //
        typedef ::xml_schema::string SimLocationAndWeather_DryBulbTempRangeModType_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DryBulbTempRangeModType_type > SimLocationAndWeather_DryBulbTempRangeModType_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DryBulbTempRangeModType_type, char > SimLocationAndWeather_DryBulbTempRangeModType_traits;

        const SimLocationAndWeather_DryBulbTempRangeModType_optional&
        SimLocationAndWeather_DryBulbTempRangeModType () const;

        SimLocationAndWeather_DryBulbTempRangeModType_optional&
        SimLocationAndWeather_DryBulbTempRangeModType ();

        void
        SimLocationAndWeather_DryBulbTempRangeModType (const SimLocationAndWeather_DryBulbTempRangeModType_type& x);

        void
        SimLocationAndWeather_DryBulbTempRangeModType (const SimLocationAndWeather_DryBulbTempRangeModType_optional& x);

        void
        SimLocationAndWeather_DryBulbTempRangeModType (::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModType_type > p);

        // SimLocationAndWeather_DryBulbTempRangeModDaySchedName
        //
        typedef ::xml_schema::idref SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type > SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type, char > SimLocationAndWeather_DryBulbTempRangeModDaySchedName_traits;

        const SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional&
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName () const;

        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional&
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName ();

        void
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName (const SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type& x);

        void
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName (const SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional& x);

        void
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName (::std::auto_ptr< SimLocationAndWeather_DryBulbTempRangeModDaySchedName_type > p);

        // SimLocationAndWeather_HumidityCondType
        //
        typedef ::xml_schema::string SimLocationAndWeather_HumidityCondType_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_HumidityCondType_type > SimLocationAndWeather_HumidityCondType_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_HumidityCondType_type, char > SimLocationAndWeather_HumidityCondType_traits;

        const SimLocationAndWeather_HumidityCondType_optional&
        SimLocationAndWeather_HumidityCondType () const;

        SimLocationAndWeather_HumidityCondType_optional&
        SimLocationAndWeather_HumidityCondType ();

        void
        SimLocationAndWeather_HumidityCondType (const SimLocationAndWeather_HumidityCondType_type& x);

        void
        SimLocationAndWeather_HumidityCondType (const SimLocationAndWeather_HumidityCondType_optional& x);

        void
        SimLocationAndWeather_HumidityCondType (::std::auto_ptr< SimLocationAndWeather_HumidityCondType_type > p);

        // SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_type > SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_traits;

        const SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional&
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb () const;

        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional&
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb ();

        void
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb (const SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_type& x);

        void
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb (const SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional& x);

        // SimLocationAndWeather_HumidityCondDaySchedName
        //
        typedef ::xml_schema::idref SimLocationAndWeather_HumidityCondDaySchedName_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_HumidityCondDaySchedName_type > SimLocationAndWeather_HumidityCondDaySchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_HumidityCondDaySchedName_type, char > SimLocationAndWeather_HumidityCondDaySchedName_traits;

        const SimLocationAndWeather_HumidityCondDaySchedName_optional&
        SimLocationAndWeather_HumidityCondDaySchedName () const;

        SimLocationAndWeather_HumidityCondDaySchedName_optional&
        SimLocationAndWeather_HumidityCondDaySchedName ();

        void
        SimLocationAndWeather_HumidityCondDaySchedName (const SimLocationAndWeather_HumidityCondDaySchedName_type& x);

        void
        SimLocationAndWeather_HumidityCondDaySchedName (const SimLocationAndWeather_HumidityCondDaySchedName_optional& x);

        void
        SimLocationAndWeather_HumidityCondDaySchedName (::std::auto_ptr< SimLocationAndWeather_HumidityCondDaySchedName_type > p);

        // SimLocationAndWeather_HumidityRatioatMaxDry_Bulb
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_type > SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_traits;

        const SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional&
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb () const;

        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional&
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb ();

        void
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb (const SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_type& x);

        void
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb (const SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional& x);

        // SimLocationAndWeather_EnthalpyatMaxDry_Bulb
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_EnthalpyatMaxDry_Bulb_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_EnthalpyatMaxDry_Bulb_type > SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_EnthalpyatMaxDry_Bulb_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_EnthalpyatMaxDry_Bulb_traits;

        const SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional&
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb () const;

        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional&
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb ();

        void
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb (const SimLocationAndWeather_EnthalpyatMaxDry_Bulb_type& x);

        void
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb (const SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional& x);

        // SimLocationAndWeather_DailyWet_BulbTempRange
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_DailyWet_BulbTempRange_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DailyWet_BulbTempRange_type > SimLocationAndWeather_DailyWet_BulbTempRange_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DailyWet_BulbTempRange_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_DailyWet_BulbTempRange_traits;

        const SimLocationAndWeather_DailyWet_BulbTempRange_optional&
        SimLocationAndWeather_DailyWet_BulbTempRange () const;

        SimLocationAndWeather_DailyWet_BulbTempRange_optional&
        SimLocationAndWeather_DailyWet_BulbTempRange ();

        void
        SimLocationAndWeather_DailyWet_BulbTempRange (const SimLocationAndWeather_DailyWet_BulbTempRange_type& x);

        void
        SimLocationAndWeather_DailyWet_BulbTempRange (const SimLocationAndWeather_DailyWet_BulbTempRange_optional& x);

        // SimLocationAndWeather_BaromPres
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_BaromPres_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_BaromPres_type > SimLocationAndWeather_BaromPres_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_BaromPres_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_BaromPres_traits;

        const SimLocationAndWeather_BaromPres_optional&
        SimLocationAndWeather_BaromPres () const;

        SimLocationAndWeather_BaromPres_optional&
        SimLocationAndWeather_BaromPres ();

        void
        SimLocationAndWeather_BaromPres (const SimLocationAndWeather_BaromPres_type& x);

        void
        SimLocationAndWeather_BaromPres (const SimLocationAndWeather_BaromPres_optional& x);

        // SimLocationAndWeather_WindSpd
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_WindSpd_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_WindSpd_type > SimLocationAndWeather_WindSpd_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_WindSpd_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_WindSpd_traits;

        const SimLocationAndWeather_WindSpd_optional&
        SimLocationAndWeather_WindSpd () const;

        SimLocationAndWeather_WindSpd_optional&
        SimLocationAndWeather_WindSpd ();

        void
        SimLocationAndWeather_WindSpd (const SimLocationAndWeather_WindSpd_type& x);

        void
        SimLocationAndWeather_WindSpd (const SimLocationAndWeather_WindSpd_optional& x);

        // SimLocationAndWeather_WindDir
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_WindDir_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_WindDir_type > SimLocationAndWeather_WindDir_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_WindDir_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_WindDir_traits;

        const SimLocationAndWeather_WindDir_optional&
        SimLocationAndWeather_WindDir () const;

        SimLocationAndWeather_WindDir_optional&
        SimLocationAndWeather_WindDir ();

        void
        SimLocationAndWeather_WindDir (const SimLocationAndWeather_WindDir_type& x);

        void
        SimLocationAndWeather_WindDir (const SimLocationAndWeather_WindDir_optional& x);

        // SimLocationAndWeather_RainInd
        //
        typedef ::xml_schema::string SimLocationAndWeather_RainInd_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_RainInd_type > SimLocationAndWeather_RainInd_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_RainInd_type, char > SimLocationAndWeather_RainInd_traits;

        const SimLocationAndWeather_RainInd_optional&
        SimLocationAndWeather_RainInd () const;

        SimLocationAndWeather_RainInd_optional&
        SimLocationAndWeather_RainInd ();

        void
        SimLocationAndWeather_RainInd (const SimLocationAndWeather_RainInd_type& x);

        void
        SimLocationAndWeather_RainInd (const SimLocationAndWeather_RainInd_optional& x);

        void
        SimLocationAndWeather_RainInd (::std::auto_ptr< SimLocationAndWeather_RainInd_type > p);

        // SimLocationAndWeather_SnowInd
        //
        typedef ::xml_schema::string SimLocationAndWeather_SnowInd_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_SnowInd_type > SimLocationAndWeather_SnowInd_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_SnowInd_type, char > SimLocationAndWeather_SnowInd_traits;

        const SimLocationAndWeather_SnowInd_optional&
        SimLocationAndWeather_SnowInd () const;

        SimLocationAndWeather_SnowInd_optional&
        SimLocationAndWeather_SnowInd ();

        void
        SimLocationAndWeather_SnowInd (const SimLocationAndWeather_SnowInd_type& x);

        void
        SimLocationAndWeather_SnowInd (const SimLocationAndWeather_SnowInd_optional& x);

        void
        SimLocationAndWeather_SnowInd (::std::auto_ptr< SimLocationAndWeather_SnowInd_type > p);

        // SimLocationAndWeather_DylghtSavingTimeInd
        //
        typedef ::xml_schema::string SimLocationAndWeather_DylghtSavingTimeInd_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DylghtSavingTimeInd_type > SimLocationAndWeather_DylghtSavingTimeInd_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DylghtSavingTimeInd_type, char > SimLocationAndWeather_DylghtSavingTimeInd_traits;

        const SimLocationAndWeather_DylghtSavingTimeInd_optional&
        SimLocationAndWeather_DylghtSavingTimeInd () const;

        SimLocationAndWeather_DylghtSavingTimeInd_optional&
        SimLocationAndWeather_DylghtSavingTimeInd ();

        void
        SimLocationAndWeather_DylghtSavingTimeInd (const SimLocationAndWeather_DylghtSavingTimeInd_type& x);

        void
        SimLocationAndWeather_DylghtSavingTimeInd (const SimLocationAndWeather_DylghtSavingTimeInd_optional& x);

        void
        SimLocationAndWeather_DylghtSavingTimeInd (::std::auto_ptr< SimLocationAndWeather_DylghtSavingTimeInd_type > p);

        // SimLocationAndWeather_SolaThermdelInd
        //
        typedef ::xml_schema::string SimLocationAndWeather_SolaThermdelInd_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_SolaThermdelInd_type > SimLocationAndWeather_SolaThermdelInd_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_SolaThermdelInd_type, char > SimLocationAndWeather_SolaThermdelInd_traits;

        const SimLocationAndWeather_SolaThermdelInd_optional&
        SimLocationAndWeather_SolaThermdelInd () const;

        SimLocationAndWeather_SolaThermdelInd_optional&
        SimLocationAndWeather_SolaThermdelInd ();

        void
        SimLocationAndWeather_SolaThermdelInd (const SimLocationAndWeather_SolaThermdelInd_type& x);

        void
        SimLocationAndWeather_SolaThermdelInd (const SimLocationAndWeather_SolaThermdelInd_optional& x);

        void
        SimLocationAndWeather_SolaThermdelInd (::std::auto_ptr< SimLocationAndWeather_SolaThermdelInd_type > p);

        // SimLocationAndWeather_BeamSolarDaySchedName
        //
        typedef ::xml_schema::idref SimLocationAndWeather_BeamSolarDaySchedName_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_BeamSolarDaySchedName_type > SimLocationAndWeather_BeamSolarDaySchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_BeamSolarDaySchedName_type, char > SimLocationAndWeather_BeamSolarDaySchedName_traits;

        const SimLocationAndWeather_BeamSolarDaySchedName_optional&
        SimLocationAndWeather_BeamSolarDaySchedName () const;

        SimLocationAndWeather_BeamSolarDaySchedName_optional&
        SimLocationAndWeather_BeamSolarDaySchedName ();

        void
        SimLocationAndWeather_BeamSolarDaySchedName (const SimLocationAndWeather_BeamSolarDaySchedName_type& x);

        void
        SimLocationAndWeather_BeamSolarDaySchedName (const SimLocationAndWeather_BeamSolarDaySchedName_optional& x);

        void
        SimLocationAndWeather_BeamSolarDaySchedName (::std::auto_ptr< SimLocationAndWeather_BeamSolarDaySchedName_type > p);

        // SimLocationAndWeather_DiffuseSolarDaySchedName
        //
        typedef ::xml_schema::idref SimLocationAndWeather_DiffuseSolarDaySchedName_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_DiffuseSolarDaySchedName_type > SimLocationAndWeather_DiffuseSolarDaySchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_DiffuseSolarDaySchedName_type, char > SimLocationAndWeather_DiffuseSolarDaySchedName_traits;

        const SimLocationAndWeather_DiffuseSolarDaySchedName_optional&
        SimLocationAndWeather_DiffuseSolarDaySchedName () const;

        SimLocationAndWeather_DiffuseSolarDaySchedName_optional&
        SimLocationAndWeather_DiffuseSolarDaySchedName ();

        void
        SimLocationAndWeather_DiffuseSolarDaySchedName (const SimLocationAndWeather_DiffuseSolarDaySchedName_type& x);

        void
        SimLocationAndWeather_DiffuseSolarDaySchedName (const SimLocationAndWeather_DiffuseSolarDaySchedName_optional& x);

        void
        SimLocationAndWeather_DiffuseSolarDaySchedName (::std::auto_ptr< SimLocationAndWeather_DiffuseSolarDaySchedName_type > p);

        // SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_type > SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_traits;

        const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional&
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub () const;

        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional&
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub ();

        void
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_type& x);

        void
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional& x);

        // SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_type > SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_traits;

        const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional&
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud () const;

        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional&
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud ();

        void
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_type& x);

        void
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud (const SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional& x);

        // SimLocationAndWeather_SkyClearness
        //
        typedef ::xml_schema::double_ SimLocationAndWeather_SkyClearness_type;
        typedef ::xsd::cxx::tree::optional< SimLocationAndWeather_SkyClearness_type > SimLocationAndWeather_SkyClearness_optional;
        typedef ::xsd::cxx::tree::traits< SimLocationAndWeather_SkyClearness_type, char, ::xsd::cxx::tree::schema_type::double_ > SimLocationAndWeather_SkyClearness_traits;

        const SimLocationAndWeather_SkyClearness_optional&
        SimLocationAndWeather_SkyClearness () const;

        SimLocationAndWeather_SkyClearness_optional&
        SimLocationAndWeather_SkyClearness ();

        void
        SimLocationAndWeather_SkyClearness (const SimLocationAndWeather_SkyClearness_type& x);

        void
        SimLocationAndWeather_SkyClearness (const SimLocationAndWeather_SkyClearness_optional& x);

        // Constructors.
        //
        SimLocationAndWeather_DesignDay ();

        SimLocationAndWeather_DesignDay (const RefId_type&);

        SimLocationAndWeather_DesignDay (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        SimLocationAndWeather_DesignDay (const SimLocationAndWeather_DesignDay& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

        virtual SimLocationAndWeather_DesignDay*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimLocationAndWeather_DesignDay&
        operator= (const SimLocationAndWeather_DesignDay& x);

        virtual 
        ~SimLocationAndWeather_DesignDay ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimLocationAndWeather_Name_optional SimLocationAndWeather_Name_;
        SimLocationAndWeather_Month_optional SimLocationAndWeather_Month_;
        SimLocationAndWeather_DayOfMonth_optional SimLocationAndWeather_DayOfMonth_;
        SimLocationAndWeather_DayType_optional SimLocationAndWeather_DayType_;
        SimLocationAndWeather_MaxDryBulbTemp_optional SimLocationAndWeather_MaxDryBulbTemp_;
        SimLocationAndWeather_DailyDry_BulbTempRange_optional SimLocationAndWeather_DailyDry_BulbTempRange_;
        SimLocationAndWeather_DryBulbTempRangeModType_optional SimLocationAndWeather_DryBulbTempRangeModType_;
        SimLocationAndWeather_DryBulbTempRangeModDaySchedName_optional SimLocationAndWeather_DryBulbTempRangeModDaySchedName_;
        SimLocationAndWeather_HumidityCondType_optional SimLocationAndWeather_HumidityCondType_;
        SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_optional SimLocationAndWeather_WetbulborDewPointatMaxDry_Bulb_;
        SimLocationAndWeather_HumidityCondDaySchedName_optional SimLocationAndWeather_HumidityCondDaySchedName_;
        SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_optional SimLocationAndWeather_HumidityRatioatMaxDry_Bulb_;
        SimLocationAndWeather_EnthalpyatMaxDry_Bulb_optional SimLocationAndWeather_EnthalpyatMaxDry_Bulb_;
        SimLocationAndWeather_DailyWet_BulbTempRange_optional SimLocationAndWeather_DailyWet_BulbTempRange_;
        SimLocationAndWeather_BaromPres_optional SimLocationAndWeather_BaromPres_;
        SimLocationAndWeather_WindSpd_optional SimLocationAndWeather_WindSpd_;
        SimLocationAndWeather_WindDir_optional SimLocationAndWeather_WindDir_;
        SimLocationAndWeather_RainInd_optional SimLocationAndWeather_RainInd_;
        SimLocationAndWeather_SnowInd_optional SimLocationAndWeather_SnowInd_;
        SimLocationAndWeather_DylghtSavingTimeInd_optional SimLocationAndWeather_DylghtSavingTimeInd_;
        SimLocationAndWeather_SolaThermdelInd_optional SimLocationAndWeather_SolaThermdelInd_;
        SimLocationAndWeather_BeamSolarDaySchedName_optional SimLocationAndWeather_BeamSolarDaySchedName_;
        SimLocationAndWeather_DiffuseSolarDaySchedName_optional SimLocationAndWeather_DiffuseSolarDaySchedName_;
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_optional SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforBeamIrradiance_taub_;
        SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_optional SimLocationAndWeather_ASHRAEClearSkyOpticalDepthforDiffuseIrradiance_taud_;
        SimLocationAndWeather_SkyClearness_optional SimLocationAndWeather_SkyClearness_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_LOCATION_AND_WEATHER_DESIGN_DAY_HXX
