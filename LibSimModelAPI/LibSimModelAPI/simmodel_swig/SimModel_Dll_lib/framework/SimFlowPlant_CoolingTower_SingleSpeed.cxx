// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_CoolingTower_SingleSpeed.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_CoolingTower_SingleSpeed
      // 

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_Name_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_Name_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_WaterInletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterInletNodeName () const
      {
        return this->SimFlowPlant_WaterInletNodeName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_WaterInletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterInletNodeName ()
      {
        return this->SimFlowPlant_WaterInletNodeName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_type& x)
      {
        this->SimFlowPlant_WaterInletNodeName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterInletNodeName (const SimFlowPlant_WaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_WaterInletNodeName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterInletNodeName (::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > x)
      {
        this->SimFlowPlant_WaterInletNodeName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_WaterOutletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterOutletNodeName () const
      {
        return this->SimFlowPlant_WaterOutletNodeName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_WaterOutletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterOutletNodeName ()
      {
        return this->SimFlowPlant_WaterOutletNodeName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_WaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterOutletNodeName (const SimFlowPlant_WaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_WaterOutletNodeName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_WaterOutletNodeName (::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_WaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_NomCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NomCap () const
      {
        return this->SimFlowPlant_NomCap_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_NomCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NomCap ()
      {
        return this->SimFlowPlant_NomCap_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_type& x)
      {
        this->SimFlowPlant_NomCap_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NomCap (const SimFlowPlant_NomCap_optional& x)
      {
        this->SimFlowPlant_NomCap_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignWaterFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignWaterFlowRate_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignWaterFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignWaterFlowRate_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignWaterFlowRate_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignWaterFlowRate (const SimFlowPlant_DesignWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignWaterFlowRate_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_SizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SizingFactor () const
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_SizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SizingFactor ()
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x)
      {
        this->SimFlowPlant_SizingFactor_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x)
      {
        this->SimFlowPlant_SizingFactor_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatCap () const
      {
        return this->SimFlowPlant_BasinHeatCap_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatCap ()
      {
        return this->SimFlowPlant_BasinHeatCap_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_type& x)
      {
        this->SimFlowPlant_BasinHeatCap_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatCap (const SimFlowPlant_BasinHeatCap_optional& x)
      {
        this->SimFlowPlant_BasinHeatCap_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatSetpointTemp_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatSetpointTemp () const
      {
        return this->SimFlowPlant_BasinHeatSetpointTemp_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatSetpointTemp_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatSetpointTemp ()
      {
        return this->SimFlowPlant_BasinHeatSetpointTemp_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_type& x)
      {
        this->SimFlowPlant_BasinHeatSetpointTemp_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatSetpointTemp (const SimFlowPlant_BasinHeatSetpointTemp_optional& x)
      {
        this->SimFlowPlant_BasinHeatSetpointTemp_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatOperatSchedName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatOperatSchedName () const
      {
        return this->SimFlowPlant_BasinHeatOperatSchedName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BasinHeatOperatSchedName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatOperatSchedName ()
      {
        return this->SimFlowPlant_BasinHeatOperatSchedName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_type& x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatOperatSchedName (const SimFlowPlant_BasinHeatOperatSchedName_optional& x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BasinHeatOperatSchedName (::std::auto_ptr< SimFlowPlant_BasinHeatOperatSchedName_type > x)
      {
        this->SimFlowPlant_BasinHeatOperatSchedName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignAirFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignAirFlowRate () const
      {
        return this->SimFlowPlant_DesignAirFlowRate_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignAirFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignAirFlowRate ()
      {
        return this->SimFlowPlant_DesignAirFlowRate_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignAirFlowRate (const SimFlowPlant_DesignAirFlowRate_type& x)
      {
        this->SimFlowPlant_DesignAirFlowRate_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignAirFlowRate (const SimFlowPlant_DesignAirFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignAirFlowRate_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignFanPwr_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignFanPwr () const
      {
        return this->SimFlowPlant_DesignFanPwr_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignFanPwr_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignFanPwr ()
      {
        return this->SimFlowPlant_DesignFanPwr_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignFanPwr (const SimFlowPlant_DesignFanPwr_type& x)
      {
        this->SimFlowPlant_DesignFanPwr_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignFanPwr (const SimFlowPlant_DesignFanPwr_optional& x)
      {
        this->SimFlowPlant_DesignFanPwr_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignU_FactorTimesAreaValue_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignU_FactorTimesAreaValue () const
      {
        return this->SimFlowPlant_DesignU_FactorTimesAreaValue_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DesignU_FactorTimesAreaValue_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignU_FactorTimesAreaValue ()
      {
        return this->SimFlowPlant_DesignU_FactorTimesAreaValue_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignU_FactorTimesAreaValue (const SimFlowPlant_DesignU_FactorTimesAreaValue_type& x)
      {
        this->SimFlowPlant_DesignU_FactorTimesAreaValue_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DesignU_FactorTimesAreaValue (const SimFlowPlant_DesignU_FactorTimesAreaValue_optional& x)
      {
        this->SimFlowPlant_DesignU_FactorTimesAreaValue_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectAirFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRate () const
      {
        return this->SimFlowPlant_FreeConvectAirFlowRate_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectAirFlowRate_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRate ()
      {
        return this->SimFlowPlant_FreeConvectAirFlowRate_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRate (const SimFlowPlant_FreeConvectAirFlowRate_type& x)
      {
        this->SimFlowPlant_FreeConvectAirFlowRate_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRate (const SimFlowPlant_FreeConvectAirFlowRate_optional& x)
      {
        this->SimFlowPlant_FreeConvectAirFlowRate_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectAirFlowRateSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRateSizingFactor () const
      {
        return this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectAirFlowRateSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRateSizingFactor ()
      {
        return this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRateSizingFactor (const SimFlowPlant_FreeConvectAirFlowRateSizingFactor_type& x)
      {
        this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectAirFlowRateSizingFactor (const SimFlowPlant_FreeConvectAirFlowRateSizingFactor_optional& x)
      {
        this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectU_FactorTimesAreaValue_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValue () const
      {
        return this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectU_FactorTimesAreaValue_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValue ()
      {
        return this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValue (const SimFlowPlant_FreeConvectU_FactorTimesAreaValue_type& x)
      {
        this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValue (const SimFlowPlant_FreeConvectU_FactorTimesAreaValue_optional& x)
      {
        this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor () const
      {
        return this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor ()
      {
        return this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor (const SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_type& x)
      {
        this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor (const SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_optional& x)
      {
        this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_PerfInputMeth_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_PerfInputMeth () const
      {
        return this->SimFlowPlant_PerfInputMeth_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_PerfInputMeth_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_PerfInputMeth ()
      {
        return this->SimFlowPlant_PerfInputMeth_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_PerfInputMeth (const SimFlowPlant_PerfInputMeth_type& x)
      {
        this->SimFlowPlant_PerfInputMeth_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_PerfInputMeth (const SimFlowPlant_PerfInputMeth_optional& x)
      {
        this->SimFlowPlant_PerfInputMeth_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_PerfInputMeth (::std::auto_ptr< SimFlowPlant_PerfInputMeth_type > x)
      {
        this->SimFlowPlant_PerfInputMeth_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_HeatRejectionCapandNomCapSizingRatio () const
      {
        return this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_HeatRejectionCapandNomCapSizingRatio ()
      {
        return this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_HeatRejectionCapandNomCapSizingRatio (const SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_type& x)
      {
        this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_HeatRejectionCapandNomCapSizingRatio (const SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_optional& x)
      {
        this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvCap () const
      {
        return this->SimFlowPlant_FreeConvCap_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvCap_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvCap ()
      {
        return this->SimFlowPlant_FreeConvCap_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvCap (const SimFlowPlant_FreeConvCap_type& x)
      {
        this->SimFlowPlant_FreeConvCap_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvCap (const SimFlowPlant_FreeConvCap_optional& x)
      {
        this->SimFlowPlant_FreeConvCap_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectNomCapSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectNomCapSizingFactor () const
      {
        return this->SimFlowPlant_FreeConvectNomCapSizingFactor_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_FreeConvectNomCapSizingFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectNomCapSizingFactor ()
      {
        return this->SimFlowPlant_FreeConvectNomCapSizingFactor_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectNomCapSizingFactor (const SimFlowPlant_FreeConvectNomCapSizingFactor_type& x)
      {
        this->SimFlowPlant_FreeConvectNomCapSizingFactor_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_FreeConvectNomCapSizingFactor (const SimFlowPlant_FreeConvectNomCapSizingFactor_optional& x)
      {
        this->SimFlowPlant_FreeConvectNomCapSizingFactor_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_EvapLossMode_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossMode () const
      {
        return this->SimFlowPlant_EvapLossMode_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_EvapLossMode_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossMode ()
      {
        return this->SimFlowPlant_EvapLossMode_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossMode (const SimFlowPlant_EvapLossMode_type& x)
      {
        this->SimFlowPlant_EvapLossMode_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossMode (const SimFlowPlant_EvapLossMode_optional& x)
      {
        this->SimFlowPlant_EvapLossMode_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossMode (::std::auto_ptr< SimFlowPlant_EvapLossMode_type > x)
      {
        this->SimFlowPlant_EvapLossMode_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_EvapLossFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossFactor () const
      {
        return this->SimFlowPlant_EvapLossFactor_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_EvapLossFactor_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossFactor ()
      {
        return this->SimFlowPlant_EvapLossFactor_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossFactor (const SimFlowPlant_EvapLossFactor_type& x)
      {
        this->SimFlowPlant_EvapLossFactor_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_EvapLossFactor (const SimFlowPlant_EvapLossFactor_optional& x)
      {
        this->SimFlowPlant_EvapLossFactor_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DriftLossPercent_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DriftLossPercent () const
      {
        return this->SimFlowPlant_DriftLossPercent_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_DriftLossPercent_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DriftLossPercent ()
      {
        return this->SimFlowPlant_DriftLossPercent_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DriftLossPercent (const SimFlowPlant_DriftLossPercent_type& x)
      {
        this->SimFlowPlant_DriftLossPercent_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_DriftLossPercent (const SimFlowPlant_DriftLossPercent_optional& x)
      {
        this->SimFlowPlant_DriftLossPercent_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownCalcMode_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownCalcMode () const
      {
        return this->SimFlowPlant_BlowdownCalcMode_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownCalcMode_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownCalcMode ()
      {
        return this->SimFlowPlant_BlowdownCalcMode_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownCalcMode (const SimFlowPlant_BlowdownCalcMode_type& x)
      {
        this->SimFlowPlant_BlowdownCalcMode_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownCalcMode (const SimFlowPlant_BlowdownCalcMode_optional& x)
      {
        this->SimFlowPlant_BlowdownCalcMode_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownCalcMode (::std::auto_ptr< SimFlowPlant_BlowdownCalcMode_type > x)
      {
        this->SimFlowPlant_BlowdownCalcMode_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownConcentrationRatio_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownConcentrationRatio () const
      {
        return this->SimFlowPlant_BlowdownConcentrationRatio_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownConcentrationRatio_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownConcentrationRatio ()
      {
        return this->SimFlowPlant_BlowdownConcentrationRatio_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownConcentrationRatio (const SimFlowPlant_BlowdownConcentrationRatio_type& x)
      {
        this->SimFlowPlant_BlowdownConcentrationRatio_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownConcentrationRatio (const SimFlowPlant_BlowdownConcentrationRatio_optional& x)
      {
        this->SimFlowPlant_BlowdownConcentrationRatio_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownMakeupWaterUsageSchedName () const
      {
        return this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownMakeupWaterUsageSchedName ()
      {
        return this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownMakeupWaterUsageSchedName (const SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type& x)
      {
        this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownMakeupWaterUsageSchedName (const SimFlowPlant_BlowdownMakeupWaterUsageSchedName_optional& x)
      {
        this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_BlowdownMakeupWaterUsageSchedName (::std::auto_ptr< SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type > x)
      {
        this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_SupWaterStoTankName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SupWaterStoTankName () const
      {
        return this->SimFlowPlant_SupWaterStoTankName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_SupWaterStoTankName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SupWaterStoTankName ()
      {
        return this->SimFlowPlant_SupWaterStoTankName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SupWaterStoTankName (const SimFlowPlant_SupWaterStoTankName_type& x)
      {
        this->SimFlowPlant_SupWaterStoTankName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SupWaterStoTankName (const SimFlowPlant_SupWaterStoTankName_optional& x)
      {
        this->SimFlowPlant_SupWaterStoTankName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_SupWaterStoTankName (::std::auto_ptr< SimFlowPlant_SupWaterStoTankName_type > x)
      {
        this->SimFlowPlant_SupWaterStoTankName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_OutdrAirInletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_OutdrAirInletNodeName () const
      {
        return this->SimFlowPlant_OutdrAirInletNodeName_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_OutdrAirInletNodeName_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_OutdrAirInletNodeName ()
      {
        return this->SimFlowPlant_OutdrAirInletNodeName_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_type& x)
      {
        this->SimFlowPlant_OutdrAirInletNodeName_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_OutdrAirInletNodeName (const SimFlowPlant_OutdrAirInletNodeName_optional& x)
      {
        this->SimFlowPlant_OutdrAirInletNodeName_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_OutdrAirInletNodeName (::std::auto_ptr< SimFlowPlant_OutdrAirInletNodeName_type > x)
      {
        this->SimFlowPlant_OutdrAirInletNodeName_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CapCntl_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CapCntl () const
      {
        return this->SimFlowPlant_CapCntl_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CapCntl_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CapCntl ()
      {
        return this->SimFlowPlant_CapCntl_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CapCntl (const SimFlowPlant_CapCntl_type& x)
      {
        this->SimFlowPlant_CapCntl_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CapCntl (const SimFlowPlant_CapCntl_optional& x)
      {
        this->SimFlowPlant_CapCntl_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CapCntl (::std::auto_ptr< SimFlowPlant_CapCntl_type > x)
      {
        this->SimFlowPlant_CapCntl_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_NumberOfCells_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NumberOfCells () const
      {
        return this->SimFlowPlant_NumberOfCells_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_NumberOfCells_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NumberOfCells ()
      {
        return this->SimFlowPlant_NumberOfCells_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NumberOfCells (const SimFlowPlant_NumberOfCells_type& x)
      {
        this->SimFlowPlant_NumberOfCells_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_NumberOfCells (const SimFlowPlant_NumberOfCells_optional& x)
      {
        this->SimFlowPlant_NumberOfCells_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellControl_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellControl () const
      {
        return this->SimFlowPlant_CellControl_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellControl_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellControl ()
      {
        return this->SimFlowPlant_CellControl_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellControl (const SimFlowPlant_CellControl_type& x)
      {
        this->SimFlowPlant_CellControl_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellControl (const SimFlowPlant_CellControl_optional& x)
      {
        this->SimFlowPlant_CellControl_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellControl (::std::auto_ptr< SimFlowPlant_CellControl_type > x)
      {
        this->SimFlowPlant_CellControl_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellMinWaterFlowRateFraction_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMinWaterFlowRateFraction () const
      {
        return this->SimFlowPlant_CellMinWaterFlowRateFraction_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellMinWaterFlowRateFraction_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMinWaterFlowRateFraction ()
      {
        return this->SimFlowPlant_CellMinWaterFlowRateFraction_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMinWaterFlowRateFraction (const SimFlowPlant_CellMinWaterFlowRateFraction_type& x)
      {
        this->SimFlowPlant_CellMinWaterFlowRateFraction_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMinWaterFlowRateFraction (const SimFlowPlant_CellMinWaterFlowRateFraction_optional& x)
      {
        this->SimFlowPlant_CellMinWaterFlowRateFraction_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellMaxWaterFlowRateFraction_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMaxWaterFlowRateFraction () const
      {
        return this->SimFlowPlant_CellMaxWaterFlowRateFraction_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::SimFlowPlant_CellMaxWaterFlowRateFraction_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMaxWaterFlowRateFraction ()
      {
        return this->SimFlowPlant_CellMaxWaterFlowRateFraction_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMaxWaterFlowRateFraction (const SimFlowPlant_CellMaxWaterFlowRateFraction_type& x)
      {
        this->SimFlowPlant_CellMaxWaterFlowRateFraction_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CellMaxWaterFlowRateFraction (const SimFlowPlant_CellMaxWaterFlowRateFraction_optional& x)
      {
        this->SimFlowPlant_CellMaxWaterFlowRateFraction_ = x;
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::T24HeatRejectFanType_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      T24HeatRejectFanType () const
      {
        return this->T24HeatRejectFanType_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::T24HeatRejectFanType_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      T24HeatRejectFanType ()
      {
        return this->T24HeatRejectFanType_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24HeatRejectFanType (const T24HeatRejectFanType_type& x)
      {
        this->T24HeatRejectFanType_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24HeatRejectFanType (const T24HeatRejectFanType_optional& x)
      {
        this->T24HeatRejectFanType_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24HeatRejectFanType (::std::auto_ptr< T24HeatRejectFanType_type > x)
      {
        this->T24HeatRejectFanType_.set (x);
      }

      const SimFlowPlant_CoolingTower_SingleSpeed::T24ConstructStatus2_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      T24ConstructStatus2 () const
      {
        return this->T24ConstructStatus2_;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::T24ConstructStatus2_optional& SimFlowPlant_CoolingTower_SingleSpeed::
      T24ConstructStatus2 ()
      {
        return this->T24ConstructStatus2_;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24ConstructStatus2 (const T24ConstructStatus2_type& x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24ConstructStatus2 (const T24ConstructStatus2_optional& x)
      {
        this->T24ConstructStatus2_ = x;
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      T24ConstructStatus2 (::std::auto_ptr< T24ConstructStatus2_type > x)
      {
        this->T24ConstructStatus2_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_CoolingTower_SingleSpeed
      //

      SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CoolingTower_SingleSpeed ()
      : ::schema::simxml::MepModel::SimFlowPlant_CoolingTower (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_DesignWaterFlowRate_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_DesignAirFlowRate_ (this),
        SimFlowPlant_DesignFanPwr_ (this),
        SimFlowPlant_DesignU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectAirFlowRate_ (this),
        SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ (this),
        SimFlowPlant_PerfInputMeth_ (this),
        SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowPlant_FreeConvCap_ (this),
        SimFlowPlant_FreeConvectNomCapSizingFactor_ (this),
        SimFlowPlant_EvapLossMode_ (this),
        SimFlowPlant_EvapLossFactor_ (this),
        SimFlowPlant_DriftLossPercent_ (this),
        SimFlowPlant_BlowdownCalcMode_ (this),
        SimFlowPlant_BlowdownConcentrationRatio_ (this),
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ (this),
        SimFlowPlant_SupWaterStoTankName_ (this),
        SimFlowPlant_OutdrAirInletNodeName_ (this),
        SimFlowPlant_CapCntl_ (this),
        SimFlowPlant_NumberOfCells_ (this),
        SimFlowPlant_CellControl_ (this),
        SimFlowPlant_CellMinWaterFlowRateFraction_ (this),
        SimFlowPlant_CellMaxWaterFlowRateFraction_ (this),
        T24HeatRejectFanType_ (this),
        T24ConstructStatus2_ (this)
      {
      }

      SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CoolingTower_SingleSpeed (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_CoolingTower (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_DesignWaterFlowRate_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_DesignAirFlowRate_ (this),
        SimFlowPlant_DesignFanPwr_ (this),
        SimFlowPlant_DesignU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectAirFlowRate_ (this),
        SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ (this),
        SimFlowPlant_PerfInputMeth_ (this),
        SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowPlant_FreeConvCap_ (this),
        SimFlowPlant_FreeConvectNomCapSizingFactor_ (this),
        SimFlowPlant_EvapLossMode_ (this),
        SimFlowPlant_EvapLossFactor_ (this),
        SimFlowPlant_DriftLossPercent_ (this),
        SimFlowPlant_BlowdownCalcMode_ (this),
        SimFlowPlant_BlowdownConcentrationRatio_ (this),
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ (this),
        SimFlowPlant_SupWaterStoTankName_ (this),
        SimFlowPlant_OutdrAirInletNodeName_ (this),
        SimFlowPlant_CapCntl_ (this),
        SimFlowPlant_NumberOfCells_ (this),
        SimFlowPlant_CellControl_ (this),
        SimFlowPlant_CellMinWaterFlowRateFraction_ (this),
        SimFlowPlant_CellMaxWaterFlowRateFraction_ (this),
        T24HeatRejectFanType_ (this),
        T24ConstructStatus2_ (this)
      {
      }

      SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CoolingTower_SingleSpeed (const SimFlowPlant_CoolingTower_SingleSpeed& x,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_CoolingTower (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_WaterInletNodeName_ (x.SimFlowPlant_WaterInletNodeName_, f, this),
        SimFlowPlant_WaterOutletNodeName_ (x.SimFlowPlant_WaterOutletNodeName_, f, this),
        SimFlowPlant_NomCap_ (x.SimFlowPlant_NomCap_, f, this),
        SimFlowPlant_DesignWaterFlowRate_ (x.SimFlowPlant_DesignWaterFlowRate_, f, this),
        SimFlowPlant_SizingFactor_ (x.SimFlowPlant_SizingFactor_, f, this),
        SimFlowPlant_BasinHeatCap_ (x.SimFlowPlant_BasinHeatCap_, f, this),
        SimFlowPlant_BasinHeatSetpointTemp_ (x.SimFlowPlant_BasinHeatSetpointTemp_, f, this),
        SimFlowPlant_BasinHeatOperatSchedName_ (x.SimFlowPlant_BasinHeatOperatSchedName_, f, this),
        SimFlowPlant_DesignAirFlowRate_ (x.SimFlowPlant_DesignAirFlowRate_, f, this),
        SimFlowPlant_DesignFanPwr_ (x.SimFlowPlant_DesignFanPwr_, f, this),
        SimFlowPlant_DesignU_FactorTimesAreaValue_ (x.SimFlowPlant_DesignU_FactorTimesAreaValue_, f, this),
        SimFlowPlant_FreeConvectAirFlowRate_ (x.SimFlowPlant_FreeConvectAirFlowRate_, f, this),
        SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ (x.SimFlowPlant_FreeConvectAirFlowRateSizingFactor_, f, this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ (x.SimFlowPlant_FreeConvectU_FactorTimesAreaValue_, f, this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ (x.SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_, f, this),
        SimFlowPlant_PerfInputMeth_ (x.SimFlowPlant_PerfInputMeth_, f, this),
        SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ (x.SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_, f, this),
        SimFlowPlant_FreeConvCap_ (x.SimFlowPlant_FreeConvCap_, f, this),
        SimFlowPlant_FreeConvectNomCapSizingFactor_ (x.SimFlowPlant_FreeConvectNomCapSizingFactor_, f, this),
        SimFlowPlant_EvapLossMode_ (x.SimFlowPlant_EvapLossMode_, f, this),
        SimFlowPlant_EvapLossFactor_ (x.SimFlowPlant_EvapLossFactor_, f, this),
        SimFlowPlant_DriftLossPercent_ (x.SimFlowPlant_DriftLossPercent_, f, this),
        SimFlowPlant_BlowdownCalcMode_ (x.SimFlowPlant_BlowdownCalcMode_, f, this),
        SimFlowPlant_BlowdownConcentrationRatio_ (x.SimFlowPlant_BlowdownConcentrationRatio_, f, this),
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ (x.SimFlowPlant_BlowdownMakeupWaterUsageSchedName_, f, this),
        SimFlowPlant_SupWaterStoTankName_ (x.SimFlowPlant_SupWaterStoTankName_, f, this),
        SimFlowPlant_OutdrAirInletNodeName_ (x.SimFlowPlant_OutdrAirInletNodeName_, f, this),
        SimFlowPlant_CapCntl_ (x.SimFlowPlant_CapCntl_, f, this),
        SimFlowPlant_NumberOfCells_ (x.SimFlowPlant_NumberOfCells_, f, this),
        SimFlowPlant_CellControl_ (x.SimFlowPlant_CellControl_, f, this),
        SimFlowPlant_CellMinWaterFlowRateFraction_ (x.SimFlowPlant_CellMinWaterFlowRateFraction_, f, this),
        SimFlowPlant_CellMaxWaterFlowRateFraction_ (x.SimFlowPlant_CellMaxWaterFlowRateFraction_, f, this),
        T24HeatRejectFanType_ (x.T24HeatRejectFanType_, f, this),
        T24ConstructStatus2_ (x.T24ConstructStatus2_, f, this)
      {
      }

      SimFlowPlant_CoolingTower_SingleSpeed::
      SimFlowPlant_CoolingTower_SingleSpeed (const ::xercesc::DOMElement& e,
                                             ::xml_schema::flags f,
                                             ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_CoolingTower (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_WaterInletNodeName_ (this),
        SimFlowPlant_WaterOutletNodeName_ (this),
        SimFlowPlant_NomCap_ (this),
        SimFlowPlant_DesignWaterFlowRate_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_BasinHeatCap_ (this),
        SimFlowPlant_BasinHeatSetpointTemp_ (this),
        SimFlowPlant_BasinHeatOperatSchedName_ (this),
        SimFlowPlant_DesignAirFlowRate_ (this),
        SimFlowPlant_DesignFanPwr_ (this),
        SimFlowPlant_DesignU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectAirFlowRate_ (this),
        SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ (this),
        SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ (this),
        SimFlowPlant_PerfInputMeth_ (this),
        SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ (this),
        SimFlowPlant_FreeConvCap_ (this),
        SimFlowPlant_FreeConvectNomCapSizingFactor_ (this),
        SimFlowPlant_EvapLossMode_ (this),
        SimFlowPlant_EvapLossFactor_ (this),
        SimFlowPlant_DriftLossPercent_ (this),
        SimFlowPlant_BlowdownCalcMode_ (this),
        SimFlowPlant_BlowdownConcentrationRatio_ (this),
        SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ (this),
        SimFlowPlant_SupWaterStoTankName_ (this),
        SimFlowPlant_OutdrAirInletNodeName_ (this),
        SimFlowPlant_CapCntl_ (this),
        SimFlowPlant_NumberOfCells_ (this),
        SimFlowPlant_CellControl_ (this),
        SimFlowPlant_CellMinWaterFlowRateFraction_ (this),
        SimFlowPlant_CellMaxWaterFlowRateFraction_ (this),
        T24HeatRejectFanType_ (this),
        T24ConstructStatus2_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_CoolingTower_SingleSpeed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_CoolingTower::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_WaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_WaterInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_WaterInletNodeName_type > r (
              SimFlowPlant_WaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_WaterInletNodeName_)
            {
              this->SimFlowPlant_WaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_WaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_WaterOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_WaterOutletNodeName_type > r (
              SimFlowPlant_WaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_WaterOutletNodeName_)
            {
              this->SimFlowPlant_WaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NomCap
          //
          if (n.name () == "SimFlowPlant_NomCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NomCap_)
            {
              this->SimFlowPlant_NomCap_.set (SimFlowPlant_NomCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignWaterFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignWaterFlowRate_)
            {
              this->SimFlowPlant_DesignWaterFlowRate_.set (SimFlowPlant_DesignWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SizingFactor
          //
          if (n.name () == "SimFlowPlant_SizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_SizingFactor_)
            {
              this->SimFlowPlant_SizingFactor_.set (SimFlowPlant_SizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BasinHeatCap
          //
          if (n.name () == "SimFlowPlant_BasinHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BasinHeatCap_)
            {
              this->SimFlowPlant_BasinHeatCap_.set (SimFlowPlant_BasinHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BasinHeatSetpointTemp
          //
          if (n.name () == "SimFlowPlant_BasinHeatSetpointTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BasinHeatSetpointTemp_)
            {
              this->SimFlowPlant_BasinHeatSetpointTemp_.set (SimFlowPlant_BasinHeatSetpointTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BasinHeatOperatSchedName
          //
          if (n.name () == "SimFlowPlant_BasinHeatOperatSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BasinHeatOperatSchedName_type > r (
              SimFlowPlant_BasinHeatOperatSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BasinHeatOperatSchedName_)
            {
              this->SimFlowPlant_BasinHeatOperatSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignAirFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignAirFlowRate_)
            {
              this->SimFlowPlant_DesignAirFlowRate_.set (SimFlowPlant_DesignAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignFanPwr
          //
          if (n.name () == "SimFlowPlant_DesignFanPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignFanPwr_)
            {
              this->SimFlowPlant_DesignFanPwr_.set (SimFlowPlant_DesignFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignU_FactorTimesAreaValue
          //
          if (n.name () == "SimFlowPlant_DesignU_FactorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DesignU_FactorTimesAreaValue_)
            {
              this->SimFlowPlant_DesignU_FactorTimesAreaValue_.set (SimFlowPlant_DesignU_FactorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvectAirFlowRate
          //
          if (n.name () == "SimFlowPlant_FreeConvectAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvectAirFlowRate_)
            {
              this->SimFlowPlant_FreeConvectAirFlowRate_.set (SimFlowPlant_FreeConvectAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvectAirFlowRateSizingFactor
          //
          if (n.name () == "SimFlowPlant_FreeConvectAirFlowRateSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_)
            {
              this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_.set (SimFlowPlant_FreeConvectAirFlowRateSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvectU_FactorTimesAreaValue
          //
          if (n.name () == "SimFlowPlant_FreeConvectU_FactorTimesAreaValue" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_)
            {
              this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_.set (SimFlowPlant_FreeConvectU_FactorTimesAreaValue_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor
          //
          if (n.name () == "SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_)
            {
              this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_.set (SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_PerfInputMeth
          //
          if (n.name () == "SimFlowPlant_PerfInputMeth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_PerfInputMeth_type > r (
              SimFlowPlant_PerfInputMeth_traits::create (i, f, this));

            if (!this->SimFlowPlant_PerfInputMeth_)
            {
              this->SimFlowPlant_PerfInputMeth_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatRejectionCapandNomCapSizingRatio
          //
          if (n.name () == "SimFlowPlant_HeatRejectionCapandNomCapSizingRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_)
            {
              this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_.set (SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvCap
          //
          if (n.name () == "SimFlowPlant_FreeConvCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvCap_)
            {
              this->SimFlowPlant_FreeConvCap_.set (SimFlowPlant_FreeConvCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FreeConvectNomCapSizingFactor
          //
          if (n.name () == "SimFlowPlant_FreeConvectNomCapSizingFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_FreeConvectNomCapSizingFactor_)
            {
              this->SimFlowPlant_FreeConvectNomCapSizingFactor_.set (SimFlowPlant_FreeConvectNomCapSizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_EvapLossMode
          //
          if (n.name () == "SimFlowPlant_EvapLossMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_EvapLossMode_type > r (
              SimFlowPlant_EvapLossMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_EvapLossMode_)
            {
              this->SimFlowPlant_EvapLossMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_EvapLossFactor
          //
          if (n.name () == "SimFlowPlant_EvapLossFactor" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_EvapLossFactor_)
            {
              this->SimFlowPlant_EvapLossFactor_.set (SimFlowPlant_EvapLossFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DriftLossPercent
          //
          if (n.name () == "SimFlowPlant_DriftLossPercent" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_DriftLossPercent_)
            {
              this->SimFlowPlant_DriftLossPercent_.set (SimFlowPlant_DriftLossPercent_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BlowdownCalcMode
          //
          if (n.name () == "SimFlowPlant_BlowdownCalcMode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BlowdownCalcMode_type > r (
              SimFlowPlant_BlowdownCalcMode_traits::create (i, f, this));

            if (!this->SimFlowPlant_BlowdownCalcMode_)
            {
              this->SimFlowPlant_BlowdownCalcMode_.set (r);
              continue;
            }
          }

          // SimFlowPlant_BlowdownConcentrationRatio
          //
          if (n.name () == "SimFlowPlant_BlowdownConcentrationRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_BlowdownConcentrationRatio_)
            {
              this->SimFlowPlant_BlowdownConcentrationRatio_.set (SimFlowPlant_BlowdownConcentrationRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_BlowdownMakeupWaterUsageSchedName
          //
          if (n.name () == "SimFlowPlant_BlowdownMakeupWaterUsageSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_BlowdownMakeupWaterUsageSchedName_type > r (
              SimFlowPlant_BlowdownMakeupWaterUsageSchedName_traits::create (i, f, this));

            if (!this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_)
            {
              this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SupWaterStoTankName
          //
          if (n.name () == "SimFlowPlant_SupWaterStoTankName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SupWaterStoTankName_type > r (
              SimFlowPlant_SupWaterStoTankName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SupWaterStoTankName_)
            {
              this->SimFlowPlant_SupWaterStoTankName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_OutdrAirInletNodeName
          //
          if (n.name () == "SimFlowPlant_OutdrAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_OutdrAirInletNodeName_type > r (
              SimFlowPlant_OutdrAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_OutdrAirInletNodeName_)
            {
              this->SimFlowPlant_OutdrAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CapCntl
          //
          if (n.name () == "SimFlowPlant_CapCntl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CapCntl_type > r (
              SimFlowPlant_CapCntl_traits::create (i, f, this));

            if (!this->SimFlowPlant_CapCntl_)
            {
              this->SimFlowPlant_CapCntl_.set (r);
              continue;
            }
          }

          // SimFlowPlant_NumberOfCells
          //
          if (n.name () == "SimFlowPlant_NumberOfCells" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_NumberOfCells_)
            {
              this->SimFlowPlant_NumberOfCells_.set (SimFlowPlant_NumberOfCells_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CellControl
          //
          if (n.name () == "SimFlowPlant_CellControl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CellControl_type > r (
              SimFlowPlant_CellControl_traits::create (i, f, this));

            if (!this->SimFlowPlant_CellControl_)
            {
              this->SimFlowPlant_CellControl_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CellMinWaterFlowRateFraction
          //
          if (n.name () == "SimFlowPlant_CellMinWaterFlowRateFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_CellMinWaterFlowRateFraction_)
            {
              this->SimFlowPlant_CellMinWaterFlowRateFraction_.set (SimFlowPlant_CellMinWaterFlowRateFraction_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CellMaxWaterFlowRateFraction
          //
          if (n.name () == "SimFlowPlant_CellMaxWaterFlowRateFraction" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_CellMaxWaterFlowRateFraction_)
            {
              this->SimFlowPlant_CellMaxWaterFlowRateFraction_.set (SimFlowPlant_CellMaxWaterFlowRateFraction_traits::create (i, f, this));
              continue;
            }
          }

          // T24HeatRejectFanType
          //
          if (n.name () == "T24HeatRejectFanType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24HeatRejectFanType_type > r (
              T24HeatRejectFanType_traits::create (i, f, this));

            if (!this->T24HeatRejectFanType_)
            {
              this->T24HeatRejectFanType_.set (r);
              continue;
            }
          }

          // T24ConstructStatus2
          //
          if (n.name () == "T24ConstructStatus2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24ConstructStatus2_type > r (
              T24ConstructStatus2_traits::create (i, f, this));

            if (!this->T24ConstructStatus2_)
            {
              this->T24ConstructStatus2_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_CoolingTower_SingleSpeed* SimFlowPlant_CoolingTower_SingleSpeed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_CoolingTower_SingleSpeed (*this, f, c);
      }

      SimFlowPlant_CoolingTower_SingleSpeed& SimFlowPlant_CoolingTower_SingleSpeed::
      operator= (const SimFlowPlant_CoolingTower_SingleSpeed& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_CoolingTower& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_WaterInletNodeName_ = x.SimFlowPlant_WaterInletNodeName_;
          this->SimFlowPlant_WaterOutletNodeName_ = x.SimFlowPlant_WaterOutletNodeName_;
          this->SimFlowPlant_NomCap_ = x.SimFlowPlant_NomCap_;
          this->SimFlowPlant_DesignWaterFlowRate_ = x.SimFlowPlant_DesignWaterFlowRate_;
          this->SimFlowPlant_SizingFactor_ = x.SimFlowPlant_SizingFactor_;
          this->SimFlowPlant_BasinHeatCap_ = x.SimFlowPlant_BasinHeatCap_;
          this->SimFlowPlant_BasinHeatSetpointTemp_ = x.SimFlowPlant_BasinHeatSetpointTemp_;
          this->SimFlowPlant_BasinHeatOperatSchedName_ = x.SimFlowPlant_BasinHeatOperatSchedName_;
          this->SimFlowPlant_DesignAirFlowRate_ = x.SimFlowPlant_DesignAirFlowRate_;
          this->SimFlowPlant_DesignFanPwr_ = x.SimFlowPlant_DesignFanPwr_;
          this->SimFlowPlant_DesignU_FactorTimesAreaValue_ = x.SimFlowPlant_DesignU_FactorTimesAreaValue_;
          this->SimFlowPlant_FreeConvectAirFlowRate_ = x.SimFlowPlant_FreeConvectAirFlowRate_;
          this->SimFlowPlant_FreeConvectAirFlowRateSizingFactor_ = x.SimFlowPlant_FreeConvectAirFlowRateSizingFactor_;
          this->SimFlowPlant_FreeConvectU_FactorTimesAreaValue_ = x.SimFlowPlant_FreeConvectU_FactorTimesAreaValue_;
          this->SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_ = x.SimFlowPlant_FreeConvectU_FactorTimesAreaValueSizingFactor_;
          this->SimFlowPlant_PerfInputMeth_ = x.SimFlowPlant_PerfInputMeth_;
          this->SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_ = x.SimFlowPlant_HeatRejectionCapandNomCapSizingRatio_;
          this->SimFlowPlant_FreeConvCap_ = x.SimFlowPlant_FreeConvCap_;
          this->SimFlowPlant_FreeConvectNomCapSizingFactor_ = x.SimFlowPlant_FreeConvectNomCapSizingFactor_;
          this->SimFlowPlant_EvapLossMode_ = x.SimFlowPlant_EvapLossMode_;
          this->SimFlowPlant_EvapLossFactor_ = x.SimFlowPlant_EvapLossFactor_;
          this->SimFlowPlant_DriftLossPercent_ = x.SimFlowPlant_DriftLossPercent_;
          this->SimFlowPlant_BlowdownCalcMode_ = x.SimFlowPlant_BlowdownCalcMode_;
          this->SimFlowPlant_BlowdownConcentrationRatio_ = x.SimFlowPlant_BlowdownConcentrationRatio_;
          this->SimFlowPlant_BlowdownMakeupWaterUsageSchedName_ = x.SimFlowPlant_BlowdownMakeupWaterUsageSchedName_;
          this->SimFlowPlant_SupWaterStoTankName_ = x.SimFlowPlant_SupWaterStoTankName_;
          this->SimFlowPlant_OutdrAirInletNodeName_ = x.SimFlowPlant_OutdrAirInletNodeName_;
          this->SimFlowPlant_CapCntl_ = x.SimFlowPlant_CapCntl_;
          this->SimFlowPlant_NumberOfCells_ = x.SimFlowPlant_NumberOfCells_;
          this->SimFlowPlant_CellControl_ = x.SimFlowPlant_CellControl_;
          this->SimFlowPlant_CellMinWaterFlowRateFraction_ = x.SimFlowPlant_CellMinWaterFlowRateFraction_;
          this->SimFlowPlant_CellMaxWaterFlowRateFraction_ = x.SimFlowPlant_CellMaxWaterFlowRateFraction_;
          this->T24HeatRejectFanType_ = x.T24HeatRejectFanType_;
          this->T24ConstructStatus2_ = x.T24ConstructStatus2_;
        }

        return *this;
      }

      SimFlowPlant_CoolingTower_SingleSpeed::
      ~SimFlowPlant_CoolingTower_SingleSpeed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

