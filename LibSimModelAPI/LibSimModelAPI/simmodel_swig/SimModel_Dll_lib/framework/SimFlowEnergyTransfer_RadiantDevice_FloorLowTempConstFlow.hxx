// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_FLOOR_LOW_TEMP_CONST_FLOW_HXX
#define SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_FLOOR_LOW_TEMP_CONST_FLOW_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_radiantdevice.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_RadiantDevice
      {
        public:
        // SimFlowEnergyTrans_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Name_type > SimFlowEnergyTrans_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Name_type, char > SimFlowEnergyTrans_Name_traits;

        const SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name () const;

        SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name ();

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x);

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x);

        void
        SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > p);

        // SimFlowEnergyTrans_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_AvailSchedName_type > SimFlowEnergyTrans_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_AvailSchedName_type, char > SimFlowEnergyTrans_AvailSchedName_traits;

        const SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName () const;

        SimFlowEnergyTrans_AvailSchedName_optional&
        SimFlowEnergyTrans_AvailSchedName ();

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x);

        void
        SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x);

        void
        SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > p);

        // SimFlowEnergyTrans_ZoneName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_ZoneName_type > SimFlowEnergyTrans_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_ZoneName_type, char > SimFlowEnergyTrans_ZoneName_traits;

        const SimFlowEnergyTrans_ZoneName_optional&
        SimFlowEnergyTrans_ZoneName () const;

        SimFlowEnergyTrans_ZoneName_optional&
        SimFlowEnergyTrans_ZoneName ();

        void
        SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_type& x);

        void
        SimFlowEnergyTrans_ZoneName (const SimFlowEnergyTrans_ZoneName_optional& x);

        void
        SimFlowEnergyTrans_ZoneName (::std::auto_ptr< SimFlowEnergyTrans_ZoneName_type > p);

        // SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type > SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type, char > SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_traits;

        const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional&
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName () const;

        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional&
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName ();

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type& x);

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (const SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional& x);

        void
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName (::std::auto_ptr< SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_type > p);

        // SimFlowEnergyTrans_HydronicTubingsideDiam
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HydronicTubingsideDiam_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HydronicTubingsideDiam_type > SimFlowEnergyTrans_HydronicTubingsideDiam_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HydronicTubingsideDiam_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HydronicTubingsideDiam_traits;

        const SimFlowEnergyTrans_HydronicTubingsideDiam_optional&
        SimFlowEnergyTrans_HydronicTubingsideDiam () const;

        SimFlowEnergyTrans_HydronicTubingsideDiam_optional&
        SimFlowEnergyTrans_HydronicTubingsideDiam ();

        void
        SimFlowEnergyTrans_HydronicTubingsideDiam (const SimFlowEnergyTrans_HydronicTubingsideDiam_type& x);

        void
        SimFlowEnergyTrans_HydronicTubingsideDiam (const SimFlowEnergyTrans_HydronicTubingsideDiam_optional& x);

        // SimFlowEnergyTrans_HydronicTubingLength
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HydronicTubingLength_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HydronicTubingLength_type > SimFlowEnergyTrans_HydronicTubingLength_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HydronicTubingLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HydronicTubingLength_traits;

        const SimFlowEnergyTrans_HydronicTubingLength_optional&
        SimFlowEnergyTrans_HydronicTubingLength () const;

        SimFlowEnergyTrans_HydronicTubingLength_optional&
        SimFlowEnergyTrans_HydronicTubingLength ();

        void
        SimFlowEnergyTrans_HydronicTubingLength (const SimFlowEnergyTrans_HydronicTubingLength_type& x);

        void
        SimFlowEnergyTrans_HydronicTubingLength (const SimFlowEnergyTrans_HydronicTubingLength_optional& x);

        // SimFlowEnergyTrans_TempCntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_TempCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_TempCntlType_type > SimFlowEnergyTrans_TempCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_TempCntlType_type, char > SimFlowEnergyTrans_TempCntlType_traits;

        const SimFlowEnergyTrans_TempCntlType_optional&
        SimFlowEnergyTrans_TempCntlType () const;

        SimFlowEnergyTrans_TempCntlType_optional&
        SimFlowEnergyTrans_TempCntlType ();

        void
        SimFlowEnergyTrans_TempCntlType (const SimFlowEnergyTrans_TempCntlType_type& x);

        void
        SimFlowEnergyTrans_TempCntlType (const SimFlowEnergyTrans_TempCntlType_optional& x);

        void
        SimFlowEnergyTrans_TempCntlType (::std::auto_ptr< SimFlowEnergyTrans_TempCntlType_type > p);

        // SimFlowEnergyTrans_HeatingWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_HeatingWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingWaterInletNodeName_type > SimFlowEnergyTrans_HeatingWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingWaterInletNodeName_type, char > SimFlowEnergyTrans_HeatingWaterInletNodeName_traits;

        const SimFlowEnergyTrans_HeatingWaterInletNodeName_optional&
        SimFlowEnergyTrans_HeatingWaterInletNodeName () const;

        SimFlowEnergyTrans_HeatingWaterInletNodeName_optional&
        SimFlowEnergyTrans_HeatingWaterInletNodeName ();

        void
        SimFlowEnergyTrans_HeatingWaterInletNodeName (const SimFlowEnergyTrans_HeatingWaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_HeatingWaterInletNodeName (const SimFlowEnergyTrans_HeatingWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_HeatingWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_HeatingWaterInletNodeName_type > p);

        // SimFlowEnergyTrans_HeatingWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_HeatingWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingWaterOutletNodeName_type > SimFlowEnergyTrans_HeatingWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingWaterOutletNodeName_type, char > SimFlowEnergyTrans_HeatingWaterOutletNodeName_traits;

        const SimFlowEnergyTrans_HeatingWaterOutletNodeName_optional&
        SimFlowEnergyTrans_HeatingWaterOutletNodeName () const;

        SimFlowEnergyTrans_HeatingWaterOutletNodeName_optional&
        SimFlowEnergyTrans_HeatingWaterOutletNodeName ();

        void
        SimFlowEnergyTrans_HeatingWaterOutletNodeName (const SimFlowEnergyTrans_HeatingWaterOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_HeatingWaterOutletNodeName (const SimFlowEnergyTrans_HeatingWaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_HeatingWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_HeatingWaterOutletNodeName_type > p);

        // SimFlowEnergyTrans_CoolingWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CoolingWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingWaterInletNodeName_type > SimFlowEnergyTrans_CoolingWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingWaterInletNodeName_type, char > SimFlowEnergyTrans_CoolingWaterInletNodeName_traits;

        const SimFlowEnergyTrans_CoolingWaterInletNodeName_optional&
        SimFlowEnergyTrans_CoolingWaterInletNodeName () const;

        SimFlowEnergyTrans_CoolingWaterInletNodeName_optional&
        SimFlowEnergyTrans_CoolingWaterInletNodeName ();

        void
        SimFlowEnergyTrans_CoolingWaterInletNodeName (const SimFlowEnergyTrans_CoolingWaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_CoolingWaterInletNodeName (const SimFlowEnergyTrans_CoolingWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CoolingWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CoolingWaterInletNodeName_type > p);

        // SimFlowEnergyTrans_CoolingWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CoolingWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingWaterOutletNodeName_type > SimFlowEnergyTrans_CoolingWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingWaterOutletNodeName_type, char > SimFlowEnergyTrans_CoolingWaterOutletNodeName_traits;

        const SimFlowEnergyTrans_CoolingWaterOutletNodeName_optional&
        SimFlowEnergyTrans_CoolingWaterOutletNodeName () const;

        SimFlowEnergyTrans_CoolingWaterOutletNodeName_optional&
        SimFlowEnergyTrans_CoolingWaterOutletNodeName ();

        void
        SimFlowEnergyTrans_CoolingWaterOutletNodeName (const SimFlowEnergyTrans_CoolingWaterOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_CoolingWaterOutletNodeName (const SimFlowEnergyTrans_CoolingWaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_CoolingWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_CoolingWaterOutletNodeName_type > p);

        // SimFlowEnergyTrans_CondensationCntlType
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_CondensationCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondensationCntlType_type > SimFlowEnergyTrans_CondensationCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondensationCntlType_type, char > SimFlowEnergyTrans_CondensationCntlType_traits;

        const SimFlowEnergyTrans_CondensationCntlType_optional&
        SimFlowEnergyTrans_CondensationCntlType () const;

        SimFlowEnergyTrans_CondensationCntlType_optional&
        SimFlowEnergyTrans_CondensationCntlType ();

        void
        SimFlowEnergyTrans_CondensationCntlType (const SimFlowEnergyTrans_CondensationCntlType_type& x);

        void
        SimFlowEnergyTrans_CondensationCntlType (const SimFlowEnergyTrans_CondensationCntlType_optional& x);

        void
        SimFlowEnergyTrans_CondensationCntlType (::std::auto_ptr< SimFlowEnergyTrans_CondensationCntlType_type > p);

        // SimFlowEnergyTrans_CondensationCntlDewpointfset
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_CondensationCntlDewpointfset_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CondensationCntlDewpointfset_type > SimFlowEnergyTrans_CondensationCntlDewpointfset_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CondensationCntlDewpointfset_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_CondensationCntlDewpointfset_traits;

        const SimFlowEnergyTrans_CondensationCntlDewpointfset_optional&
        SimFlowEnergyTrans_CondensationCntlDewpointfset () const;

        SimFlowEnergyTrans_CondensationCntlDewpointfset_optional&
        SimFlowEnergyTrans_CondensationCntlDewpointfset ();

        void
        SimFlowEnergyTrans_CondensationCntlDewpointfset (const SimFlowEnergyTrans_CondensationCntlDewpointfset_type& x);

        void
        SimFlowEnergyTrans_CondensationCntlDewpointfset (const SimFlowEnergyTrans_CondensationCntlDewpointfset_optional& x);

        // SimFlowEnergyTrans_NumofCircuits
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_NumofCircuits_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NumofCircuits_type > SimFlowEnergyTrans_NumofCircuits_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NumofCircuits_type, char > SimFlowEnergyTrans_NumofCircuits_traits;

        const SimFlowEnergyTrans_NumofCircuits_optional&
        SimFlowEnergyTrans_NumofCircuits () const;

        SimFlowEnergyTrans_NumofCircuits_optional&
        SimFlowEnergyTrans_NumofCircuits ();

        void
        SimFlowEnergyTrans_NumofCircuits (const SimFlowEnergyTrans_NumofCircuits_type& x);

        void
        SimFlowEnergyTrans_NumofCircuits (const SimFlowEnergyTrans_NumofCircuits_optional& x);

        void
        SimFlowEnergyTrans_NumofCircuits (::std::auto_ptr< SimFlowEnergyTrans_NumofCircuits_type > p);

        // SimFlowEnergyTrans_CircuitLength
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_CircuitLength_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CircuitLength_type > SimFlowEnergyTrans_CircuitLength_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CircuitLength_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_CircuitLength_traits;

        const SimFlowEnergyTrans_CircuitLength_optional&
        SimFlowEnergyTrans_CircuitLength () const;

        SimFlowEnergyTrans_CircuitLength_optional&
        SimFlowEnergyTrans_CircuitLength ();

        void
        SimFlowEnergyTrans_CircuitLength (const SimFlowEnergyTrans_CircuitLength_type& x);

        void
        SimFlowEnergyTrans_CircuitLength (const SimFlowEnergyTrans_CircuitLength_optional& x);

        // SimFlowEnergyTrans_RatedFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedFlowRate_type > SimFlowEnergyTrans_RatedFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedFlowRate_traits;

        const SimFlowEnergyTrans_RatedFlowRate_optional&
        SimFlowEnergyTrans_RatedFlowRate () const;

        SimFlowEnergyTrans_RatedFlowRate_optional&
        SimFlowEnergyTrans_RatedFlowRate ();

        void
        SimFlowEnergyTrans_RatedFlowRate (const SimFlowEnergyTrans_RatedFlowRate_type& x);

        void
        SimFlowEnergyTrans_RatedFlowRate (const SimFlowEnergyTrans_RatedFlowRate_optional& x);

        // SimFlowEnergyTrans_PumpFlowRateSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_PumpFlowRateSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_PumpFlowRateSchedName_type > SimFlowEnergyTrans_PumpFlowRateSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_PumpFlowRateSchedName_type, char > SimFlowEnergyTrans_PumpFlowRateSchedName_traits;

        const SimFlowEnergyTrans_PumpFlowRateSchedName_optional&
        SimFlowEnergyTrans_PumpFlowRateSchedName () const;

        SimFlowEnergyTrans_PumpFlowRateSchedName_optional&
        SimFlowEnergyTrans_PumpFlowRateSchedName ();

        void
        SimFlowEnergyTrans_PumpFlowRateSchedName (const SimFlowEnergyTrans_PumpFlowRateSchedName_type& x);

        void
        SimFlowEnergyTrans_PumpFlowRateSchedName (const SimFlowEnergyTrans_PumpFlowRateSchedName_optional& x);

        void
        SimFlowEnergyTrans_PumpFlowRateSchedName (::std::auto_ptr< SimFlowEnergyTrans_PumpFlowRateSchedName_type > p);

        // SimFlowEnergyTrans_RatedPumpHead
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedPumpHead_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedPumpHead_type > SimFlowEnergyTrans_RatedPumpHead_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedPumpHead_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedPumpHead_traits;

        const SimFlowEnergyTrans_RatedPumpHead_optional&
        SimFlowEnergyTrans_RatedPumpHead () const;

        SimFlowEnergyTrans_RatedPumpHead_optional&
        SimFlowEnergyTrans_RatedPumpHead ();

        void
        SimFlowEnergyTrans_RatedPumpHead (const SimFlowEnergyTrans_RatedPumpHead_type& x);

        void
        SimFlowEnergyTrans_RatedPumpHead (const SimFlowEnergyTrans_RatedPumpHead_optional& x);

        // SimFlowEnergyTrans_RatedPowerConsump
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedPowerConsump_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedPowerConsump_type > SimFlowEnergyTrans_RatedPowerConsump_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedPowerConsump_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedPowerConsump_traits;

        const SimFlowEnergyTrans_RatedPowerConsump_optional&
        SimFlowEnergyTrans_RatedPowerConsump () const;

        SimFlowEnergyTrans_RatedPowerConsump_optional&
        SimFlowEnergyTrans_RatedPowerConsump ();

        void
        SimFlowEnergyTrans_RatedPowerConsump (const SimFlowEnergyTrans_RatedPowerConsump_type& x);

        void
        SimFlowEnergyTrans_RatedPowerConsump (const SimFlowEnergyTrans_RatedPowerConsump_optional& x);

        // SimFlowEnergyTrans_MotorEff
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_MotorEff_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_MotorEff_type > SimFlowEnergyTrans_MotorEff_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_MotorEff_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_MotorEff_traits;

        const SimFlowEnergyTrans_MotorEff_optional&
        SimFlowEnergyTrans_MotorEff () const;

        SimFlowEnergyTrans_MotorEff_optional&
        SimFlowEnergyTrans_MotorEff ();

        void
        SimFlowEnergyTrans_MotorEff (const SimFlowEnergyTrans_MotorEff_type& x);

        void
        SimFlowEnergyTrans_MotorEff (const SimFlowEnergyTrans_MotorEff_optional& x);

        // SimFlowEnergyTrans_FracMotorInEffToFluidStream
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_FracMotorInEffToFluidStream_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FracMotorInEffToFluidStream_type > SimFlowEnergyTrans_FracMotorInEffToFluidStream_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FracMotorInEffToFluidStream_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_FracMotorInEffToFluidStream_traits;

        const SimFlowEnergyTrans_FracMotorInEffToFluidStream_optional&
        SimFlowEnergyTrans_FracMotorInEffToFluidStream () const;

        SimFlowEnergyTrans_FracMotorInEffToFluidStream_optional&
        SimFlowEnergyTrans_FracMotorInEffToFluidStream ();

        void
        SimFlowEnergyTrans_FracMotorInEffToFluidStream (const SimFlowEnergyTrans_FracMotorInEffToFluidStream_type& x);

        void
        SimFlowEnergyTrans_FracMotorInEffToFluidStream (const SimFlowEnergyTrans_FracMotorInEffToFluidStream_optional& x);

        // SimFlowEnergyTrans_HeatingHighWaterTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingHighWaterTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingHighWaterTempSchedName_type > SimFlowEnergyTrans_HeatingHighWaterTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingHighWaterTempSchedName_type, char > SimFlowEnergyTrans_HeatingHighWaterTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingHighWaterTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName () const;

        SimFlowEnergyTrans_HeatingHighWaterTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName (const SimFlowEnergyTrans_HeatingHighWaterTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName (const SimFlowEnergyTrans_HeatingHighWaterTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingHighWaterTempSchedName_type > p);

        // SimFlowEnergyTrans_HeatingLowWaterTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingLowWaterTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingLowWaterTempSchedName_type > SimFlowEnergyTrans_HeatingLowWaterTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingLowWaterTempSchedName_type, char > SimFlowEnergyTrans_HeatingLowWaterTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingLowWaterTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName () const;

        SimFlowEnergyTrans_HeatingLowWaterTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName (const SimFlowEnergyTrans_HeatingLowWaterTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName (const SimFlowEnergyTrans_HeatingLowWaterTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingLowWaterTempSchedName_type > p);

        // SimFlowEnergyTrans_HeatingHighCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type > SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type, char > SimFlowEnergyTrans_HeatingHighCntlTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName () const;

        SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (const SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingHighCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_HeatingLowCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type > SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type, char > SimFlowEnergyTrans_HeatingLowCntlTempSchedName_traits;

        const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName () const;

        SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName ();

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (const SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_HeatingLowCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingHighWaterTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingHighWaterTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingHighWaterTempSchedName_type > SimFlowEnergyTrans_CoolingHighWaterTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingHighWaterTempSchedName_type, char > SimFlowEnergyTrans_CoolingHighWaterTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingHighWaterTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName () const;

        SimFlowEnergyTrans_CoolingHighWaterTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName (const SimFlowEnergyTrans_CoolingHighWaterTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName (const SimFlowEnergyTrans_CoolingHighWaterTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingHighWaterTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingLowWaterTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingLowWaterTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingLowWaterTempSchedName_type > SimFlowEnergyTrans_CoolingLowWaterTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingLowWaterTempSchedName_type, char > SimFlowEnergyTrans_CoolingLowWaterTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingLowWaterTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName () const;

        SimFlowEnergyTrans_CoolingLowWaterTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName (const SimFlowEnergyTrans_CoolingLowWaterTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName (const SimFlowEnergyTrans_CoolingLowWaterTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingLowWaterTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingHighCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type > SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type, char > SimFlowEnergyTrans_CoolingHighCntlTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName () const;

        SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (const SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingHighCntlTempSchedName_type > p);

        // SimFlowEnergyTrans_CoolingLowCntlTempSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type > SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type, char > SimFlowEnergyTrans_CoolingLowCntlTempSchedName_traits;

        const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName () const;

        SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional&
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName ();

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type& x);

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (const SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional& x);

        void
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName (::std::auto_ptr< SimFlowEnergyTrans_CoolingLowCntlTempSchedName_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow ();

        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow (const RefId_type&);

        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow (const ::xercesc::DOMElement& e,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow (const SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow& x,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow&
        operator= (const SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow& x);

        virtual 
        ~SimFlowEnergyTransfer_RadiantDevice_FloorLowTempConstFlow ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_Name_optional SimFlowEnergyTrans_Name_;
        SimFlowEnergyTrans_AvailSchedName_optional SimFlowEnergyTrans_AvailSchedName_;
        SimFlowEnergyTrans_ZoneName_optional SimFlowEnergyTrans_ZoneName_;
        SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_optional SimFlowEnergyTrans_SurfNameOrRadiantSurfGroupName_;
        SimFlowEnergyTrans_HydronicTubingsideDiam_optional SimFlowEnergyTrans_HydronicTubingsideDiam_;
        SimFlowEnergyTrans_HydronicTubingLength_optional SimFlowEnergyTrans_HydronicTubingLength_;
        SimFlowEnergyTrans_TempCntlType_optional SimFlowEnergyTrans_TempCntlType_;
        SimFlowEnergyTrans_HeatingWaterInletNodeName_optional SimFlowEnergyTrans_HeatingWaterInletNodeName_;
        SimFlowEnergyTrans_HeatingWaterOutletNodeName_optional SimFlowEnergyTrans_HeatingWaterOutletNodeName_;
        SimFlowEnergyTrans_CoolingWaterInletNodeName_optional SimFlowEnergyTrans_CoolingWaterInletNodeName_;
        SimFlowEnergyTrans_CoolingWaterOutletNodeName_optional SimFlowEnergyTrans_CoolingWaterOutletNodeName_;
        SimFlowEnergyTrans_CondensationCntlType_optional SimFlowEnergyTrans_CondensationCntlType_;
        SimFlowEnergyTrans_CondensationCntlDewpointfset_optional SimFlowEnergyTrans_CondensationCntlDewpointfset_;
        SimFlowEnergyTrans_NumofCircuits_optional SimFlowEnergyTrans_NumofCircuits_;
        SimFlowEnergyTrans_CircuitLength_optional SimFlowEnergyTrans_CircuitLength_;
        SimFlowEnergyTrans_RatedFlowRate_optional SimFlowEnergyTrans_RatedFlowRate_;
        SimFlowEnergyTrans_PumpFlowRateSchedName_optional SimFlowEnergyTrans_PumpFlowRateSchedName_;
        SimFlowEnergyTrans_RatedPumpHead_optional SimFlowEnergyTrans_RatedPumpHead_;
        SimFlowEnergyTrans_RatedPowerConsump_optional SimFlowEnergyTrans_RatedPowerConsump_;
        SimFlowEnergyTrans_MotorEff_optional SimFlowEnergyTrans_MotorEff_;
        SimFlowEnergyTrans_FracMotorInEffToFluidStream_optional SimFlowEnergyTrans_FracMotorInEffToFluidStream_;
        SimFlowEnergyTrans_HeatingHighWaterTempSchedName_optional SimFlowEnergyTrans_HeatingHighWaterTempSchedName_;
        SimFlowEnergyTrans_HeatingLowWaterTempSchedName_optional SimFlowEnergyTrans_HeatingLowWaterTempSchedName_;
        SimFlowEnergyTrans_HeatingHighCntlTempSchedName_optional SimFlowEnergyTrans_HeatingHighCntlTempSchedName_;
        SimFlowEnergyTrans_HeatingLowCntlTempSchedName_optional SimFlowEnergyTrans_HeatingLowCntlTempSchedName_;
        SimFlowEnergyTrans_CoolingHighWaterTempSchedName_optional SimFlowEnergyTrans_CoolingHighWaterTempSchedName_;
        SimFlowEnergyTrans_CoolingLowWaterTempSchedName_optional SimFlowEnergyTrans_CoolingLowWaterTempSchedName_;
        SimFlowEnergyTrans_CoolingHighCntlTempSchedName_optional SimFlowEnergyTrans_CoolingHighCntlTempSchedName_;
        SimFlowEnergyTrans_CoolingLowCntlTempSchedName_optional SimFlowEnergyTrans_CoolingLowCntlTempSchedName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_RADIANT_DEVICE_FLOOR_LOW_TEMP_CONST_FLOW_HXX
