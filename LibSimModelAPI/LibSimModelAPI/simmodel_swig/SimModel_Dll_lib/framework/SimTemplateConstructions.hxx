// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_TEMPLATE_CONSTRUCTIONS_HXX
#define SIM_TEMPLATE_CONSTRUCTIONS_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimTemplateConstructions;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simtemplate.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class __declspec(dllexport) SimTemplateConstructions: public ::schema::simxml::SimModelCore::SimTemplate
      {
        public:
        // TemplateExteriorWallConstruction
        //
        typedef ::xml_schema::idref TemplateExteriorWallConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateExteriorWallConstruction_type, false > TemplateExteriorWallConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateExteriorWallConstruction_type, char > TemplateExteriorWallConstruction_traits;

        const TemplateExteriorWallConstruction_optional&
        TemplateExteriorWallConstruction () const;

        TemplateExteriorWallConstruction_optional&
        TemplateExteriorWallConstruction ();

        void
        TemplateExteriorWallConstruction (const TemplateExteriorWallConstruction_type& x);

        void
        TemplateExteriorWallConstruction (const TemplateExteriorWallConstruction_optional& x);

        void
        TemplateExteriorWallConstruction (::std::auto_ptr< TemplateExteriorWallConstruction_type > p);

        // TemplateExteriorFloorConstruction
        //
        typedef ::xml_schema::idref TemplateExteriorFloorConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateExteriorFloorConstruction_type, false > TemplateExteriorFloorConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateExteriorFloorConstruction_type, char > TemplateExteriorFloorConstruction_traits;

        const TemplateExteriorFloorConstruction_optional&
        TemplateExteriorFloorConstruction () const;

        TemplateExteriorFloorConstruction_optional&
        TemplateExteriorFloorConstruction ();

        void
        TemplateExteriorFloorConstruction (const TemplateExteriorFloorConstruction_type& x);

        void
        TemplateExteriorFloorConstruction (const TemplateExteriorFloorConstruction_optional& x);

        void
        TemplateExteriorFloorConstruction (::std::auto_ptr< TemplateExteriorFloorConstruction_type > p);

        // TemplateInterZoneFloorConstruction
        //
        typedef ::xml_schema::idref TemplateInterZoneFloorConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateInterZoneFloorConstruction_type, false > TemplateInterZoneFloorConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateInterZoneFloorConstruction_type, char > TemplateInterZoneFloorConstruction_traits;

        const TemplateInterZoneFloorConstruction_optional&
        TemplateInterZoneFloorConstruction () const;

        TemplateInterZoneFloorConstruction_optional&
        TemplateInterZoneFloorConstruction ();

        void
        TemplateInterZoneFloorConstruction (const TemplateInterZoneFloorConstruction_type& x);

        void
        TemplateInterZoneFloorConstruction (const TemplateInterZoneFloorConstruction_optional& x);

        void
        TemplateInterZoneFloorConstruction (::std::auto_ptr< TemplateInterZoneFloorConstruction_type > p);

        // TemplateRoofConstruction
        //
        typedef ::xml_schema::idref TemplateRoofConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateRoofConstruction_type, false > TemplateRoofConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRoofConstruction_type, char > TemplateRoofConstruction_traits;

        const TemplateRoofConstruction_optional&
        TemplateRoofConstruction () const;

        TemplateRoofConstruction_optional&
        TemplateRoofConstruction ();

        void
        TemplateRoofConstruction (const TemplateRoofConstruction_type& x);

        void
        TemplateRoofConstruction (const TemplateRoofConstruction_optional& x);

        void
        TemplateRoofConstruction (::std::auto_ptr< TemplateRoofConstruction_type > p);

        // TemplateSlabOnGradeConstruction
        //
        typedef ::xml_schema::idref TemplateSlabOnGradeConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateSlabOnGradeConstruction_type, false > TemplateSlabOnGradeConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateSlabOnGradeConstruction_type, char > TemplateSlabOnGradeConstruction_traits;

        const TemplateSlabOnGradeConstruction_optional&
        TemplateSlabOnGradeConstruction () const;

        TemplateSlabOnGradeConstruction_optional&
        TemplateSlabOnGradeConstruction ();

        void
        TemplateSlabOnGradeConstruction (const TemplateSlabOnGradeConstruction_type& x);

        void
        TemplateSlabOnGradeConstruction (const TemplateSlabOnGradeConstruction_optional& x);

        void
        TemplateSlabOnGradeConstruction (::std::auto_ptr< TemplateSlabOnGradeConstruction_type > p);

        // TemplateUndergroundWallConstruction
        //
        typedef ::xml_schema::idref TemplateUndergroundWallConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateUndergroundWallConstruction_type, false > TemplateUndergroundWallConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateUndergroundWallConstruction_type, char > TemplateUndergroundWallConstruction_traits;

        const TemplateUndergroundWallConstruction_optional&
        TemplateUndergroundWallConstruction () const;

        TemplateUndergroundWallConstruction_optional&
        TemplateUndergroundWallConstruction ();

        void
        TemplateUndergroundWallConstruction (const TemplateUndergroundWallConstruction_type& x);

        void
        TemplateUndergroundWallConstruction (const TemplateUndergroundWallConstruction_optional& x);

        void
        TemplateUndergroundWallConstruction (::std::auto_ptr< TemplateUndergroundWallConstruction_type > p);

        // TemplateUndergroundFloorConstruction
        //
        typedef ::xml_schema::idref TemplateUndergroundFloorConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateUndergroundFloorConstruction_type, false > TemplateUndergroundFloorConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateUndergroundFloorConstruction_type, char > TemplateUndergroundFloorConstruction_traits;

        const TemplateUndergroundFloorConstruction_optional&
        TemplateUndergroundFloorConstruction () const;

        TemplateUndergroundFloorConstruction_optional&
        TemplateUndergroundFloorConstruction ();

        void
        TemplateUndergroundFloorConstruction (const TemplateUndergroundFloorConstruction_type& x);

        void
        TemplateUndergroundFloorConstruction (const TemplateUndergroundFloorConstruction_optional& x);

        void
        TemplateUndergroundFloorConstruction (::std::auto_ptr< TemplateUndergroundFloorConstruction_type > p);

        // TemplateCeilingConstruction
        //
        typedef ::xml_schema::idref TemplateCeilingConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateCeilingConstruction_type, false > TemplateCeilingConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateCeilingConstruction_type, char > TemplateCeilingConstruction_traits;

        const TemplateCeilingConstruction_optional&
        TemplateCeilingConstruction () const;

        TemplateCeilingConstruction_optional&
        TemplateCeilingConstruction ();

        void
        TemplateCeilingConstruction (const TemplateCeilingConstruction_type& x);

        void
        TemplateCeilingConstruction (const TemplateCeilingConstruction_optional& x);

        void
        TemplateCeilingConstruction (::std::auto_ptr< TemplateCeilingConstruction_type > p);

        // TemplateInteriorPartitionWallConstruction
        //
        typedef ::xml_schema::idref TemplateInteriorPartitionWallConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateInteriorPartitionWallConstruction_type, false > TemplateInteriorPartitionWallConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateInteriorPartitionWallConstruction_type, char > TemplateInteriorPartitionWallConstruction_traits;

        const TemplateInteriorPartitionWallConstruction_optional&
        TemplateInteriorPartitionWallConstruction () const;

        TemplateInteriorPartitionWallConstruction_optional&
        TemplateInteriorPartitionWallConstruction ();

        void
        TemplateInteriorPartitionWallConstruction (const TemplateInteriorPartitionWallConstruction_type& x);

        void
        TemplateInteriorPartitionWallConstruction (const TemplateInteriorPartitionWallConstruction_optional& x);

        void
        TemplateInteriorPartitionWallConstruction (::std::auto_ptr< TemplateInteriorPartitionWallConstruction_type > p);

        // TemplateRaisedFloorConstruction
        //
        typedef ::xml_schema::idref TemplateRaisedFloorConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateRaisedFloorConstruction_type, false > TemplateRaisedFloorConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRaisedFloorConstruction_type, char > TemplateRaisedFloorConstruction_traits;

        const TemplateRaisedFloorConstruction_optional&
        TemplateRaisedFloorConstruction () const;

        TemplateRaisedFloorConstruction_optional&
        TemplateRaisedFloorConstruction ();

        void
        TemplateRaisedFloorConstruction (const TemplateRaisedFloorConstruction_type& x);

        void
        TemplateRaisedFloorConstruction (const TemplateRaisedFloorConstruction_optional& x);

        void
        TemplateRaisedFloorConstruction (::std::auto_ptr< TemplateRaisedFloorConstruction_type > p);

        // TemplateOpaqueDoors
        //
        typedef ::xml_schema::idref TemplateOpaqueDoors_type;
        typedef ::xsd::cxx::tree::optional< TemplateOpaqueDoors_type, false > TemplateOpaqueDoors_optional;
        typedef ::xsd::cxx::tree::traits< TemplateOpaqueDoors_type, char > TemplateOpaqueDoors_traits;

        const TemplateOpaqueDoors_optional&
        TemplateOpaqueDoors () const;

        TemplateOpaqueDoors_optional&
        TemplateOpaqueDoors ();

        void
        TemplateOpaqueDoors (const TemplateOpaqueDoors_type& x);

        void
        TemplateOpaqueDoors (const TemplateOpaqueDoors_optional& x);

        void
        TemplateOpaqueDoors (::std::auto_ptr< TemplateOpaqueDoors_type > p);

        // TemplateWindowsNorth
        //
        typedef ::xml_schema::idref TemplateWindowsNorth_type;
        typedef ::xsd::cxx::tree::optional< TemplateWindowsNorth_type, false > TemplateWindowsNorth_optional;
        typedef ::xsd::cxx::tree::traits< TemplateWindowsNorth_type, char > TemplateWindowsNorth_traits;

        const TemplateWindowsNorth_optional&
        TemplateWindowsNorth () const;

        TemplateWindowsNorth_optional&
        TemplateWindowsNorth ();

        void
        TemplateWindowsNorth (const TemplateWindowsNorth_type& x);

        void
        TemplateWindowsNorth (const TemplateWindowsNorth_optional& x);

        void
        TemplateWindowsNorth (::std::auto_ptr< TemplateWindowsNorth_type > p);

        // TemplateWindowsSouth
        //
        typedef ::xml_schema::idref TemplateWindowsSouth_type;
        typedef ::xsd::cxx::tree::optional< TemplateWindowsSouth_type, false > TemplateWindowsSouth_optional;
        typedef ::xsd::cxx::tree::traits< TemplateWindowsSouth_type, char > TemplateWindowsSouth_traits;

        const TemplateWindowsSouth_optional&
        TemplateWindowsSouth () const;

        TemplateWindowsSouth_optional&
        TemplateWindowsSouth ();

        void
        TemplateWindowsSouth (const TemplateWindowsSouth_type& x);

        void
        TemplateWindowsSouth (const TemplateWindowsSouth_optional& x);

        void
        TemplateWindowsSouth (::std::auto_ptr< TemplateWindowsSouth_type > p);

        // TemplateWindowsEast
        //
        typedef ::xml_schema::idref TemplateWindowsEast_type;
        typedef ::xsd::cxx::tree::optional< TemplateWindowsEast_type, false > TemplateWindowsEast_optional;
        typedef ::xsd::cxx::tree::traits< TemplateWindowsEast_type, char > TemplateWindowsEast_traits;

        const TemplateWindowsEast_optional&
        TemplateWindowsEast () const;

        TemplateWindowsEast_optional&
        TemplateWindowsEast ();

        void
        TemplateWindowsEast (const TemplateWindowsEast_type& x);

        void
        TemplateWindowsEast (const TemplateWindowsEast_optional& x);

        void
        TemplateWindowsEast (::std::auto_ptr< TemplateWindowsEast_type > p);

        // TemplateWindowsWest
        //
        typedef ::xml_schema::idref TemplateWindowsWest_type;
        typedef ::xsd::cxx::tree::optional< TemplateWindowsWest_type, false > TemplateWindowsWest_optional;
        typedef ::xsd::cxx::tree::traits< TemplateWindowsWest_type, char > TemplateWindowsWest_traits;

        const TemplateWindowsWest_optional&
        TemplateWindowsWest () const;

        TemplateWindowsWest_optional&
        TemplateWindowsWest ();

        void
        TemplateWindowsWest (const TemplateWindowsWest_type& x);

        void
        TemplateWindowsWest (const TemplateWindowsWest_optional& x);

        void
        TemplateWindowsWest (::std::auto_ptr< TemplateWindowsWest_type > p);

        // TemplateExteriorGlassDoors
        //
        typedef ::xml_schema::idref TemplateExteriorGlassDoors_type;
        typedef ::xsd::cxx::tree::optional< TemplateExteriorGlassDoors_type, false > TemplateExteriorGlassDoors_optional;
        typedef ::xsd::cxx::tree::traits< TemplateExteriorGlassDoors_type, char > TemplateExteriorGlassDoors_traits;

        const TemplateExteriorGlassDoors_optional&
        TemplateExteriorGlassDoors () const;

        TemplateExteriorGlassDoors_optional&
        TemplateExteriorGlassDoors ();

        void
        TemplateExteriorGlassDoors (const TemplateExteriorGlassDoors_type& x);

        void
        TemplateExteriorGlassDoors (const TemplateExteriorGlassDoors_optional& x);

        void
        TemplateExteriorGlassDoors (::std::auto_ptr< TemplateExteriorGlassDoors_type > p);

        // TemplateSkylights
        //
        typedef ::xml_schema::idref TemplateSkylights_type;
        typedef ::xsd::cxx::tree::optional< TemplateSkylights_type, false > TemplateSkylights_optional;
        typedef ::xsd::cxx::tree::traits< TemplateSkylights_type, char > TemplateSkylights_traits;

        const TemplateSkylights_optional&
        TemplateSkylights () const;

        TemplateSkylights_optional&
        TemplateSkylights ();

        void
        TemplateSkylights (const TemplateSkylights_type& x);

        void
        TemplateSkylights (const TemplateSkylights_optional& x);

        void
        TemplateSkylights (::std::auto_ptr< TemplateSkylights_type > p);

        // TemplateInteriorWindows
        //
        typedef ::xml_schema::idref TemplateInteriorWindows_type;
        typedef ::xsd::cxx::tree::optional< TemplateInteriorWindows_type, false > TemplateInteriorWindows_optional;
        typedef ::xsd::cxx::tree::traits< TemplateInteriorWindows_type, char > TemplateInteriorWindows_traits;

        const TemplateInteriorWindows_optional&
        TemplateInteriorWindows () const;

        TemplateInteriorWindows_optional&
        TemplateInteriorWindows ();

        void
        TemplateInteriorWindows (const TemplateInteriorWindows_type& x);

        void
        TemplateInteriorWindows (const TemplateInteriorWindows_optional& x);

        void
        TemplateInteriorWindows (::std::auto_ptr< TemplateInteriorWindows_type > p);

        // TemplateInteriorGlassDoors
        //
        typedef ::xml_schema::idref TemplateInteriorGlassDoors_type;
        typedef ::xsd::cxx::tree::optional< TemplateInteriorGlassDoors_type, false > TemplateInteriorGlassDoors_optional;
        typedef ::xsd::cxx::tree::traits< TemplateInteriorGlassDoors_type, char > TemplateInteriorGlassDoors_traits;

        const TemplateInteriorGlassDoors_optional&
        TemplateInteriorGlassDoors () const;

        TemplateInteriorGlassDoors_optional&
        TemplateInteriorGlassDoors ();

        void
        TemplateInteriorGlassDoors (const TemplateInteriorGlassDoors_type& x);

        void
        TemplateInteriorGlassDoors (const TemplateInteriorGlassDoors_optional& x);

        void
        TemplateInteriorGlassDoors (::std::auto_ptr< TemplateInteriorGlassDoors_type > p);

        // TemplateRadiantSlabConstruction
        //
        typedef ::xml_schema::idref TemplateRadiantSlabConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateRadiantSlabConstruction_type, false > TemplateRadiantSlabConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRadiantSlabConstruction_type, char > TemplateRadiantSlabConstruction_traits;

        const TemplateRadiantSlabConstruction_optional&
        TemplateRadiantSlabConstruction () const;

        TemplateRadiantSlabConstruction_optional&
        TemplateRadiantSlabConstruction ();

        void
        TemplateRadiantSlabConstruction (const TemplateRadiantSlabConstruction_type& x);

        void
        TemplateRadiantSlabConstruction (const TemplateRadiantSlabConstruction_optional& x);

        void
        TemplateRadiantSlabConstruction (::std::auto_ptr< TemplateRadiantSlabConstruction_type > p);

        // TemplateRadiantWallConstruction
        //
        typedef ::xml_schema::idref TemplateRadiantWallConstruction_type;
        typedef ::xsd::cxx::tree::optional< TemplateRadiantWallConstruction_type, false > TemplateRadiantWallConstruction_optional;
        typedef ::xsd::cxx::tree::traits< TemplateRadiantWallConstruction_type, char > TemplateRadiantWallConstruction_traits;

        const TemplateRadiantWallConstruction_optional&
        TemplateRadiantWallConstruction () const;

        TemplateRadiantWallConstruction_optional&
        TemplateRadiantWallConstruction ();

        void
        TemplateRadiantWallConstruction (const TemplateRadiantWallConstruction_type& x);

        void
        TemplateRadiantWallConstruction (const TemplateRadiantWallConstruction_optional& x);

        void
        TemplateRadiantWallConstruction (::std::auto_ptr< TemplateRadiantWallConstruction_type > p);

        // Constructors.
        //
        SimTemplateConstructions ();

        SimTemplateConstructions (const RefId_type&);

        SimTemplateConstructions (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        SimTemplateConstructions (const SimTemplateConstructions& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

        virtual SimTemplateConstructions*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimTemplateConstructions&
        operator= (const SimTemplateConstructions& x);

        virtual 
        ~SimTemplateConstructions ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        TemplateExteriorWallConstruction_optional TemplateExteriorWallConstruction_;
        TemplateExteriorFloorConstruction_optional TemplateExteriorFloorConstruction_;
        TemplateInterZoneFloorConstruction_optional TemplateInterZoneFloorConstruction_;
        TemplateRoofConstruction_optional TemplateRoofConstruction_;
        TemplateSlabOnGradeConstruction_optional TemplateSlabOnGradeConstruction_;
        TemplateUndergroundWallConstruction_optional TemplateUndergroundWallConstruction_;
        TemplateUndergroundFloorConstruction_optional TemplateUndergroundFloorConstruction_;
        TemplateCeilingConstruction_optional TemplateCeilingConstruction_;
        TemplateInteriorPartitionWallConstruction_optional TemplateInteriorPartitionWallConstruction_;
        TemplateRaisedFloorConstruction_optional TemplateRaisedFloorConstruction_;
        TemplateOpaqueDoors_optional TemplateOpaqueDoors_;
        TemplateWindowsNorth_optional TemplateWindowsNorth_;
        TemplateWindowsSouth_optional TemplateWindowsSouth_;
        TemplateWindowsEast_optional TemplateWindowsEast_;
        TemplateWindowsWest_optional TemplateWindowsWest_;
        TemplateExteriorGlassDoors_optional TemplateExteriorGlassDoors_;
        TemplateSkylights_optional TemplateSkylights_;
        TemplateInteriorWindows_optional TemplateInteriorWindows_;
        TemplateInteriorGlassDoors_optional TemplateInteriorGlassDoors_;
        TemplateRadiantSlabConstruction_optional TemplateRadiantSlabConstruction_;
        TemplateRadiantWallConstruction_optional TemplateRadiantWallConstruction_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_TEMPLATE_CONSTRUCTIONS_HXX
