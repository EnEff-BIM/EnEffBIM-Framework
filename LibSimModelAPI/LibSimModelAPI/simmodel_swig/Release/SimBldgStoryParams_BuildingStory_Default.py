# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SimBldgStoryParams_BuildingStory_Default', [dirname(__file__)])
        except ImportError:
            import _SimBldgStoryParams_BuildingStory_Default
            return _SimBldgStoryParams_BuildingStory_Default
        if fp is not None:
            try:
                _mod = imp.load_module('_SimBldgStoryParams_BuildingStory_Default', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SimBldgStoryParams_BuildingStory_Default = swig_import_helper()
    del swig_import_helper
else:
    import _SimBldgStoryParams_BuildingStory_Default
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import base
class SimBldgStoryParams(base.SimBldgModelParams):
    __swig_setmethods__ = {}
    for _s in [base.SimBldgModelParams]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBldgStoryParams, name, value)
    __swig_getmethods__ = {}
    for _s in [base.SimBldgModelParams]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBldgStoryParams, name)
    __repr__ = _swig_repr

    def BldgStoryName(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BldgStoryName(self, *args)

    def BldgStoryShape(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BldgStoryShape(self, *args)

    def X1Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_X1Dim(self, *args)

    def X2Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_X2Dim(self, *args)

    def X3Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_X3Dim(self, *args)

    def Y1Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_Y1Dim(self, *args)

    def Y2Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_Y2Dim(self, *args)

    def Y3Dim(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_Y3Dim(self, *args)

    def FloorToFloorHeight(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_FloorToFloorHeight(self, *args)

    def CeilingBottomElevation(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_CeilingBottomElevation(self, *args)

    def FinishFloorTopElevation(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_FinishFloorTopElevation(self, *args)

    def SpaceConfigOccupied(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_SpaceConfigOccupied(self, *args)

    def PlenumConfiguration(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_PlenumConfiguration(self, *args)

    def SpaceConfigAboveCeiling(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_SpaceConfigAboveCeiling(self, *args)

    def SpaceConfigBelowFloor(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_SpaceConfigBelowFloor(self, *args)

    def PerimeterZoneDepth(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_PerimeterZoneDepth(self, *args)

    def WallProfilePathType(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_WallProfilePathType(self, *args)

    def BldgStoryProfilePath(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BldgStoryProfilePath(self, *args)

    def PerimeterZoneOutsidePath(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_PerimeterZoneOutsidePath(self, *args)

    def CoreZoneOutsidePaths(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_CoreZoneOutsidePaths(self, *args)

    def CoreZoneInsidePaths(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_CoreZoneInsidePaths(self, *args)

    def VoidProfilePaths(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_VoidProfilePaths(self, *args)

    def BldgConstructionsTemplate(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BldgConstructionsTemplate(self, *args)

    def TargetNorthWinArrayParams(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_TargetNorthWinArrayParams(self, *args)

    def TargetSouthWinArrayParams(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_TargetSouthWinArrayParams(self, *args)

    def TargetEastWinArrayParams(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_TargetEastWinArrayParams(self, *args)

    def TargetWestWinArrayParams(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_TargetWestWinArrayParams(self, *args)

    def DefaultLibraryType(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_DefaultLibraryType(self, *args)

    def DefaultLibEntryRef(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_DefaultLibEntryRef(self, *args)

    def DefaultOhangEntryRef(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_DefaultOhangEntryRef(self, *args)

    def DefaultFinEntryRef(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_DefaultFinEntryRef(self, *args)

    def InsertedDWG(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_InsertedDWG(self, *args)

    def __init__(self, *args):
        this = _SimBldgStoryParams_BuildingStory_Default.new_SimBldgStoryParams(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams__clone(self, f, c)
    __swig_destroy__ = _SimBldgStoryParams_BuildingStory_Default.delete_SimBldgStoryParams
    __del__ = lambda self: None
SimBldgStoryParams_swigregister = _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_swigregister
SimBldgStoryParams_swigregister(SimBldgStoryParams)

class SimBldgStoryParams_BuildingStory(SimBldgStoryParams):
    __swig_setmethods__ = {}
    for _s in [SimBldgStoryParams]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBldgStoryParams_BuildingStory, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBldgStoryParams]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBldgStoryParams_BuildingStory, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBldgStoryParams_BuildingStory_Default.new_SimBldgStoryParams_BuildingStory(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory__clone(self, f, c)
    __swig_destroy__ = _SimBldgStoryParams_BuildingStory_Default.delete_SimBldgStoryParams_BuildingStory
    __del__ = lambda self: None
SimBldgStoryParams_BuildingStory_swigregister = _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_swigregister
SimBldgStoryParams_BuildingStory_swigregister(SimBldgStoryParams_BuildingStory)

class SimBldgStoryParams_BuildingStory_Default(SimBldgStoryParams_BuildingStory):
    __swig_setmethods__ = {}
    for _s in [SimBldgStoryParams_BuildingStory]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBldgStoryParams_BuildingStory_Default, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBldgStoryParams_BuildingStory]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBldgStoryParams_BuildingStory_Default, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBldgStoryParams_BuildingStory_Default.new_SimBldgStoryParams_BuildingStory_Default(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default__clone(self, f, c)
    __swig_destroy__ = _SimBldgStoryParams_BuildingStory_Default.delete_SimBldgStoryParams_BuildingStory_Default
    __del__ = lambda self: None
SimBldgStoryParams_BuildingStory_Default_swigregister = _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_swigregister
SimBldgStoryParams_BuildingStory_Default_swigregister(SimBldgStoryParams_BuildingStory_Default)

class SimBldgStoryParams_BuildingStory_Default_sequence(base.sequence_common):
    __swig_setmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBldgStoryParams_BuildingStory_Default_sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBldgStoryParams_BuildingStory_Default_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBldgStoryParams_BuildingStory_Default.new_SimBldgStoryParams_BuildingStory_Default_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_assign(self, n, x)

    def begin(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_begin(self, *args)

    def end(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_end(self, *args)

    def rbegin(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_rend(self, *args)

    def at(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_at(self, *args)

    def front(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_front(self, *args)

    def back(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_back(self, *args)

    def push_back(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_push_back(self, *args)

    def pop_back(self):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_pop_back(self)

    def detach_back(self, pop=True):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_detach_back(self, pop)

    def insert(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_insert(self, *args)

    def erase(self, *args):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_erase(self, *args)

    def detach(self, position, r, erase=True):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_detach(self, position, r, erase)

    def swap(self, x):
        return _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_swap(self, x)
    __swig_destroy__ = _SimBldgStoryParams_BuildingStory_Default.delete_SimBldgStoryParams_BuildingStory_Default_sequence
    __del__ = lambda self: None
SimBldgStoryParams_BuildingStory_Default_sequence_swigregister = _SimBldgStoryParams_BuildingStory_Default.SimBldgStoryParams_BuildingStory_Default_sequence_swigregister
SimBldgStoryParams_BuildingStory_Default_sequence_swigregister(SimBldgStoryParams_BuildingStory_Default_sequence)

# This file is compatible with both classic and new-style classes.


