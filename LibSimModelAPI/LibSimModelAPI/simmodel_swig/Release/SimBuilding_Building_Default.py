# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SimBuilding_Building_Default', [dirname(__file__)])
        except ImportError:
            import _SimBuilding_Building_Default
            return _SimBuilding_Building_Default
        if fp is not None:
            try:
                _mod = imp.load_module('_SimBuilding_Building_Default', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SimBuilding_Building_Default = swig_import_helper()
    del swig_import_helper
else:
    import _SimBuilding_Building_Default
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import base
class SimBuilding(base.SimSpatialStructureElement):
    __swig_setmethods__ = {}
    for _s in [base.SimSpatialStructureElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding, name, value)
    __swig_getmethods__ = {}
    for _s in [base.SimSpatialStructureElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding, name)
    __repr__ = _swig_repr

    def Name(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Name(self, *args)

    def BuildingAddress(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingAddress(self, *args)

    def BuildingDatumElevation(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingDatumElevation(self, *args)

    def BuildingOccupancyType(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingOccupancyType(self, *args)

    def BuildingGrossPlannedArea(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingGrossPlannedArea(self, *args)

    def BuildingNumberofStoreys(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingNumberofStoreys(self, *args)

    def BuildingYearOfConstruction(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingYearOfConstruction(self, *args)

    def BuildingisLandmarked(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingisLandmarked(self, *args)

    def BuildingEnergyTargetUnits(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingEnergyTargetUnits(self, *args)

    def BuildingEnergyTargetValue(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingEnergyTargetValue(self, *args)

    def BuildingHeight(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingHeight(self, *args)

    def BuildingGrossFloorArea(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingGrossFloorArea(self, *args)

    def ClassRef_ConstEntByFunction(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_ClassRef_ConstEntByFunction(self, *args)

    def BuildingInSpatialContainer(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingInSpatialContainer(self, *args)

    def Representation(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Representation(self, *args)

    def ElevationOfTerrain(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_ElevationOfTerrain(self, *args)

    def BuildingConstructionsTemplate(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingConstructionsTemplate(self, *args)

    def SpaceBoundsNotCurrent(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_SpaceBoundsNotCurrent(self, *args)

    def DaylightControlsDefault(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_DaylightControlsDefault(self, *args)

    def NatVentilationDefault(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_NatVentilationDefault(self, *args)

    def BuildingInfiltrationType(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingInfiltrationType(self, *args)

    def BuildingInfiltrationValue(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_BuildingInfiltrationValue(self, *args)

    def TemplateOverrideValues(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_TemplateOverrideValues(self, *args)

    def __init__(self, *args):
        this = _SimBuilding_Building_Default.new_SimBuilding(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBuilding_Building_Default.SimBuilding__clone(self, f, c)
    __swig_destroy__ = _SimBuilding_Building_Default.delete_SimBuilding
    __del__ = lambda self: None
SimBuilding_swigregister = _SimBuilding_Building_Default.SimBuilding_swigregister
SimBuilding_swigregister(SimBuilding)

class SimBuilding_Building(SimBuilding):
    __swig_setmethods__ = {}
    for _s in [SimBuilding]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building, name)
    __repr__ = _swig_repr

    def SimBuilding_Name(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_Name(self, *args)

    def SimBuilding_NorthAxis(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_NorthAxis(self, *args)

    def SimBuilding_Terrain(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_Terrain(self, *args)

    def SimBuilding_LoadsConvergTolVal(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_LoadsConvergTolVal(self, *args)

    def SimBuilding_TempConvergTolVal(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_TempConvergTolVal(self, *args)

    def SimBuilding_SolarDist(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_SolarDist(self, *args)

    def SimBuilding_MaxNumWarmupDays(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_MaxNumWarmupDays(self, *args)

    def SimBuilding_MinNumberWarmupDays(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_SimBuilding_MinNumberWarmupDays(self, *args)

    def RoofIrrigation_IrrigationModelType(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_RoofIrrigation_IrrigationModelType(self, *args)

    def RoofIrrigation_IrrigationRateSchedName(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName(self, *args)

    def RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold(self, *args)

    def AboveGradeStoryCountAltered(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_AboveGradeStoryCountAltered(self, *args)

    def AboveGradeStoryCountExists(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_AboveGradeStoryCountExists(self, *args)

    def AboveGradeStoryCountNew(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_AboveGradeStoryCountNew(self, *args)

    def T24CoilCoolingCapacity(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_T24CoilCoolingCapacity(self, *args)

    def T24CoilHeatingCapacity(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_T24CoilHeatingCapacity(self, *args)

    def T24FunctionClassificationMethod(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_T24FunctionClassificationMethod(self, *args)

    def HighRiseResidentialLivingUnitCount(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_HighRiseResidentialLivingUnitCount(self, *args)

    def LivingUnitCountAltered(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_LivingUnitCountAltered(self, *args)

    def LivingUnitCountExisting(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_LivingUnitCountExisting(self, *args)

    def LivingUnitCountNew(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_LivingUnitCountNew(self, *args)

    def T24PlantCoolingCapacity(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_T24PlantCoolingCapacity(self, *args)

    def T24PlantHeatingCapacity(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_T24PlantHeatingCapacity(self, *args)

    def RelocatablePublicSchoolBuilding(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_RelocatablePublicSchoolBuilding(self, *args)

    def TotalStoryCountAltered(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_TotalStoryCountAltered(self, *args)

    def TotalStoryCountExisting(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_TotalStoryCountExisting(self, *args)

    def TotalStoryCountNew(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_TotalStoryCountNew(self, *args)

    def __init__(self, *args):
        this = _SimBuilding_Building_Default.new_SimBuilding_Building(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBuilding_Building_Default.SimBuilding_Building__clone(self, f, c)
    __swig_destroy__ = _SimBuilding_Building_Default.delete_SimBuilding_Building
    __del__ = lambda self: None
SimBuilding_Building_swigregister = _SimBuilding_Building_Default.SimBuilding_Building_swigregister
SimBuilding_Building_swigregister(SimBuilding_Building)

class SimBuilding_Building_Default(SimBuilding_Building):
    __swig_setmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBuilding_Building]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBuilding_Building_Default.new_SimBuilding_Building_Default(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default__clone(self, f, c)
    __swig_destroy__ = _SimBuilding_Building_Default.delete_SimBuilding_Building_Default
    __del__ = lambda self: None
SimBuilding_Building_Default_swigregister = _SimBuilding_Building_Default.SimBuilding_Building_Default_swigregister
SimBuilding_Building_Default_swigregister(SimBuilding_Building_Default)

class SimBuilding_Building_Default_sequence(base.sequence_common):
    __swig_setmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuilding_Building_Default_sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuilding_Building_Default_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBuilding_Building_Default.new_SimBuilding_Building_Default_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_assign(self, n, x)

    def begin(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_begin(self, *args)

    def end(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_end(self, *args)

    def rbegin(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_rend(self, *args)

    def at(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_at(self, *args)

    def front(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_front(self, *args)

    def back(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_back(self, *args)

    def push_back(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_push_back(self, *args)

    def pop_back(self):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_pop_back(self)

    def detach_back(self, pop=True):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_detach_back(self, pop)

    def insert(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_insert(self, *args)

    def erase(self, *args):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_erase(self, *args)

    def detach(self, position, r, erase=True):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_detach(self, position, r, erase)

    def swap(self, x):
        return _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_swap(self, x)
    __swig_destroy__ = _SimBuilding_Building_Default.delete_SimBuilding_Building_Default_sequence
    __del__ = lambda self: None
SimBuilding_Building_Default_sequence_swigregister = _SimBuilding_Building_Default.SimBuilding_Building_Default_sequence_swigregister
SimBuilding_Building_Default_sequence_swigregister(SimBuilding_Building_Default_sequence)

class BuildingHeight_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BuildingHeight_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BuildingHeight_optional, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimBuilding_Building_Default.new_BuildingHeight_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _SimBuilding_Building_Default.BuildingHeight_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _SimBuilding_Building_Default.BuildingHeight_optional___ref__(self, *args)

    def present(self):
        return _SimBuilding_Building_Default.BuildingHeight_optional_present(self)

    def get(self, *args):
        return _SimBuilding_Building_Default.BuildingHeight_optional_get(self, *args)

    def getV(self):
        return _SimBuilding_Building_Default.BuildingHeight_optional_getV(self)

    def getValue(self):
        return _SimBuilding_Building_Default.BuildingHeight_optional_getValue(self)

    def set(self, y):
        return _SimBuilding_Building_Default.BuildingHeight_optional_set(self, y)

    def reset(self):
        return _SimBuilding_Building_Default.BuildingHeight_optional_reset(self)
    __swig_destroy__ = _SimBuilding_Building_Default.delete_BuildingHeight_optional
    __del__ = lambda self: None
BuildingHeight_optional_swigregister = _SimBuilding_Building_Default.BuildingHeight_optional_swigregister
BuildingHeight_optional_swigregister(BuildingHeight_optional)

# This file is compatible with both classic and new-style classes.


