# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base', [dirname(__file__)])
        except ImportError:
            import _base
            return _base
        if fp is not None:
            try:
                _mod = imp.load_module('_base', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _base = swig_import_helper()
    del swig_import_helper
else:
    import _base
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _base.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _base.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _base.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _base.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _base.SwigPyIterator_equal(self, x)

    def copy(self):
        return _base.SwigPyIterator_copy(self)

    def next(self):
        return _base.SwigPyIterator_next(self)

    def __next__(self):
        return _base.SwigPyIterator___next__(self)

    def previous(self):
        return _base.SwigPyIterator_previous(self)

    def advance(self, n):
        return _base.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _base.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _base.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _base.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _base.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _base.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _base.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _base.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class element_one(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_one, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_one, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_element_one
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _base.new_element_one(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def get(self, *args):
        return _base.element_one_get(self, *args)

    def set(self, *args):
        return _base.element_one_set(self, *args)

    def present(self):
        return _base.element_one_present(self)
element_one_swigregister = _base.element_one_swigregister
element_one_swigregister(element_one)

class element_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_optional, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_element_optional
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _base.new_element_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _base.element_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _base.element_optional___ref__(self, *args)

    def present(self):
        return _base.element_optional_present(self)

    def get(self, *args):
        return _base.element_optional_get(self, *args)

    def set(self, *args):
        return _base.element_optional_set(self, *args)

    def reset(self):
        return _base.element_optional_reset(self)
element_optional_swigregister = _base.element_optional_swigregister
element_optional_swigregister(element_optional)

class element_sequence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, element_sequence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, element_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_element_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _base.element_sequence_assign(self, n, x)

    def resize(self, *args):
        return _base.element_sequence_resize(self, *args)

    def size(self):
        return _base.element_sequence_size(self)

    def max_size(self):
        return _base.element_sequence_max_size(self)

    def capacity(self):
        return _base.element_sequence_capacity(self)

    def empty(self):
        return _base.element_sequence_empty(self)

    def reserve(self, n):
        return _base.element_sequence_reserve(self, n)

    def clear(self):
        return _base.element_sequence_clear(self)

    def begin(self, *args):
        return _base.element_sequence_begin(self, *args)

    def end(self, *args):
        return _base.element_sequence_end(self, *args)

    def rbegin(self, *args):
        return _base.element_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _base.element_sequence_rend(self, *args)

    def at(self, *args):
        return _base.element_sequence_at(self, *args)

    def front(self, *args):
        return _base.element_sequence_front(self, *args)

    def back(self, *args):
        return _base.element_sequence_back(self, *args)

    def push_back(self, *args):
        return _base.element_sequence_push_back(self, *args)

    def pop_back(self):
        return _base.element_sequence_pop_back(self)

    def insert(self, *args):
        return _base.element_sequence_insert(self, *args)

    def erase(self, *args):
        return _base.element_sequence_erase(self, *args)

    def swap(self, x):
        return _base.element_sequence_swap(self, x)
    __swig_destroy__ = _base.delete_element_sequence
    __del__ = lambda self: None
element_sequence_swigregister = _base.element_sequence_swigregister
element_sequence_swigregister(element_sequence)

class attribute_set_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attribute_set_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attribute_set_common, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _base.new_attribute_set_common()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _base.delete_attribute_set_common
    __del__ = lambda self: None
attribute_set_common_swigregister = _base.attribute_set_common_swigregister
attribute_set_common_swigregister(attribute_set_common)

class flags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, flags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, flags, name)
    __repr__ = _swig_repr
    keep_dom = _base.flags_keep_dom
    own_dom = _base.flags_own_dom
    dont_validate = _base.flags_dont_validate
    extract_content = _base.flags_extract_content
    dont_initialize = _base.flags_dont_initialize
    no_xml_declaration = _base.flags_no_xml_declaration
    dont_pretty_print = _base.flags_dont_pretty_print
    base = _base.flags_base

    def __init__(self, x=0):
        this = _base.new_flags(x)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _base.delete_flags
    __del__ = lambda self: None
flags_swigregister = _base.flags_swigregister
flags_swigregister(flags)

class content_order(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, content_order, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, content_order, name)
    __repr__ = _swig_repr

    def __init__(self, id, index=0):
        this = _base.new_content_order(id, index)
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_setmethods__["id"] = _base.content_order_id_set
    __swig_getmethods__["id"] = _base.content_order_id_get
    if _newclass:
        id = _swig_property(_base.content_order_id_get, _base.content_order_id_set)
    __swig_setmethods__["index"] = _base.content_order_index_set
    __swig_getmethods__["index"] = _base.content_order_index_get
    if _newclass:
        index = _swig_property(_base.content_order_index_get, _base.content_order_index_set)
    __swig_destroy__ = _base.delete_content_order
    __del__ = lambda self: None
content_order_swigregister = _base.content_order_swigregister
content_order_swigregister(content_order)


def __eq__(*args):
    return _base.__eq__(*args)
__eq__ = _base.__eq__

def __ne__(*args):
    return _base.__ne__(*args)
__ne__ = _base.__ne__

def __lt__(arg1, arg2):
    return _base.__lt__(arg1, arg2)
__lt__ = _base.__lt__
class identity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, identity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, identity, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_identity
    __del__ = lambda self: None

    def before(self, arg2):
        return _base.identity_before(self, arg2)

    def throw_duplicate_id(self):
        return _base.identity_throw_duplicate_id(self)
identity_swigregister = _base.identity_swigregister
identity_swigregister(identity)

class _type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _type, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete__type
    __del__ = lambda self: None

    def _clone(self, *args):
        return _base._type__clone(self, *args)

    def __init__(self, *args):
        this = _base.new__type(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def dom_content(self, *args):
        return _base._type_dom_content(self, *args)

    def dom_content_document(self, *args):
        return _base._type_dom_content_document(self, *args)

    def null_content(self):
        return _base._type_null_content(self)

    def _container(self, *args):
        return _base._type__container(self, *args)

    def _root(self, *args):
        return _base._type__root(self, *args)

    def _node(self, *args):
        return _base._type__node(self, *args)

    def _register_id(self, i, t):
        return _base._type__register_id(self, i, t)

    def _unregister_id(self, id):
        return _base._type__unregister_id(self, id)

    def _lookup_id(self, id):
        return _base._type__lookup_id(self, id)
_type_swigregister = _base._type_swigregister
_type_swigregister(_type)

class schema_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, schema_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, schema_type, name)
    __repr__ = _swig_repr
    other = _base.schema_type_other
    double_ = _base.schema_type_double_
    decimal = _base.schema_type_decimal

    def __init__(self):
        this = _base.new_schema_type()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _base.delete_schema_type
    __del__ = lambda self: None
schema_type_swigregister = _base.schema_type_swigregister
schema_type_swigregister(schema_type)

class sequence_common(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sequence_common, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sequence_common, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_sequence_common(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def size(self):
        return _base.sequence_common_size(self)

    def sizeInt(self):
        return _base.sequence_common_sizeInt(self)

    def max_size(self):
        return _base.sequence_common_max_size(self)

    def capacity(self):
        return _base.sequence_common_capacity(self)

    def empty(self):
        return _base.sequence_common_empty(self)

    def reserve(self, n):
        return _base.sequence_common_reserve(self, n)

    def clear(self):
        return _base.sequence_common_clear(self)

    def assign(self, n, x):
        return _base.sequence_common_assign(self, n, x)

    def resize(self, n, x):
        return _base.sequence_common_resize(self, n, x)

    def insert(self, p, n, x):
        return _base.sequence_common_insert(self, p, n, x)
    __swig_setmethods__["container_"] = _base.sequence_common_container__set
    __swig_getmethods__["container_"] = _base.sequence_common_container__get
    if _newclass:
        container_ = _swig_property(_base.sequence_common_container__get, _base.sequence_common_container__set)
    __swig_setmethods__["v_"] = _base.sequence_common_v__set
    __swig_getmethods__["v_"] = _base.sequence_common_v__get
    if _newclass:
        v_ = _swig_property(_base.sequence_common_v__get, _base.sequence_common_v__set)
    __swig_destroy__ = _base.delete_sequence_common
    __del__ = lambda self: None
sequence_common_swigregister = _base.sequence_common_swigregister
sequence_common_swigregister(sequence_common)

class SimRoot(_type):
    __swig_setmethods__ = {}
    for _s in [_type]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRoot, name, value)
    __swig_getmethods__ = {}
    for _s in [_type]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimRoot, name)
    __repr__ = _swig_repr

    def Description(self, *args):
        return _base.SimRoot_Description(self, *args)

    def ObjectOwnerHistory(self, *args):
        return _base.SimRoot_ObjectOwnerHistory(self, *args)

    def IfcGlobalID(self, *args):
        return _base.SimRoot_IfcGlobalID(self, *args)

    def IfcName(self, *args):
        return _base.SimRoot_IfcName(self, *args)

    def SimUniqueID(self, *args):
        return _base.SimRoot_SimUniqueID(self, *args)

    def SimModelType(self, *args):
        return _base.SimRoot_SimModelType(self, *args)

    def SimModelSubtype(self, *args):
        return _base.SimRoot_SimModelSubtype(self, *args)

    def SimModelName(self, *args):
        return _base.SimRoot_SimModelName(self, *args)

    def SourceModelSchema(self, *args):
        return _base.SimRoot_SourceModelSchema(self, *args)

    def SourceModelObjectType(self, *args):
        return _base.SimRoot_SourceModelObjectType(self, *args)

    def SourceLibraryEntryID(self, *args):
        return _base.SimRoot_SourceLibraryEntryID(self, *args)

    def SourceLibraryEntryRef(self, *args):
        return _base.SimRoot_SourceLibraryEntryRef(self, *args)

    def RefId(self, *args):
        return _base.SimRoot_RefId(self, *args)

    def __init__(self, *args):
        this = _base.new_SimRoot(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimRoot__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimRoot
    __del__ = lambda self: None
SimRoot_swigregister = _base.SimRoot_swigregister
SimRoot_swigregister(SimRoot)
cvar = _base.cvar
tree_node_key = cvar.tree_node_key

class SimObjectDefinition(SimRoot):
    __swig_setmethods__ = {}
    for _s in [SimRoot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObjectDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRoot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObjectDefinition, name)
    __repr__ = _swig_repr

    def Decomposes(self, *args):
        return _base.SimObjectDefinition_Decomposes(self, *args)

    def __init__(self, *args):
        this = _base.new_SimObjectDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimObjectDefinition__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimObjectDefinition
    __del__ = lambda self: None
SimObjectDefinition_swigregister = _base.SimObjectDefinition_swigregister
SimObjectDefinition_swigregister(SimObjectDefinition)

class SimObject(SimObjectDefinition):
    __swig_setmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObject, name)
    __repr__ = _swig_repr

    def TypeDefinition(self, *args):
        return _base.SimObject_TypeDefinition(self, *args)

    def ObjectType(self, *args):
        return _base.SimObject_ObjectType(self, *args)

    def ObjectCreationParams(self, *args):
        return _base.SimObject_ObjectCreationParams(self, *args)

    def IsTemplateObject(self, *args):
        return _base.SimObject_IsTemplateObject(self, *args)

    def __init__(self, *args):
        this = _base.new_SimObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimObject__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimObject
    __del__ = lambda self: None
SimObject_swigregister = _base.SimObject_swigregister
SimObject_swigregister(SimObject)

class SimGroup(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimGroup, name)
    __repr__ = _swig_repr

    def ParentGroups(self, *args):
        return _base.SimGroup_ParentGroups(self, *args)

    def ContainingBuildings(self, *args):
        return _base.SimGroup_ContainingBuildings(self, *args)

    def NevronSchematicLayout(self, *args):
        return _base.SimGroup_NevronSchematicLayout(self, *args)

    def TemplatesForMembers(self, *args):
        return _base.SimGroup_TemplatesForMembers(self, *args)

    def HasTemplateChanged(self, *args):
        return _base.SimGroup_HasTemplateChanged(self, *args)

    def ChangeFromTemplate(self, *args):
        return _base.SimGroup_ChangeFromTemplate(self, *args)

    def MemberUsedForDiagrams(self, *args):
        return _base.SimGroup_MemberUsedForDiagrams(self, *args)

    def __init__(self, *args):
        this = _base.new_SimGroup(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimGroup__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimGroup
    __del__ = lambda self: None
SimGroup_swigregister = _base.SimGroup_swigregister
SimGroup_swigregister(SimGroup)

class SimSpatialStructureElement(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpatialStructureElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpatialStructureElement, name)
    __repr__ = _swig_repr

    def LongName(self, *args):
        return _base.SimSpatialStructureElement_LongName(self, *args)

    def CompositionType(self, *args):
        return _base.SimSpatialStructureElement_CompositionType(self, *args)

    def Placement(self, *args):
        return _base.SimSpatialStructureElement_Placement(self, *args)

    def __init__(self, *args):
        this = _base.new_SimSpatialStructureElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimSpatialStructureElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimSpatialStructureElement
    __del__ = lambda self: None
SimSpatialStructureElement_swigregister = _base.SimSpatialStructureElement_swigregister
SimSpatialStructureElement_swigregister(SimSpatialStructureElement)

class SimResourceObject(SimRoot):
    __swig_setmethods__ = {}
    for _s in [SimRoot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimResourceObject, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRoot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimResourceObject, name)
    __repr__ = _swig_repr

    def AssignedToGroups(self, *args):
        return _base.SimResourceObject_AssignedToGroups(self, *args)

    def SelectedPropertyGroups(self, *args):
        return _base.SimResourceObject_SelectedPropertyGroups(self, *args)

    def IsTemplateObject(self, *args):
        return _base.SimResourceObject_IsTemplateObject(self, *args)

    def __init__(self, *args):
        this = _base.new_SimResourceObject(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimResourceObject__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimResourceObject
    __del__ = lambda self: None
SimResourceObject_swigregister = _base.SimResourceObject_swigregister
SimResourceObject_swigregister(SimResourceObject)

class SimAppDefault(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimAppDefault, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimAppDefault, name)
    __repr__ = _swig_repr

    def DefaultForProject(self, *args):
        return _base.SimAppDefault_DefaultForProject(self, *args)

    def DefaultForPerson(self, *args):
        return _base.SimAppDefault_DefaultForPerson(self, *args)

    def DefaultForUnitSystem(self, *args):
        return _base.SimAppDefault_DefaultForUnitSystem(self, *args)

    def __init__(self, *args):
        this = _base.new_SimAppDefault(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimAppDefault__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimAppDefault
    __del__ = lambda self: None
SimAppDefault_swigregister = _base.SimAppDefault_swigregister
SimAppDefault_swigregister(SimAppDefault)

class SimRepresentationItem(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimRepresentationItem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimRepresentationItem__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimRepresentationItem
    __del__ = lambda self: None
SimRepresentationItem_swigregister = _base.SimRepresentationItem_swigregister
SimRepresentationItem_swigregister(SimRepresentationItem)

class SimProfileDefinition(SimRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimProfileDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimProfileDefinition, name)
    __repr__ = _swig_repr

    def ProfileType(self, *args):
        return _base.SimProfileDefinition_ProfileType(self, *args)

    def ProfileName(self, *args):
        return _base.SimProfileDefinition_ProfileName(self, *args)

    def __init__(self, *args):
        this = _base.new_SimProfileDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimProfileDefinition__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimProfileDefinition
    __del__ = lambda self: None
SimProfileDefinition_swigregister = _base.SimProfileDefinition_swigregister
SimProfileDefinition_swigregister(SimProfileDefinition)

class SimBldgModelParams(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBldgModelParams, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBldgModelParams, name)
    __repr__ = _swig_repr

    def ObjectIndex(self, *args):
        return _base.SimBldgModelParams_ObjectIndex(self, *args)

    def ObjectName(self, *args):
        return _base.SimBldgModelParams_ObjectName(self, *args)

    def IsAutoGenerated(self, *args):
        return _base.SimBldgModelParams_IsAutoGenerated(self, *args)

    def LocalPlacementX(self, *args):
        return _base.SimBldgModelParams_LocalPlacementX(self, *args)

    def LocalPlacementY(self, *args):
        return _base.SimBldgModelParams_LocalPlacementY(self, *args)

    def LocalPlacementZ(self, *args):
        return _base.SimBldgModelParams_LocalPlacementZ(self, *args)

    def LocalPlacementRotation(self, *args):
        return _base.SimBldgModelParams_LocalPlacementRotation(self, *args)

    def XDirectionX(self, *args):
        return _base.SimBldgModelParams_XDirectionX(self, *args)

    def XDirectionY(self, *args):
        return _base.SimBldgModelParams_XDirectionY(self, *args)

    def XDirectionZ(self, *args):
        return _base.SimBldgModelParams_XDirectionZ(self, *args)

    def __init__(self, *args):
        this = _base.new_SimBldgModelParams(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimBldgModelParams__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimBldgModelParams
    __del__ = lambda self: None
SimBldgModelParams_swigregister = _base.SimBldgModelParams_swigregister
SimBldgModelParams_swigregister(SimBldgModelParams)

class SimTopologicalRepresentationItem(SimRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTopologicalRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimTopologicalRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimTopologicalRepresentationItem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimTopologicalRepresentationItem__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimTopologicalRepresentationItem
    __del__ = lambda self: None
SimTopologicalRepresentationItem_swigregister = _base.SimTopologicalRepresentationItem_swigregister
SimTopologicalRepresentationItem_swigregister(SimTopologicalRepresentationItem)

class SimElement(SimObject):
    __swig_setmethods__ = {}
    for _s in [SimObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimElement, name)
    __repr__ = _swig_repr

    def GeometricRepresentations(self, *args):
        return _base.SimElement_GeometricRepresentations(self, *args)

    def ContainingSpatialStructure(self, *args):
        return _base.SimElement_ContainingSpatialStructure(self, *args)

    def AssignedToGroups(self, *args):
        return _base.SimElement_AssignedToGroups(self, *args)

    def Placement(self, *args):
        return _base.SimElement_Placement(self, *args)

    def Tag(self, *args):
        return _base.SimElement_Tag(self, *args)

    def SelectedPropertyGroups(self, *args):
        return _base.SimElement_SelectedPropertyGroups(self, *args)

    def __init__(self, *args):
        this = _base.new_SimElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimElement
    __del__ = lambda self: None
SimElement_swigregister = _base.SimElement_swigregister
SimElement_swigregister(SimElement)

class SimDistributionElement(SimElement):
    __swig_setmethods__ = {}
    for _s in [SimElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimDistributionElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimDistributionElement, name)
    __repr__ = _swig_repr

    def DockedToPort(self, *args):
        return _base.SimDistributionElement_DockedToPort(self, *args)

    def __init__(self, *args):
        this = _base.new_SimDistributionElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimDistributionElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimDistributionElement
    __del__ = lambda self: None
SimDistributionElement_swigregister = _base.SimDistributionElement_swigregister
SimDistributionElement_swigregister(SimDistributionElement)

class SimDistributionControlElement(SimDistributionElement):
    __swig_setmethods__ = {}
    for _s in [SimDistributionElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimDistributionControlElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimDistributionElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimDistributionControlElement, name)
    __repr__ = _swig_repr

    def AssignedToFlowElement(self, *args):
        return _base.SimDistributionControlElement_AssignedToFlowElement(self, *args)

    def ControlElementID(self, *args):
        return _base.SimDistributionControlElement_ControlElementID(self, *args)

    def __init__(self, *args):
        this = _base.new_SimDistributionControlElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimDistributionControlElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimDistributionControlElement
    __del__ = lambda self: None
SimDistributionControlElement_swigregister = _base.SimDistributionControlElement_swigregister
SimDistributionControlElement_swigregister(SimDistributionControlElement)

class SimUnitType(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimUnitType, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimUnitType, name)
    __repr__ = _swig_repr

    def UnitType_String(self, *args):
        return _base.SimUnitType_UnitType_String(self, *args)

    def Name(self, *args):
        return _base.SimUnitType_Name(self, *args)

    def DecimalPrecision(self, *args):
        return _base.SimUnitType_DecimalPrecision(self, *args)

    def __init__(self, *args):
        this = _base.new_SimUnitType(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimUnitType__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimUnitType
    __del__ = lambda self: None
SimUnitType_swigregister = _base.SimUnitType_swigregister
SimUnitType_swigregister(SimUnitType)

class SimNode(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimNode, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimNode, name)
    __repr__ = _swig_repr

    def HostElement(self, *args):
        return _base.SimNode_HostElement(self, *args)

    def __init__(self, *args):
        this = _base.new_SimNode(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimNode__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimNode
    __del__ = lambda self: None
SimNode_swigregister = _base.SimNode_swigregister
SimNode_swigregister(SimNode)

class SimPort(SimNode):
    __swig_setmethods__ = {}
    for _s in [SimNode]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimPort, name, value)
    __swig_getmethods__ = {}
    for _s in [SimNode]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimPort, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimPort(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimPort__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimPort
    __del__ = lambda self: None
SimPort_swigregister = _base.SimPort_swigregister
SimPort_swigregister(SimPort)

class SimFeatureElement(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimFeatureElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimFeatureElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimFeatureElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimFeatureElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimFeatureElement
    __del__ = lambda self: None
SimFeatureElement_swigregister = _base.SimFeatureElement_swigregister
SimFeatureElement_swigregister(SimFeatureElement)

class SimDistributionFlowElement(SimDistributionElement):
    __swig_setmethods__ = {}
    for _s in [SimDistributionElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimDistributionFlowElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimDistributionElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimDistributionFlowElement, name)
    __repr__ = _swig_repr

    def ControlledBy(self, *args):
        return _base.SimDistributionFlowElement_ControlledBy(self, *args)

    def _3dLength(self, *args):
        return _base.SimDistributionFlowElement__3dLength(self, *args)

    def _3dWidth(self, *args):
        return _base.SimDistributionFlowElement__3dWidth(self, *args)

    def _3dHeight(self, *args):
        return _base.SimDistributionFlowElement__3dHeight(self, *args)

    def __init__(self, *args):
        this = _base.new_SimDistributionFlowElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimDistributionFlowElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimDistributionFlowElement
    __del__ = lambda self: None
SimDistributionFlowElement_swigregister = _base.SimDistributionFlowElement_swigregister
SimDistributionFlowElement_swigregister(SimDistributionFlowElement)

class SimFlowEnergyConverter(SimDistributionFlowElement):
    __swig_setmethods__ = {}
    for _s in [SimDistributionFlowElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimFlowEnergyConverter, name, value)
    __swig_getmethods__ = {}
    for _s in [SimDistributionFlowElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimFlowEnergyConverter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimFlowEnergyConverter(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimFlowEnergyConverter__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimFlowEnergyConverter
    __del__ = lambda self: None
SimFlowEnergyConverter_swigregister = _base.SimFlowEnergyConverter_swigregister
SimFlowEnergyConverter_swigregister(SimFlowEnergyConverter)

class SimGeometricRepresentationItem(SimRepresentationItem):
    __swig_setmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimGeometricRepresentationItem, name, value)
    __swig_getmethods__ = {}
    for _s in [SimRepresentationItem]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimGeometricRepresentationItem, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimGeometricRepresentationItem(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimGeometricRepresentationItem__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimGeometricRepresentationItem
    __del__ = lambda self: None
SimGeometricRepresentationItem_swigregister = _base.SimGeometricRepresentationItem_swigregister
SimGeometricRepresentationItem_swigregister(SimGeometricRepresentationItem)

class SimObjectPlacement(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObjectPlacement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObjectPlacement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimObjectPlacement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimObjectPlacement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimObjectPlacement
    __del__ = lambda self: None
SimObjectPlacement_swigregister = _base.SimObjectPlacement_swigregister
SimObjectPlacement_swigregister(SimObjectPlacement)

class SimActorDefinition(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimActorDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimActorDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimActorDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimActorDefinition__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimActorDefinition
    __del__ = lambda self: None
SimActorDefinition_swigregister = _base.SimActorDefinition_swigregister
SimActorDefinition_swigregister(SimActorDefinition)

class SimRepresentation(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimRepresentation, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimRepresentation, name)
    __repr__ = _swig_repr

    def RepresentationContext(self, *args):
        return _base.SimRepresentation_RepresentationContext(self, *args)

    def RepresentationIdentifier(self, *args):
        return _base.SimRepresentation_RepresentationIdentifier(self, *args)

    def RepresentationType(self, *args):
        return _base.SimRepresentation_RepresentationType(self, *args)

    def RepresentationItems(self, *args):
        return _base.SimRepresentation_RepresentationItems(self, *args)

    def __init__(self, *args):
        this = _base.new_SimRepresentation(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimRepresentation__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimRepresentation
    __del__ = lambda self: None
SimRepresentation_swigregister = _base.SimRepresentation_swigregister
SimRepresentation_swigregister(SimRepresentation)

class SimBuildingElement(SimElement):
    __swig_setmethods__ = {}
    for _s in [SimElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimBuildingElement, name, value)
    __swig_getmethods__ = {}
    for _s in [SimElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimBuildingElement, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimBuildingElement(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimBuildingElement__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimBuildingElement
    __del__ = lambda self: None
SimBuildingElement_swigregister = _base.SimBuildingElement_swigregister
SimBuildingElement_swigregister(SimBuildingElement)

class SimTemplate(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimTemplate, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimTemplate(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimTemplate__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimTemplate
    __del__ = lambda self: None
SimTemplate_swigregister = _base.SimTemplate_swigregister
SimTemplate_swigregister(SimTemplate)

class SimObjectTypeDefinition(SimObjectDefinition):
    __swig_setmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimObjectTypeDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimObjectDefinition]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimObjectTypeDefinition, name)
    __repr__ = _swig_repr

    def ApplicableOccurrence(self, *args):
        return _base.SimObjectTypeDefinition_ApplicableOccurrence(self, *args)

    def HasPropertySets(self, *args):
        return _base.SimObjectTypeDefinition_HasPropertySets(self, *args)

    def TypeDefCreationParams(self, *args):
        return _base.SimObjectTypeDefinition_TypeDefCreationParams(self, *args)

    def PlacementRelToContainingTypeDef(self, *args):
        return _base.SimObjectTypeDefinition_PlacementRelToContainingTypeDef(self, *args)

    def __init__(self, *args):
        this = _base.new_SimObjectTypeDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimObjectTypeDefinition__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimObjectTypeDefinition
    __del__ = lambda self: None
SimObjectTypeDefinition_swigregister = _base.SimObjectTypeDefinition_swigregister
SimObjectTypeDefinition_swigregister(SimObjectTypeDefinition)

class SimArrayParams(SimBldgModelParams):
    __swig_setmethods__ = {}
    for _s in [SimBldgModelParams]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimArrayParams, name, value)
    __swig_getmethods__ = {}
    for _s in [SimBldgModelParams]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimArrayParams, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimArrayParams(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimArrayParams__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimArrayParams
    __del__ = lambda self: None
SimArrayParams_swigregister = _base.SimArrayParams_swigregister
SimArrayParams_swigregister(SimArrayParams)

class SimPropertySetDefinition(SimResourceObject):
    __swig_setmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimPropertySetDefinition, name, value)
    __swig_getmethods__ = {}
    for _s in [SimResourceObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimPropertySetDefinition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_SimPropertySetDefinition(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _base.SimPropertySetDefinition__clone(self, f, c)
    __swig_destroy__ = _base.delete_SimPropertySetDefinition
    __del__ = lambda self: None
SimPropertySetDefinition_swigregister = _base.SimPropertySetDefinition_swigregister
SimPropertySetDefinition_swigregister(SimPropertySetDefinition)

class decimal_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decimal_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decimal_optional, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_decimal_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _base.decimal_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _base.decimal_optional___ref__(self, *args)

    def present(self):
        return _base.decimal_optional_present(self)

    def get(self, *args):
        return _base.decimal_optional_get(self, *args)

    def getValue(self):
        return _base.decimal_optional_getValue(self)

    def set(self, y):
        return _base.decimal_optional_set(self, y)

    def reset(self):
        return _base.decimal_optional_reset(self)
    __swig_destroy__ = _base.delete_decimal_optional
    __del__ = lambda self: None
decimal_optional_swigregister = _base.decimal_optional_swigregister
decimal_optional_swigregister(decimal_optional)

class int_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, int_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, int_optional, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _base.new_int_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _base.int_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _base.int_optional___ref__(self, *args)

    def present(self):
        return _base.int_optional_present(self)

    def get(self, *args):
        return _base.int_optional_get(self, *args)

    def getValue(self):
        return _base.int_optional_getValue(self)

    def set(self, y):
        return _base.int_optional_set(self, y)

    def reset(self):
        return _base.int_optional_reset(self)
    __swig_destroy__ = _base.delete_int_optional
    __del__ = lambda self: None
int_optional_swigregister = _base.int_optional_swigregister
int_optional_swigregister(int_optional)

class string_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_optional, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_string_optional
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _base.new_string_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _base.string_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _base.string_optional___ref__(self, *args)

    def present(self):
        return _base.string_optional_present(self)

    def get(self, *args):
        return _base.string_optional_get(self, *args)

    def getValue(self):
        return _base.string_optional_getValue(self)

    def set(self, x):
        return _base.string_optional_set(self, x)

    def reset(self):
        return _base.string_optional_reset(self)
    __swig_setmethods__["x_"] = _base.string_optional_x__set
    __swig_getmethods__["x_"] = _base.string_optional_x__get
    if _newclass:
        x_ = _swig_property(_base.string_optional_x__get, _base.string_optional_x__set)
    __swig_setmethods__["container_"] = _base.string_optional_container__set
    __swig_getmethods__["container_"] = _base.string_optional_container__get
    if _newclass:
        container_ = _swig_property(_base.string_optional_container__get, _base.string_optional_container__set)
string_optional_swigregister = _base.string_optional_swigregister
string_optional_swigregister(string_optional)

class idref_optional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, idref_optional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, idref_optional, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _base.delete_idref_optional
    __del__ = lambda self: None

    def __init__(self, *args):
        this = _base.new_idref_optional(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def __deref__(self, *args):
        return _base.idref_optional___deref__(self, *args)

    def __ref__(self, *args):
        return _base.idref_optional___ref__(self, *args)

    def present(self):
        return _base.idref_optional_present(self)

    def get(self, *args):
        return _base.idref_optional_get(self, *args)

    def getValue(self):
        return _base.idref_optional_getValue(self)

    def set(self, x):
        return _base.idref_optional_set(self, x)

    def reset(self):
        return _base.idref_optional_reset(self)
    __swig_setmethods__["x_"] = _base.idref_optional_x__set
    __swig_getmethods__["x_"] = _base.idref_optional_x__get
    if _newclass:
        x_ = _swig_property(_base.idref_optional_x__get, _base.idref_optional_x__set)
    __swig_setmethods__["container_"] = _base.idref_optional_container__set
    __swig_getmethods__["container_"] = _base.idref_optional_container__get
    if _newclass:
        container_ = _swig_property(_base.idref_optional_container__get, _base.idref_optional_container__set)
idref_optional_swigregister = _base.idref_optional_swigregister
idref_optional_swigregister(idref_optional)

# This file is compatible with both classic and new-style classes.


