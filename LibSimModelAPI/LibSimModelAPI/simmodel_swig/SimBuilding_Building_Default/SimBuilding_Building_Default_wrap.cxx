/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.7
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 


/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AboveGradeStoryCountAltered_optional swig_types[0]
#define SWIGTYPE_p_AboveGradeStoryCountAltered_traits swig_types[1]
#define SWIGTYPE_p_AboveGradeStoryCountAltered_type swig_types[2]
#define SWIGTYPE_p_AboveGradeStoryCountExists_optional swig_types[3]
#define SWIGTYPE_p_AboveGradeStoryCountExists_traits swig_types[4]
#define SWIGTYPE_p_AboveGradeStoryCountExists_type swig_types[5]
#define SWIGTYPE_p_AboveGradeStoryCountNew_optional swig_types[6]
#define SWIGTYPE_p_AboveGradeStoryCountNew_traits swig_types[7]
#define SWIGTYPE_p_AboveGradeStoryCountNew_type swig_types[8]
#define SWIGTYPE_p_BuildingAddress_optional swig_types[9]
#define SWIGTYPE_p_BuildingAddress_traits swig_types[10]
#define SWIGTYPE_p_BuildingAddress_type swig_types[11]
#define SWIGTYPE_p_BuildingConstructionsTemplate_optional swig_types[12]
#define SWIGTYPE_p_BuildingConstructionsTemplate_traits swig_types[13]
#define SWIGTYPE_p_BuildingConstructionsTemplate_type swig_types[14]
#define SWIGTYPE_p_BuildingDatumElevation_optional swig_types[15]
#define SWIGTYPE_p_BuildingDatumElevation_traits swig_types[16]
#define SWIGTYPE_p_BuildingDatumElevation_type swig_types[17]
#define SWIGTYPE_p_BuildingEnergyTargetUnits_optional swig_types[18]
#define SWIGTYPE_p_BuildingEnergyTargetUnits_traits swig_types[19]
#define SWIGTYPE_p_BuildingEnergyTargetUnits_type swig_types[20]
#define SWIGTYPE_p_BuildingEnergyTargetValue_optional swig_types[21]
#define SWIGTYPE_p_BuildingEnergyTargetValue_traits swig_types[22]
#define SWIGTYPE_p_BuildingEnergyTargetValue_type swig_types[23]
#define SWIGTYPE_p_BuildingGrossFloorArea_optional swig_types[24]
#define SWIGTYPE_p_BuildingGrossFloorArea_traits swig_types[25]
#define SWIGTYPE_p_BuildingGrossFloorArea_type swig_types[26]
#define SWIGTYPE_p_BuildingGrossPlannedArea_optional swig_types[27]
#define SWIGTYPE_p_BuildingGrossPlannedArea_traits swig_types[28]
#define SWIGTYPE_p_BuildingGrossPlannedArea_type swig_types[29]
#define SWIGTYPE_p_BuildingHeight_optional swig_types[30]
#define SWIGTYPE_p_BuildingHeight_traits swig_types[31]
#define SWIGTYPE_p_BuildingHeight_type swig_types[32]
#define SWIGTYPE_p_BuildingInSpatialContainer_optional swig_types[33]
#define SWIGTYPE_p_BuildingInSpatialContainer_traits swig_types[34]
#define SWIGTYPE_p_BuildingInSpatialContainer_type swig_types[35]
#define SWIGTYPE_p_BuildingInfiltrationType_optional swig_types[36]
#define SWIGTYPE_p_BuildingInfiltrationType_traits swig_types[37]
#define SWIGTYPE_p_BuildingInfiltrationType_type swig_types[38]
#define SWIGTYPE_p_BuildingInfiltrationValue_optional swig_types[39]
#define SWIGTYPE_p_BuildingInfiltrationValue_traits swig_types[40]
#define SWIGTYPE_p_BuildingInfiltrationValue_type swig_types[41]
#define SWIGTYPE_p_BuildingNumberofStoreys_optional swig_types[42]
#define SWIGTYPE_p_BuildingNumberofStoreys_traits swig_types[43]
#define SWIGTYPE_p_BuildingNumberofStoreys_type swig_types[44]
#define SWIGTYPE_p_BuildingOccupancyType_optional swig_types[45]
#define SWIGTYPE_p_BuildingOccupancyType_traits swig_types[46]
#define SWIGTYPE_p_BuildingOccupancyType_type swig_types[47]
#define SWIGTYPE_p_BuildingYearOfConstruction_optional swig_types[48]
#define SWIGTYPE_p_BuildingYearOfConstruction_traits swig_types[49]
#define SWIGTYPE_p_BuildingYearOfConstruction_type swig_types[50]
#define SWIGTYPE_p_BuildingisLandmarked_optional swig_types[51]
#define SWIGTYPE_p_BuildingisLandmarked_traits swig_types[52]
#define SWIGTYPE_p_BuildingisLandmarked_type swig_types[53]
#define SWIGTYPE_p_ChangeFromTemplate_optional swig_types[54]
#define SWIGTYPE_p_ChangeFromTemplate_traits swig_types[55]
#define SWIGTYPE_p_ChangeFromTemplate_type swig_types[56]
#define SWIGTYPE_p_ClassRef_ConstEntByFunction_optional swig_types[57]
#define SWIGTYPE_p_ClassRef_ConstEntByFunction_traits swig_types[58]
#define SWIGTYPE_p_ClassRef_ConstEntByFunction_type swig_types[59]
#define SWIGTYPE_p_CompositionType_optional swig_types[60]
#define SWIGTYPE_p_CompositionType_traits swig_types[61]
#define SWIGTYPE_p_CompositionType_type swig_types[62]
#define SWIGTYPE_p_ContainingBuildings_optional swig_types[63]
#define SWIGTYPE_p_ContainingBuildings_traits swig_types[64]
#define SWIGTYPE_p_ContainingBuildings_type swig_types[65]
#define SWIGTYPE_p_DaylightControlsDefault_optional swig_types[66]
#define SWIGTYPE_p_DaylightControlsDefault_traits swig_types[67]
#define SWIGTYPE_p_DaylightControlsDefault_type swig_types[68]
#define SWIGTYPE_p_Decomposes_optional swig_types[69]
#define SWIGTYPE_p_Decomposes_traits swig_types[70]
#define SWIGTYPE_p_Decomposes_type swig_types[71]
#define SWIGTYPE_p_Description_optional swig_types[72]
#define SWIGTYPE_p_Description_traits swig_types[73]
#define SWIGTYPE_p_Description_type swig_types[74]
#define SWIGTYPE_p_ElevationOfTerrain_optional swig_types[75]
#define SWIGTYPE_p_ElevationOfTerrain_traits swig_types[76]
#define SWIGTYPE_p_ElevationOfTerrain_type swig_types[77]
#define SWIGTYPE_p_HasTemplateChanged_optional swig_types[78]
#define SWIGTYPE_p_HasTemplateChanged_traits swig_types[79]
#define SWIGTYPE_p_HasTemplateChanged_type swig_types[80]
#define SWIGTYPE_p_HighRiseResidentialLivingUnitCount_optional swig_types[81]
#define SWIGTYPE_p_HighRiseResidentialLivingUnitCount_traits swig_types[82]
#define SWIGTYPE_p_HighRiseResidentialLivingUnitCount_type swig_types[83]
#define SWIGTYPE_p_IfcGlobalID_optional swig_types[84]
#define SWIGTYPE_p_IfcGlobalID_traits swig_types[85]
#define SWIGTYPE_p_IfcGlobalID_type swig_types[86]
#define SWIGTYPE_p_IfcName_optional swig_types[87]
#define SWIGTYPE_p_IfcName_traits swig_types[88]
#define SWIGTYPE_p_IfcName_type swig_types[89]
#define SWIGTYPE_p_IsTemplateObject_optional swig_types[90]
#define SWIGTYPE_p_IsTemplateObject_traits swig_types[91]
#define SWIGTYPE_p_IsTemplateObject_type swig_types[92]
#define SWIGTYPE_p_LivingUnitCountAltered_optional swig_types[93]
#define SWIGTYPE_p_LivingUnitCountAltered_traits swig_types[94]
#define SWIGTYPE_p_LivingUnitCountAltered_type swig_types[95]
#define SWIGTYPE_p_LivingUnitCountExisting_optional swig_types[96]
#define SWIGTYPE_p_LivingUnitCountExisting_traits swig_types[97]
#define SWIGTYPE_p_LivingUnitCountExisting_type swig_types[98]
#define SWIGTYPE_p_LivingUnitCountNew_optional swig_types[99]
#define SWIGTYPE_p_LivingUnitCountNew_traits swig_types[100]
#define SWIGTYPE_p_LivingUnitCountNew_type swig_types[101]
#define SWIGTYPE_p_LongName_optional swig_types[102]
#define SWIGTYPE_p_LongName_traits swig_types[103]
#define SWIGTYPE_p_LongName_type swig_types[104]
#define SWIGTYPE_p_MemberUsedForDiagrams_optional swig_types[105]
#define SWIGTYPE_p_MemberUsedForDiagrams_traits swig_types[106]
#define SWIGTYPE_p_MemberUsedForDiagrams_type swig_types[107]
#define SWIGTYPE_p_Name_optional swig_types[108]
#define SWIGTYPE_p_Name_traits swig_types[109]
#define SWIGTYPE_p_Name_type swig_types[110]
#define SWIGTYPE_p_NatVentilationDefault_optional swig_types[111]
#define SWIGTYPE_p_NatVentilationDefault_traits swig_types[112]
#define SWIGTYPE_p_NatVentilationDefault_type swig_types[113]
#define SWIGTYPE_p_NevronSchematicLayout_optional swig_types[114]
#define SWIGTYPE_p_NevronSchematicLayout_traits swig_types[115]
#define SWIGTYPE_p_NevronSchematicLayout_type swig_types[116]
#define SWIGTYPE_p_ObjectCreationParams_optional swig_types[117]
#define SWIGTYPE_p_ObjectCreationParams_traits swig_types[118]
#define SWIGTYPE_p_ObjectCreationParams_type swig_types[119]
#define SWIGTYPE_p_ObjectOwnerHistory_optional swig_types[120]
#define SWIGTYPE_p_ObjectOwnerHistory_traits swig_types[121]
#define SWIGTYPE_p_ObjectOwnerHistory_type swig_types[122]
#define SWIGTYPE_p_ObjectType_optional swig_types[123]
#define SWIGTYPE_p_ObjectType_traits swig_types[124]
#define SWIGTYPE_p_ObjectType_type swig_types[125]
#define SWIGTYPE_p_ParentGroups_optional swig_types[126]
#define SWIGTYPE_p_ParentGroups_traits swig_types[127]
#define SWIGTYPE_p_ParentGroups_type swig_types[128]
#define SWIGTYPE_p_Placement_optional swig_types[129]
#define SWIGTYPE_p_Placement_traits swig_types[130]
#define SWIGTYPE_p_Placement_type swig_types[131]
#define SWIGTYPE_p_RefId_traits swig_types[132]
#define SWIGTYPE_p_RefId_type swig_types[133]
#define SWIGTYPE_p_RelocatablePublicSchoolBuilding_optional swig_types[134]
#define SWIGTYPE_p_RelocatablePublicSchoolBuilding_traits swig_types[135]
#define SWIGTYPE_p_RelocatablePublicSchoolBuilding_type swig_types[136]
#define SWIGTYPE_p_Representation_optional swig_types[137]
#define SWIGTYPE_p_Representation_traits swig_types[138]
#define SWIGTYPE_p_Representation_type swig_types[139]
#define SWIGTYPE_p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional swig_types[140]
#define SWIGTYPE_p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits swig_types[141]
#define SWIGTYPE_p_RoofIrrigation_IrrigationMaxSaturatThreshold_type swig_types[142]
#define SWIGTYPE_p_RoofIrrigation_IrrigationModelType_optional swig_types[143]
#define SWIGTYPE_p_RoofIrrigation_IrrigationModelType_traits swig_types[144]
#define SWIGTYPE_p_RoofIrrigation_IrrigationModelType_type swig_types[145]
#define SWIGTYPE_p_RoofIrrigation_IrrigationRateSchedName_optional swig_types[146]
#define SWIGTYPE_p_RoofIrrigation_IrrigationRateSchedName_traits swig_types[147]
#define SWIGTYPE_p_RoofIrrigation_IrrigationRateSchedName_type swig_types[148]
#define SWIGTYPE_p_SimBuilding_LoadsConvergTolVal_optional swig_types[149]
#define SWIGTYPE_p_SimBuilding_LoadsConvergTolVal_traits swig_types[150]
#define SWIGTYPE_p_SimBuilding_LoadsConvergTolVal_type swig_types[151]
#define SWIGTYPE_p_SimBuilding_MaxNumWarmupDays_optional swig_types[152]
#define SWIGTYPE_p_SimBuilding_MaxNumWarmupDays_traits swig_types[153]
#define SWIGTYPE_p_SimBuilding_MaxNumWarmupDays_type swig_types[154]
#define SWIGTYPE_p_SimBuilding_MinNumberWarmupDays_optional swig_types[155]
#define SWIGTYPE_p_SimBuilding_MinNumberWarmupDays_traits swig_types[156]
#define SWIGTYPE_p_SimBuilding_MinNumberWarmupDays_type swig_types[157]
#define SWIGTYPE_p_SimBuilding_Name_optional swig_types[158]
#define SWIGTYPE_p_SimBuilding_Name_traits swig_types[159]
#define SWIGTYPE_p_SimBuilding_Name_type swig_types[160]
#define SWIGTYPE_p_SimBuilding_NorthAxis_optional swig_types[161]
#define SWIGTYPE_p_SimBuilding_NorthAxis_traits swig_types[162]
#define SWIGTYPE_p_SimBuilding_NorthAxis_type swig_types[163]
#define SWIGTYPE_p_SimBuilding_SolarDist_optional swig_types[164]
#define SWIGTYPE_p_SimBuilding_SolarDist_traits swig_types[165]
#define SWIGTYPE_p_SimBuilding_SolarDist_type swig_types[166]
#define SWIGTYPE_p_SimBuilding_TempConvergTolVal_optional swig_types[167]
#define SWIGTYPE_p_SimBuilding_TempConvergTolVal_traits swig_types[168]
#define SWIGTYPE_p_SimBuilding_TempConvergTolVal_type swig_types[169]
#define SWIGTYPE_p_SimBuilding_Terrain_optional swig_types[170]
#define SWIGTYPE_p_SimBuilding_Terrain_traits swig_types[171]
#define SWIGTYPE_p_SimBuilding_Terrain_type swig_types[172]
#define SWIGTYPE_p_SimModelName_optional swig_types[173]
#define SWIGTYPE_p_SimModelName_traits swig_types[174]
#define SWIGTYPE_p_SimModelName_type swig_types[175]
#define SWIGTYPE_p_SimModelSubtype_optional swig_types[176]
#define SWIGTYPE_p_SimModelSubtype_traits swig_types[177]
#define SWIGTYPE_p_SimModelSubtype_type swig_types[178]
#define SWIGTYPE_p_SimModelType_optional swig_types[179]
#define SWIGTYPE_p_SimModelType_traits swig_types[180]
#define SWIGTYPE_p_SimModelType_type swig_types[181]
#define SWIGTYPE_p_SimUniqueID_optional swig_types[182]
#define SWIGTYPE_p_SimUniqueID_traits swig_types[183]
#define SWIGTYPE_p_SimUniqueID_type swig_types[184]
#define SWIGTYPE_p_SourceLibraryEntryID_optional swig_types[185]
#define SWIGTYPE_p_SourceLibraryEntryID_traits swig_types[186]
#define SWIGTYPE_p_SourceLibraryEntryID_type swig_types[187]
#define SWIGTYPE_p_SourceLibraryEntryRef_optional swig_types[188]
#define SWIGTYPE_p_SourceLibraryEntryRef_traits swig_types[189]
#define SWIGTYPE_p_SourceLibraryEntryRef_type swig_types[190]
#define SWIGTYPE_p_SourceModelObjectType_optional swig_types[191]
#define SWIGTYPE_p_SourceModelObjectType_traits swig_types[192]
#define SWIGTYPE_p_SourceModelObjectType_type swig_types[193]
#define SWIGTYPE_p_SourceModelSchema_optional swig_types[194]
#define SWIGTYPE_p_SourceModelSchema_traits swig_types[195]
#define SWIGTYPE_p_SourceModelSchema_type swig_types[196]
#define SWIGTYPE_p_SpaceBoundsNotCurrent_optional swig_types[197]
#define SWIGTYPE_p_SpaceBoundsNotCurrent_traits swig_types[198]
#define SWIGTYPE_p_SpaceBoundsNotCurrent_type swig_types[199]
#define SWIGTYPE_p_T24CoilCoolingCapacity_optional swig_types[200]
#define SWIGTYPE_p_T24CoilCoolingCapacity_traits swig_types[201]
#define SWIGTYPE_p_T24CoilCoolingCapacity_type swig_types[202]
#define SWIGTYPE_p_T24CoilHeatingCapacity_optional swig_types[203]
#define SWIGTYPE_p_T24CoilHeatingCapacity_traits swig_types[204]
#define SWIGTYPE_p_T24CoilHeatingCapacity_type swig_types[205]
#define SWIGTYPE_p_T24FunctionClassificationMethod_optional swig_types[206]
#define SWIGTYPE_p_T24FunctionClassificationMethod_traits swig_types[207]
#define SWIGTYPE_p_T24FunctionClassificationMethod_type swig_types[208]
#define SWIGTYPE_p_T24PlantCoolingCapacity_optional swig_types[209]
#define SWIGTYPE_p_T24PlantCoolingCapacity_traits swig_types[210]
#define SWIGTYPE_p_T24PlantCoolingCapacity_type swig_types[211]
#define SWIGTYPE_p_T24PlantHeatingCapacity_optional swig_types[212]
#define SWIGTYPE_p_T24PlantHeatingCapacity_traits swig_types[213]
#define SWIGTYPE_p_T24PlantHeatingCapacity_type swig_types[214]
#define SWIGTYPE_p_TemplateOverrideValues_optional swig_types[215]
#define SWIGTYPE_p_TemplateOverrideValues_traits swig_types[216]
#define SWIGTYPE_p_TemplateOverrideValues_type swig_types[217]
#define SWIGTYPE_p_TemplatesForMembers_optional swig_types[218]
#define SWIGTYPE_p_TemplatesForMembers_traits swig_types[219]
#define SWIGTYPE_p_TemplatesForMembers_type swig_types[220]
#define SWIGTYPE_p_TotalStoryCountAltered_optional swig_types[221]
#define SWIGTYPE_p_TotalStoryCountAltered_traits swig_types[222]
#define SWIGTYPE_p_TotalStoryCountAltered_type swig_types[223]
#define SWIGTYPE_p_TotalStoryCountExisting_optional swig_types[224]
#define SWIGTYPE_p_TotalStoryCountExisting_traits swig_types[225]
#define SWIGTYPE_p_TotalStoryCountExisting_type swig_types[226]
#define SWIGTYPE_p_TotalStoryCountNew_optional swig_types[227]
#define SWIGTYPE_p_TotalStoryCountNew_traits swig_types[228]
#define SWIGTYPE_p_TotalStoryCountNew_type swig_types[229]
#define SWIGTYPE_p_TypeDefinition_optional swig_types[230]
#define SWIGTYPE_p_TypeDefinition_traits swig_types[231]
#define SWIGTYPE_p_TypeDefinition_type swig_types[232]
#define SWIGTYPE_p_allocator_type swig_types[233]
#define SWIGTYPE_p_base_const_iterator swig_types[234]
#define SWIGTYPE_p_base_iterator swig_types[235]
#define SWIGTYPE_p_base_sequence swig_types[236]
#define SWIGTYPE_p_bool swig_types[237]
#define SWIGTYPE_p_bool_convertible swig_types[238]
#define SWIGTYPE_p_char swig_types[239]
#define SWIGTYPE_p_const_iterator swig_types[240]
#define SWIGTYPE_p_const_reverse_iterator swig_types[241]
#define SWIGTYPE_p_difference_type swig_types[242]
#define SWIGTYPE_p_dom_content_optional swig_types[243]
#define SWIGTYPE_p_double swig_types[244]
#define SWIGTYPE_p_float swig_types[245]
#define SWIGTYPE_p_int swig_types[246]
#define SWIGTYPE_p_iterator swig_types[247]
#define SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t swig_types[248]
#define SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t swig_types[249]
#define SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t swig_types[250]
#define SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t swig_types[251]
#define SWIGTYPE_p_long_long swig_types[252]
#define SWIGTYPE_p_ptr swig_types[253]
#define SWIGTYPE_p_reverse_iterator swig_types[254]
#define SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding swig_types[255]
#define SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building swig_types[256]
#define SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default swig_types[257]
#define SWIGTYPE_p_schema__simxml__Model__SimModel swig_types[258]
#define SWIGTYPE_p_schema__simxml__SimModelCore__SimGroup swig_types[259]
#define SWIGTYPE_p_schema__simxml__SimModelCore__SimObject swig_types[260]
#define SWIGTYPE_p_schema__simxml__SimModelCore__SimObjectDefinition swig_types[261]
#define SWIGTYPE_p_schema__simxml__SimModelCore__SimRoot swig_types[262]
#define SWIGTYPE_p_schema__simxml__SimModelCore__SimSpatialStructureElement swig_types[263]
#define SWIGTYPE_p_schema__simxml__SimModelCore__integerList swig_types[264]
#define SWIGTYPE_p_schema__simxml__SimModelCore__logical swig_types[265]
#define SWIGTYPE_p_self_ swig_types[266]
#define SWIGTYPE_p_short swig_types[267]
#define SWIGTYPE_p_signed_char swig_types[268]
#define SWIGTYPE_p_size_type swig_types[269]
#define SWIGTYPE_p_std__auto_ptrT_T_t swig_types[270]
#define SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t swig_types[271]
#define SWIGTYPE_p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t swig_types[272]
#define SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t swig_types[273]
#define SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t swig_types[274]
#define SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type swig_types[275]
#define SWIGTYPE_p_unsigned_char swig_types[276]
#define SWIGTYPE_p_unsigned_int swig_types[277]
#define SWIGTYPE_p_unsigned_long_long swig_types[278]
#define SWIGTYPE_p_unsigned_short swig_types[279]
#define SWIGTYPE_p_value_type swig_types[280]
#define SWIGTYPE_p_xercesc__DOMElement swig_types[281]
#define SWIGTYPE_p_xsd__cxx__tree___type swig_types[282]
#define SWIGTYPE_p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[283]
#define SWIGTYPE_p_xsd__cxx__tree__boundsT_char_t swig_types[284]
#define SWIGTYPE_p_xsd__cxx__tree__bufferT_char_t swig_types[285]
#define SWIGTYPE_p_xsd__cxx__tree__content_order swig_types[286]
#define SWIGTYPE_p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[287]
#define SWIGTYPE_p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[288]
#define SWIGTYPE_p_xsd__cxx__tree__diagnosticsT_char_t swig_types[289]
#define SWIGTYPE_p_xsd__cxx__tree__duplicate_idT_char_t swig_types[290]
#define SWIGTYPE_p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[291]
#define SWIGTYPE_p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t swig_types[292]
#define SWIGTYPE_p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t swig_types[293]
#define SWIGTYPE_p_xsd__cxx__tree__errorT_char_t swig_types[294]
#define SWIGTYPE_p_xsd__cxx__tree__exceptionT_char_t swig_types[295]
#define SWIGTYPE_p_xsd__cxx__tree__expected_attributeT_char_t swig_types[296]
#define SWIGTYPE_p_xsd__cxx__tree__expected_elementT_char_t swig_types[297]
#define SWIGTYPE_p_xsd__cxx__tree__expected_text_contentT_char_t swig_types[298]
#define SWIGTYPE_p_xsd__cxx__tree__flags swig_types[299]
#define SWIGTYPE_p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[300]
#define SWIGTYPE_p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[301]
#define SWIGTYPE_p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[302]
#define SWIGTYPE_p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[303]
#define SWIGTYPE_p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[304]
#define SWIGTYPE_p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[305]
#define SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t swig_types[306]
#define SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t swig_types[307]
#define SWIGTYPE_p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t swig_types[308]
#define SWIGTYPE_p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t swig_types[309]
#define SWIGTYPE_p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t swig_types[310]
#define SWIGTYPE_p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t swig_types[311]
#define SWIGTYPE_p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t swig_types[312]
#define SWIGTYPE_p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t swig_types[313]
#define SWIGTYPE_p_xsd__cxx__tree__no_prefix_mappingT_char_t swig_types[314]
#define SWIGTYPE_p_xsd__cxx__tree__no_type_infoT_char_t swig_types[315]
#define SWIGTYPE_p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t swig_types[316]
#define SWIGTYPE_p_xsd__cxx__tree__not_derivedT_char_t swig_types[317]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_bool_true_t swig_types[318]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t swig_types[319]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t swig_types[320]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t swig_types[321]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t swig_types[322]
#define SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t swig_types[323]
#define SWIGTYPE_p_xsd__cxx__tree__parsingT_char_t swig_types[324]
#define SWIGTYPE_p_xsd__cxx__tree__propertiesT_char_t swig_types[325]
#define SWIGTYPE_p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t swig_types[326]
#define SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t swig_types[327]
#define SWIGTYPE_p_xsd__cxx__tree__sequence_common swig_types[328]
#define SWIGTYPE_p_xsd__cxx__tree__severity swig_types[329]
#define SWIGTYPE_p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t swig_types[330]
#define SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[331]
#define SWIGTYPE_p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[332]
#define SWIGTYPE_p_xsd__cxx__tree__time_zone swig_types[333]
#define SWIGTYPE_p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t swig_types[334]
#define SWIGTYPE_p_xsd__cxx__tree__unexpected_elementT_char_t swig_types[335]
#define SWIGTYPE_p_xsd__cxx__tree__unexpected_enumeratorT_char_t swig_types[336]
#define SWIGTYPE_p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t swig_types[337]
#define SWIGTYPE_p_xsd__cxx__tree__user_data_keys_templateT_0_t swig_types[338]
#define SWIGTYPE_p_xsd__cxx__xml__error_handlerT_char_t swig_types[339]
static swig_type_info *swig_types[341];
static swig_module_info swig_module = {swig_types, 340, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _SimBuilding_Building_Default.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__SimBuilding_Building_Default

#else
#  define SWIG_init    init_SimBuilding_Building_Default

#endif
#define SWIG_name    "_SimBuilding_Building_Default"

#define SWIGVERSION 0x030007 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#include "../SimModel_Dll_lib/framework/simmodel.hxx"
using namespace xsd::cxx::tree;


#include <string>


#include <stddef.h>


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::SwigPyIterator *");
	init = 1;
      }	
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    Py_INCREF(pyself);
    return pyself;
  }
#endif
}


#include <algorithm>


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "SimBuilding_Building_Default_wrap.h"

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_SimBuilding_Name__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::Name_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::Name_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->Name();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Name__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::Name_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::Name_optional *) &(arg1)->Name();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Name__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::Name_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Name_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Name_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::Name_type * >(argp2);
  (arg1)->Name((schema::simxml::BuildingModel::SimBuilding::Name_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Name__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::Name_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Name_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Name_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::Name_optional * >(argp2);
  (arg1)->Name((schema::simxml::BuildingModel::SimBuilding::Name_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Name__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Name" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->Name(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Name(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Name__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Name__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Name__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Name__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Name__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::Name() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::Name()\n"
    "    schema::simxml::BuildingModel::SimBuilding::Name(schema::simxml::BuildingModel::SimBuilding::Name_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::Name(schema::simxml::BuildingModel::SimBuilding::Name_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::Name(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingAddress" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingAddress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingAddress",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingAddress" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *) &(arg1)->BuildingAddress();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingAddress",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingAddress" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type * >(argp2);
  (arg1)->BuildingAddress((schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingAddress",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingAddress" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional * >(argp2);
  (arg1)->BuildingAddress((schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingAddress",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingAddress" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingAddress" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingAddress(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingAddress(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingAddress__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingAddress__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingAddress__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingAddress__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingAddress__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingAddress'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingAddress() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingAddress()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingAddress(schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingAddress(schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingAddress(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingDatumElevation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingDatumElevation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingDatumElevation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingDatumElevation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingDatumElevation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *) &(arg1)->BuildingDatumElevation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingDatumElevation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingDatumElevation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingDatumElevation((schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingDatumElevation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingDatumElevation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingDatumElevation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional * >(argp2);
  (arg1)->BuildingDatumElevation((schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingDatumElevation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingDatumElevation__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingDatumElevation__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingDatumElevation__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingDatumElevation__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingDatumElevation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation(schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation(schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingOccupancyType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingOccupancyType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingOccupancyType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *) &(arg1)->BuildingOccupancyType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingOccupancyType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type * >(argp2);
  (arg1)->BuildingOccupancyType((schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingOccupancyType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional * >(argp2);
  (arg1)->BuildingOccupancyType((schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingOccupancyType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingOccupancyType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingOccupancyType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingOccupancyType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingOccupancyType__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingOccupancyType__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingOccupancyType__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingOccupancyType__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingOccupancyType__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingOccupancyType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType(schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType(schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingGrossPlannedArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingGrossPlannedArea();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingGrossPlannedArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *) &(arg1)->BuildingGrossPlannedArea();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingGrossPlannedArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingGrossPlannedArea((schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingGrossPlannedArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingGrossPlannedArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional * >(argp2);
  (arg1)->BuildingGrossPlannedArea((schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossPlannedArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingGrossPlannedArea__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingGrossPlannedArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea(schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea(schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingNumberofStoreys__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingNumberofStoreys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingNumberofStoreys();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingNumberofStoreys__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingNumberofStoreys",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *) &(arg1)->BuildingNumberofStoreys();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingNumberofStoreys__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingNumberofStoreys",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingNumberofStoreys((schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingNumberofStoreys__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingNumberofStoreys",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingNumberofStoreys" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional * >(argp2);
  (arg1)->BuildingNumberofStoreys((schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingNumberofStoreys(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingNumberofStoreys__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingNumberofStoreys__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingNumberofStoreys__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingNumberofStoreys__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingNumberofStoreys'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys(schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys(schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingYearOfConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingYearOfConstruction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingYearOfConstruction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *) &(arg1)->BuildingYearOfConstruction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingYearOfConstruction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type * >(argp2);
  (arg1)->BuildingYearOfConstruction((schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingYearOfConstruction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional * >(argp2);
  (arg1)->BuildingYearOfConstruction((schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingYearOfConstruction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingYearOfConstruction" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingYearOfConstruction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingYearOfConstruction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingYearOfConstruction__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingYearOfConstruction__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingYearOfConstruction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingYearOfConstruction__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingYearOfConstruction__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingYearOfConstruction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction(schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction(schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingisLandmarked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingisLandmarked();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingisLandmarked",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *) &(arg1)->BuildingisLandmarked();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingisLandmarked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_schema__simxml__SimModelCore__logical,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type * >(argp2);
  (arg1)->BuildingisLandmarked((schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingisLandmarked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional * >(argp2);
  (arg1)->BuildingisLandmarked((schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingisLandmarked",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingisLandmarked" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingisLandmarked(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingisLandmarked(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingisLandmarked__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingisLandmarked__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_schema__simxml__SimModelCore__logical, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingisLandmarked__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingisLandmarked__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingisLandmarked__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingisLandmarked'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked(schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked(schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingEnergyTargetUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingEnergyTargetUnits();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingEnergyTargetUnits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *) &(arg1)->BuildingEnergyTargetUnits();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingEnergyTargetUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type * >(argp2);
  (arg1)->BuildingEnergyTargetUnits((schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingEnergyTargetUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional * >(argp2);
  (arg1)->BuildingEnergyTargetUnits((schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingEnergyTargetUnits",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingEnergyTargetUnits" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingEnergyTargetUnits(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetUnits(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingEnergyTargetUnits__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingEnergyTargetUnits'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits(schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits(schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingEnergyTargetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingEnergyTargetValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingEnergyTargetValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *) &(arg1)->BuildingEnergyTargetValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingEnergyTargetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingEnergyTargetValue((schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingEnergyTargetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingEnergyTargetValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional * >(argp2);
  (arg1)->BuildingEnergyTargetValue((schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingEnergyTargetValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingEnergyTargetValue__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingEnergyTargetValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue(schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue(schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingHeight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingHeight" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingHeight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingHeight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingHeight",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingHeight" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *) &(arg1)->BuildingHeight();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingHeight__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingHeight" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingHeight" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingHeight((schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingHeight__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingHeight",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingHeight" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingHeight" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingHeight" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional * >(argp2);
  (arg1)->BuildingHeight((schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingHeight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingHeight__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingHeight__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingHeight__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingHeight__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingHeight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingHeight() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingHeight()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingHeight(schema::simxml::BuildingModel::SimBuilding::BuildingHeight_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingHeight(schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossFloorArea__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingGrossFloorArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingGrossFloorArea();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossFloorArea__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingGrossFloorArea",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *) &(arg1)->BuildingGrossFloorArea();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossFloorArea__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingGrossFloorArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingGrossFloorArea((schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossFloorArea__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingGrossFloorArea",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingGrossFloorArea" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional * >(argp2);
  (arg1)->BuildingGrossFloorArea((schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingGrossFloorArea(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingGrossFloorArea__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingGrossFloorArea__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingGrossFloorArea__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingGrossFloorArea__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingGrossFloorArea'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea(schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea(schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_ClassRef_ConstEntByFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->ClassRef_ConstEntByFunction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_ClassRef_ConstEntByFunction",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *) &(arg1)->ClassRef_ConstEntByFunction();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_ClassRef_ConstEntByFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type * >(argp2);
  (arg1)->ClassRef_ConstEntByFunction((schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_ClassRef_ConstEntByFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional * >(argp2);
  (arg1)->ClassRef_ConstEntByFunction((schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_ClassRef_ConstEntByFunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_ClassRef_ConstEntByFunction" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->ClassRef_ConstEntByFunction(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ClassRef_ConstEntByFunction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_ClassRef_ConstEntByFunction__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_ClassRef_ConstEntByFunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction()\n"
    "    schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction(schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction(schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInSpatialContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingInSpatialContainer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInSpatialContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *) &(arg1)->BuildingInSpatialContainer();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInSpatialContainer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type * >(argp2);
  (arg1)->BuildingInSpatialContainer((schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInSpatialContainer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional * >(argp2);
  (arg1)->BuildingInSpatialContainer((schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInSpatialContainer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInSpatialContainer" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingInSpatialContainer(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInSpatialContainer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInSpatialContainer__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInSpatialContainer__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInSpatialContainer__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInSpatialContainer__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInSpatialContainer__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingInSpatialContainer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer(schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer(schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::Representation_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Representation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Representation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::Representation_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->Representation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::Representation_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Representation",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Representation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::Representation_optional *) &(arg1)->Representation();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::Representation_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Representation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Representation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Representation_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Representation_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::Representation_type * >(argp2);
  (arg1)->Representation((schema::simxml::BuildingModel::SimBuilding::Representation_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::Representation_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Representation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Representation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Representation_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::Representation_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::Representation_optional * >(argp2);
  (arg1)->Representation((schema::simxml::BuildingModel::SimBuilding::Representation_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Representation",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Representation" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Representation" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->Representation(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Representation(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Representation__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Representation__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Representation__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Representation__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Representation__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Representation'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::Representation() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::Representation()\n"
    "    schema::simxml::BuildingModel::SimBuilding::Representation(schema::simxml::BuildingModel::SimBuilding::Representation_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::Representation(schema::simxml::BuildingModel::SimBuilding::Representation_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::Representation(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ElevationOfTerrain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_ElevationOfTerrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->ElevationOfTerrain();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ElevationOfTerrain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_ElevationOfTerrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *) &(arg1)->ElevationOfTerrain();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ElevationOfTerrain__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_ElevationOfTerrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type >(val2);
  arg2 = &temp2;
  (arg1)->ElevationOfTerrain((schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ElevationOfTerrain__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_ElevationOfTerrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_ElevationOfTerrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional * >(argp2);
  (arg1)->ElevationOfTerrain((schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_ElevationOfTerrain(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_ElevationOfTerrain__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_ElevationOfTerrain__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_ElevationOfTerrain__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_ElevationOfTerrain__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_ElevationOfTerrain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain()\n"
    "    schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain(schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain(schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingConstructionsTemplate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingConstructionsTemplate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingConstructionsTemplate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *) &(arg1)->BuildingConstructionsTemplate();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingConstructionsTemplate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type * >(argp2);
  (arg1)->BuildingConstructionsTemplate((schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingConstructionsTemplate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional * >(argp2);
  (arg1)->BuildingConstructionsTemplate((schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingConstructionsTemplate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingConstructionsTemplate" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingConstructionsTemplate(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingConstructionsTemplate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingConstructionsTemplate__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingConstructionsTemplate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate(schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate(schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_SpaceBoundsNotCurrent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->SpaceBoundsNotCurrent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_bool_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_SpaceBoundsNotCurrent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *) &(arg1)->SpaceBoundsNotCurrent();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_bool_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type temp2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_SpaceBoundsNotCurrent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type >(val2);
  arg2 = &temp2;
  (arg1)->SpaceBoundsNotCurrent((schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_SpaceBoundsNotCurrent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_bool_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_SpaceBoundsNotCurrent" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional * >(argp2);
  (arg1)->SpaceBoundsNotCurrent((schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_SpaceBoundsNotCurrent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_bool_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_SpaceBoundsNotCurrent__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_SpaceBoundsNotCurrent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent()\n"
    "    schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent(schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent(schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_DaylightControlsDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->DaylightControlsDefault();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_DaylightControlsDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *) &(arg1)->DaylightControlsDefault();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_DaylightControlsDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type * >(argp2);
  (arg1)->DaylightControlsDefault((schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_DaylightControlsDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional * >(argp2);
  (arg1)->DaylightControlsDefault((schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_DaylightControlsDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_DaylightControlsDefault" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->DaylightControlsDefault(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_DaylightControlsDefault(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_DaylightControlsDefault__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_DaylightControlsDefault__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_DaylightControlsDefault__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_DaylightControlsDefault__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_DaylightControlsDefault__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_DaylightControlsDefault'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault()\n"
    "    schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault(schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault(schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_NatVentilationDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->NatVentilationDefault();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_NatVentilationDefault",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *) &(arg1)->NatVentilationDefault();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_NatVentilationDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type * >(argp2);
  (arg1)->NatVentilationDefault((schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_NatVentilationDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional * >(argp2);
  (arg1)->NatVentilationDefault((schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_NatVentilationDefault",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_NatVentilationDefault" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->NatVentilationDefault(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_NatVentilationDefault(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_NatVentilationDefault__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_NatVentilationDefault__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_NatVentilationDefault__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_NatVentilationDefault__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_NatVentilationDefault__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_NatVentilationDefault'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault()\n"
    "    schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault(schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault(schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInfiltrationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingInfiltrationType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInfiltrationType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *) &(arg1)->BuildingInfiltrationType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInfiltrationType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type * >(argp2);
  (arg1)->BuildingInfiltrationType((schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInfiltrationType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional * >(argp2);
  (arg1)->BuildingInfiltrationType((schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInfiltrationType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInfiltrationType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->BuildingInfiltrationType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInfiltrationType__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInfiltrationType__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInfiltrationType__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInfiltrationType__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInfiltrationType__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingInfiltrationType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType(schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType(schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationValue__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInfiltrationValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->BuildingInfiltrationValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationValue__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_BuildingInfiltrationValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *) &(arg1)->BuildingInfiltrationValue();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationValue__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInfiltrationValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type >(val2);
  arg2 = &temp2;
  (arg1)->BuildingInfiltrationValue((schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationValue__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_BuildingInfiltrationValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_BuildingInfiltrationValue" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional * >(argp2);
  (arg1)->BuildingInfiltrationValue((schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_BuildingInfiltrationValue(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInfiltrationValue__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_BuildingInfiltrationValue__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_BuildingInfiltrationValue__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_BuildingInfiltrationValue__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_BuildingInfiltrationValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue()\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue(schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue(schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_TemplateOverrideValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *) &((schema::simxml::BuildingModel::SimBuilding const *)arg1)->TemplateOverrideValues();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_TemplateOverrideValues",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *) &(arg1)->TemplateOverrideValues();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_TemplateOverrideValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type * >(argp2);
  (arg1)->TemplateOverrideValues((schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_TemplateOverrideValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional * >(argp2);
  (arg1)->TemplateOverrideValues((schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_TemplateOverrideValues",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_TemplateOverrideValues" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->TemplateOverrideValues(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_TemplateOverrideValues(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_TemplateOverrideValues__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_TemplateOverrideValues__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_TemplateOverrideValues__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_TemplateOverrideValues__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_TemplateOverrideValues__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_TemplateOverrideValues'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues() const\n"
    "    schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues()\n"
    "    schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues(schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues(schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SimBuilding")) SWIG_fail;
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::SimModelCore::SimRoot::RefId_type *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::SimModelCore::SimRoot::RefId_type * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((schema::simxml::SimModelCore::SimRoot::RefId_type const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((::xercesc::DOMElement const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((::xercesc::DOMElement const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((::xercesc::DOMElement const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((schema::simxml::BuildingModel::SimBuilding const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((schema::simxml::BuildingModel::SimBuilding const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding *)new schema::simxml::BuildingModel::SimBuilding((schema::simxml::BuildingModel::SimBuilding const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SimBuilding__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SimBuilding'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding()\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(schema::simxml::SimModelCore::SimRoot::RefId_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(::xercesc::DOMElement const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(::xercesc::DOMElement const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(::xercesc::DOMElement const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(schema::simxml::BuildingModel::SimBuilding const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(schema::simxml::BuildingModel::SimBuilding const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding::SimBuilding(schema::simxml::BuildingModel::SimBuilding const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding__clone__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding__clone",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding__clone" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding *)((schema::simxml::BuildingModel::SimBuilding const *)arg1)->_clone(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding__clone__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding__clone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding *)((schema::simxml::BuildingModel::SimBuilding const *)arg1)->_clone(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding__clone__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding__clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding *)((schema::simxml::BuildingModel::SimBuilding const *)arg1)->_clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding__clone(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding__clone__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding__clone__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding__clone__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding__clone'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding::_clone(::xml_schema::flags,::xml_schema::container *) const\n"
    "    schema::simxml::BuildingModel::SimBuilding::_clone(::xml_schema::flags) const\n"
    "    schema::simxml::BuildingModel::SimBuilding::_clone() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SimBuilding(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding *arg1 = (schema::simxml::BuildingModel::SimBuilding *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimBuilding_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_Name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_Name();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_Name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *) &(arg1)->SimBuilding_Name();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type * >(argp2);
  (arg1)->SimBuilding_Name((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional * >(argp2);
  (arg1)->SimBuilding_Name((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Name",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Name" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SimBuilding_Name(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Name(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_Name__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_Name__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Name__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Name__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Name__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_Name'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_NorthAxis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_NorthAxis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_NorthAxis",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *) &(arg1)->SimBuilding_NorthAxis();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_NorthAxis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type >(val2);
  arg2 = &temp2;
  (arg1)->SimBuilding_NorthAxis((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_NorthAxis",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_NorthAxis" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional * >(argp2);
  (arg1)->SimBuilding_NorthAxis((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_NorthAxis(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_NorthAxis__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_NorthAxis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_Terrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_Terrain();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_Terrain",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *) &(arg1)->SimBuilding_Terrain();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Terrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type * >(argp2);
  (arg1)->SimBuilding_Terrain((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Terrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional * >(argp2);
  (arg1)->SimBuilding_Terrain((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_Terrain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_Terrain" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SimBuilding_Terrain(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_Terrain(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_Terrain__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_Terrain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_LoadsConvergTolVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_LoadsConvergTolVal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_LoadsConvergTolVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *) &(arg1)->SimBuilding_LoadsConvergTolVal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_LoadsConvergTolVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type >(val2);
  arg2 = &temp2;
  (arg1)->SimBuilding_LoadsConvergTolVal((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_LoadsConvergTolVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_LoadsConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional * >(argp2);
  (arg1)->SimBuilding_LoadsConvergTolVal((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_LoadsConvergTolVal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_TempConvergTolVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_TempConvergTolVal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_TempConvergTolVal",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *) &(arg1)->SimBuilding_TempConvergTolVal();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_TempConvergTolVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type >(val2);
  arg2 = &temp2;
  (arg1)->SimBuilding_TempConvergTolVal((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_TempConvergTolVal",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_TempConvergTolVal" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional * >(argp2);
  (arg1)->SimBuilding_TempConvergTolVal((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_TempConvergTolVal'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_SolarDist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_SolarDist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_SolarDist",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *) &(arg1)->SimBuilding_SolarDist();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_SolarDist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type * >(argp2);
  (arg1)->SimBuilding_SolarDist((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_SolarDist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional * >(argp2);
  (arg1)->SimBuilding_SolarDist((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_SolarDist",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_SolarDist" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->SimBuilding_SolarDist(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_SolarDist(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_SolarDist__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_SolarDist'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_MaxNumWarmupDays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_MaxNumWarmupDays();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_MaxNumWarmupDays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *) &(arg1)->SimBuilding_MaxNumWarmupDays();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_MaxNumWarmupDays",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type >(val2);
  arg2 = &temp2;
  (arg1)->SimBuilding_MaxNumWarmupDays((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_MaxNumWarmupDays",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_MaxNumWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional * >(argp2);
  (arg1)->SimBuilding_MaxNumWarmupDays((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_MaxNumWarmupDays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_MinNumberWarmupDays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->SimBuilding_MinNumberWarmupDays();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_SimBuilding_MinNumberWarmupDays",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *) &(arg1)->SimBuilding_MinNumberWarmupDays();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_MinNumberWarmupDays",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type >(val2);
  arg2 = &temp2;
  (arg1)->SimBuilding_MinNumberWarmupDays((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_SimBuilding_MinNumberWarmupDays",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_SimBuilding_MinNumberWarmupDays" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional * >(argp2);
  (arg1)->SimBuilding_MinNumberWarmupDays((schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_SimBuilding_MinNumberWarmupDays'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays(schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationModelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->RoofIrrigation_IrrigationModelType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationModelType",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *) &(arg1)->RoofIrrigation_IrrigationModelType();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationModelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type * >(argp2);
  (arg1)->RoofIrrigation_IrrigationModelType((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationModelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional * >(argp2);
  (arg1)->RoofIrrigation_IrrigationModelType((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationModelType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationModelType" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->RoofIrrigation_IrrigationModelType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_RoofIrrigation_IrrigationModelType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->RoofIrrigation_IrrigationRateSchedName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *) &(arg1)->RoofIrrigation_IrrigationRateSchedName();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type * >(argp2);
  (arg1)->RoofIrrigation_IrrigationRateSchedName((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional * >(argp2);
  (arg1)->RoofIrrigation_IrrigationRateSchedName((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->RoofIrrigation_IrrigationRateSchedName(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__idref_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->RoofIrrigation_IrrigationMaxSaturatThreshold();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *) &(arg1)->RoofIrrigation_IrrigationMaxSaturatThreshold();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type >(val2);
  arg2 = &temp2;
  (arg1)->RoofIrrigation_IrrigationMaxSaturatThreshold((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional * >(argp2);
  (arg1)->RoofIrrigation_IrrigationMaxSaturatThreshold((schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold(schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->AboveGradeStoryCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *) &(arg1)->AboveGradeStoryCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type >(val2);
  arg2 = &temp2;
  (arg1)->AboveGradeStoryCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_AboveGradeStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional * >(argp2);
  (arg1)->AboveGradeStoryCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountAltered(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountAltered__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_AboveGradeStoryCountAltered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountExists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->AboveGradeStoryCountExists();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountExists",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *) &(arg1)->AboveGradeStoryCountExists();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountExists",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type >(val2);
  arg2 = &temp2;
  (arg1)->AboveGradeStoryCountExists((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountExists",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_AboveGradeStoryCountExists" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional * >(argp2);
  (arg1)->AboveGradeStoryCountExists((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountExists(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountExists__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_AboveGradeStoryCountExists'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->AboveGradeStoryCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_AboveGradeStoryCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *) &(arg1)->AboveGradeStoryCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type >(val2);
  arg2 = &temp2;
  (arg1)->AboveGradeStoryCountNew((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_AboveGradeStoryCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_AboveGradeStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional * >(argp2);
  (arg1)->AboveGradeStoryCountNew((schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_AboveGradeStoryCountNew(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_AboveGradeStoryCountNew__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_AboveGradeStoryCountNew'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew(schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24CoilCoolingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->T24CoilCoolingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24CoilCoolingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *) &(arg1)->T24CoilCoolingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24CoilCoolingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type >(val2);
  arg2 = &temp2;
  (arg1)->T24CoilCoolingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24CoilCoolingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24CoilCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional * >(argp2);
  (arg1)->T24CoilCoolingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilCoolingCapacity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_T24CoilCoolingCapacity__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_T24CoilCoolingCapacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24CoilHeatingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->T24CoilHeatingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24CoilHeatingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *) &(arg1)->T24CoilHeatingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24CoilHeatingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type >(val2);
  arg2 = &temp2;
  (arg1)->T24CoilHeatingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24CoilHeatingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24CoilHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional * >(argp2);
  (arg1)->T24CoilHeatingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24CoilHeatingCapacity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_T24CoilHeatingCapacity__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_T24CoilHeatingCapacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24FunctionClassificationMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->T24FunctionClassificationMethod();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24FunctionClassificationMethod",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *) &(arg1)->T24FunctionClassificationMethod();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24FunctionClassificationMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type * >(argp2);
  (arg1)->T24FunctionClassificationMethod((schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24FunctionClassificationMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional * >(argp2);
  (arg1)->T24FunctionClassificationMethod((schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24FunctionClassificationMethod",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24FunctionClassificationMethod" "', argument " "2"" of type '" "::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type >""'");
    } else {
      ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type > * temp = reinterpret_cast< ::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->T24FunctionClassificationMethod(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24FunctionClassificationMethod(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_xml_schema__string_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24FunctionClassificationMethod__SWIG_4(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_T24FunctionClassificationMethod'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod(schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod(schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod(::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_HighRiseResidentialLivingUnitCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->HighRiseResidentialLivingUnitCount();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_HighRiseResidentialLivingUnitCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *) &(arg1)->HighRiseResidentialLivingUnitCount();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_HighRiseResidentialLivingUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type >(val2);
  arg2 = &temp2;
  (arg1)->HighRiseResidentialLivingUnitCount((schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_HighRiseResidentialLivingUnitCount",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_HighRiseResidentialLivingUnitCount" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional * >(argp2);
  (arg1)->HighRiseResidentialLivingUnitCount((schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_HighRiseResidentialLivingUnitCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount(schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount(schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->LivingUnitCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *) &(arg1)->LivingUnitCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type >(val2);
  arg2 = &temp2;
  (arg1)->LivingUnitCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_LivingUnitCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional * >(argp2);
  (arg1)->LivingUnitCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountAltered(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountAltered__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_LivingUnitCountAltered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountExisting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->LivingUnitCountExisting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountExisting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *) &(arg1)->LivingUnitCountExisting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountExisting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type >(val2);
  arg2 = &temp2;
  (arg1)->LivingUnitCountExisting((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountExisting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_LivingUnitCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional * >(argp2);
  (arg1)->LivingUnitCountExisting((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountExisting(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountExisting__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_LivingUnitCountExisting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->LivingUnitCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_LivingUnitCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *) &(arg1)->LivingUnitCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type >(val2);
  arg2 = &temp2;
  (arg1)->LivingUnitCountNew((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_LivingUnitCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_LivingUnitCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional * >(argp2);
  (arg1)->LivingUnitCountNew((schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_LivingUnitCountNew(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_LivingUnitCountNew__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_LivingUnitCountNew'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew(schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24PlantCoolingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->T24PlantCoolingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24PlantCoolingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *) &(arg1)->T24PlantCoolingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24PlantCoolingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type >(val2);
  arg2 = &temp2;
  (arg1)->T24PlantCoolingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24PlantCoolingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24PlantCoolingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional * >(argp2);
  (arg1)->T24PlantCoolingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantCoolingCapacity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_T24PlantCoolingCapacity__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_T24PlantCoolingCapacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24PlantHeatingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->T24PlantHeatingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_T24PlantHeatingCapacity",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *) &(arg1)->T24PlantHeatingCapacity();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24PlantHeatingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type >(val2);
  arg2 = &temp2;
  (arg1)->T24PlantHeatingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_T24PlantHeatingCapacity",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_T24PlantHeatingCapacity" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional * >(argp2);
  (arg1)->T24PlantHeatingCapacity((schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_T24PlantHeatingCapacity(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_T24PlantHeatingCapacity__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_T24PlantHeatingCapacity'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity(schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RelocatablePublicSchoolBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->RelocatablePublicSchoolBuilding();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_RelocatablePublicSchoolBuilding",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *) &(arg1)->RelocatablePublicSchoolBuilding();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RelocatablePublicSchoolBuilding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type >(val2);
  arg2 = &temp2;
  (arg1)->RelocatablePublicSchoolBuilding((schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_RelocatablePublicSchoolBuilding",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_RelocatablePublicSchoolBuilding" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional * >(argp2);
  (arg1)->RelocatablePublicSchoolBuilding((schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_RelocatablePublicSchoolBuilding'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding(schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding(schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->TotalStoryCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountAltered",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *) &(arg1)->TotalStoryCountAltered();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type >(val2);
  arg2 = &temp2;
  (arg1)->TotalStoryCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountAltered",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_TotalStoryCountAltered" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional * >(argp2);
  (arg1)->TotalStoryCountAltered((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountAltered(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountAltered__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_TotalStoryCountAltered'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountExisting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->TotalStoryCountExisting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountExisting",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *) &(arg1)->TotalStoryCountExisting();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountExisting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type >(val2);
  arg2 = &temp2;
  (arg1)->TotalStoryCountExisting((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountExisting",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_TotalStoryCountExisting" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional * >(argp2);
  (arg1)->TotalStoryCountExisting((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountExisting(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountExisting__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_TotalStoryCountExisting'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *) &((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->TotalStoryCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_TotalStoryCountNew",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *) &(arg1)->TotalStoryCountNew();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type""'");
  } 
  temp2 = static_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type >(val2);
  arg2 = &temp2;
  (arg1)->TotalStoryCountNew((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_TotalStoryCountNew",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_TotalStoryCountNew" "', argument " "2"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional const &""'"); 
  }
  arg2 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional * >(argp2);
  (arg1)->TotalStoryCountNew((schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_TotalStoryCountNew(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_int_true_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_TotalStoryCountNew__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_TotalStoryCountNew'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew() const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew(schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SimBuilding_Building")) SWIG_fail;
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::SimModelCore::SimRoot::RefId_type *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::SimModelCore::SimRoot::RefId_type * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((schema::simxml::SimModelCore::SimRoot::RefId_type const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((::xercesc::DOMElement const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((::xercesc::DOMElement const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((::xercesc::DOMElement const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((schema::simxml::BuildingModel::SimBuilding_Building const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((schema::simxml::BuildingModel::SimBuilding_Building const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)new schema::simxml::BuildingModel::SimBuilding_Building((schema::simxml::BuildingModel::SimBuilding_Building const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SimBuilding_Building__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SimBuilding_Building'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(schema::simxml::SimModelCore::SimRoot::RefId_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(::xercesc::DOMElement const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(::xercesc::DOMElement const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(::xercesc::DOMElement const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(schema::simxml::BuildingModel::SimBuilding_Building const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(schema::simxml::BuildingModel::SimBuilding_Building const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Building(schema::simxml::BuildingModel::SimBuilding_Building const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building__clone__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building__clone",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building__clone" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->_clone(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building__clone__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building__clone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->_clone(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building__clone__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building__clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building *)((schema::simxml::BuildingModel::SimBuilding_Building const *)arg1)->_clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building__clone(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building__clone__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building__clone__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building__clone__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building__clone'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::_clone(::xml_schema::flags,::xml_schema::container *) const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::_clone(::xml_schema::flags) const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building::_clone() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SimBuilding_Building(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimBuilding_Building",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimBuilding_Building" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimBuilding_Building_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SimBuilding_Building_Default")) SWIG_fail;
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::SimModelCore::SimRoot::RefId_type *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building_Default",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::SimModelCore::SimRoot::RefId_type const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::SimModelCore::SimRoot::RefId_type * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((schema::simxml::SimModelCore::SimRoot::RefId_type const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building_Default",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building_Default" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((::xercesc::DOMElement const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building_Default",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((::xercesc::DOMElement const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::xercesc::DOMElement *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building_Default",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xercesc__DOMElement,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "::xercesc::DOMElement const &""'"); 
  }
  arg1 = reinterpret_cast< ::xercesc::DOMElement * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((::xercesc::DOMElement const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building_Default",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building_Default" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building_Default",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building_Default",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)new schema::simxml::BuildingModel::SimBuilding_Building_Default((schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SimBuilding_Building_Default__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building_Default__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building_Default__SWIG_4(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building_Default__SWIG_7(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building_Default__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building_Default__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xercesc__DOMElement, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building_Default__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building_Default__SWIG_5(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SimBuilding_Building_Default'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default()\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(schema::simxml::SimModelCore::SimRoot::RefId_type const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(::xercesc::DOMElement const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(::xercesc::DOMElement const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(::xercesc::DOMElement const &)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(schema::simxml::BuildingModel::SimBuilding_Building_Default const &,::xml_schema::flags,::xml_schema::container *)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(schema::simxml::BuildingModel::SimBuilding_Building_Default const &,::xml_schema::flags)\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::SimBuilding_Building_Default(schema::simxml::BuildingModel::SimBuilding_Building_Default const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default__clone__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building_Default *) 0 ;
  ::xml_schema::flags arg2 ;
  ::xml_schema::container *arg3 = (::xml_schema::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default__clone",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default__clone" "', argument " "3"" of type '" "::xml_schema::container *""'"); 
  }
  arg3 = reinterpret_cast< ::xml_schema::container * >(argp3);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)((schema::simxml::BuildingModel::SimBuilding_Building_Default const *)arg1)->_clone(arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default__clone__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building_Default *) 0 ;
  ::xml_schema::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default__clone",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default__clone" "', argument " "2"" of type '" "::xml_schema::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default__clone" "', argument " "2"" of type '" "::xml_schema::flags""'");
    } else {
      ::xml_schema::flags * temp = reinterpret_cast< ::xml_schema::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)((schema::simxml::BuildingModel::SimBuilding_Building_Default const *)arg1)->_clone(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default__clone__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building_Default *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default__clone",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default__clone" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default const *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  result = (schema::simxml::BuildingModel::SimBuilding_Building_Default *)((schema::simxml::BuildingModel::SimBuilding_Building_Default const *)arg1)->_clone();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default__clone(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default__clone__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default__clone__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building_Default__clone__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default__clone'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::_clone(::xml_schema::flags,::xml_schema::container *) const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::_clone(::xml_schema::flags) const\n"
    "    schema::simxml::BuildingModel::SimBuilding_Building_Default::_clone() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_SimBuilding_Building_Default(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  schema::simxml::BuildingModel::SimBuilding_Building_Default *arg1 = (schema::simxml::BuildingModel::SimBuilding_Building_Default *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimBuilding_Building_Default",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimBuilding_Building_Default" "', argument " "1"" of type '" "schema::simxml::BuildingModel::SimBuilding_Building_Default *""'"); 
  }
  arg1 = reinterpret_cast< schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimBuilding_Building_Default_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::container *arg1 = (xsd::cxx::tree::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building_Default_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::container * >(argp1);
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_SimBuilding_Building_Default_sequence")) SWIG_fail;
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg1 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg2 = 0 ;
  xsd::cxx::tree::container *arg3 = (xsd::cxx::tree::container *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building_Default_sequence",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg2 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "3"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg3 = reinterpret_cast< xsd::cxx::tree::container * >(argp3);
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >(arg1,(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg1 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building_Default_sequence",&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg2 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp2);
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >(arg1,(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = 0 ;
  xsd::cxx::tree::flags arg2 ;
  xsd::cxx::tree::container *arg3 = (xsd::cxx::tree::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_SimBuilding_Building_Default_sequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'");
    } else {
      xsd::cxx::tree::flags * temp = reinterpret_cast< xsd::cxx::tree::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "3"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg3 = reinterpret_cast< xsd::cxx::tree::container * >(argp3);
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = 0 ;
  xsd::cxx::tree::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimBuilding_Building_Default_sequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'");
    } else {
      xsd::cxx::tree::flags * temp = reinterpret_cast< xsd::cxx::tree::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_SimBuilding_Building_Default_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *)new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SimBuilding_Building_Default_sequence(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_6(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SimBuilding_Building_Default_sequence__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SimBuilding_Building_Default_sequence'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence()\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type,::schema::simxml::BuildingModel::SimBuilding_Building_Default const &,xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type,::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &,xsd::cxx::tree::flags,xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &,xsd::cxx::tree::flags)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::sequence(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg2 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default_sequence_assign",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_assign" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_assign" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_assign" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_assign" "', argument " "3"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_assign" "', argument " "3"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg3 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp3);
  (arg1)->assign(arg2,(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg3);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_begin" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = ((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->begin();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_end" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = ((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->end();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_begin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_begin" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (arg1)->begin();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_begin__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_begin__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_begin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::begin() const\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::begin()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_end",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_end" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (arg1)->end();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_end__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_end__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_end'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::end() const\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::end()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_rbegin" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = ((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->rbegin();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_reverse_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_reverse_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_rend" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = ((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->rend();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_reverse_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_reverse_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_rbegin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_rbegin" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (arg1)->rbegin();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::reverse_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::reverse_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_rbegin__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_rbegin__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_rbegin'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::rbegin() const\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::rbegin()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_rend",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_rend" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (arg1)->rend();
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::reverse_iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::reverse_iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_rend__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_rend__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_rend'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::rend() const\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::rend()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_at__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &(arg1)->at(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_at__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &(arg1)->at(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_at__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_at",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_at" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->at(arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_at(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_at__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_at__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_at__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_at'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::at(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::at(int)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::at(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_front__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_front" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &(arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_front__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_front",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_front" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->front();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_front(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_front__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_front__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_front'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::front()\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::front() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &(arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (::schema::simxml::BuildingModel::SimBuilding_Building_Default *) &((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > const *)arg1)->back();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_back(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_back__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_back__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::back()\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::back() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_push_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "2"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg2 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp2);
  (arg1)->push_back((::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_push_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_push_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "2"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_push_back" "', argument " "2"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >""'");
    } else {
      std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * temp = reinterpret_cast< std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  (arg1)->push_back(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_push_back(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_push_back__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_push_back__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_push_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::push_back(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::push_back(std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_pop_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_pop_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  (arg1)->pop_back();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach_back__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_detach_back",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_detach_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimBuilding_Building_Default_sequence_detach_back" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  result = (arg1)->detach_back(arg2);
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach_back__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimBuilding_Building_Default_sequence_detach_back",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_detach_back" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  result = (arg1)->detach_back();
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach_back(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_SimBuilding_Building_Default_sequence_detach_back__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_detach_back__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_detach_back'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::detach_back(bool)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::detach_back()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default_sequence_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg3 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp3);
  result = (arg1)->insert(arg2,(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg3);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default_sequence_insert",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >""'");
    } else {
      std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * temp = reinterpret_cast< std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->insert(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_insert__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  SwigValueWrapper< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type > arg3 ;
  ::schema::simxml::BuildingModel::SimBuilding_Building_Default *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SimBuilding_Building_Default_sequence_insert",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "3"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "4"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_insert" "', argument " "4"" of type '" "::schema::simxml::BuildingModel::SimBuilding_Building_Default const &""'"); 
  }
  arg4 = reinterpret_cast< ::schema::simxml::BuildingModel::SimBuilding_Building_Default * >(argp4);
  (arg1)->insert(arg2,arg3,(::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)*arg4);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building_Default_sequence_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building_Default_sequence_insert__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_SimBuilding_Building_Default_sequence_insert__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_insert'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::insert(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::insert(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default >)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::insert(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type,::schema::simxml::BuildingModel::SimBuilding_Building_Default const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_erase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (arg1)->erase(arg2);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default_sequence_erase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "3"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_erase" "', argument " "3"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  result = (arg1)->erase(arg2,arg3);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SimBuilding_Building_Default_sequence_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building_Default_sequence_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::erase(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::erase(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SimBuilding_Building_Default_sequence_detach",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &""'"); 
  }
  arg3 = reinterpret_cast< std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  result = (arg1)->detach(arg2,*arg3,arg4);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > arg2 ;
  std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SimBuilding_Building_Default_sequence_detach",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator""'");
    } else {
      xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * temp = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_detach" "', argument " "3"" of type '" "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &""'"); 
  }
  arg3 = reinterpret_cast< std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > * >(argp3);
  result = (arg1)->detach(arg2,*arg3);
  resultobj = SWIG_NewPointerObj((new xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator(static_cast< const xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator& >(result))), SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_detach(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SimBuilding_Building_Default_sequence_detach__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SimBuilding_Building_Default_sequence_detach__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SimBuilding_Building_Default_sequence_detach'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::detach(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &,bool)\n"
    "    xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::detach(xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator,std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SimBuilding_Building_Default_sequence_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimBuilding_Building_Default_sequence_swap",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimBuilding_Building_Default_sequence_swap" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SimBuilding_Building_Default_sequence_swap" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SimBuilding_Building_Default_sequence_swap" "', argument " "2"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > &""'"); 
  }
  arg2 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp2);
  (arg1)->swap(*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimBuilding_Building_Default_sequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *arg1 = (xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimBuilding_Building_Default_sequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimBuilding_Building_Default_sequence" "', argument " "1"" of type '" "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimBuilding_Building_Default_sequence_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::container *arg1 = (xsd::cxx::tree::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BuildingHeight_optional",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::container * >(argp1);
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >(arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BuildingHeight_optional")) SWIG_fail;
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  xsd::cxx::tree::container *arg2 = (xsd::cxx::tree::container *) 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BuildingHeight_optional",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BuildingHeight_optional" "', argument " "2"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg2 = reinterpret_cast< xsd::cxx::tree::container * >(argp2);
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >((double const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BuildingHeight_optional",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >((double const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = 0 ;
  xsd::cxx::tree::flags arg2 ;
  xsd::cxx::tree::container *arg3 = (xsd::cxx::tree::container *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_BuildingHeight_optional",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BuildingHeight_optional" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BuildingHeight_optional" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'");
    } else {
      xsd::cxx::tree::flags * temp = reinterpret_cast< xsd::cxx::tree::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_xsd__cxx__tree___type, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BuildingHeight_optional" "', argument " "3"" of type '" "xsd::cxx::tree::container *""'"); 
  }
  arg3 = reinterpret_cast< xsd::cxx::tree::container * >(argp3);
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &)*arg1,arg2,arg3);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = 0 ;
  xsd::cxx::tree::flags arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BuildingHeight_optional",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_xsd__cxx__tree__flags,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BuildingHeight_optional" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BuildingHeight_optional" "', argument " "2"" of type '" "xsd::cxx::tree::flags""'");
    } else {
      xsd::cxx::tree::flags * temp = reinterpret_cast< xsd::cxx::tree::flags * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &)*arg1,arg2);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BuildingHeight_optional",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *)new xsd::cxx::tree::optional< ::xml_schema::decimal,true >((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &)*arg1);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BuildingHeight_optional(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BuildingHeight_optional__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BuildingHeight_optional__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_BuildingHeight_optional__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_BuildingHeight_optional__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BuildingHeight_optional__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_BuildingHeight_optional__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_xsd__cxx__tree__flags, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_xsd__cxx__tree___type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_BuildingHeight_optional__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BuildingHeight_optional'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional()\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(double const &,xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(double const &)\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &,xsd::cxx::tree::flags,xsd::cxx::tree::container *)\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &,xsd::cxx::tree::flags)\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::optional(xsd::cxx::tree::optional< ::xml_schema::decimal,true > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___deref____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional___deref__" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *)((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *)arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___deref____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional___deref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional___deref__" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *)(arg1)->operator ->();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___deref__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional___deref____SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional___deref____SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BuildingHeight_optional___deref__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::operator ->() const\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::operator ->()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___ref____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional___ref__" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *) &((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *)arg1)->operator *();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___ref____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional___ref__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional___ref__" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *) &(arg1)->operator *();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional___ref__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional___ref____SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional___ref____SWIG_0(self, args);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_present(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_present",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_present" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (bool)((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *)arg1)->present();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_get__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_get" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *) &((xsd::cxx::tree::optional< ::xml_schema::decimal,true > const *)arg1)->get();
  resultobj = SWIG_From_double(static_cast< double >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_get__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_get" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double *) &(arg1)->get();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_double, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_get(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2] = {
    0
  };
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional_get__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_BuildingHeight_optional_get__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'BuildingHeight_optional_get'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::get() const\n"
    "    xsd::cxx::tree::optional< ::xml_schema::decimal,true >::get()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_getV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_getV",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_getV" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double)(arg1)->getV();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_getValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_getValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_getValue" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  result = (double)(arg1)->getValue();
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  double *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BuildingHeight_optional_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_set" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BuildingHeight_optional_set" "', argument " "2"" of type '" "double""'");
  } 
  temp2 = static_cast< double >(val2);
  arg2 = &temp2;
  (arg1)->set((double const &)*arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BuildingHeight_optional_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BuildingHeight_optional_reset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BuildingHeight_optional_reset" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  (arg1)->reset();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BuildingHeight_optional(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  xsd::cxx::tree::optional< ::xml_schema::decimal,true > *arg1 = (xsd::cxx::tree::optional< ::xml_schema::decimal,true > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BuildingHeight_optional",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BuildingHeight_optional" "', argument " "1"" of type '" "xsd::cxx::tree::optional< ::xml_schema::decimal,true > *""'"); 
  }
  arg1 = reinterpret_cast< xsd::cxx::tree::optional< ::xml_schema::decimal,true > * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BuildingHeight_optional_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char*)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_xsd__cxx__tree__optionalT_double_true_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"SimBuilding_Name", _wrap_SimBuilding_Name, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingAddress", _wrap_SimBuilding_BuildingAddress, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingDatumElevation", _wrap_SimBuilding_BuildingDatumElevation, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingOccupancyType", _wrap_SimBuilding_BuildingOccupancyType, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingGrossPlannedArea", _wrap_SimBuilding_BuildingGrossPlannedArea, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingNumberofStoreys", _wrap_SimBuilding_BuildingNumberofStoreys, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingYearOfConstruction", _wrap_SimBuilding_BuildingYearOfConstruction, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingisLandmarked", _wrap_SimBuilding_BuildingisLandmarked, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingEnergyTargetUnits", _wrap_SimBuilding_BuildingEnergyTargetUnits, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingEnergyTargetValue", _wrap_SimBuilding_BuildingEnergyTargetValue, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingHeight", _wrap_SimBuilding_BuildingHeight, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingGrossFloorArea", _wrap_SimBuilding_BuildingGrossFloorArea, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_ClassRef_ConstEntByFunction", _wrap_SimBuilding_ClassRef_ConstEntByFunction, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingInSpatialContainer", _wrap_SimBuilding_BuildingInSpatialContainer, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Representation", _wrap_SimBuilding_Representation, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_ElevationOfTerrain", _wrap_SimBuilding_ElevationOfTerrain, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingConstructionsTemplate", _wrap_SimBuilding_BuildingConstructionsTemplate, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_SpaceBoundsNotCurrent", _wrap_SimBuilding_SpaceBoundsNotCurrent, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_DaylightControlsDefault", _wrap_SimBuilding_DaylightControlsDefault, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_NatVentilationDefault", _wrap_SimBuilding_NatVentilationDefault, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingInfiltrationType", _wrap_SimBuilding_BuildingInfiltrationType, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_BuildingInfiltrationValue", _wrap_SimBuilding_BuildingInfiltrationValue, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_TemplateOverrideValues", _wrap_SimBuilding_TemplateOverrideValues, METH_VARARGS, NULL},
	 { (char *)"new_SimBuilding", _wrap_new_SimBuilding, METH_VARARGS, NULL},
	 { (char *)"SimBuilding__clone", _wrap_SimBuilding__clone, METH_VARARGS, NULL},
	 { (char *)"delete_SimBuilding", _wrap_delete_SimBuilding, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_swigregister", SimBuilding_swigregister, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_Name", _wrap_SimBuilding_Building_SimBuilding_Name, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_NorthAxis", _wrap_SimBuilding_Building_SimBuilding_NorthAxis, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_Terrain", _wrap_SimBuilding_Building_SimBuilding_Terrain, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_LoadsConvergTolVal", _wrap_SimBuilding_Building_SimBuilding_LoadsConvergTolVal, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_TempConvergTolVal", _wrap_SimBuilding_Building_SimBuilding_TempConvergTolVal, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_SolarDist", _wrap_SimBuilding_Building_SimBuilding_SolarDist, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_MaxNumWarmupDays", _wrap_SimBuilding_Building_SimBuilding_MaxNumWarmupDays, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_SimBuilding_MinNumberWarmupDays", _wrap_SimBuilding_Building_SimBuilding_MinNumberWarmupDays, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_RoofIrrigation_IrrigationModelType", _wrap_SimBuilding_Building_RoofIrrigation_IrrigationModelType, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName", _wrap_SimBuilding_Building_RoofIrrigation_IrrigationRateSchedName, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold", _wrap_SimBuilding_Building_RoofIrrigation_IrrigationMaxSaturatThreshold, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_AboveGradeStoryCountAltered", _wrap_SimBuilding_Building_AboveGradeStoryCountAltered, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_AboveGradeStoryCountExists", _wrap_SimBuilding_Building_AboveGradeStoryCountExists, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_AboveGradeStoryCountNew", _wrap_SimBuilding_Building_AboveGradeStoryCountNew, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_T24CoilCoolingCapacity", _wrap_SimBuilding_Building_T24CoilCoolingCapacity, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_T24CoilHeatingCapacity", _wrap_SimBuilding_Building_T24CoilHeatingCapacity, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_T24FunctionClassificationMethod", _wrap_SimBuilding_Building_T24FunctionClassificationMethod, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_HighRiseResidentialLivingUnitCount", _wrap_SimBuilding_Building_HighRiseResidentialLivingUnitCount, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_LivingUnitCountAltered", _wrap_SimBuilding_Building_LivingUnitCountAltered, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_LivingUnitCountExisting", _wrap_SimBuilding_Building_LivingUnitCountExisting, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_LivingUnitCountNew", _wrap_SimBuilding_Building_LivingUnitCountNew, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_T24PlantCoolingCapacity", _wrap_SimBuilding_Building_T24PlantCoolingCapacity, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_T24PlantHeatingCapacity", _wrap_SimBuilding_Building_T24PlantHeatingCapacity, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_RelocatablePublicSchoolBuilding", _wrap_SimBuilding_Building_RelocatablePublicSchoolBuilding, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_TotalStoryCountAltered", _wrap_SimBuilding_Building_TotalStoryCountAltered, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_TotalStoryCountExisting", _wrap_SimBuilding_Building_TotalStoryCountExisting, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_TotalStoryCountNew", _wrap_SimBuilding_Building_TotalStoryCountNew, METH_VARARGS, NULL},
	 { (char *)"new_SimBuilding_Building", _wrap_new_SimBuilding_Building, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building__clone", _wrap_SimBuilding_Building__clone, METH_VARARGS, NULL},
	 { (char *)"delete_SimBuilding_Building", _wrap_delete_SimBuilding_Building, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_swigregister", SimBuilding_Building_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SimBuilding_Building_Default", _wrap_new_SimBuilding_Building_Default, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default__clone", _wrap_SimBuilding_Building_Default__clone, METH_VARARGS, NULL},
	 { (char *)"delete_SimBuilding_Building_Default", _wrap_delete_SimBuilding_Building_Default, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_swigregister", SimBuilding_Building_Default_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SimBuilding_Building_Default_sequence", _wrap_new_SimBuilding_Building_Default_sequence, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_assign", _wrap_SimBuilding_Building_Default_sequence_assign, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_begin", _wrap_SimBuilding_Building_Default_sequence_begin, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_end", _wrap_SimBuilding_Building_Default_sequence_end, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_rbegin", _wrap_SimBuilding_Building_Default_sequence_rbegin, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_rend", _wrap_SimBuilding_Building_Default_sequence_rend, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_at", _wrap_SimBuilding_Building_Default_sequence_at, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_front", _wrap_SimBuilding_Building_Default_sequence_front, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_back", _wrap_SimBuilding_Building_Default_sequence_back, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_push_back", _wrap_SimBuilding_Building_Default_sequence_push_back, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_pop_back", _wrap_SimBuilding_Building_Default_sequence_pop_back, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_detach_back", _wrap_SimBuilding_Building_Default_sequence_detach_back, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_insert", _wrap_SimBuilding_Building_Default_sequence_insert, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_erase", _wrap_SimBuilding_Building_Default_sequence_erase, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_detach", _wrap_SimBuilding_Building_Default_sequence_detach, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_swap", _wrap_SimBuilding_Building_Default_sequence_swap, METH_VARARGS, NULL},
	 { (char *)"delete_SimBuilding_Building_Default_sequence", _wrap_delete_SimBuilding_Building_Default_sequence, METH_VARARGS, NULL},
	 { (char *)"SimBuilding_Building_Default_sequence_swigregister", SimBuilding_Building_Default_sequence_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BuildingHeight_optional", _wrap_new_BuildingHeight_optional, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional___deref__", _wrap_BuildingHeight_optional___deref__, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional___ref__", _wrap_BuildingHeight_optional___ref__, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_present", _wrap_BuildingHeight_optional_present, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_get", _wrap_BuildingHeight_optional_get, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_getV", _wrap_BuildingHeight_optional_getV, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_getValue", _wrap_BuildingHeight_optional_getValue, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_set", _wrap_BuildingHeight_optional_set, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_reset", _wrap_BuildingHeight_optional_reset, METH_VARARGS, NULL},
	 { (char *)"delete_BuildingHeight_optional", _wrap_delete_BuildingHeight_optional, METH_VARARGS, NULL},
	 { (char *)"BuildingHeight_optional_swigregister", BuildingHeight_optional_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObject *)  ((schema::simxml::SimModelCore::SimSpatialStructureElement *) x));
}
static void *_p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObject *)  ((schema::simxml::SimModelCore::SimGroup *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObject *) (schema::simxml::SimModelCore::SimSpatialStructureElement *) ((schema::simxml::BuildingModel::SimBuilding *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObject *) (schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *) ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObject *) (schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *)(schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__BuildingModel__SimBuilding(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::BuildingModel::SimBuilding *)  ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__BuildingModel__SimBuilding(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::BuildingModel::SimBuilding *) (schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimSpatialStructureElement *)  ((schema::simxml::BuildingModel::SimBuilding *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimSpatialStructureElement *) (schema::simxml::BuildingModel::SimBuilding *) ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimSpatialStructureElement *) (schema::simxml::BuildingModel::SimBuilding *)(schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimSpatialStructureElement *) x));
}
static void *_p_schema__simxml__SimModelCore__SimGroupTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimGroup *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuildingTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *) ((schema::simxml::BuildingModel::SimBuilding *) x));
}
static void *_p_schema__simxml__SimModelCore__SimRootTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *)  ((schema::simxml::SimModelCore::SimRoot *) x));
}
static void *_p_schema__simxml__SimModelCore__SimObjectTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *) ((schema::simxml::SimModelCore::SimObject *) x));
}
static void *_p_schema__simxml__SimModelCore__SimObjectDefinitionTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *) ((schema::simxml::SimModelCore::SimObjectDefinition *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *) ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_xsd__cxx__tree___type(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::_type *) (schema::simxml::SimModelCore::SimRoot *)(schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *)(schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *) (schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimSpatialStructureElement *) x));
}
static void *_p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *) (schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimGroup *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *) (schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *) ((schema::simxml::BuildingModel::SimBuilding *) x));
}
static void *_p_schema__simxml__SimModelCore__SimObjectTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *)  ((schema::simxml::SimModelCore::SimObject *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *) (schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *) ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimObjectDefinition(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimObjectDefinition *) (schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *)(schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimSpatialStructureElement *) x));
}
static void *_p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *) ((schema::simxml::SimModelCore::SimGroup *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *) ((schema::simxml::BuildingModel::SimBuilding *) x));
}
static void *_p_schema__simxml__SimModelCore__SimObjectTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *) ((schema::simxml::SimModelCore::SimObject *) x));
}
static void *_p_schema__simxml__SimModelCore__SimObjectDefinitionTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *)  ((schema::simxml::SimModelCore::SimObjectDefinition *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *) ((schema::simxml::BuildingModel::SimBuilding_Building *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimRoot(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::SimModelCore::SimRoot *) (schema::simxml::SimModelCore::SimObjectDefinition *)(schema::simxml::SimModelCore::SimObject *)(schema::simxml::SimModelCore::SimSpatialStructureElement *)(schema::simxml::BuildingModel::SimBuilding *)(schema::simxml::BuildingModel::SimBuilding_Building *) ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static void *_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_tTo_p_xsd__cxx__tree__sequence_common(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((xsd::cxx::tree::sequence_common *)  ((xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *) x));
}
static void *_p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__BuildingModel__SimBuilding_Building(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((schema::simxml::BuildingModel::SimBuilding_Building *)  ((schema::simxml::BuildingModel::SimBuilding_Building_Default *) x));
}
static swig_type_info _swigt__p_AboveGradeStoryCountAltered_optional = {"_p_AboveGradeStoryCountAltered_optional", "AboveGradeStoryCountAltered_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountAltered_traits = {"_p_AboveGradeStoryCountAltered_traits", "AboveGradeStoryCountAltered_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountAltered_type = {"_p_AboveGradeStoryCountAltered_type", "AboveGradeStoryCountAltered_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountExists_optional = {"_p_AboveGradeStoryCountExists_optional", "AboveGradeStoryCountExists_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountExists_traits = {"_p_AboveGradeStoryCountExists_traits", "AboveGradeStoryCountExists_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountExists_type = {"_p_AboveGradeStoryCountExists_type", "AboveGradeStoryCountExists_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountNew_optional = {"_p_AboveGradeStoryCountNew_optional", "AboveGradeStoryCountNew_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountNew_traits = {"_p_AboveGradeStoryCountNew_traits", "AboveGradeStoryCountNew_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_AboveGradeStoryCountNew_type = {"_p_AboveGradeStoryCountNew_type", "AboveGradeStoryCountNew_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingAddress_optional = {"_p_BuildingAddress_optional", "BuildingAddress_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingAddress_traits = {"_p_BuildingAddress_traits", "BuildingAddress_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingAddress_type = {"_p_BuildingAddress_type", "BuildingAddress_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingConstructionsTemplate_optional = {"_p_BuildingConstructionsTemplate_optional", "BuildingConstructionsTemplate_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingConstructionsTemplate_traits = {"_p_BuildingConstructionsTemplate_traits", "BuildingConstructionsTemplate_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingConstructionsTemplate_type = {"_p_BuildingConstructionsTemplate_type", "BuildingConstructionsTemplate_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingDatumElevation_optional = {"_p_BuildingDatumElevation_optional", "BuildingDatumElevation_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingDatumElevation_traits = {"_p_BuildingDatumElevation_traits", "BuildingDatumElevation_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingDatumElevation_type = {"_p_BuildingDatumElevation_type", "BuildingDatumElevation_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetUnits_optional = {"_p_BuildingEnergyTargetUnits_optional", "BuildingEnergyTargetUnits_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetUnits_traits = {"_p_BuildingEnergyTargetUnits_traits", "BuildingEnergyTargetUnits_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetUnits_type = {"_p_BuildingEnergyTargetUnits_type", "BuildingEnergyTargetUnits_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetValue_optional = {"_p_BuildingEnergyTargetValue_optional", "BuildingEnergyTargetValue_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetValue_traits = {"_p_BuildingEnergyTargetValue_traits", "BuildingEnergyTargetValue_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingEnergyTargetValue_type = {"_p_BuildingEnergyTargetValue_type", "BuildingEnergyTargetValue_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossFloorArea_optional = {"_p_BuildingGrossFloorArea_optional", "BuildingGrossFloorArea_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossFloorArea_traits = {"_p_BuildingGrossFloorArea_traits", "BuildingGrossFloorArea_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossFloorArea_type = {"_p_BuildingGrossFloorArea_type", "BuildingGrossFloorArea_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossPlannedArea_optional = {"_p_BuildingGrossPlannedArea_optional", "BuildingGrossPlannedArea_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossPlannedArea_traits = {"_p_BuildingGrossPlannedArea_traits", "BuildingGrossPlannedArea_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingGrossPlannedArea_type = {"_p_BuildingGrossPlannedArea_type", "BuildingGrossPlannedArea_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingHeight_optional = {"_p_BuildingHeight_optional", "BuildingHeight_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingHeight_traits = {"_p_BuildingHeight_traits", "BuildingHeight_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingHeight_type = {"_p_BuildingHeight_type", "BuildingHeight_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInSpatialContainer_optional = {"_p_BuildingInSpatialContainer_optional", "BuildingInSpatialContainer_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInSpatialContainer_traits = {"_p_BuildingInSpatialContainer_traits", "BuildingInSpatialContainer_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInSpatialContainer_type = {"_p_BuildingInSpatialContainer_type", "BuildingInSpatialContainer_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationType_optional = {"_p_BuildingInfiltrationType_optional", "BuildingInfiltrationType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationType_traits = {"_p_BuildingInfiltrationType_traits", "BuildingInfiltrationType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationType_type = {"_p_BuildingInfiltrationType_type", "BuildingInfiltrationType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationValue_optional = {"_p_BuildingInfiltrationValue_optional", "BuildingInfiltrationValue_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationValue_traits = {"_p_BuildingInfiltrationValue_traits", "BuildingInfiltrationValue_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingInfiltrationValue_type = {"_p_BuildingInfiltrationValue_type", "BuildingInfiltrationValue_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingNumberofStoreys_optional = {"_p_BuildingNumberofStoreys_optional", "BuildingNumberofStoreys_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingNumberofStoreys_traits = {"_p_BuildingNumberofStoreys_traits", "BuildingNumberofStoreys_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingNumberofStoreys_type = {"_p_BuildingNumberofStoreys_type", "BuildingNumberofStoreys_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingOccupancyType_optional = {"_p_BuildingOccupancyType_optional", "BuildingOccupancyType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingOccupancyType_traits = {"_p_BuildingOccupancyType_traits", "BuildingOccupancyType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingOccupancyType_type = {"_p_BuildingOccupancyType_type", "BuildingOccupancyType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingYearOfConstruction_optional = {"_p_BuildingYearOfConstruction_optional", "BuildingYearOfConstruction_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingYearOfConstruction_traits = {"_p_BuildingYearOfConstruction_traits", "BuildingYearOfConstruction_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingYearOfConstruction_type = {"_p_BuildingYearOfConstruction_type", "BuildingYearOfConstruction_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingisLandmarked_optional = {"_p_BuildingisLandmarked_optional", "BuildingisLandmarked_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingisLandmarked_traits = {"_p_BuildingisLandmarked_traits", "BuildingisLandmarked_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_BuildingisLandmarked_type = {"_p_BuildingisLandmarked_type", "BuildingisLandmarked_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChangeFromTemplate_optional = {"_p_ChangeFromTemplate_optional", "ChangeFromTemplate_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChangeFromTemplate_traits = {"_p_ChangeFromTemplate_traits", "ChangeFromTemplate_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChangeFromTemplate_type = {"_p_ChangeFromTemplate_type", "ChangeFromTemplate_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClassRef_ConstEntByFunction_optional = {"_p_ClassRef_ConstEntByFunction_optional", "ClassRef_ConstEntByFunction_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClassRef_ConstEntByFunction_traits = {"_p_ClassRef_ConstEntByFunction_traits", "ClassRef_ConstEntByFunction_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ClassRef_ConstEntByFunction_type = {"_p_ClassRef_ConstEntByFunction_type", "ClassRef_ConstEntByFunction_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CompositionType_optional = {"_p_CompositionType_optional", "CompositionType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CompositionType_traits = {"_p_CompositionType_traits", "CompositionType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CompositionType_type = {"_p_CompositionType_type", "CompositionType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContainingBuildings_optional = {"_p_ContainingBuildings_optional", "ContainingBuildings_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContainingBuildings_traits = {"_p_ContainingBuildings_traits", "ContainingBuildings_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ContainingBuildings_type = {"_p_ContainingBuildings_type", "ContainingBuildings_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DaylightControlsDefault_optional = {"_p_DaylightControlsDefault_optional", "DaylightControlsDefault_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DaylightControlsDefault_traits = {"_p_DaylightControlsDefault_traits", "DaylightControlsDefault_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DaylightControlsDefault_type = {"_p_DaylightControlsDefault_type", "DaylightControlsDefault_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Decomposes_optional = {"_p_Decomposes_optional", "Decomposes_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Decomposes_traits = {"_p_Decomposes_traits", "Decomposes_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Decomposes_type = {"_p_Decomposes_type", "Decomposes_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Description_optional = {"_p_Description_optional", "Description_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Description_traits = {"_p_Description_traits", "Description_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Description_type = {"_p_Description_type", "Description_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElevationOfTerrain_optional = {"_p_ElevationOfTerrain_optional", "ElevationOfTerrain_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElevationOfTerrain_traits = {"_p_ElevationOfTerrain_traits", "ElevationOfTerrain_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ElevationOfTerrain_type = {"_p_ElevationOfTerrain_type", "ElevationOfTerrain_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HasTemplateChanged_optional = {"_p_HasTemplateChanged_optional", "HasTemplateChanged_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HasTemplateChanged_traits = {"_p_HasTemplateChanged_traits", "HasTemplateChanged_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HasTemplateChanged_type = {"_p_HasTemplateChanged_type", "HasTemplateChanged_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HighRiseResidentialLivingUnitCount_optional = {"_p_HighRiseResidentialLivingUnitCount_optional", "HighRiseResidentialLivingUnitCount_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HighRiseResidentialLivingUnitCount_traits = {"_p_HighRiseResidentialLivingUnitCount_traits", "HighRiseResidentialLivingUnitCount_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_HighRiseResidentialLivingUnitCount_type = {"_p_HighRiseResidentialLivingUnitCount_type", "HighRiseResidentialLivingUnitCount_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcGlobalID_optional = {"_p_IfcGlobalID_optional", "IfcGlobalID_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcGlobalID_traits = {"_p_IfcGlobalID_traits", "IfcGlobalID_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcGlobalID_type = {"_p_IfcGlobalID_type", "IfcGlobalID_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcName_optional = {"_p_IfcName_optional", "IfcName_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcName_traits = {"_p_IfcName_traits", "IfcName_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IfcName_type = {"_p_IfcName_type", "IfcName_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IsTemplateObject_optional = {"_p_IsTemplateObject_optional", "IsTemplateObject_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IsTemplateObject_traits = {"_p_IsTemplateObject_traits", "IsTemplateObject_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IsTemplateObject_type = {"_p_IsTemplateObject_type", "IsTemplateObject_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountAltered_optional = {"_p_LivingUnitCountAltered_optional", "LivingUnitCountAltered_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountAltered_traits = {"_p_LivingUnitCountAltered_traits", "LivingUnitCountAltered_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountAltered_type = {"_p_LivingUnitCountAltered_type", "LivingUnitCountAltered_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountExisting_optional = {"_p_LivingUnitCountExisting_optional", "LivingUnitCountExisting_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountExisting_traits = {"_p_LivingUnitCountExisting_traits", "LivingUnitCountExisting_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountExisting_type = {"_p_LivingUnitCountExisting_type", "LivingUnitCountExisting_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountNew_optional = {"_p_LivingUnitCountNew_optional", "LivingUnitCountNew_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountNew_traits = {"_p_LivingUnitCountNew_traits", "LivingUnitCountNew_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LivingUnitCountNew_type = {"_p_LivingUnitCountNew_type", "LivingUnitCountNew_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LongName_optional = {"_p_LongName_optional", "LongName_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LongName_traits = {"_p_LongName_traits", "LongName_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LongName_type = {"_p_LongName_type", "LongName_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MemberUsedForDiagrams_optional = {"_p_MemberUsedForDiagrams_optional", "MemberUsedForDiagrams_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MemberUsedForDiagrams_traits = {"_p_MemberUsedForDiagrams_traits", "MemberUsedForDiagrams_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MemberUsedForDiagrams_type = {"_p_MemberUsedForDiagrams_type", "MemberUsedForDiagrams_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Name_optional = {"_p_Name_optional", "Name_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Name_traits = {"_p_Name_traits", "Name_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Name_type = {"_p_Name_type", "Name_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NatVentilationDefault_optional = {"_p_NatVentilationDefault_optional", "NatVentilationDefault_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NatVentilationDefault_traits = {"_p_NatVentilationDefault_traits", "NatVentilationDefault_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NatVentilationDefault_type = {"_p_NatVentilationDefault_type", "NatVentilationDefault_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NevronSchematicLayout_optional = {"_p_NevronSchematicLayout_optional", "NevronSchematicLayout_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NevronSchematicLayout_traits = {"_p_NevronSchematicLayout_traits", "NevronSchematicLayout_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NevronSchematicLayout_type = {"_p_NevronSchematicLayout_type", "NevronSchematicLayout_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectCreationParams_optional = {"_p_ObjectCreationParams_optional", "ObjectCreationParams_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectCreationParams_traits = {"_p_ObjectCreationParams_traits", "ObjectCreationParams_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectCreationParams_type = {"_p_ObjectCreationParams_type", "ObjectCreationParams_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectOwnerHistory_optional = {"_p_ObjectOwnerHistory_optional", "ObjectOwnerHistory_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectOwnerHistory_traits = {"_p_ObjectOwnerHistory_traits", "ObjectOwnerHistory_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectOwnerHistory_type = {"_p_ObjectOwnerHistory_type", "ObjectOwnerHistory_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectType_optional = {"_p_ObjectType_optional", "ObjectType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectType_traits = {"_p_ObjectType_traits", "ObjectType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectType_type = {"_p_ObjectType_type", "ObjectType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParentGroups_optional = {"_p_ParentGroups_optional", "ParentGroups_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParentGroups_traits = {"_p_ParentGroups_traits", "ParentGroups_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ParentGroups_type = {"_p_ParentGroups_type", "ParentGroups_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Placement_optional = {"_p_Placement_optional", "Placement_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Placement_traits = {"_p_Placement_traits", "Placement_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Placement_type = {"_p_Placement_type", "Placement_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefId_traits = {"_p_RefId_traits", "RefId_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RefId_type = {"_p_RefId_type", "RefId_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RelocatablePublicSchoolBuilding_optional = {"_p_RelocatablePublicSchoolBuilding_optional", "RelocatablePublicSchoolBuilding_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RelocatablePublicSchoolBuilding_traits = {"_p_RelocatablePublicSchoolBuilding_traits", "RelocatablePublicSchoolBuilding_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RelocatablePublicSchoolBuilding_type = {"_p_RelocatablePublicSchoolBuilding_type", "RelocatablePublicSchoolBuilding_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Representation_optional = {"_p_Representation_optional", "Representation_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Representation_traits = {"_p_Representation_traits", "Representation_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Representation_type = {"_p_Representation_type", "Representation_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional = {"_p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional", "RoofIrrigation_IrrigationMaxSaturatThreshold_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits = {"_p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits", "RoofIrrigation_IrrigationMaxSaturatThreshold_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_type = {"_p_RoofIrrigation_IrrigationMaxSaturatThreshold_type", "RoofIrrigation_IrrigationMaxSaturatThreshold_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationModelType_optional = {"_p_RoofIrrigation_IrrigationModelType_optional", "RoofIrrigation_IrrigationModelType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationModelType_traits = {"_p_RoofIrrigation_IrrigationModelType_traits", "RoofIrrigation_IrrigationModelType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationModelType_type = {"_p_RoofIrrigation_IrrigationModelType_type", "RoofIrrigation_IrrigationModelType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationRateSchedName_optional = {"_p_RoofIrrigation_IrrigationRateSchedName_optional", "RoofIrrigation_IrrigationRateSchedName_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationRateSchedName_traits = {"_p_RoofIrrigation_IrrigationRateSchedName_traits", "RoofIrrigation_IrrigationRateSchedName_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoofIrrigation_IrrigationRateSchedName_type = {"_p_RoofIrrigation_IrrigationRateSchedName_type", "RoofIrrigation_IrrigationRateSchedName_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_LoadsConvergTolVal_optional = {"_p_SimBuilding_LoadsConvergTolVal_optional", "SimBuilding_LoadsConvergTolVal_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_LoadsConvergTolVal_traits = {"_p_SimBuilding_LoadsConvergTolVal_traits", "SimBuilding_LoadsConvergTolVal_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_LoadsConvergTolVal_type = {"_p_SimBuilding_LoadsConvergTolVal_type", "SimBuilding_LoadsConvergTolVal_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MaxNumWarmupDays_optional = {"_p_SimBuilding_MaxNumWarmupDays_optional", "SimBuilding_MaxNumWarmupDays_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MaxNumWarmupDays_traits = {"_p_SimBuilding_MaxNumWarmupDays_traits", "SimBuilding_MaxNumWarmupDays_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MaxNumWarmupDays_type = {"_p_SimBuilding_MaxNumWarmupDays_type", "SimBuilding_MaxNumWarmupDays_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MinNumberWarmupDays_optional = {"_p_SimBuilding_MinNumberWarmupDays_optional", "SimBuilding_MinNumberWarmupDays_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MinNumberWarmupDays_traits = {"_p_SimBuilding_MinNumberWarmupDays_traits", "SimBuilding_MinNumberWarmupDays_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_MinNumberWarmupDays_type = {"_p_SimBuilding_MinNumberWarmupDays_type", "SimBuilding_MinNumberWarmupDays_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Name_optional = {"_p_SimBuilding_Name_optional", "SimBuilding_Name_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Name_traits = {"_p_SimBuilding_Name_traits", "SimBuilding_Name_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Name_type = {"_p_SimBuilding_Name_type", "SimBuilding_Name_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_NorthAxis_optional = {"_p_SimBuilding_NorthAxis_optional", "SimBuilding_NorthAxis_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_NorthAxis_traits = {"_p_SimBuilding_NorthAxis_traits", "SimBuilding_NorthAxis_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_NorthAxis_type = {"_p_SimBuilding_NorthAxis_type", "SimBuilding_NorthAxis_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_SolarDist_optional = {"_p_SimBuilding_SolarDist_optional", "SimBuilding_SolarDist_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_SolarDist_traits = {"_p_SimBuilding_SolarDist_traits", "SimBuilding_SolarDist_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_SolarDist_type = {"_p_SimBuilding_SolarDist_type", "SimBuilding_SolarDist_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_TempConvergTolVal_optional = {"_p_SimBuilding_TempConvergTolVal_optional", "SimBuilding_TempConvergTolVal_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_TempConvergTolVal_traits = {"_p_SimBuilding_TempConvergTolVal_traits", "SimBuilding_TempConvergTolVal_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_TempConvergTolVal_type = {"_p_SimBuilding_TempConvergTolVal_type", "SimBuilding_TempConvergTolVal_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Terrain_optional = {"_p_SimBuilding_Terrain_optional", "SimBuilding_Terrain_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Terrain_traits = {"_p_SimBuilding_Terrain_traits", "SimBuilding_Terrain_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimBuilding_Terrain_type = {"_p_SimBuilding_Terrain_type", "SimBuilding_Terrain_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelName_optional = {"_p_SimModelName_optional", "SimModelName_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelName_traits = {"_p_SimModelName_traits", "SimModelName_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelName_type = {"_p_SimModelName_type", "SimModelName_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelSubtype_optional = {"_p_SimModelSubtype_optional", "SimModelSubtype_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelSubtype_traits = {"_p_SimModelSubtype_traits", "SimModelSubtype_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelSubtype_type = {"_p_SimModelSubtype_type", "SimModelSubtype_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelType_optional = {"_p_SimModelType_optional", "SimModelType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelType_traits = {"_p_SimModelType_traits", "SimModelType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimModelType_type = {"_p_SimModelType_type", "SimModelType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimUniqueID_optional = {"_p_SimUniqueID_optional", "SimUniqueID_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimUniqueID_traits = {"_p_SimUniqueID_traits", "SimUniqueID_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SimUniqueID_type = {"_p_SimUniqueID_type", "SimUniqueID_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryID_optional = {"_p_SourceLibraryEntryID_optional", "SourceLibraryEntryID_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryID_traits = {"_p_SourceLibraryEntryID_traits", "SourceLibraryEntryID_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryID_type = {"_p_SourceLibraryEntryID_type", "SourceLibraryEntryID_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryRef_optional = {"_p_SourceLibraryEntryRef_optional", "SourceLibraryEntryRef_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryRef_traits = {"_p_SourceLibraryEntryRef_traits", "SourceLibraryEntryRef_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceLibraryEntryRef_type = {"_p_SourceLibraryEntryRef_type", "SourceLibraryEntryRef_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelObjectType_optional = {"_p_SourceModelObjectType_optional", "SourceModelObjectType_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelObjectType_traits = {"_p_SourceModelObjectType_traits", "SourceModelObjectType_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelObjectType_type = {"_p_SourceModelObjectType_type", "SourceModelObjectType_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelSchema_optional = {"_p_SourceModelSchema_optional", "SourceModelSchema_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelSchema_traits = {"_p_SourceModelSchema_traits", "SourceModelSchema_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SourceModelSchema_type = {"_p_SourceModelSchema_type", "SourceModelSchema_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpaceBoundsNotCurrent_optional = {"_p_SpaceBoundsNotCurrent_optional", "SpaceBoundsNotCurrent_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpaceBoundsNotCurrent_traits = {"_p_SpaceBoundsNotCurrent_traits", "SpaceBoundsNotCurrent_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SpaceBoundsNotCurrent_type = {"_p_SpaceBoundsNotCurrent_type", "SpaceBoundsNotCurrent_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilCoolingCapacity_optional = {"_p_T24CoilCoolingCapacity_optional", "T24CoilCoolingCapacity_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilCoolingCapacity_traits = {"_p_T24CoilCoolingCapacity_traits", "T24CoilCoolingCapacity_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilCoolingCapacity_type = {"_p_T24CoilCoolingCapacity_type", "T24CoilCoolingCapacity_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilHeatingCapacity_optional = {"_p_T24CoilHeatingCapacity_optional", "T24CoilHeatingCapacity_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilHeatingCapacity_traits = {"_p_T24CoilHeatingCapacity_traits", "T24CoilHeatingCapacity_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24CoilHeatingCapacity_type = {"_p_T24CoilHeatingCapacity_type", "T24CoilHeatingCapacity_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24FunctionClassificationMethod_optional = {"_p_T24FunctionClassificationMethod_optional", "T24FunctionClassificationMethod_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24FunctionClassificationMethod_traits = {"_p_T24FunctionClassificationMethod_traits", "T24FunctionClassificationMethod_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24FunctionClassificationMethod_type = {"_p_T24FunctionClassificationMethod_type", "T24FunctionClassificationMethod_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantCoolingCapacity_optional = {"_p_T24PlantCoolingCapacity_optional", "T24PlantCoolingCapacity_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantCoolingCapacity_traits = {"_p_T24PlantCoolingCapacity_traits", "T24PlantCoolingCapacity_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantCoolingCapacity_type = {"_p_T24PlantCoolingCapacity_type", "T24PlantCoolingCapacity_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantHeatingCapacity_optional = {"_p_T24PlantHeatingCapacity_optional", "T24PlantHeatingCapacity_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantHeatingCapacity_traits = {"_p_T24PlantHeatingCapacity_traits", "T24PlantHeatingCapacity_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_T24PlantHeatingCapacity_type = {"_p_T24PlantHeatingCapacity_type", "T24PlantHeatingCapacity_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplateOverrideValues_optional = {"_p_TemplateOverrideValues_optional", "TemplateOverrideValues_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplateOverrideValues_traits = {"_p_TemplateOverrideValues_traits", "TemplateOverrideValues_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplateOverrideValues_type = {"_p_TemplateOverrideValues_type", "TemplateOverrideValues_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplatesForMembers_optional = {"_p_TemplatesForMembers_optional", "TemplatesForMembers_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplatesForMembers_traits = {"_p_TemplatesForMembers_traits", "TemplatesForMembers_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TemplatesForMembers_type = {"_p_TemplatesForMembers_type", "TemplatesForMembers_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountAltered_optional = {"_p_TotalStoryCountAltered_optional", "TotalStoryCountAltered_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountAltered_traits = {"_p_TotalStoryCountAltered_traits", "TotalStoryCountAltered_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountAltered_type = {"_p_TotalStoryCountAltered_type", "TotalStoryCountAltered_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountExisting_optional = {"_p_TotalStoryCountExisting_optional", "TotalStoryCountExisting_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountExisting_traits = {"_p_TotalStoryCountExisting_traits", "TotalStoryCountExisting_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountExisting_type = {"_p_TotalStoryCountExisting_type", "TotalStoryCountExisting_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountNew_optional = {"_p_TotalStoryCountNew_optional", "TotalStoryCountNew_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountNew_traits = {"_p_TotalStoryCountNew_traits", "TotalStoryCountNew_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TotalStoryCountNew_type = {"_p_TotalStoryCountNew_type", "TotalStoryCountNew_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeDefinition_optional = {"_p_TypeDefinition_optional", "TypeDefinition_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeDefinition_traits = {"_p_TypeDefinition_traits", "TypeDefinition_traits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TypeDefinition_type = {"_p_TypeDefinition_type", "TypeDefinition_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_base_const_iterator = {"_p_base_const_iterator", "base_const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_base_iterator = {"_p_base_iterator", "base_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_base_sequence = {"_p_base_sequence", "base_sequence *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|xml_schema::boolean *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool_convertible = {"_p_bool_convertible", "bool_convertible *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_reverse_iterator = {"_p_const_reverse_iterator", "const_reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_dom_content_optional = {"_p_dom_content_optional", "dom_content_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "xml_schema::double_ *|double *|xml_schema::decimal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|xml_schema::float_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|xml_schema::int_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t = {"_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t", "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_iterator *|iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t = {"_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t", "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::const_reverse_iterator *|iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::const_reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t = {"_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t", "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::iterator *|iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t = {"_p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t", "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::reverse_iterator *|iterator_adapter< std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::reverse_iterator,::schema::simxml::BuildingModel::SimBuilding_Building_Default > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "long long *|xml_schema::long_ *|xml_schema::integer *|xml_schema::non_positive_integer *|xml_schema::negative_integer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptr = {"_p_ptr", "ptr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_reverse_iterator = {"_p_reverse_iterator", "reverse_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__BuildingModel__SimBuilding = {"_p_schema__simxml__BuildingModel__SimBuilding", "schema::simxml::BuildingModel::SimBuilding *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__BuildingModel__SimBuilding_Building = {"_p_schema__simxml__BuildingModel__SimBuilding_Building", "schema::simxml::BuildingModel::SimBuilding_Building *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default = {"_p_schema__simxml__BuildingModel__SimBuilding_Building_Default", "::schema::simxml::BuildingModel::SimBuilding_Building_Default *|schema::simxml::BuildingModel::SimBuilding_Building_Default *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__Model__SimModel = {"_p_schema__simxml__Model__SimModel", "::schema::simxml::Model::SimModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__SimObject = {"_p_schema__simxml__SimModelCore__SimObject", "schema::simxml::SimModelCore::SimObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__SimGroup = {"_p_schema__simxml__SimModelCore__SimGroup", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__SimObjectDefinition = {"_p_schema__simxml__SimModelCore__SimObjectDefinition", "schema::simxml::SimModelCore::SimObjectDefinition *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__SimRoot = {"_p_schema__simxml__SimModelCore__SimRoot", "schema::simxml::SimModelCore::SimRoot *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement = {"_p_schema__simxml__SimModelCore__SimSpatialStructureElement", "schema::simxml::SimModelCore::SimSpatialStructureElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__integerList = {"_p_schema__simxml__SimModelCore__integerList", "::schema::simxml::SimModelCore::integerList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_schema__simxml__SimModelCore__logical = {"_p_schema__simxml__SimModelCore__logical", "::schema::simxml::SimModelCore::logical *|schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_self_ = {"_p_self_", "self_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|xml_schema::short_ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|xml_schema::byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_T_t = {"_p_std__auto_ptrT_T_t", "std::auto_ptr< T > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t = {"_p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t", "std::auto_ptr< ::schema::simxml::BuildingModel::SimBuilding_Building_Default > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t = {"_p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t", "std::auto_ptr< ::schema::simxml::SimModelCore::logical > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_xml_schema__idref_t = {"_p_std__auto_ptrT_xml_schema__idref_t", "std::auto_ptr< ::xml_schema::idref > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Representation_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__auto_ptrT_xml_schema__string_t = {"_p_std__auto_ptrT_xml_schema__string_t", "std::auto_ptr< ::xml_schema::string > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::Name_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type > *|::std::auto_ptr< schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type = {"_p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type", "std::vector< xsd::cxx::tree::sequence_common::ptr,std::allocator< xsd::cxx::tree::sequence_common::ptr > >::size_type *|xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false >::size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|xml_schema::unsigned_byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "xml_schema::unsigned_int *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "xml_schema::unsigned_long *|unsigned long long *|xml_schema::non_negative_integer *|xml_schema::positive_integer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|xml_schema::unsigned_short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xercesc__DOMElement = {"_p_xercesc__DOMElement", "::xercesc::DOMElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree___type = {"_p_xsd__cxx__tree___type", "xsd::cxx::tree::_type *|xsd::cxx::tree::type *|xml_schema::type *|xsd::cxx::tree::container *|xml_schema::container *|::xml_schema::container *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::base64_binary< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::base64_binary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__boundsT_char_t = {"_p_xsd__cxx__tree__boundsT_char_t", "::xsd::cxx::tree::bounds< char > *|xml_schema::bounds *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__bufferT_char_t = {"_p_xsd__cxx__tree__bufferT_char_t", "::xsd::cxx::tree::buffer< char > *|xml_schema::buffer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__content_order = {"_p_xsd__cxx__tree__content_order", "::xsd::cxx::tree::content_order *|xml_schema::content_order *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::date< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xml_schema::date_time *|xsd::cxx::tree::date_time< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__diagnosticsT_char_t = {"_p_xsd__cxx__tree__diagnosticsT_char_t", "xml_schema::diagnostics *|::xsd::cxx::tree::diagnostics< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__duplicate_idT_char_t = {"_p_xsd__cxx__tree__duplicate_idT_char_t", "::xsd::cxx::tree::duplicate_id< char > *|xml_schema::duplicate_id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::duration< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::duration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t = {"_p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t", "xsd::cxx::tree::entities< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type >,xsd::cxx::tree::entity< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > > > *|xml_schema::entities *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t = {"_p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t", "xsd::cxx::tree::entity< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > > *|xml_schema::entity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__errorT_char_t = {"_p_xsd__cxx__tree__errorT_char_t", "xml_schema::error *|::xsd::cxx::tree::error< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__exceptionT_char_t = {"_p_xsd__cxx__tree__exceptionT_char_t", "::xsd::cxx::tree::exception< char > *|xml_schema::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__expected_attributeT_char_t = {"_p_xsd__cxx__tree__expected_attributeT_char_t", "::xsd::cxx::tree::expected_attribute< char > *|xml_schema::expected_attribute *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__expected_elementT_char_t = {"_p_xsd__cxx__tree__expected_elementT_char_t", "::xsd::cxx::tree::expected_element< char > *|xml_schema::expected_element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__expected_text_contentT_char_t = {"_p_xsd__cxx__tree__expected_text_contentT_char_t", "::xsd::cxx::tree::expected_text_content< char > *|xml_schema::expected_text_content *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__flags = {"_p_xsd__cxx__tree__flags", "::xsd::cxx::tree::flags *|xml_schema::flags *|::xml_schema::flags *|xsd::cxx::tree::flags *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::gday< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::gday *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xml_schema::gmonth *|xsd::cxx::tree::gmonth< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::gmonth_day< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::gmonth_day *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::gyear< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::gyear *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::gyear_month< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::gyear_month *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::hex_binary< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::hex_binary *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t = {"_p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t", "::xml_schema::id *|xml_schema::id *|xsd::cxx::tree::id< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > > *|schema::simxml::SimModelCore::SimRoot::RefId_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t = {"_p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t", "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_type *|xml_schema::idref *|::xml_schema::idref *|schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_type *|schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_type *|schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_type *|schema::simxml::BuildingModel::SimBuilding::BuildingAddress_type *|schema::simxml::BuildingModel::SimBuilding::Representation_type *|schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_type *|schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_type *|xsd::cxx::tree::idref< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > >,xsd::cxx::tree::_type > *|schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t", "::xml_schema::idrefs *|xml_schema::idrefs *|xsd::cxx::tree::idrefs< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type >,xsd::cxx::tree::idref< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > >,xsd::cxx::tree::_type > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t = {"_p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t", "xml_schema::language *|xsd::cxx::tree::language< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t = {"_p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t", "xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > *|xml_schema::name *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t = {"_p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t", "xml_schema::ncname *|xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t = {"_p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t", "xsd::cxx::tree::nmtoken< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > *|xml_schema::nmtoken *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t = {"_p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t", "xsd::cxx::tree::nmtokens< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type >,xsd::cxx::tree::nmtoken< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > *|xml_schema::nmtokens *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__no_prefix_mappingT_char_t = {"_p_xsd__cxx__tree__no_prefix_mappingT_char_t", "::xsd::cxx::tree::no_prefix_mapping< char > *|xml_schema::no_prefix_mapping *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__no_type_infoT_char_t = {"_p_xsd__cxx__tree__no_type_infoT_char_t", "xml_schema::no_type_info *|::xsd::cxx::tree::no_type_info< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t = {"_p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t", "xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > *|xml_schema::normalized_string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__not_derivedT_char_t = {"_p_xsd__cxx__tree__not_derivedT_char_t", "::xsd::cxx::tree::not_derived< char > *|xml_schema::not_derived *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_bool_true_t = {"_p_xsd__cxx__tree__optionalT_bool_true_t", "xsd::cxx::tree::optional< bool,true > *|xsd::cxx::tree::optional< bool,xsd::cxx::tree::fundamental_p< bool >::r > *|schema::simxml::BuildingModel::SimBuilding::SpaceBoundsNotCurrent_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_double_true_t = {"_p_xsd__cxx__tree__optionalT_double_true_t", "xsd::cxx::tree::optional< double,xsd::cxx::tree::fundamental_p< double >::r > *|xsd::cxx::tree::optional< ::xml_schema::decimal,true > *|xsd::cxx::tree::optional< double,true > *|schema::simxml::BuildingModel::SimBuilding::BuildingGrossFloorArea_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationValue_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingHeight_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetValue_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingDatumElevation_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingGrossPlannedArea_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingNumberofStoreys_optional *|schema::simxml::BuildingModel::SimBuilding_Building::T24PlantHeatingCapacity_optional *|schema::simxml::BuildingModel::SimBuilding_Building::T24PlantCoolingCapacity_optional *|schema::simxml::BuildingModel::SimBuilding_Building::T24CoilHeatingCapacity_optional *|schema::simxml::BuildingModel::SimBuilding_Building::T24CoilCoolingCapacity_optional *|schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationMaxSaturatThreshold_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_TempConvergTolVal_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_LoadsConvergTolVal_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_NorthAxis_optional *|schema::simxml::BuildingModel::SimBuilding::ElevationOfTerrain_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_int_true_t = {"_p_xsd__cxx__tree__optionalT_int_true_t", "xsd::cxx::tree::optional< int,xsd::cxx::tree::fundamental_p< int >::r > *|xsd::cxx::tree::optional< int,true > *|schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountExisting_optional *|schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountAltered_optional *|schema::simxml::BuildingModel::SimBuilding_Building::RelocatablePublicSchoolBuilding_optional *|schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountNew_optional *|schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountAltered_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MinNumberWarmupDays_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_MaxNumWarmupDays_optional *|schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountExists_optional *|schema::simxml::BuildingModel::SimBuilding_Building::AboveGradeStoryCountNew_optional *|schema::simxml::BuildingModel::SimBuilding_Building::HighRiseResidentialLivingUnitCount_optional *|schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountAltered_optional *|schema::simxml::BuildingModel::SimBuilding_Building::LivingUnitCountExisting_optional *|schema::simxml::BuildingModel::SimBuilding_Building::TotalStoryCountNew_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t = {"_p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t", "schema::simxml::BuildingModel::SimBuilding::BuildingisLandmarked_optional *|xsd::cxx::tree::optional< ::schema::simxml::SimModelCore::logical,xsd::cxx::tree::fundamental_p< ::schema::simxml::SimModelCore::logical >::r > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t = {"_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t", "schema::simxml::BuildingModel::SimBuilding::NatVentilationDefault_optional *|xsd::cxx::tree::optional< xsd::cxx::tree::idref< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > >,xsd::cxx::tree::_type >,xsd::cxx::tree::fundamental_p< xsd::cxx::tree::idref< char,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > >,xsd::cxx::tree::_type > >::r > *|schema::simxml::BuildingModel::SimBuilding::DaylightControlsDefault_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingConstructionsTemplate_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingAddress_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingInSpatialContainer_optional *|schema::simxml::BuildingModel::SimBuilding::TemplateOverrideValues_optional *|schema::simxml::BuildingModel::SimBuilding::Representation_optional *|schema::simxml::BuildingModel::SimBuilding::ClassRef_ConstEntByFunction_optional *|schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationRateSchedName_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t = {"_p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t", "schema::simxml::BuildingModel::SimBuilding::Name_optional *|xsd::cxx::tree::optional< xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > >,xsd::cxx::tree::fundamental_p< xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > >::r > *|schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_optional *|schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_optional *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_optional *|schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_optional *|schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_optional *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__parsingT_char_t = {"_p_xsd__cxx__tree__parsingT_char_t", "xml_schema::parsing *|::xsd::cxx::tree::parsing< char > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__propertiesT_char_t = {"_p_xsd__cxx__tree__propertiesT_char_t", "::xsd::cxx::tree::properties< char > *|xml_schema::properties *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t = {"_p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t", "xml_schema::qname *|xsd::cxx::tree::qname< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type >,xsd::cxx::tree::uri< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > >,xsd::cxx::tree::ncname< char,xsd::cxx::tree::name< char,xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t = {"_p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t", "xsd::cxx::tree::sequence< ::schema::simxml::BuildingModel::SimBuilding_Building_Default,false > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__sequence_common = {"_p_xsd__cxx__tree__sequence_common", "xsd::cxx::tree::sequence_common *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__severity = {"_p_xsd__cxx__tree__severity", "::xsd::cxx::tree::severity *|xml_schema::severity *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t = {"_p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t", "xml_schema::simple_type *|xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "schema::simxml::BuildingModel::SimBuilding::BuildingInfiltrationType_type *|schema::simxml::BuildingModel::SimBuilding::BuildingEnergyTargetUnits_type *|schema::simxml::BuildingModel::SimBuilding::BuildingYearOfConstruction_type *|schema::simxml::BuildingModel::SimBuilding::BuildingOccupancyType_type *|xml_schema::string *|::xml_schema::string *|schema::simxml::BuildingModel::SimBuilding::Name_type *|xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Name_type *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_Terrain_type *|schema::simxml::BuildingModel::SimBuilding_Building::SimBuilding_SolarDist_type *|schema::simxml::BuildingModel::SimBuilding_Building::RoofIrrigation_IrrigationModelType_type *|schema::simxml::BuildingModel::SimBuilding_Building::T24FunctionClassificationMethod_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xsd::cxx::tree::time< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *|xml_schema::time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__time_zone = {"_p_xsd__cxx__tree__time_zone", "::xsd::cxx::tree::time_zone *|xml_schema::time_zone *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t = {"_p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t", "xml_schema::token *|xsd::cxx::tree::token< char,xsd::cxx::tree::normalized_string< char,xsd::cxx::tree::string< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__unexpected_elementT_char_t = {"_p_xsd__cxx__tree__unexpected_elementT_char_t", "::xsd::cxx::tree::unexpected_element< char > *|xml_schema::unexpected_element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__unexpected_enumeratorT_char_t = {"_p_xsd__cxx__tree__unexpected_enumeratorT_char_t", "::xsd::cxx::tree::unexpected_enumerator< char > *|xml_schema::unexpected_enumerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t = {"_p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t", "xml_schema::uri *|xsd::cxx::tree::uri< char,xsd::cxx::tree::simple_type< char,xsd::cxx::tree::_type > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__tree__user_data_keys_templateT_0_t = {"_p_xsd__cxx__tree__user_data_keys_templateT_0_t", "xsd::cxx::tree::user_data_keys_template< 0 > *|xsd::cxx::tree::user_data_keys *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_xsd__cxx__xml__error_handlerT_char_t = {"_p_xsd__cxx__xml__error_handlerT_char_t", "::xsd::cxx::xml::error_handler< char > *|xml_schema::error_handler *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_AboveGradeStoryCountAltered_optional,
  &_swigt__p_AboveGradeStoryCountAltered_traits,
  &_swigt__p_AboveGradeStoryCountAltered_type,
  &_swigt__p_AboveGradeStoryCountExists_optional,
  &_swigt__p_AboveGradeStoryCountExists_traits,
  &_swigt__p_AboveGradeStoryCountExists_type,
  &_swigt__p_AboveGradeStoryCountNew_optional,
  &_swigt__p_AboveGradeStoryCountNew_traits,
  &_swigt__p_AboveGradeStoryCountNew_type,
  &_swigt__p_BuildingAddress_optional,
  &_swigt__p_BuildingAddress_traits,
  &_swigt__p_BuildingAddress_type,
  &_swigt__p_BuildingConstructionsTemplate_optional,
  &_swigt__p_BuildingConstructionsTemplate_traits,
  &_swigt__p_BuildingConstructionsTemplate_type,
  &_swigt__p_BuildingDatumElevation_optional,
  &_swigt__p_BuildingDatumElevation_traits,
  &_swigt__p_BuildingDatumElevation_type,
  &_swigt__p_BuildingEnergyTargetUnits_optional,
  &_swigt__p_BuildingEnergyTargetUnits_traits,
  &_swigt__p_BuildingEnergyTargetUnits_type,
  &_swigt__p_BuildingEnergyTargetValue_optional,
  &_swigt__p_BuildingEnergyTargetValue_traits,
  &_swigt__p_BuildingEnergyTargetValue_type,
  &_swigt__p_BuildingGrossFloorArea_optional,
  &_swigt__p_BuildingGrossFloorArea_traits,
  &_swigt__p_BuildingGrossFloorArea_type,
  &_swigt__p_BuildingGrossPlannedArea_optional,
  &_swigt__p_BuildingGrossPlannedArea_traits,
  &_swigt__p_BuildingGrossPlannedArea_type,
  &_swigt__p_BuildingHeight_optional,
  &_swigt__p_BuildingHeight_traits,
  &_swigt__p_BuildingHeight_type,
  &_swigt__p_BuildingInSpatialContainer_optional,
  &_swigt__p_BuildingInSpatialContainer_traits,
  &_swigt__p_BuildingInSpatialContainer_type,
  &_swigt__p_BuildingInfiltrationType_optional,
  &_swigt__p_BuildingInfiltrationType_traits,
  &_swigt__p_BuildingInfiltrationType_type,
  &_swigt__p_BuildingInfiltrationValue_optional,
  &_swigt__p_BuildingInfiltrationValue_traits,
  &_swigt__p_BuildingInfiltrationValue_type,
  &_swigt__p_BuildingNumberofStoreys_optional,
  &_swigt__p_BuildingNumberofStoreys_traits,
  &_swigt__p_BuildingNumberofStoreys_type,
  &_swigt__p_BuildingOccupancyType_optional,
  &_swigt__p_BuildingOccupancyType_traits,
  &_swigt__p_BuildingOccupancyType_type,
  &_swigt__p_BuildingYearOfConstruction_optional,
  &_swigt__p_BuildingYearOfConstruction_traits,
  &_swigt__p_BuildingYearOfConstruction_type,
  &_swigt__p_BuildingisLandmarked_optional,
  &_swigt__p_BuildingisLandmarked_traits,
  &_swigt__p_BuildingisLandmarked_type,
  &_swigt__p_ChangeFromTemplate_optional,
  &_swigt__p_ChangeFromTemplate_traits,
  &_swigt__p_ChangeFromTemplate_type,
  &_swigt__p_ClassRef_ConstEntByFunction_optional,
  &_swigt__p_ClassRef_ConstEntByFunction_traits,
  &_swigt__p_ClassRef_ConstEntByFunction_type,
  &_swigt__p_CompositionType_optional,
  &_swigt__p_CompositionType_traits,
  &_swigt__p_CompositionType_type,
  &_swigt__p_ContainingBuildings_optional,
  &_swigt__p_ContainingBuildings_traits,
  &_swigt__p_ContainingBuildings_type,
  &_swigt__p_DaylightControlsDefault_optional,
  &_swigt__p_DaylightControlsDefault_traits,
  &_swigt__p_DaylightControlsDefault_type,
  &_swigt__p_Decomposes_optional,
  &_swigt__p_Decomposes_traits,
  &_swigt__p_Decomposes_type,
  &_swigt__p_Description_optional,
  &_swigt__p_Description_traits,
  &_swigt__p_Description_type,
  &_swigt__p_ElevationOfTerrain_optional,
  &_swigt__p_ElevationOfTerrain_traits,
  &_swigt__p_ElevationOfTerrain_type,
  &_swigt__p_HasTemplateChanged_optional,
  &_swigt__p_HasTemplateChanged_traits,
  &_swigt__p_HasTemplateChanged_type,
  &_swigt__p_HighRiseResidentialLivingUnitCount_optional,
  &_swigt__p_HighRiseResidentialLivingUnitCount_traits,
  &_swigt__p_HighRiseResidentialLivingUnitCount_type,
  &_swigt__p_IfcGlobalID_optional,
  &_swigt__p_IfcGlobalID_traits,
  &_swigt__p_IfcGlobalID_type,
  &_swigt__p_IfcName_optional,
  &_swigt__p_IfcName_traits,
  &_swigt__p_IfcName_type,
  &_swigt__p_IsTemplateObject_optional,
  &_swigt__p_IsTemplateObject_traits,
  &_swigt__p_IsTemplateObject_type,
  &_swigt__p_LivingUnitCountAltered_optional,
  &_swigt__p_LivingUnitCountAltered_traits,
  &_swigt__p_LivingUnitCountAltered_type,
  &_swigt__p_LivingUnitCountExisting_optional,
  &_swigt__p_LivingUnitCountExisting_traits,
  &_swigt__p_LivingUnitCountExisting_type,
  &_swigt__p_LivingUnitCountNew_optional,
  &_swigt__p_LivingUnitCountNew_traits,
  &_swigt__p_LivingUnitCountNew_type,
  &_swigt__p_LongName_optional,
  &_swigt__p_LongName_traits,
  &_swigt__p_LongName_type,
  &_swigt__p_MemberUsedForDiagrams_optional,
  &_swigt__p_MemberUsedForDiagrams_traits,
  &_swigt__p_MemberUsedForDiagrams_type,
  &_swigt__p_Name_optional,
  &_swigt__p_Name_traits,
  &_swigt__p_Name_type,
  &_swigt__p_NatVentilationDefault_optional,
  &_swigt__p_NatVentilationDefault_traits,
  &_swigt__p_NatVentilationDefault_type,
  &_swigt__p_NevronSchematicLayout_optional,
  &_swigt__p_NevronSchematicLayout_traits,
  &_swigt__p_NevronSchematicLayout_type,
  &_swigt__p_ObjectCreationParams_optional,
  &_swigt__p_ObjectCreationParams_traits,
  &_swigt__p_ObjectCreationParams_type,
  &_swigt__p_ObjectOwnerHistory_optional,
  &_swigt__p_ObjectOwnerHistory_traits,
  &_swigt__p_ObjectOwnerHistory_type,
  &_swigt__p_ObjectType_optional,
  &_swigt__p_ObjectType_traits,
  &_swigt__p_ObjectType_type,
  &_swigt__p_ParentGroups_optional,
  &_swigt__p_ParentGroups_traits,
  &_swigt__p_ParentGroups_type,
  &_swigt__p_Placement_optional,
  &_swigt__p_Placement_traits,
  &_swigt__p_Placement_type,
  &_swigt__p_RefId_traits,
  &_swigt__p_RefId_type,
  &_swigt__p_RelocatablePublicSchoolBuilding_optional,
  &_swigt__p_RelocatablePublicSchoolBuilding_traits,
  &_swigt__p_RelocatablePublicSchoolBuilding_type,
  &_swigt__p_Representation_optional,
  &_swigt__p_Representation_traits,
  &_swigt__p_Representation_type,
  &_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional,
  &_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits,
  &_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_type,
  &_swigt__p_RoofIrrigation_IrrigationModelType_optional,
  &_swigt__p_RoofIrrigation_IrrigationModelType_traits,
  &_swigt__p_RoofIrrigation_IrrigationModelType_type,
  &_swigt__p_RoofIrrigation_IrrigationRateSchedName_optional,
  &_swigt__p_RoofIrrigation_IrrigationRateSchedName_traits,
  &_swigt__p_RoofIrrigation_IrrigationRateSchedName_type,
  &_swigt__p_SimBuilding_LoadsConvergTolVal_optional,
  &_swigt__p_SimBuilding_LoadsConvergTolVal_traits,
  &_swigt__p_SimBuilding_LoadsConvergTolVal_type,
  &_swigt__p_SimBuilding_MaxNumWarmupDays_optional,
  &_swigt__p_SimBuilding_MaxNumWarmupDays_traits,
  &_swigt__p_SimBuilding_MaxNumWarmupDays_type,
  &_swigt__p_SimBuilding_MinNumberWarmupDays_optional,
  &_swigt__p_SimBuilding_MinNumberWarmupDays_traits,
  &_swigt__p_SimBuilding_MinNumberWarmupDays_type,
  &_swigt__p_SimBuilding_Name_optional,
  &_swigt__p_SimBuilding_Name_traits,
  &_swigt__p_SimBuilding_Name_type,
  &_swigt__p_SimBuilding_NorthAxis_optional,
  &_swigt__p_SimBuilding_NorthAxis_traits,
  &_swigt__p_SimBuilding_NorthAxis_type,
  &_swigt__p_SimBuilding_SolarDist_optional,
  &_swigt__p_SimBuilding_SolarDist_traits,
  &_swigt__p_SimBuilding_SolarDist_type,
  &_swigt__p_SimBuilding_TempConvergTolVal_optional,
  &_swigt__p_SimBuilding_TempConvergTolVal_traits,
  &_swigt__p_SimBuilding_TempConvergTolVal_type,
  &_swigt__p_SimBuilding_Terrain_optional,
  &_swigt__p_SimBuilding_Terrain_traits,
  &_swigt__p_SimBuilding_Terrain_type,
  &_swigt__p_SimModelName_optional,
  &_swigt__p_SimModelName_traits,
  &_swigt__p_SimModelName_type,
  &_swigt__p_SimModelSubtype_optional,
  &_swigt__p_SimModelSubtype_traits,
  &_swigt__p_SimModelSubtype_type,
  &_swigt__p_SimModelType_optional,
  &_swigt__p_SimModelType_traits,
  &_swigt__p_SimModelType_type,
  &_swigt__p_SimUniqueID_optional,
  &_swigt__p_SimUniqueID_traits,
  &_swigt__p_SimUniqueID_type,
  &_swigt__p_SourceLibraryEntryID_optional,
  &_swigt__p_SourceLibraryEntryID_traits,
  &_swigt__p_SourceLibraryEntryID_type,
  &_swigt__p_SourceLibraryEntryRef_optional,
  &_swigt__p_SourceLibraryEntryRef_traits,
  &_swigt__p_SourceLibraryEntryRef_type,
  &_swigt__p_SourceModelObjectType_optional,
  &_swigt__p_SourceModelObjectType_traits,
  &_swigt__p_SourceModelObjectType_type,
  &_swigt__p_SourceModelSchema_optional,
  &_swigt__p_SourceModelSchema_traits,
  &_swigt__p_SourceModelSchema_type,
  &_swigt__p_SpaceBoundsNotCurrent_optional,
  &_swigt__p_SpaceBoundsNotCurrent_traits,
  &_swigt__p_SpaceBoundsNotCurrent_type,
  &_swigt__p_T24CoilCoolingCapacity_optional,
  &_swigt__p_T24CoilCoolingCapacity_traits,
  &_swigt__p_T24CoilCoolingCapacity_type,
  &_swigt__p_T24CoilHeatingCapacity_optional,
  &_swigt__p_T24CoilHeatingCapacity_traits,
  &_swigt__p_T24CoilHeatingCapacity_type,
  &_swigt__p_T24FunctionClassificationMethod_optional,
  &_swigt__p_T24FunctionClassificationMethod_traits,
  &_swigt__p_T24FunctionClassificationMethod_type,
  &_swigt__p_T24PlantCoolingCapacity_optional,
  &_swigt__p_T24PlantCoolingCapacity_traits,
  &_swigt__p_T24PlantCoolingCapacity_type,
  &_swigt__p_T24PlantHeatingCapacity_optional,
  &_swigt__p_T24PlantHeatingCapacity_traits,
  &_swigt__p_T24PlantHeatingCapacity_type,
  &_swigt__p_TemplateOverrideValues_optional,
  &_swigt__p_TemplateOverrideValues_traits,
  &_swigt__p_TemplateOverrideValues_type,
  &_swigt__p_TemplatesForMembers_optional,
  &_swigt__p_TemplatesForMembers_traits,
  &_swigt__p_TemplatesForMembers_type,
  &_swigt__p_TotalStoryCountAltered_optional,
  &_swigt__p_TotalStoryCountAltered_traits,
  &_swigt__p_TotalStoryCountAltered_type,
  &_swigt__p_TotalStoryCountExisting_optional,
  &_swigt__p_TotalStoryCountExisting_traits,
  &_swigt__p_TotalStoryCountExisting_type,
  &_swigt__p_TotalStoryCountNew_optional,
  &_swigt__p_TotalStoryCountNew_traits,
  &_swigt__p_TotalStoryCountNew_type,
  &_swigt__p_TypeDefinition_optional,
  &_swigt__p_TypeDefinition_traits,
  &_swigt__p_TypeDefinition_type,
  &_swigt__p_allocator_type,
  &_swigt__p_base_const_iterator,
  &_swigt__p_base_iterator,
  &_swigt__p_base_sequence,
  &_swigt__p_bool,
  &_swigt__p_bool_convertible,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_const_reverse_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_dom_content_optional,
  &_swigt__p_double,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t,
  &_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t,
  &_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  &_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  &_swigt__p_long_long,
  &_swigt__p_ptr,
  &_swigt__p_reverse_iterator,
  &_swigt__p_schema__simxml__BuildingModel__SimBuilding,
  &_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building,
  &_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default,
  &_swigt__p_schema__simxml__Model__SimModel,
  &_swigt__p_schema__simxml__SimModelCore__SimGroup,
  &_swigt__p_schema__simxml__SimModelCore__SimObject,
  &_swigt__p_schema__simxml__SimModelCore__SimObjectDefinition,
  &_swigt__p_schema__simxml__SimModelCore__SimRoot,
  &_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement,
  &_swigt__p_schema__simxml__SimModelCore__integerList,
  &_swigt__p_schema__simxml__SimModelCore__logical,
  &_swigt__p_self_,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__auto_ptrT_T_t,
  &_swigt__p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  &_swigt__p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t,
  &_swigt__p_std__auto_ptrT_xml_schema__idref_t,
  &_swigt__p_std__auto_ptrT_xml_schema__string_t,
  &_swigt__p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_xercesc__DOMElement,
  &_swigt__p_xsd__cxx__tree___type,
  &_swigt__p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__boundsT_char_t,
  &_swigt__p_xsd__cxx__tree__bufferT_char_t,
  &_swigt__p_xsd__cxx__tree__content_order,
  &_swigt__p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__diagnosticsT_char_t,
  &_swigt__p_xsd__cxx__tree__duplicate_idT_char_t,
  &_swigt__p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__errorT_char_t,
  &_swigt__p_xsd__cxx__tree__exceptionT_char_t,
  &_swigt__p_xsd__cxx__tree__expected_attributeT_char_t,
  &_swigt__p_xsd__cxx__tree__expected_elementT_char_t,
  &_swigt__p_xsd__cxx__tree__expected_text_contentT_char_t,
  &_swigt__p_xsd__cxx__tree__flags,
  &_swigt__p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,
  &_swigt__p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__no_prefix_mappingT_char_t,
  &_swigt__p_xsd__cxx__tree__no_type_infoT_char_t,
  &_swigt__p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t,
  &_swigt__p_xsd__cxx__tree__not_derivedT_char_t,
  &_swigt__p_xsd__cxx__tree__optionalT_bool_true_t,
  &_swigt__p_xsd__cxx__tree__optionalT_double_true_t,
  &_swigt__p_xsd__cxx__tree__optionalT_int_true_t,
  &_swigt__p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t,
  &_swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,
  &_swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,
  &_swigt__p_xsd__cxx__tree__parsingT_char_t,
  &_swigt__p_xsd__cxx__tree__propertiesT_char_t,
  &_swigt__p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,
  &_swigt__p_xsd__cxx__tree__sequence_common,
  &_swigt__p_xsd__cxx__tree__severity,
  &_swigt__p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t,
  &_swigt__p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__time_zone,
  &_swigt__p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t,
  &_swigt__p_xsd__cxx__tree__unexpected_elementT_char_t,
  &_swigt__p_xsd__cxx__tree__unexpected_enumeratorT_char_t,
  &_swigt__p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  &_swigt__p_xsd__cxx__tree__user_data_keys_templateT_0_t,
  &_swigt__p_xsd__cxx__xml__error_handlerT_char_t,
};

static swig_cast_info _swigc__p_AboveGradeStoryCountAltered_optional[] = {  {&_swigt__p_AboveGradeStoryCountAltered_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountAltered_traits[] = {  {&_swigt__p_AboveGradeStoryCountAltered_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountAltered_type[] = {  {&_swigt__p_AboveGradeStoryCountAltered_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountExists_optional[] = {  {&_swigt__p_AboveGradeStoryCountExists_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountExists_traits[] = {  {&_swigt__p_AboveGradeStoryCountExists_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountExists_type[] = {  {&_swigt__p_AboveGradeStoryCountExists_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountNew_optional[] = {  {&_swigt__p_AboveGradeStoryCountNew_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountNew_traits[] = {  {&_swigt__p_AboveGradeStoryCountNew_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_AboveGradeStoryCountNew_type[] = {  {&_swigt__p_AboveGradeStoryCountNew_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingAddress_optional[] = {  {&_swigt__p_BuildingAddress_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingAddress_traits[] = {  {&_swigt__p_BuildingAddress_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingAddress_type[] = {  {&_swigt__p_BuildingAddress_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingConstructionsTemplate_optional[] = {  {&_swigt__p_BuildingConstructionsTemplate_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingConstructionsTemplate_traits[] = {  {&_swigt__p_BuildingConstructionsTemplate_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingConstructionsTemplate_type[] = {  {&_swigt__p_BuildingConstructionsTemplate_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingDatumElevation_optional[] = {  {&_swigt__p_BuildingDatumElevation_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingDatumElevation_traits[] = {  {&_swigt__p_BuildingDatumElevation_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingDatumElevation_type[] = {  {&_swigt__p_BuildingDatumElevation_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetUnits_optional[] = {  {&_swigt__p_BuildingEnergyTargetUnits_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetUnits_traits[] = {  {&_swigt__p_BuildingEnergyTargetUnits_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetUnits_type[] = {  {&_swigt__p_BuildingEnergyTargetUnits_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetValue_optional[] = {  {&_swigt__p_BuildingEnergyTargetValue_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetValue_traits[] = {  {&_swigt__p_BuildingEnergyTargetValue_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingEnergyTargetValue_type[] = {  {&_swigt__p_BuildingEnergyTargetValue_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossFloorArea_optional[] = {  {&_swigt__p_BuildingGrossFloorArea_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossFloorArea_traits[] = {  {&_swigt__p_BuildingGrossFloorArea_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossFloorArea_type[] = {  {&_swigt__p_BuildingGrossFloorArea_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossPlannedArea_optional[] = {  {&_swigt__p_BuildingGrossPlannedArea_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossPlannedArea_traits[] = {  {&_swigt__p_BuildingGrossPlannedArea_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingGrossPlannedArea_type[] = {  {&_swigt__p_BuildingGrossPlannedArea_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingHeight_optional[] = {  {&_swigt__p_BuildingHeight_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingHeight_traits[] = {  {&_swigt__p_BuildingHeight_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingHeight_type[] = {  {&_swigt__p_BuildingHeight_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInSpatialContainer_optional[] = {  {&_swigt__p_BuildingInSpatialContainer_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInSpatialContainer_traits[] = {  {&_swigt__p_BuildingInSpatialContainer_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInSpatialContainer_type[] = {  {&_swigt__p_BuildingInSpatialContainer_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationType_optional[] = {  {&_swigt__p_BuildingInfiltrationType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationType_traits[] = {  {&_swigt__p_BuildingInfiltrationType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationType_type[] = {  {&_swigt__p_BuildingInfiltrationType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationValue_optional[] = {  {&_swigt__p_BuildingInfiltrationValue_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationValue_traits[] = {  {&_swigt__p_BuildingInfiltrationValue_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingInfiltrationValue_type[] = {  {&_swigt__p_BuildingInfiltrationValue_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingNumberofStoreys_optional[] = {  {&_swigt__p_BuildingNumberofStoreys_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingNumberofStoreys_traits[] = {  {&_swigt__p_BuildingNumberofStoreys_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingNumberofStoreys_type[] = {  {&_swigt__p_BuildingNumberofStoreys_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingOccupancyType_optional[] = {  {&_swigt__p_BuildingOccupancyType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingOccupancyType_traits[] = {  {&_swigt__p_BuildingOccupancyType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingOccupancyType_type[] = {  {&_swigt__p_BuildingOccupancyType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingYearOfConstruction_optional[] = {  {&_swigt__p_BuildingYearOfConstruction_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingYearOfConstruction_traits[] = {  {&_swigt__p_BuildingYearOfConstruction_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingYearOfConstruction_type[] = {  {&_swigt__p_BuildingYearOfConstruction_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingisLandmarked_optional[] = {  {&_swigt__p_BuildingisLandmarked_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingisLandmarked_traits[] = {  {&_swigt__p_BuildingisLandmarked_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_BuildingisLandmarked_type[] = {  {&_swigt__p_BuildingisLandmarked_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChangeFromTemplate_optional[] = {  {&_swigt__p_ChangeFromTemplate_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChangeFromTemplate_traits[] = {  {&_swigt__p_ChangeFromTemplate_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChangeFromTemplate_type[] = {  {&_swigt__p_ChangeFromTemplate_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClassRef_ConstEntByFunction_optional[] = {  {&_swigt__p_ClassRef_ConstEntByFunction_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClassRef_ConstEntByFunction_traits[] = {  {&_swigt__p_ClassRef_ConstEntByFunction_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ClassRef_ConstEntByFunction_type[] = {  {&_swigt__p_ClassRef_ConstEntByFunction_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CompositionType_optional[] = {  {&_swigt__p_CompositionType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CompositionType_traits[] = {  {&_swigt__p_CompositionType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CompositionType_type[] = {  {&_swigt__p_CompositionType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContainingBuildings_optional[] = {  {&_swigt__p_ContainingBuildings_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContainingBuildings_traits[] = {  {&_swigt__p_ContainingBuildings_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ContainingBuildings_type[] = {  {&_swigt__p_ContainingBuildings_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DaylightControlsDefault_optional[] = {  {&_swigt__p_DaylightControlsDefault_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DaylightControlsDefault_traits[] = {  {&_swigt__p_DaylightControlsDefault_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DaylightControlsDefault_type[] = {  {&_swigt__p_DaylightControlsDefault_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decomposes_optional[] = {  {&_swigt__p_Decomposes_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decomposes_traits[] = {  {&_swigt__p_Decomposes_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Decomposes_type[] = {  {&_swigt__p_Decomposes_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Description_optional[] = {  {&_swigt__p_Description_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Description_traits[] = {  {&_swigt__p_Description_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Description_type[] = {  {&_swigt__p_Description_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElevationOfTerrain_optional[] = {  {&_swigt__p_ElevationOfTerrain_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElevationOfTerrain_traits[] = {  {&_swigt__p_ElevationOfTerrain_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ElevationOfTerrain_type[] = {  {&_swigt__p_ElevationOfTerrain_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HasTemplateChanged_optional[] = {  {&_swigt__p_HasTemplateChanged_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HasTemplateChanged_traits[] = {  {&_swigt__p_HasTemplateChanged_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HasTemplateChanged_type[] = {  {&_swigt__p_HasTemplateChanged_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HighRiseResidentialLivingUnitCount_optional[] = {  {&_swigt__p_HighRiseResidentialLivingUnitCount_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HighRiseResidentialLivingUnitCount_traits[] = {  {&_swigt__p_HighRiseResidentialLivingUnitCount_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_HighRiseResidentialLivingUnitCount_type[] = {  {&_swigt__p_HighRiseResidentialLivingUnitCount_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcGlobalID_optional[] = {  {&_swigt__p_IfcGlobalID_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcGlobalID_traits[] = {  {&_swigt__p_IfcGlobalID_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcGlobalID_type[] = {  {&_swigt__p_IfcGlobalID_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcName_optional[] = {  {&_swigt__p_IfcName_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcName_traits[] = {  {&_swigt__p_IfcName_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IfcName_type[] = {  {&_swigt__p_IfcName_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IsTemplateObject_optional[] = {  {&_swigt__p_IsTemplateObject_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IsTemplateObject_traits[] = {  {&_swigt__p_IsTemplateObject_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IsTemplateObject_type[] = {  {&_swigt__p_IsTemplateObject_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountAltered_optional[] = {  {&_swigt__p_LivingUnitCountAltered_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountAltered_traits[] = {  {&_swigt__p_LivingUnitCountAltered_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountAltered_type[] = {  {&_swigt__p_LivingUnitCountAltered_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountExisting_optional[] = {  {&_swigt__p_LivingUnitCountExisting_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountExisting_traits[] = {  {&_swigt__p_LivingUnitCountExisting_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountExisting_type[] = {  {&_swigt__p_LivingUnitCountExisting_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountNew_optional[] = {  {&_swigt__p_LivingUnitCountNew_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountNew_traits[] = {  {&_swigt__p_LivingUnitCountNew_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LivingUnitCountNew_type[] = {  {&_swigt__p_LivingUnitCountNew_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LongName_optional[] = {  {&_swigt__p_LongName_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LongName_traits[] = {  {&_swigt__p_LongName_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LongName_type[] = {  {&_swigt__p_LongName_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MemberUsedForDiagrams_optional[] = {  {&_swigt__p_MemberUsedForDiagrams_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MemberUsedForDiagrams_traits[] = {  {&_swigt__p_MemberUsedForDiagrams_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MemberUsedForDiagrams_type[] = {  {&_swigt__p_MemberUsedForDiagrams_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name_optional[] = {  {&_swigt__p_Name_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name_traits[] = {  {&_swigt__p_Name_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Name_type[] = {  {&_swigt__p_Name_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NatVentilationDefault_optional[] = {  {&_swigt__p_NatVentilationDefault_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NatVentilationDefault_traits[] = {  {&_swigt__p_NatVentilationDefault_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NatVentilationDefault_type[] = {  {&_swigt__p_NatVentilationDefault_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NevronSchematicLayout_optional[] = {  {&_swigt__p_NevronSchematicLayout_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NevronSchematicLayout_traits[] = {  {&_swigt__p_NevronSchematicLayout_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NevronSchematicLayout_type[] = {  {&_swigt__p_NevronSchematicLayout_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectCreationParams_optional[] = {  {&_swigt__p_ObjectCreationParams_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectCreationParams_traits[] = {  {&_swigt__p_ObjectCreationParams_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectCreationParams_type[] = {  {&_swigt__p_ObjectCreationParams_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectOwnerHistory_optional[] = {  {&_swigt__p_ObjectOwnerHistory_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectOwnerHistory_traits[] = {  {&_swigt__p_ObjectOwnerHistory_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectOwnerHistory_type[] = {  {&_swigt__p_ObjectOwnerHistory_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectType_optional[] = {  {&_swigt__p_ObjectType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectType_traits[] = {  {&_swigt__p_ObjectType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectType_type[] = {  {&_swigt__p_ObjectType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentGroups_optional[] = {  {&_swigt__p_ParentGroups_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentGroups_traits[] = {  {&_swigt__p_ParentGroups_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ParentGroups_type[] = {  {&_swigt__p_ParentGroups_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Placement_optional[] = {  {&_swigt__p_Placement_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Placement_traits[] = {  {&_swigt__p_Placement_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Placement_type[] = {  {&_swigt__p_Placement_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefId_traits[] = {  {&_swigt__p_RefId_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RefId_type[] = {  {&_swigt__p_RefId_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RelocatablePublicSchoolBuilding_optional[] = {  {&_swigt__p_RelocatablePublicSchoolBuilding_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RelocatablePublicSchoolBuilding_traits[] = {  {&_swigt__p_RelocatablePublicSchoolBuilding_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RelocatablePublicSchoolBuilding_type[] = {  {&_swigt__p_RelocatablePublicSchoolBuilding_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Representation_optional[] = {  {&_swigt__p_Representation_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Representation_traits[] = {  {&_swigt__p_Representation_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Representation_type[] = {  {&_swigt__p_Representation_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional[] = {  {&_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits[] = {  {&_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_type[] = {  {&_swigt__p_RoofIrrigation_IrrigationMaxSaturatThreshold_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationModelType_optional[] = {  {&_swigt__p_RoofIrrigation_IrrigationModelType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationModelType_traits[] = {  {&_swigt__p_RoofIrrigation_IrrigationModelType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationModelType_type[] = {  {&_swigt__p_RoofIrrigation_IrrigationModelType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationRateSchedName_optional[] = {  {&_swigt__p_RoofIrrigation_IrrigationRateSchedName_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationRateSchedName_traits[] = {  {&_swigt__p_RoofIrrigation_IrrigationRateSchedName_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoofIrrigation_IrrigationRateSchedName_type[] = {  {&_swigt__p_RoofIrrigation_IrrigationRateSchedName_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_LoadsConvergTolVal_optional[] = {  {&_swigt__p_SimBuilding_LoadsConvergTolVal_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_LoadsConvergTolVal_traits[] = {  {&_swigt__p_SimBuilding_LoadsConvergTolVal_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_LoadsConvergTolVal_type[] = {  {&_swigt__p_SimBuilding_LoadsConvergTolVal_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MaxNumWarmupDays_optional[] = {  {&_swigt__p_SimBuilding_MaxNumWarmupDays_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MaxNumWarmupDays_traits[] = {  {&_swigt__p_SimBuilding_MaxNumWarmupDays_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MaxNumWarmupDays_type[] = {  {&_swigt__p_SimBuilding_MaxNumWarmupDays_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MinNumberWarmupDays_optional[] = {  {&_swigt__p_SimBuilding_MinNumberWarmupDays_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MinNumberWarmupDays_traits[] = {  {&_swigt__p_SimBuilding_MinNumberWarmupDays_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_MinNumberWarmupDays_type[] = {  {&_swigt__p_SimBuilding_MinNumberWarmupDays_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Name_optional[] = {  {&_swigt__p_SimBuilding_Name_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Name_traits[] = {  {&_swigt__p_SimBuilding_Name_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Name_type[] = {  {&_swigt__p_SimBuilding_Name_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_NorthAxis_optional[] = {  {&_swigt__p_SimBuilding_NorthAxis_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_NorthAxis_traits[] = {  {&_swigt__p_SimBuilding_NorthAxis_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_NorthAxis_type[] = {  {&_swigt__p_SimBuilding_NorthAxis_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_SolarDist_optional[] = {  {&_swigt__p_SimBuilding_SolarDist_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_SolarDist_traits[] = {  {&_swigt__p_SimBuilding_SolarDist_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_SolarDist_type[] = {  {&_swigt__p_SimBuilding_SolarDist_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_TempConvergTolVal_optional[] = {  {&_swigt__p_SimBuilding_TempConvergTolVal_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_TempConvergTolVal_traits[] = {  {&_swigt__p_SimBuilding_TempConvergTolVal_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_TempConvergTolVal_type[] = {  {&_swigt__p_SimBuilding_TempConvergTolVal_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Terrain_optional[] = {  {&_swigt__p_SimBuilding_Terrain_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Terrain_traits[] = {  {&_swigt__p_SimBuilding_Terrain_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimBuilding_Terrain_type[] = {  {&_swigt__p_SimBuilding_Terrain_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelName_optional[] = {  {&_swigt__p_SimModelName_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelName_traits[] = {  {&_swigt__p_SimModelName_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelName_type[] = {  {&_swigt__p_SimModelName_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelSubtype_optional[] = {  {&_swigt__p_SimModelSubtype_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelSubtype_traits[] = {  {&_swigt__p_SimModelSubtype_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelSubtype_type[] = {  {&_swigt__p_SimModelSubtype_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelType_optional[] = {  {&_swigt__p_SimModelType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelType_traits[] = {  {&_swigt__p_SimModelType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimModelType_type[] = {  {&_swigt__p_SimModelType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimUniqueID_optional[] = {  {&_swigt__p_SimUniqueID_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimUniqueID_traits[] = {  {&_swigt__p_SimUniqueID_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SimUniqueID_type[] = {  {&_swigt__p_SimUniqueID_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryID_optional[] = {  {&_swigt__p_SourceLibraryEntryID_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryID_traits[] = {  {&_swigt__p_SourceLibraryEntryID_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryID_type[] = {  {&_swigt__p_SourceLibraryEntryID_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryRef_optional[] = {  {&_swigt__p_SourceLibraryEntryRef_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryRef_traits[] = {  {&_swigt__p_SourceLibraryEntryRef_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceLibraryEntryRef_type[] = {  {&_swigt__p_SourceLibraryEntryRef_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelObjectType_optional[] = {  {&_swigt__p_SourceModelObjectType_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelObjectType_traits[] = {  {&_swigt__p_SourceModelObjectType_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelObjectType_type[] = {  {&_swigt__p_SourceModelObjectType_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelSchema_optional[] = {  {&_swigt__p_SourceModelSchema_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelSchema_traits[] = {  {&_swigt__p_SourceModelSchema_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SourceModelSchema_type[] = {  {&_swigt__p_SourceModelSchema_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpaceBoundsNotCurrent_optional[] = {  {&_swigt__p_SpaceBoundsNotCurrent_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpaceBoundsNotCurrent_traits[] = {  {&_swigt__p_SpaceBoundsNotCurrent_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SpaceBoundsNotCurrent_type[] = {  {&_swigt__p_SpaceBoundsNotCurrent_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilCoolingCapacity_optional[] = {  {&_swigt__p_T24CoilCoolingCapacity_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilCoolingCapacity_traits[] = {  {&_swigt__p_T24CoilCoolingCapacity_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilCoolingCapacity_type[] = {  {&_swigt__p_T24CoilCoolingCapacity_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilHeatingCapacity_optional[] = {  {&_swigt__p_T24CoilHeatingCapacity_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilHeatingCapacity_traits[] = {  {&_swigt__p_T24CoilHeatingCapacity_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24CoilHeatingCapacity_type[] = {  {&_swigt__p_T24CoilHeatingCapacity_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24FunctionClassificationMethod_optional[] = {  {&_swigt__p_T24FunctionClassificationMethod_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24FunctionClassificationMethod_traits[] = {  {&_swigt__p_T24FunctionClassificationMethod_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24FunctionClassificationMethod_type[] = {  {&_swigt__p_T24FunctionClassificationMethod_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantCoolingCapacity_optional[] = {  {&_swigt__p_T24PlantCoolingCapacity_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantCoolingCapacity_traits[] = {  {&_swigt__p_T24PlantCoolingCapacity_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantCoolingCapacity_type[] = {  {&_swigt__p_T24PlantCoolingCapacity_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantHeatingCapacity_optional[] = {  {&_swigt__p_T24PlantHeatingCapacity_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantHeatingCapacity_traits[] = {  {&_swigt__p_T24PlantHeatingCapacity_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_T24PlantHeatingCapacity_type[] = {  {&_swigt__p_T24PlantHeatingCapacity_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateOverrideValues_optional[] = {  {&_swigt__p_TemplateOverrideValues_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateOverrideValues_traits[] = {  {&_swigt__p_TemplateOverrideValues_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplateOverrideValues_type[] = {  {&_swigt__p_TemplateOverrideValues_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplatesForMembers_optional[] = {  {&_swigt__p_TemplatesForMembers_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplatesForMembers_traits[] = {  {&_swigt__p_TemplatesForMembers_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TemplatesForMembers_type[] = {  {&_swigt__p_TemplatesForMembers_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountAltered_optional[] = {  {&_swigt__p_TotalStoryCountAltered_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountAltered_traits[] = {  {&_swigt__p_TotalStoryCountAltered_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountAltered_type[] = {  {&_swigt__p_TotalStoryCountAltered_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountExisting_optional[] = {  {&_swigt__p_TotalStoryCountExisting_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountExisting_traits[] = {  {&_swigt__p_TotalStoryCountExisting_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountExisting_type[] = {  {&_swigt__p_TotalStoryCountExisting_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountNew_optional[] = {  {&_swigt__p_TotalStoryCountNew_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountNew_traits[] = {  {&_swigt__p_TotalStoryCountNew_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TotalStoryCountNew_type[] = {  {&_swigt__p_TotalStoryCountNew_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeDefinition_optional[] = {  {&_swigt__p_TypeDefinition_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeDefinition_traits[] = {  {&_swigt__p_TypeDefinition_traits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TypeDefinition_type[] = {  {&_swigt__p_TypeDefinition_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_base_const_iterator[] = {  {&_swigt__p_base_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_base_iterator[] = {  {&_swigt__p_base_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_base_sequence[] = {  {&_swigt__p_base_sequence, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool_convertible[] = {  {&_swigt__p_bool_convertible, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_reverse_iterator[] = {  {&_swigt__p_const_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_dom_content_optional[] = {  {&_swigt__p_dom_content_optional, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t[] = {  {&_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t[] = {  {&_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t[] = {  {&_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t[] = {  {&_swigt__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptr[] = {  {&_swigt__p_ptr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_reverse_iterator[] = {  {&_swigt__p_reverse_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__BuildingModel__SimBuilding[] = {  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, 0, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__BuildingModel__SimBuilding, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__BuildingModel__SimBuilding, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__BuildingModel__SimBuilding_Building[] = {  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, 0, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__BuildingModel__SimBuilding_Building, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__BuildingModel__SimBuilding_Building_Default[] = {  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__Model__SimModel[] = {  {&_swigt__p_schema__simxml__Model__SimModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__SimGroup[] = {{&_swigt__p_schema__simxml__SimModelCore__SimGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__SimObject[] = {  {&_swigt__p_schema__simxml__SimModelCore__SimGroup, _p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimObject, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, _p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimObject, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObject, 0, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimObject, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimObject, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement, _p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__SimObjectDefinition[] = {  {&_swigt__p_schema__simxml__SimModelCore__SimGroup, _p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, _p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObject, _p_schema__simxml__SimModelCore__SimObjectTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement, _p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimObjectDefinition, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__SimRoot[] = {  {&_swigt__p_schema__simxml__SimModelCore__SimGroup, _p_schema__simxml__SimModelCore__SimGroupTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, _p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimRoot, 0, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObject, _p_schema__simxml__SimModelCore__SimObjectTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObjectDefinition, _p_schema__simxml__SimModelCore__SimObjectDefinitionTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement, _p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_schema__simxml__SimModelCore__SimRoot, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__SimSpatialStructureElement[] = {  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, _p_schema__simxml__BuildingModel__SimBuildingTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_schema__simxml__SimModelCore__SimSpatialStructureElement, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__integerList[] = {  {&_swigt__p_schema__simxml__SimModelCore__integerList, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_schema__simxml__SimModelCore__logical[] = {  {&_swigt__p_schema__simxml__SimModelCore__logical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_self_[] = {  {&_swigt__p_self_, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_T_t[] = {  {&_swigt__p_std__auto_ptrT_T_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t[] = {  {&_swigt__p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t[] = {  {&_swigt__p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_xml_schema__idref_t[] = {  {&_swigt__p_std__auto_ptrT_xml_schema__idref_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__auto_ptrT_xml_schema__string_t[] = {  {&_swigt__p_std__auto_ptrT_xml_schema__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type[] = {  {&_swigt__p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xercesc__DOMElement[] = {  {&_swigt__p_xercesc__DOMElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree___type[] = {  {&_swigt__p_schema__simxml__SimModelCore__SimGroup, _p_schema__simxml__SimModelCore__SimGroupTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding, _p_schema__simxml__BuildingModel__SimBuildingTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimRoot, _p_schema__simxml__SimModelCore__SimRootTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_xsd__cxx__tree___type, 0, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObject, _p_schema__simxml__SimModelCore__SimObjectTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building, _p_schema__simxml__BuildingModel__SimBuilding_BuildingTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__BuildingModel__SimBuilding_Building_Default, _p_schema__simxml__BuildingModel__SimBuilding_Building_DefaultTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimObjectDefinition, _p_schema__simxml__SimModelCore__SimObjectDefinitionTo_p_xsd__cxx__tree___type, 0, 0},  {&_swigt__p_schema__simxml__SimModelCore__SimSpatialStructureElement, _p_schema__simxml__SimModelCore__SimSpatialStructureElementTo_p_xsd__cxx__tree___type, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__boundsT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__boundsT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__bufferT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__bufferT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__content_order[] = {  {&_swigt__p_xsd__cxx__tree__content_order, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__diagnosticsT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__diagnosticsT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__duplicate_idT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__duplicate_idT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__errorT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__errorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__exceptionT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__exceptionT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__expected_attributeT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__expected_attributeT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__expected_elementT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__expected_elementT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__expected_text_contentT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__expected_text_contentT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__flags[] = {  {&_swigt__p_xsd__cxx__tree__flags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t[] = {  {&_swigt__p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__no_prefix_mappingT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__no_prefix_mappingT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__no_type_infoT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__no_type_infoT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__not_derivedT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__not_derivedT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_bool_true_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_bool_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_double_true_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_double_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_int_true_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_int_true_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t[] = {  {&_swigt__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__parsingT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__parsingT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__propertiesT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__propertiesT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t[] = {  {&_swigt__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__sequence_common[] = {  {&_swigt__p_xsd__cxx__tree__sequence_common, 0, 0, 0},  {&_swigt__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t, _p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_tTo_p_xsd__cxx__tree__sequence_common, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__severity[] = {  {&_swigt__p_xsd__cxx__tree__severity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t[] = {  {&_swigt__p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__time_zone[] = {  {&_swigt__p_xsd__cxx__tree__time_zone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t[] = {  {&_swigt__p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__unexpected_elementT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__unexpected_elementT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__unexpected_enumeratorT_char_t[] = {  {&_swigt__p_xsd__cxx__tree__unexpected_enumeratorT_char_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t[] = {  {&_swigt__p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__tree__user_data_keys_templateT_0_t[] = {  {&_swigt__p_xsd__cxx__tree__user_data_keys_templateT_0_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_xsd__cxx__xml__error_handlerT_char_t[] = {  {&_swigt__p_xsd__cxx__xml__error_handlerT_char_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_AboveGradeStoryCountAltered_optional,
  _swigc__p_AboveGradeStoryCountAltered_traits,
  _swigc__p_AboveGradeStoryCountAltered_type,
  _swigc__p_AboveGradeStoryCountExists_optional,
  _swigc__p_AboveGradeStoryCountExists_traits,
  _swigc__p_AboveGradeStoryCountExists_type,
  _swigc__p_AboveGradeStoryCountNew_optional,
  _swigc__p_AboveGradeStoryCountNew_traits,
  _swigc__p_AboveGradeStoryCountNew_type,
  _swigc__p_BuildingAddress_optional,
  _swigc__p_BuildingAddress_traits,
  _swigc__p_BuildingAddress_type,
  _swigc__p_BuildingConstructionsTemplate_optional,
  _swigc__p_BuildingConstructionsTemplate_traits,
  _swigc__p_BuildingConstructionsTemplate_type,
  _swigc__p_BuildingDatumElevation_optional,
  _swigc__p_BuildingDatumElevation_traits,
  _swigc__p_BuildingDatumElevation_type,
  _swigc__p_BuildingEnergyTargetUnits_optional,
  _swigc__p_BuildingEnergyTargetUnits_traits,
  _swigc__p_BuildingEnergyTargetUnits_type,
  _swigc__p_BuildingEnergyTargetValue_optional,
  _swigc__p_BuildingEnergyTargetValue_traits,
  _swigc__p_BuildingEnergyTargetValue_type,
  _swigc__p_BuildingGrossFloorArea_optional,
  _swigc__p_BuildingGrossFloorArea_traits,
  _swigc__p_BuildingGrossFloorArea_type,
  _swigc__p_BuildingGrossPlannedArea_optional,
  _swigc__p_BuildingGrossPlannedArea_traits,
  _swigc__p_BuildingGrossPlannedArea_type,
  _swigc__p_BuildingHeight_optional,
  _swigc__p_BuildingHeight_traits,
  _swigc__p_BuildingHeight_type,
  _swigc__p_BuildingInSpatialContainer_optional,
  _swigc__p_BuildingInSpatialContainer_traits,
  _swigc__p_BuildingInSpatialContainer_type,
  _swigc__p_BuildingInfiltrationType_optional,
  _swigc__p_BuildingInfiltrationType_traits,
  _swigc__p_BuildingInfiltrationType_type,
  _swigc__p_BuildingInfiltrationValue_optional,
  _swigc__p_BuildingInfiltrationValue_traits,
  _swigc__p_BuildingInfiltrationValue_type,
  _swigc__p_BuildingNumberofStoreys_optional,
  _swigc__p_BuildingNumberofStoreys_traits,
  _swigc__p_BuildingNumberofStoreys_type,
  _swigc__p_BuildingOccupancyType_optional,
  _swigc__p_BuildingOccupancyType_traits,
  _swigc__p_BuildingOccupancyType_type,
  _swigc__p_BuildingYearOfConstruction_optional,
  _swigc__p_BuildingYearOfConstruction_traits,
  _swigc__p_BuildingYearOfConstruction_type,
  _swigc__p_BuildingisLandmarked_optional,
  _swigc__p_BuildingisLandmarked_traits,
  _swigc__p_BuildingisLandmarked_type,
  _swigc__p_ChangeFromTemplate_optional,
  _swigc__p_ChangeFromTemplate_traits,
  _swigc__p_ChangeFromTemplate_type,
  _swigc__p_ClassRef_ConstEntByFunction_optional,
  _swigc__p_ClassRef_ConstEntByFunction_traits,
  _swigc__p_ClassRef_ConstEntByFunction_type,
  _swigc__p_CompositionType_optional,
  _swigc__p_CompositionType_traits,
  _swigc__p_CompositionType_type,
  _swigc__p_ContainingBuildings_optional,
  _swigc__p_ContainingBuildings_traits,
  _swigc__p_ContainingBuildings_type,
  _swigc__p_DaylightControlsDefault_optional,
  _swigc__p_DaylightControlsDefault_traits,
  _swigc__p_DaylightControlsDefault_type,
  _swigc__p_Decomposes_optional,
  _swigc__p_Decomposes_traits,
  _swigc__p_Decomposes_type,
  _swigc__p_Description_optional,
  _swigc__p_Description_traits,
  _swigc__p_Description_type,
  _swigc__p_ElevationOfTerrain_optional,
  _swigc__p_ElevationOfTerrain_traits,
  _swigc__p_ElevationOfTerrain_type,
  _swigc__p_HasTemplateChanged_optional,
  _swigc__p_HasTemplateChanged_traits,
  _swigc__p_HasTemplateChanged_type,
  _swigc__p_HighRiseResidentialLivingUnitCount_optional,
  _swigc__p_HighRiseResidentialLivingUnitCount_traits,
  _swigc__p_HighRiseResidentialLivingUnitCount_type,
  _swigc__p_IfcGlobalID_optional,
  _swigc__p_IfcGlobalID_traits,
  _swigc__p_IfcGlobalID_type,
  _swigc__p_IfcName_optional,
  _swigc__p_IfcName_traits,
  _swigc__p_IfcName_type,
  _swigc__p_IsTemplateObject_optional,
  _swigc__p_IsTemplateObject_traits,
  _swigc__p_IsTemplateObject_type,
  _swigc__p_LivingUnitCountAltered_optional,
  _swigc__p_LivingUnitCountAltered_traits,
  _swigc__p_LivingUnitCountAltered_type,
  _swigc__p_LivingUnitCountExisting_optional,
  _swigc__p_LivingUnitCountExisting_traits,
  _swigc__p_LivingUnitCountExisting_type,
  _swigc__p_LivingUnitCountNew_optional,
  _swigc__p_LivingUnitCountNew_traits,
  _swigc__p_LivingUnitCountNew_type,
  _swigc__p_LongName_optional,
  _swigc__p_LongName_traits,
  _swigc__p_LongName_type,
  _swigc__p_MemberUsedForDiagrams_optional,
  _swigc__p_MemberUsedForDiagrams_traits,
  _swigc__p_MemberUsedForDiagrams_type,
  _swigc__p_Name_optional,
  _swigc__p_Name_traits,
  _swigc__p_Name_type,
  _swigc__p_NatVentilationDefault_optional,
  _swigc__p_NatVentilationDefault_traits,
  _swigc__p_NatVentilationDefault_type,
  _swigc__p_NevronSchematicLayout_optional,
  _swigc__p_NevronSchematicLayout_traits,
  _swigc__p_NevronSchematicLayout_type,
  _swigc__p_ObjectCreationParams_optional,
  _swigc__p_ObjectCreationParams_traits,
  _swigc__p_ObjectCreationParams_type,
  _swigc__p_ObjectOwnerHistory_optional,
  _swigc__p_ObjectOwnerHistory_traits,
  _swigc__p_ObjectOwnerHistory_type,
  _swigc__p_ObjectType_optional,
  _swigc__p_ObjectType_traits,
  _swigc__p_ObjectType_type,
  _swigc__p_ParentGroups_optional,
  _swigc__p_ParentGroups_traits,
  _swigc__p_ParentGroups_type,
  _swigc__p_Placement_optional,
  _swigc__p_Placement_traits,
  _swigc__p_Placement_type,
  _swigc__p_RefId_traits,
  _swigc__p_RefId_type,
  _swigc__p_RelocatablePublicSchoolBuilding_optional,
  _swigc__p_RelocatablePublicSchoolBuilding_traits,
  _swigc__p_RelocatablePublicSchoolBuilding_type,
  _swigc__p_Representation_optional,
  _swigc__p_Representation_traits,
  _swigc__p_Representation_type,
  _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_optional,
  _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_traits,
  _swigc__p_RoofIrrigation_IrrigationMaxSaturatThreshold_type,
  _swigc__p_RoofIrrigation_IrrigationModelType_optional,
  _swigc__p_RoofIrrigation_IrrigationModelType_traits,
  _swigc__p_RoofIrrigation_IrrigationModelType_type,
  _swigc__p_RoofIrrigation_IrrigationRateSchedName_optional,
  _swigc__p_RoofIrrigation_IrrigationRateSchedName_traits,
  _swigc__p_RoofIrrigation_IrrigationRateSchedName_type,
  _swigc__p_SimBuilding_LoadsConvergTolVal_optional,
  _swigc__p_SimBuilding_LoadsConvergTolVal_traits,
  _swigc__p_SimBuilding_LoadsConvergTolVal_type,
  _swigc__p_SimBuilding_MaxNumWarmupDays_optional,
  _swigc__p_SimBuilding_MaxNumWarmupDays_traits,
  _swigc__p_SimBuilding_MaxNumWarmupDays_type,
  _swigc__p_SimBuilding_MinNumberWarmupDays_optional,
  _swigc__p_SimBuilding_MinNumberWarmupDays_traits,
  _swigc__p_SimBuilding_MinNumberWarmupDays_type,
  _swigc__p_SimBuilding_Name_optional,
  _swigc__p_SimBuilding_Name_traits,
  _swigc__p_SimBuilding_Name_type,
  _swigc__p_SimBuilding_NorthAxis_optional,
  _swigc__p_SimBuilding_NorthAxis_traits,
  _swigc__p_SimBuilding_NorthAxis_type,
  _swigc__p_SimBuilding_SolarDist_optional,
  _swigc__p_SimBuilding_SolarDist_traits,
  _swigc__p_SimBuilding_SolarDist_type,
  _swigc__p_SimBuilding_TempConvergTolVal_optional,
  _swigc__p_SimBuilding_TempConvergTolVal_traits,
  _swigc__p_SimBuilding_TempConvergTolVal_type,
  _swigc__p_SimBuilding_Terrain_optional,
  _swigc__p_SimBuilding_Terrain_traits,
  _swigc__p_SimBuilding_Terrain_type,
  _swigc__p_SimModelName_optional,
  _swigc__p_SimModelName_traits,
  _swigc__p_SimModelName_type,
  _swigc__p_SimModelSubtype_optional,
  _swigc__p_SimModelSubtype_traits,
  _swigc__p_SimModelSubtype_type,
  _swigc__p_SimModelType_optional,
  _swigc__p_SimModelType_traits,
  _swigc__p_SimModelType_type,
  _swigc__p_SimUniqueID_optional,
  _swigc__p_SimUniqueID_traits,
  _swigc__p_SimUniqueID_type,
  _swigc__p_SourceLibraryEntryID_optional,
  _swigc__p_SourceLibraryEntryID_traits,
  _swigc__p_SourceLibraryEntryID_type,
  _swigc__p_SourceLibraryEntryRef_optional,
  _swigc__p_SourceLibraryEntryRef_traits,
  _swigc__p_SourceLibraryEntryRef_type,
  _swigc__p_SourceModelObjectType_optional,
  _swigc__p_SourceModelObjectType_traits,
  _swigc__p_SourceModelObjectType_type,
  _swigc__p_SourceModelSchema_optional,
  _swigc__p_SourceModelSchema_traits,
  _swigc__p_SourceModelSchema_type,
  _swigc__p_SpaceBoundsNotCurrent_optional,
  _swigc__p_SpaceBoundsNotCurrent_traits,
  _swigc__p_SpaceBoundsNotCurrent_type,
  _swigc__p_T24CoilCoolingCapacity_optional,
  _swigc__p_T24CoilCoolingCapacity_traits,
  _swigc__p_T24CoilCoolingCapacity_type,
  _swigc__p_T24CoilHeatingCapacity_optional,
  _swigc__p_T24CoilHeatingCapacity_traits,
  _swigc__p_T24CoilHeatingCapacity_type,
  _swigc__p_T24FunctionClassificationMethod_optional,
  _swigc__p_T24FunctionClassificationMethod_traits,
  _swigc__p_T24FunctionClassificationMethod_type,
  _swigc__p_T24PlantCoolingCapacity_optional,
  _swigc__p_T24PlantCoolingCapacity_traits,
  _swigc__p_T24PlantCoolingCapacity_type,
  _swigc__p_T24PlantHeatingCapacity_optional,
  _swigc__p_T24PlantHeatingCapacity_traits,
  _swigc__p_T24PlantHeatingCapacity_type,
  _swigc__p_TemplateOverrideValues_optional,
  _swigc__p_TemplateOverrideValues_traits,
  _swigc__p_TemplateOverrideValues_type,
  _swigc__p_TemplatesForMembers_optional,
  _swigc__p_TemplatesForMembers_traits,
  _swigc__p_TemplatesForMembers_type,
  _swigc__p_TotalStoryCountAltered_optional,
  _swigc__p_TotalStoryCountAltered_traits,
  _swigc__p_TotalStoryCountAltered_type,
  _swigc__p_TotalStoryCountExisting_optional,
  _swigc__p_TotalStoryCountExisting_traits,
  _swigc__p_TotalStoryCountExisting_type,
  _swigc__p_TotalStoryCountNew_optional,
  _swigc__p_TotalStoryCountNew_traits,
  _swigc__p_TotalStoryCountNew_type,
  _swigc__p_TypeDefinition_optional,
  _swigc__p_TypeDefinition_traits,
  _swigc__p_TypeDefinition_type,
  _swigc__p_allocator_type,
  _swigc__p_base_const_iterator,
  _swigc__p_base_iterator,
  _swigc__p_base_sequence,
  _swigc__p_bool,
  _swigc__p_bool_convertible,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_const_reverse_iterator,
  _swigc__p_difference_type,
  _swigc__p_dom_content_optional,
  _swigc__p_double,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t,
  _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__const_reverse_iterator_schema__simxml__BuildingModel__SimBuilding_Building_Default_const_t,
  _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  _swigc__p_iterator_adapterT_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__reverse_iterator___schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  _swigc__p_long_long,
  _swigc__p_ptr,
  _swigc__p_reverse_iterator,
  _swigc__p_schema__simxml__BuildingModel__SimBuilding,
  _swigc__p_schema__simxml__BuildingModel__SimBuilding_Building,
  _swigc__p_schema__simxml__BuildingModel__SimBuilding_Building_Default,
  _swigc__p_schema__simxml__Model__SimModel,
  _swigc__p_schema__simxml__SimModelCore__SimGroup,
  _swigc__p_schema__simxml__SimModelCore__SimObject,
  _swigc__p_schema__simxml__SimModelCore__SimObjectDefinition,
  _swigc__p_schema__simxml__SimModelCore__SimRoot,
  _swigc__p_schema__simxml__SimModelCore__SimSpatialStructureElement,
  _swigc__p_schema__simxml__SimModelCore__integerList,
  _swigc__p_schema__simxml__SimModelCore__logical,
  _swigc__p_self_,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__auto_ptrT_T_t,
  _swigc__p_std__auto_ptrT_schema__simxml__BuildingModel__SimBuilding_Building_Default_t,
  _swigc__p_std__auto_ptrT_schema__simxml__SimModelCore__logical_t,
  _swigc__p_std__auto_ptrT_xml_schema__idref_t,
  _swigc__p_std__auto_ptrT_xml_schema__string_t,
  _swigc__p_std__vectorT_xsd__cxx__tree__sequence_common__ptr_std__allocatorT_xsd__cxx__tree__sequence_common__ptr_t_t__size_type,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_xercesc__DOMElement,
  _swigc__p_xsd__cxx__tree___type,
  _swigc__p_xsd__cxx__tree__base64_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__boundsT_char_t,
  _swigc__p_xsd__cxx__tree__bufferT_char_t,
  _swigc__p_xsd__cxx__tree__content_order,
  _swigc__p_xsd__cxx__tree__dateT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__date_timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__diagnosticsT_char_t,
  _swigc__p_xsd__cxx__tree__duplicate_idT_char_t,
  _swigc__p_xsd__cxx__tree__durationT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__entitiesT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__entityT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__errorT_char_t,
  _swigc__p_xsd__cxx__tree__exceptionT_char_t,
  _swigc__p_xsd__cxx__tree__expected_attributeT_char_t,
  _swigc__p_xsd__cxx__tree__expected_elementT_char_t,
  _swigc__p_xsd__cxx__tree__expected_text_contentT_char_t,
  _swigc__p_xsd__cxx__tree__flags,
  _swigc__p_xsd__cxx__tree__gdayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__gmonthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__gmonth_dayT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__gyearT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__gyear_monthT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__hex_binaryT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__idT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t,
  _swigc__p_xsd__cxx__tree__idrefsT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__languageT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__nmtokensT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__nmtokenT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__no_prefix_mappingT_char_t,
  _swigc__p_xsd__cxx__tree__no_type_infoT_char_t,
  _swigc__p_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t,
  _swigc__p_xsd__cxx__tree__not_derivedT_char_t,
  _swigc__p_xsd__cxx__tree__optionalT_bool_true_t,
  _swigc__p_xsd__cxx__tree__optionalT_double_true_t,
  _swigc__p_xsd__cxx__tree__optionalT_int_true_t,
  _swigc__p_xsd__cxx__tree__optionalT_schema__simxml__SimModelCore__logical_xsd__cxx__tree__fundamental_pT_schema__simxml__SimModelCore__logical_t__r_t,
  _swigc__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__idrefT_char_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_xsd__cxx__tree___type_t_t__r_t,
  _swigc__p_xsd__cxx__tree__optionalT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__fundamental_pT_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t__r_t,
  _swigc__p_xsd__cxx__tree__parsingT_char_t,
  _swigc__p_xsd__cxx__tree__propertiesT_char_t,
  _swigc__p_xsd__cxx__tree__qnameT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_xsd__cxx__tree__ncnameT_char_xsd__cxx__tree__nameT_char_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t_t_t_t,
  _swigc__p_xsd__cxx__tree__sequenceT_schema__simxml__BuildingModel__SimBuilding_Building_Default_false_t,
  _swigc__p_xsd__cxx__tree__sequence_common,
  _swigc__p_xsd__cxx__tree__severity,
  _swigc__p_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t,
  _swigc__p_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__timeT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__time_zone,
  _swigc__p_xsd__cxx__tree__tokenT_char_xsd__cxx__tree__normalized_stringT_char_xsd__cxx__tree__stringT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t_t_t,
  _swigc__p_xsd__cxx__tree__unexpected_elementT_char_t,
  _swigc__p_xsd__cxx__tree__unexpected_enumeratorT_char_t,
  _swigc__p_xsd__cxx__tree__uriT_char_xsd__cxx__tree__simple_typeT_char_xsd__cxx__tree___type_t_t,
  _swigc__p_xsd__cxx__tree__user_data_keys_templateT_0_t,
  _swigc__p_xsd__cxx__xml__error_handlerT_char_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

