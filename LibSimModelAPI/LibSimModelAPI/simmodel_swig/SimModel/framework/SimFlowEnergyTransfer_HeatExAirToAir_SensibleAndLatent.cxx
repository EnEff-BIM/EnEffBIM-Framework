// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent
      // 

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_NomSupplyAirFlowRate_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomSupplyAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_NomSupplyAirFlowRate_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_NomSupplyAirFlowRate_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomSupplyAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_NomSupplyAirFlowRate_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomSupplyAirFlowRate (const SimFlowEnergyTrans_NomSupplyAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_NomSupplyAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomSupplyAirFlowRate (const SimFlowEnergyTrans_NomSupplyAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_NomSupplyAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_NomElecPwr_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomElecPwr () const
      {
        return this->SimFlowEnergyTrans_NomElecPwr_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_NomElecPwr_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomElecPwr ()
      {
        return this->SimFlowEnergyTrans_NomElecPwr_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomElecPwr (const SimFlowEnergyTrans_NomElecPwr_type& x)
      {
        this->SimFlowEnergyTrans_NomElecPwr_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_NomElecPwr (const SimFlowEnergyTrans_NomElecPwr_optional& x)
      {
        this->SimFlowEnergyTrans_NomElecPwr_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirInletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_SupplyAirInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirInletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_SupplyAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirInletNodeName (const SimFlowEnergyTrans_SupplyAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_SupplyAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirInletNodeName (const SimFlowEnergyTrans_SupplyAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_SupplyAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_SupplyAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_SupplyAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_SupplyAirOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_SupplyAirOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletNodeName (const SimFlowEnergyTrans_SupplyAirOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletNodeName (const SimFlowEnergyTrans_SupplyAirOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_SupplyAirOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow () const
      {
        return this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow ()
      {
        return this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow (const SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow (const SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow () const
      {
        return this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow ()
      {
        return this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow (const SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow (const SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow () const
      {
        return this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow ()
      {
        return this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow (const SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow (const SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow () const
      {
        return this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow ()
      {
        return this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow (const SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow (const SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow () const
      {
        return this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow ()
      {
        return this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow (const SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow (const SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow () const
      {
        return this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow ()
      {
        return this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow (const SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow (const SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow () const
      {
        return this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow ()
      {
        return this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow (const SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow (const SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow () const
      {
        return this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow ()
      {
        return this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow (const SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_type& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow (const SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_optional& x)
      {
        this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ExhAirInletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_ExhAirInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ExhAirInletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_ExhAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirInletNodeName (const SimFlowEnergyTrans_ExhAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ExhAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirInletNodeName (const SimFlowEnergyTrans_ExhAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ExhAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ExhAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ExhAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ExhAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirOutletNodeName () const
      {
        return this->SimFlowEnergyTrans_ExhAirOutletNodeName_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ExhAirOutletNodeName_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirOutletNodeName ()
      {
        return this->SimFlowEnergyTrans_ExhAirOutletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirOutletNodeName (const SimFlowEnergyTrans_ExhAirOutletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_ExhAirOutletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirOutletNodeName (const SimFlowEnergyTrans_ExhAirOutletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_ExhAirOutletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ExhAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_ExhAirOutletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_ExhAirOutletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirOutletTempCntl_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletTempCntl () const
      {
        return this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_SupplyAirOutletTempCntl_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletTempCntl ()
      {
        return this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletTempCntl (const SimFlowEnergyTrans_SupplyAirOutletTempCntl_type& x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletTempCntl (const SimFlowEnergyTrans_SupplyAirOutletTempCntl_optional& x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_SupplyAirOutletTempCntl (::std::auto_ptr< SimFlowEnergyTrans_SupplyAirOutletTempCntl_type > x)
      {
        this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_HeatExchngType_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_HeatExchngType () const
      {
        return this->SimFlowEnergyTrans_HeatExchngType_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_HeatExchngType_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_HeatExchngType ()
      {
        return this->SimFlowEnergyTrans_HeatExchngType_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_HeatExchngType (const SimFlowEnergyTrans_HeatExchngType_type& x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_HeatExchngType (const SimFlowEnergyTrans_HeatExchngType_optional& x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_HeatExchngType (::std::auto_ptr< SimFlowEnergyTrans_HeatExchngType_type > x)
      {
        this->SimFlowEnergyTrans_HeatExchngType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_FrostCntlType_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_FrostCntlType () const
      {
        return this->SimFlowEnergyTrans_FrostCntlType_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_FrostCntlType_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_FrostCntlType ()
      {
        return this->SimFlowEnergyTrans_FrostCntlType_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_FrostCntlType (const SimFlowEnergyTrans_FrostCntlType_type& x)
      {
        this->SimFlowEnergyTrans_FrostCntlType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_FrostCntlType (const SimFlowEnergyTrans_FrostCntlType_optional& x)
      {
        this->SimFlowEnergyTrans_FrostCntlType_ = x;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_FrostCntlType (::std::auto_ptr< SimFlowEnergyTrans_FrostCntlType_type > x)
      {
        this->SimFlowEnergyTrans_FrostCntlType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ThreshTemp_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ThreshTemp () const
      {
        return this->SimFlowEnergyTrans_ThreshTemp_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_ThreshTemp_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ThreshTemp ()
      {
        return this->SimFlowEnergyTrans_ThreshTemp_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ThreshTemp (const SimFlowEnergyTrans_ThreshTemp_type& x)
      {
        this->SimFlowEnergyTrans_ThreshTemp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_ThreshTemp (const SimFlowEnergyTrans_ThreshTemp_optional& x)
      {
        this->SimFlowEnergyTrans_ThreshTemp_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_InitDefrostTimeFract_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_InitDefrostTimeFract () const
      {
        return this->SimFlowEnergyTrans_InitDefrostTimeFract_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_InitDefrostTimeFract_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_InitDefrostTimeFract ()
      {
        return this->SimFlowEnergyTrans_InitDefrostTimeFract_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_InitDefrostTimeFract (const SimFlowEnergyTrans_InitDefrostTimeFract_type& x)
      {
        this->SimFlowEnergyTrans_InitDefrostTimeFract_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_InitDefrostTimeFract (const SimFlowEnergyTrans_InitDefrostTimeFract_optional& x)
      {
        this->SimFlowEnergyTrans_InitDefrostTimeFract_ = x;
      }

      const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_RateDefrostTimeFractcrease_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_RateDefrostTimeFractcrease () const
      {
        return this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::SimFlowEnergyTrans_RateDefrostTimeFractcrease_optional& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_RateDefrostTimeFractcrease ()
      {
        return this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_;
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_RateDefrostTimeFractcrease (const SimFlowEnergyTrans_RateDefrostTimeFractcrease_type& x)
      {
        this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_.set (x);
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTrans_RateDefrostTimeFractcrease (const SimFlowEnergyTrans_RateDefrostTimeFractcrease_optional& x)
      {
        this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent
      //

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir (),
        SimFlowEnergyTrans_NomSupplyAirFlowRate_ (this),
        SimFlowEnergyTrans_NomElecPwr_ (this),
        SimFlowEnergyTrans_SupplyAirInletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_ExhAirInletNodeName_ (this),
        SimFlowEnergyTrans_ExhAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletTempCntl_ (this),
        SimFlowEnergyTrans_HeatExchngType_ (this),
        SimFlowEnergyTrans_FrostCntlType_ (this),
        SimFlowEnergyTrans_ThreshTemp_ (this),
        SimFlowEnergyTrans_InitDefrostTimeFract_ (this),
        SimFlowEnergyTrans_RateDefrostTimeFractcrease_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir (RefId),
        SimFlowEnergyTrans_NomSupplyAirFlowRate_ (this),
        SimFlowEnergyTrans_NomElecPwr_ (this),
        SimFlowEnergyTrans_SupplyAirInletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_ExhAirInletNodeName_ (this),
        SimFlowEnergyTrans_ExhAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletTempCntl_ (this),
        SimFlowEnergyTrans_HeatExchngType_ (this),
        SimFlowEnergyTrans_FrostCntlType_ (this),
        SimFlowEnergyTrans_ThreshTemp_ (this),
        SimFlowEnergyTrans_InitDefrostTimeFract_ (this),
        SimFlowEnergyTrans_RateDefrostTimeFractcrease_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent (const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent& x,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir (x, f, c),
        SimFlowEnergyTrans_NomSupplyAirFlowRate_ (x.SimFlowEnergyTrans_NomSupplyAirFlowRate_, f, this),
        SimFlowEnergyTrans_NomElecPwr_ (x.SimFlowEnergyTrans_NomElecPwr_, f, this),
        SimFlowEnergyTrans_SupplyAirInletNodeName_ (x.SimFlowEnergyTrans_SupplyAirInletNodeName_, f, this),
        SimFlowEnergyTrans_SupplyAirOutletNodeName_ (x.SimFlowEnergyTrans_SupplyAirOutletNodeName_, f, this),
        SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ (x.SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_, f, this),
        SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ (x.SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_, f, this),
        SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ (x.SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_, f, this),
        SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ (x.SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_, f, this),
        SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ (x.SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_, f, this),
        SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ (x.SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_, f, this),
        SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ (x.SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_, f, this),
        SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ (x.SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_, f, this),
        SimFlowEnergyTrans_ExhAirInletNodeName_ (x.SimFlowEnergyTrans_ExhAirInletNodeName_, f, this),
        SimFlowEnergyTrans_ExhAirOutletNodeName_ (x.SimFlowEnergyTrans_ExhAirOutletNodeName_, f, this),
        SimFlowEnergyTrans_SupplyAirOutletTempCntl_ (x.SimFlowEnergyTrans_SupplyAirOutletTempCntl_, f, this),
        SimFlowEnergyTrans_HeatExchngType_ (x.SimFlowEnergyTrans_HeatExchngType_, f, this),
        SimFlowEnergyTrans_FrostCntlType_ (x.SimFlowEnergyTrans_FrostCntlType_, f, this),
        SimFlowEnergyTrans_ThreshTemp_ (x.SimFlowEnergyTrans_ThreshTemp_, f, this),
        SimFlowEnergyTrans_InitDefrostTimeFract_ (x.SimFlowEnergyTrans_InitDefrostTimeFract_, f, this),
        SimFlowEnergyTrans_RateDefrostTimeFractcrease_ (x.SimFlowEnergyTrans_RateDefrostTimeFractcrease_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_NomSupplyAirFlowRate_ (this),
        SimFlowEnergyTrans_NomElecPwr_ (this),
        SimFlowEnergyTrans_SupplyAirInletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ (this),
        SimFlowEnergyTrans_ExhAirInletNodeName_ (this),
        SimFlowEnergyTrans_ExhAirOutletNodeName_ (this),
        SimFlowEnergyTrans_SupplyAirOutletTempCntl_ (this),
        SimFlowEnergyTrans_HeatExchngType_ (this),
        SimFlowEnergyTrans_FrostCntlType_ (this),
        SimFlowEnergyTrans_ThreshTemp_ (this),
        SimFlowEnergyTrans_InitDefrostTimeFract_ (this),
        SimFlowEnergyTrans_RateDefrostTimeFractcrease_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_NomSupplyAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_NomSupplyAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomSupplyAirFlowRate_)
            {
              this->SimFlowEnergyTrans_NomSupplyAirFlowRate_.set (SimFlowEnergyTrans_NomSupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_NomElecPwr
          //
          if (n.name () == "SimFlowEnergyTrans_NomElecPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_NomElecPwr_)
            {
              this->SimFlowEnergyTrans_NomElecPwr_.set (SimFlowEnergyTrans_NomElecPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SupplyAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_SupplyAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupplyAirInletNodeName_type > r (
              SimFlowEnergyTrans_SupplyAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupplyAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_SupplyAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SupplyAirOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_SupplyAirOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupplyAirOutletNodeName_type > r (
              SimFlowEnergyTrans_SupplyAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupplyAirOutletNodeName_)
            {
              this->SimFlowEnergyTrans_SupplyAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_)
            {
              this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_.set (SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_)
            {
              this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_.set (SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_)
            {
              this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_.set (SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_)
            {
              this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_.set (SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_)
            {
              this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_.set (SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_)
            {
              this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_.set (SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_)
            {
              this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_.set (SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow
          //
          if (n.name () == "SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_)
            {
              this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_.set (SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ExhAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ExhAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ExhAirInletNodeName_type > r (
              SimFlowEnergyTrans_ExhAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ExhAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_ExhAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ExhAirOutletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_ExhAirOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_ExhAirOutletNodeName_type > r (
              SimFlowEnergyTrans_ExhAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_ExhAirOutletNodeName_)
            {
              this->SimFlowEnergyTrans_ExhAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_SupplyAirOutletTempCntl
          //
          if (n.name () == "SimFlowEnergyTrans_SupplyAirOutletTempCntl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_SupplyAirOutletTempCntl_type > r (
              SimFlowEnergyTrans_SupplyAirOutletTempCntl_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_)
            {
              this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatExchngType
          //
          if (n.name () == "SimFlowEnergyTrans_HeatExchngType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatExchngType_type > r (
              SimFlowEnergyTrans_HeatExchngType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatExchngType_)
            {
              this->SimFlowEnergyTrans_HeatExchngType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_FrostCntlType
          //
          if (n.name () == "SimFlowEnergyTrans_FrostCntlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_FrostCntlType_type > r (
              SimFlowEnergyTrans_FrostCntlType_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_FrostCntlType_)
            {
              this->SimFlowEnergyTrans_FrostCntlType_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_ThreshTemp
          //
          if (n.name () == "SimFlowEnergyTrans_ThreshTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_ThreshTemp_)
            {
              this->SimFlowEnergyTrans_ThreshTemp_.set (SimFlowEnergyTrans_ThreshTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_InitDefrostTimeFract
          //
          if (n.name () == "SimFlowEnergyTrans_InitDefrostTimeFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_InitDefrostTimeFract_)
            {
              this->SimFlowEnergyTrans_InitDefrostTimeFract_.set (SimFlowEnergyTrans_InitDefrostTimeFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RateDefrostTimeFractcrease
          //
          if (n.name () == "SimFlowEnergyTrans_RateDefrostTimeFractcrease" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_)
            {
              this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_.set (SimFlowEnergyTrans_RateDefrostTimeFractcrease_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent* SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent& SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      operator= (const SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatExAirToAir& > (*this) = x;
          this->SimFlowEnergyTrans_NomSupplyAirFlowRate_ = x.SimFlowEnergyTrans_NomSupplyAirFlowRate_;
          this->SimFlowEnergyTrans_NomElecPwr_ = x.SimFlowEnergyTrans_NomElecPwr_;
          this->SimFlowEnergyTrans_SupplyAirInletNodeName_ = x.SimFlowEnergyTrans_SupplyAirInletNodeName_;
          this->SimFlowEnergyTrans_SupplyAirOutletNodeName_ = x.SimFlowEnergyTrans_SupplyAirOutletNodeName_;
          this->SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_ = x.SimFlowEnergyTrans_SensEffectAt100PctHeatingAirFlow_;
          this->SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_ = x.SimFlowEnergyTrans_LatentEffectAt100PctHeatingAirFlow_;
          this->SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_ = x.SimFlowEnergyTrans_SensEffectAt75PctHeatingAirFlow_;
          this->SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_ = x.SimFlowEnergyTrans_LatentEffectAt75PctHeatingAirFlow_;
          this->SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_ = x.SimFlowEnergyTrans_SensEffectAt100PctCoolingAirFlow_;
          this->SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_ = x.SimFlowEnergyTrans_LatentEffectAt100PctCoolingAirFlow_;
          this->SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_ = x.SimFlowEnergyTrans_SensEffectAt75PctCoolingAirFlow_;
          this->SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_ = x.SimFlowEnergyTrans_LatentEffectAt75PctCoolingAirFlow_;
          this->SimFlowEnergyTrans_ExhAirInletNodeName_ = x.SimFlowEnergyTrans_ExhAirInletNodeName_;
          this->SimFlowEnergyTrans_ExhAirOutletNodeName_ = x.SimFlowEnergyTrans_ExhAirOutletNodeName_;
          this->SimFlowEnergyTrans_SupplyAirOutletTempCntl_ = x.SimFlowEnergyTrans_SupplyAirOutletTempCntl_;
          this->SimFlowEnergyTrans_HeatExchngType_ = x.SimFlowEnergyTrans_HeatExchngType_;
          this->SimFlowEnergyTrans_FrostCntlType_ = x.SimFlowEnergyTrans_FrostCntlType_;
          this->SimFlowEnergyTrans_ThreshTemp_ = x.SimFlowEnergyTrans_ThreshTemp_;
          this->SimFlowEnergyTrans_InitDefrostTimeFract_ = x.SimFlowEnergyTrans_InitDefrostTimeFract_;
          this->SimFlowEnergyTrans_RateDefrostTimeFractcrease_ = x.SimFlowEnergyTrans_RateDefrostTimeFractcrease_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent::
      ~SimFlowEnergyTransfer_HeatExAirToAir_SensibleAndLatent ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

