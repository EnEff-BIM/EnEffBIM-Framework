// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimRefrigerationSystemElement_GasCooler.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_GasCooler
      // 

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_Name_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_Name () const
      {
        return this->SimRefrigSysElem_Name_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_Name_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_Name ()
      {
        return this->SimRefrigSysElem_Name_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_Name (const SimRefrigSysElem_Name_type& x)
      {
        this->SimRefrigSysElem_Name_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_Name (const SimRefrigSysElem_Name_optional& x)
      {
        this->SimRefrigSysElem_Name_ = x;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_Name (::std::auto_ptr< SimRefrigSysElem_Name_type > x)
      {
        this->SimRefrigSysElem_Name_.set (x);
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_EndUseSubCat () const
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_EndUseSubCat_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_EndUseSubCat ()
      {
        return this->SimRefrigSysElem_EndUseSubCat_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x)
      {
        this->SimRefrigSysElem_EndUseSubCat_ = x;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > x)
      {
        this->SimRefrigSysElem_EndUseSubCat_.set (x);
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedFanPwr () const
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_RatedFanPwr_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedFanPwr ()
      {
        return this->SimRefrigSysElem_RatedFanPwr_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_type& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedFanPwr (const SimRefrigSysElem_RatedFanPwr_optional& x)
      {
        this->SimRefrigSysElem_RatedFanPwr_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinFanAirFlowRatio () const
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_MinFanAirFlowRatio_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinFanAirFlowRatio ()
      {
        return this->SimRefrigSysElem_MinFanAirFlowRatio_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_type& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinFanAirFlowRatio (const SimRefrigSysElem_MinFanAirFlowRatio_optional& x)
      {
        this->SimRefrigSysElem_MinFanAirFlowRatio_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_AirInNodeName_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_AirInNodeName () const
      {
        return this->SimRefrigSysElem_AirInNodeName_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_AirInNodeName_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_AirInNodeName ()
      {
        return this->SimRefrigSysElem_AirInNodeName_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_type& x)
      {
        this->SimRefrigSysElem_AirInNodeName_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_AirInNodeName (const SimRefrigSysElem_AirInNodeName_optional& x)
      {
        this->SimRefrigSysElem_AirInNodeName_ = x;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_AirInNodeName (::std::auto_ptr< SimRefrigSysElem_AirInNodeName_type > x)
      {
        this->SimRefrigSysElem_AirInNodeName_.set (x);
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedTotHeatRejectionRateCurveName () const
      {
        return this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedTotHeatRejectionRateCurveName ()
      {
        return this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedTotHeatRejectionRateCurveName (const SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_type& x)
      {
        this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedTotHeatRejectionRateCurveName (const SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_optional& x)
      {
        this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ = x;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_RatedTotHeatRejectionRateCurveName (::std::auto_ptr< SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_type > x)
      {
        this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_.set (x);
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerFanSpeedControlType_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerFanSpeedControlType () const
      {
        return this->SimRefrigSysElem_GasCoolerFanSpeedControlType_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerFanSpeedControlType_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerFanSpeedControlType ()
      {
        return this->SimRefrigSysElem_GasCoolerFanSpeedControlType_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerFanSpeedControlType (const SimRefrigSysElem_GasCoolerFanSpeedControlType_type& x)
      {
        this->SimRefrigSysElem_GasCoolerFanSpeedControlType_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerFanSpeedControlType (const SimRefrigSysElem_GasCoolerFanSpeedControlType_optional& x)
      {
        this->SimRefrigSysElem_GasCoolerFanSpeedControlType_ = x;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerFanSpeedControlType (::std::auto_ptr< SimRefrigSysElem_GasCoolerFanSpeedControlType_type > x)
      {
        this->SimRefrigSysElem_GasCoolerFanSpeedControlType_.set (x);
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_TransitionTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TransitionTemp () const
      {
        return this->SimRefrigSysElem_TransitionTemp_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_TransitionTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TransitionTemp ()
      {
        return this->SimRefrigSysElem_TransitionTemp_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TransitionTemp (const SimRefrigSysElem_TransitionTemp_type& x)
      {
        this->SimRefrigSysElem_TransitionTemp_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TransitionTemp (const SimRefrigSysElem_TransitionTemp_optional& x)
      {
        this->SimRefrigSysElem_TransitionTemp_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_TranscriticalApproachTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TranscriticalApproachTemp () const
      {
        return this->SimRefrigSysElem_TranscriticalApproachTemp_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_TranscriticalApproachTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TranscriticalApproachTemp ()
      {
        return this->SimRefrigSysElem_TranscriticalApproachTemp_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TranscriticalApproachTemp (const SimRefrigSysElem_TranscriticalApproachTemp_type& x)
      {
        this->SimRefrigSysElem_TranscriticalApproachTemp_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_TranscriticalApproachTemp (const SimRefrigSysElem_TranscriticalApproachTemp_optional& x)
      {
        this->SimRefrigSysElem_TranscriticalApproachTemp_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_SubcriticalTempDifference_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_SubcriticalTempDifference () const
      {
        return this->SimRefrigSysElem_SubcriticalTempDifference_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_SubcriticalTempDifference_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_SubcriticalTempDifference ()
      {
        return this->SimRefrigSysElem_SubcriticalTempDifference_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_SubcriticalTempDifference (const SimRefrigSysElem_SubcriticalTempDifference_type& x)
      {
        this->SimRefrigSysElem_SubcriticalTempDifference_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_SubcriticalTempDifference (const SimRefrigSysElem_SubcriticalTempDifference_optional& x)
      {
        this->SimRefrigSysElem_SubcriticalTempDifference_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_MinCondensTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinCondensTemp () const
      {
        return this->SimRefrigSysElem_MinCondensTemp_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_MinCondensTemp_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinCondensTemp ()
      {
        return this->SimRefrigSysElem_MinCondensTemp_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinCondensTemp (const SimRefrigSysElem_MinCondensTemp_type& x)
      {
        this->SimRefrigSysElem_MinCondensTemp_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_MinCondensTemp (const SimRefrigSysElem_MinCondensTemp_optional& x)
      {
        this->SimRefrigSysElem_MinCondensTemp_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory () const
      {
        return this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory ()
      {
        return this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory (const SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_type& x)
      {
        this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory (const SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_optional& x)
      {
        this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory () const
      {
        return this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory ()
      {
        return this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory (const SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_type& x)
      {
        this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory (const SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_optional& x)
      {
        this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ = x;
      }

      const SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory () const
      {
        return this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_;
      }

      SimRefrigerationSystemElement_GasCooler::SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_optional& SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory ()
      {
        return this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_;
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory (const SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_type& x)
      {
        this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_.set (x);
      }

      void SimRefrigerationSystemElement_GasCooler::
      SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory (const SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_optional& x)
      {
        this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimRefrigerationSystemElement_GasCooler
      //

      SimRefrigerationSystemElement_GasCooler::
      SimRefrigerationSystemElement_GasCooler ()
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement (),
        SimRefrigSysElem_Name_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ (this),
        SimRefrigSysElem_GasCoolerFanSpeedControlType_ (this),
        SimRefrigSysElem_TransitionTemp_ (this),
        SimRefrigSysElem_TranscriticalApproachTemp_ (this),
        SimRefrigSysElem_SubcriticalTempDifference_ (this),
        SimRefrigSysElem_MinCondensTemp_ (this),
        SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ (this),
        SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ (this),
        SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ (this)
      {
      }

      SimRefrigerationSystemElement_GasCooler::
      SimRefrigerationSystemElement_GasCooler (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement (RefId),
        SimRefrigSysElem_Name_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ (this),
        SimRefrigSysElem_GasCoolerFanSpeedControlType_ (this),
        SimRefrigSysElem_TransitionTemp_ (this),
        SimRefrigSysElem_TranscriticalApproachTemp_ (this),
        SimRefrigSysElem_SubcriticalTempDifference_ (this),
        SimRefrigSysElem_MinCondensTemp_ (this),
        SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ (this),
        SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ (this),
        SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ (this)
      {
      }

      SimRefrigerationSystemElement_GasCooler::
      SimRefrigerationSystemElement_GasCooler (const SimRefrigerationSystemElement_GasCooler& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement (x, f, c),
        SimRefrigSysElem_Name_ (x.SimRefrigSysElem_Name_, f, this),
        SimRefrigSysElem_EndUseSubCat_ (x.SimRefrigSysElem_EndUseSubCat_, f, this),
        SimRefrigSysElem_RatedFanPwr_ (x.SimRefrigSysElem_RatedFanPwr_, f, this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (x.SimRefrigSysElem_MinFanAirFlowRatio_, f, this),
        SimRefrigSysElem_AirInNodeName_ (x.SimRefrigSysElem_AirInNodeName_, f, this),
        SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ (x.SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_, f, this),
        SimRefrigSysElem_GasCoolerFanSpeedControlType_ (x.SimRefrigSysElem_GasCoolerFanSpeedControlType_, f, this),
        SimRefrigSysElem_TransitionTemp_ (x.SimRefrigSysElem_TransitionTemp_, f, this),
        SimRefrigSysElem_TranscriticalApproachTemp_ (x.SimRefrigSysElem_TranscriticalApproachTemp_, f, this),
        SimRefrigSysElem_SubcriticalTempDifference_ (x.SimRefrigSysElem_SubcriticalTempDifference_, f, this),
        SimRefrigSysElem_MinCondensTemp_ (x.SimRefrigSysElem_MinCondensTemp_, f, this),
        SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ (x.SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_, f, this),
        SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ (x.SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_, f, this),
        SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ (x.SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_, f, this)
      {
      }

      SimRefrigerationSystemElement_GasCooler::
      SimRefrigerationSystemElement_GasCooler (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimRefrigerationSystemElement (e, f | ::xml_schema::flags::base, c),
        SimRefrigSysElem_Name_ (this),
        SimRefrigSysElem_EndUseSubCat_ (this),
        SimRefrigSysElem_RatedFanPwr_ (this),
        SimRefrigSysElem_MinFanAirFlowRatio_ (this),
        SimRefrigSysElem_AirInNodeName_ (this),
        SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ (this),
        SimRefrigSysElem_GasCoolerFanSpeedControlType_ (this),
        SimRefrigSysElem_TransitionTemp_ (this),
        SimRefrigSysElem_TranscriticalApproachTemp_ (this),
        SimRefrigSysElem_SubcriticalTempDifference_ (this),
        SimRefrigSysElem_MinCondensTemp_ (this),
        SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ (this),
        SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ (this),
        SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimRefrigerationSystemElement_GasCooler::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimRefrigerationSystemElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimRefrigSysElem_Name
          //
          if (n.name () == "SimRefrigSysElem_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_Name_type > r (
              SimRefrigSysElem_Name_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_Name_)
            {
              this->SimRefrigSysElem_Name_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_EndUseSubCat
          //
          if (n.name () == "SimRefrigSysElem_EndUseSubCat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > r (
              SimRefrigSysElem_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_EndUseSubCat_)
            {
              this->SimRefrigSysElem_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedFanPwr
          //
          if (n.name () == "SimRefrigSysElem_RatedFanPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_RatedFanPwr_)
            {
              this->SimRefrigSysElem_RatedFanPwr_.set (SimRefrigSysElem_RatedFanPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MinFanAirFlowRatio
          //
          if (n.name () == "SimRefrigSysElem_MinFanAirFlowRatio" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_MinFanAirFlowRatio_)
            {
              this->SimRefrigSysElem_MinFanAirFlowRatio_.set (SimRefrigSysElem_MinFanAirFlowRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_AirInNodeName
          //
          if (n.name () == "SimRefrigSysElem_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_AirInNodeName_type > r (
              SimRefrigSysElem_AirInNodeName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_AirInNodeName_)
            {
              this->SimRefrigSysElem_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_RatedTotHeatRejectionRateCurveName
          //
          if (n.name () == "SimRefrigSysElem_RatedTotHeatRejectionRateCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_type > r (
              SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_)
            {
              this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_GasCoolerFanSpeedControlType
          //
          if (n.name () == "SimRefrigSysElem_GasCoolerFanSpeedControlType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimRefrigSysElem_GasCoolerFanSpeedControlType_type > r (
              SimRefrigSysElem_GasCoolerFanSpeedControlType_traits::create (i, f, this));

            if (!this->SimRefrigSysElem_GasCoolerFanSpeedControlType_)
            {
              this->SimRefrigSysElem_GasCoolerFanSpeedControlType_.set (r);
              continue;
            }
          }

          // SimRefrigSysElem_TransitionTemp
          //
          if (n.name () == "SimRefrigSysElem_TransitionTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_TransitionTemp_)
            {
              this->SimRefrigSysElem_TransitionTemp_.set (SimRefrigSysElem_TransitionTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_TranscriticalApproachTemp
          //
          if (n.name () == "SimRefrigSysElem_TranscriticalApproachTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_TranscriticalApproachTemp_)
            {
              this->SimRefrigSysElem_TranscriticalApproachTemp_.set (SimRefrigSysElem_TranscriticalApproachTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_SubcriticalTempDifference
          //
          if (n.name () == "SimRefrigSysElem_SubcriticalTempDifference" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_SubcriticalTempDifference_)
            {
              this->SimRefrigSysElem_SubcriticalTempDifference_.set (SimRefrigSysElem_SubcriticalTempDifference_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_MinCondensTemp
          //
          if (n.name () == "SimRefrigSysElem_MinCondensTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_MinCondensTemp_)
            {
              this->SimRefrigSysElem_MinCondensTemp_.set (SimRefrigSysElem_MinCondensTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory
          //
          if (n.name () == "SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_)
            {
              this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_.set (SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory
          //
          if (n.name () == "SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_)
            {
              this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_.set (SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_traits::create (i, f, this));
              continue;
            }
          }

          // SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory
          //
          if (n.name () == "SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_)
            {
              this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_.set (SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimRefrigerationSystemElement_GasCooler* SimRefrigerationSystemElement_GasCooler::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimRefrigerationSystemElement_GasCooler (*this, f, c);
      }

      SimRefrigerationSystemElement_GasCooler& SimRefrigerationSystemElement_GasCooler::
      operator= (const SimRefrigerationSystemElement_GasCooler& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimRefrigerationSystemElement& > (*this) = x;
          this->SimRefrigSysElem_Name_ = x.SimRefrigSysElem_Name_;
          this->SimRefrigSysElem_EndUseSubCat_ = x.SimRefrigSysElem_EndUseSubCat_;
          this->SimRefrigSysElem_RatedFanPwr_ = x.SimRefrigSysElem_RatedFanPwr_;
          this->SimRefrigSysElem_MinFanAirFlowRatio_ = x.SimRefrigSysElem_MinFanAirFlowRatio_;
          this->SimRefrigSysElem_AirInNodeName_ = x.SimRefrigSysElem_AirInNodeName_;
          this->SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_ = x.SimRefrigSysElem_RatedTotHeatRejectionRateCurveName_;
          this->SimRefrigSysElem_GasCoolerFanSpeedControlType_ = x.SimRefrigSysElem_GasCoolerFanSpeedControlType_;
          this->SimRefrigSysElem_TransitionTemp_ = x.SimRefrigSysElem_TransitionTemp_;
          this->SimRefrigSysElem_TranscriticalApproachTemp_ = x.SimRefrigSysElem_TranscriticalApproachTemp_;
          this->SimRefrigSysElem_SubcriticalTempDifference_ = x.SimRefrigSysElem_SubcriticalTempDifference_;
          this->SimRefrigSysElem_MinCondensTemp_ = x.SimRefrigSysElem_MinCondensTemp_;
          this->SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_ = x.SimRefrigSysElem_GasCoolerRefrigerantOperatingChargeInventory_;
          this->SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_ = x.SimRefrigSysElem_GasCoolerReceiverRefrigerantInventory_;
          this->SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_ = x.SimRefrigSysElem_GasCoolerOutletPipingRefrigerantInventory_;
        }

        return *this;
      }

      SimRefrigerationSystemElement_GasCooler::
      ~SimRefrigerationSystemElement_GasCooler ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

