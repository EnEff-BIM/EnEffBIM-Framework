// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_FLUID_COOLER_EVAPORATIVE_TWO_SPEED_MX_W_HXX
#define SIM_FLOW_ENERGY_TRANSFER_FLUID_COOLER_EVAPORATIVE_TWO_SPEED_MX_W_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_fluidcooler.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_FluidCooler
      {
        public:
        // SimFlowEnergyTrans_SupWaterStoTankName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_SupWaterStoTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_SupWaterStoTankName_type > SimFlowEnergyTrans_SupWaterStoTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_SupWaterStoTankName_type, char > SimFlowEnergyTrans_SupWaterStoTankName_traits;

        const SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName () const;

        SimFlowEnergyTrans_SupWaterStoTankName_optional&
        SimFlowEnergyTrans_SupWaterStoTankName ();

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_type& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (const SimFlowEnergyTrans_SupWaterStoTankName_optional& x);

        void
        SimFlowEnergyTrans_SupWaterStoTankName (::std::auto_ptr< SimFlowEnergyTrans_SupWaterStoTankName_type > p);

        // SimFlowEnergyTrans_BlowdownConcentrationRatio
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_BlowdownConcentrationRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BlowdownConcentrationRatio_type > SimFlowEnergyTrans_BlowdownConcentrationRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BlowdownConcentrationRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_BlowdownConcentrationRatio_traits;

        const SimFlowEnergyTrans_BlowdownConcentrationRatio_optional&
        SimFlowEnergyTrans_BlowdownConcentrationRatio () const;

        SimFlowEnergyTrans_BlowdownConcentrationRatio_optional&
        SimFlowEnergyTrans_BlowdownConcentrationRatio ();

        void
        SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_type& x);

        void
        SimFlowEnergyTrans_BlowdownConcentrationRatio (const SimFlowEnergyTrans_BlowdownConcentrationRatio_optional& x);

        // SimFlowEnergyTrans_DesignSprayWaterFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_DesignSprayWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_DesignSprayWaterFlowRate_type > SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_DesignSprayWaterFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_DesignSprayWaterFlowRate_traits;

        const SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional&
        SimFlowEnergyTrans_DesignSprayWaterFlowRate () const;

        SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional&
        SimFlowEnergyTrans_DesignSprayWaterFlowRate ();

        void
        SimFlowEnergyTrans_DesignSprayWaterFlowRate (const SimFlowEnergyTrans_DesignSprayWaterFlowRate_type& x);

        void
        SimFlowEnergyTrans_DesignSprayWaterFlowRate (const SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional& x);

        // SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_type > SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_traits;

        const SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional&
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio () const;

        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional&
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio ();

        void
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio (const SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_type& x);

        void
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio (const SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional& x);

        // SimFlowEnergyTrans_DesignEnterAirWetbulbTemp
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type > SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_traits;

        const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional&
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp () const;

        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional&
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp ();

        void
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_type& x);

        void
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp (const SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional& x);

        // SimFlowEnergyTrans_EvapLossMode
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_EvapLossMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapLossMode_type > SimFlowEnergyTrans_EvapLossMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapLossMode_type, char > SimFlowEnergyTrans_EvapLossMode_traits;

        const SimFlowEnergyTrans_EvapLossMode_optional&
        SimFlowEnergyTrans_EvapLossMode () const;

        SimFlowEnergyTrans_EvapLossMode_optional&
        SimFlowEnergyTrans_EvapLossMode ();

        void
        SimFlowEnergyTrans_EvapLossMode (const SimFlowEnergyTrans_EvapLossMode_type& x);

        void
        SimFlowEnergyTrans_EvapLossMode (const SimFlowEnergyTrans_EvapLossMode_optional& x);

        void
        SimFlowEnergyTrans_EvapLossMode (::std::auto_ptr< SimFlowEnergyTrans_EvapLossMode_type > p);

        // SimFlowEnergyTrans_EvapLossFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_EvapLossFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EvapLossFactor_type > SimFlowEnergyTrans_EvapLossFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EvapLossFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_EvapLossFactor_traits;

        const SimFlowEnergyTrans_EvapLossFactor_optional&
        SimFlowEnergyTrans_EvapLossFactor () const;

        SimFlowEnergyTrans_EvapLossFactor_optional&
        SimFlowEnergyTrans_EvapLossFactor ();

        void
        SimFlowEnergyTrans_EvapLossFactor (const SimFlowEnergyTrans_EvapLossFactor_type& x);

        void
        SimFlowEnergyTrans_EvapLossFactor (const SimFlowEnergyTrans_EvapLossFactor_optional& x);

        // SimFlowEnergyTrans_DriftLossPercent
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_DriftLossPercent_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_DriftLossPercent_type > SimFlowEnergyTrans_DriftLossPercent_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_DriftLossPercent_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_DriftLossPercent_traits;

        const SimFlowEnergyTrans_DriftLossPercent_optional&
        SimFlowEnergyTrans_DriftLossPercent () const;

        SimFlowEnergyTrans_DriftLossPercent_optional&
        SimFlowEnergyTrans_DriftLossPercent ();

        void
        SimFlowEnergyTrans_DriftLossPercent (const SimFlowEnergyTrans_DriftLossPercent_type& x);

        void
        SimFlowEnergyTrans_DriftLossPercent (const SimFlowEnergyTrans_DriftLossPercent_optional& x);

        // SimFlowEnergyTrans_BlowdownCalcMode
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_BlowdownCalcMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BlowdownCalcMode_type > SimFlowEnergyTrans_BlowdownCalcMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BlowdownCalcMode_type, char > SimFlowEnergyTrans_BlowdownCalcMode_traits;

        const SimFlowEnergyTrans_BlowdownCalcMode_optional&
        SimFlowEnergyTrans_BlowdownCalcMode () const;

        SimFlowEnergyTrans_BlowdownCalcMode_optional&
        SimFlowEnergyTrans_BlowdownCalcMode ();

        void
        SimFlowEnergyTrans_BlowdownCalcMode (const SimFlowEnergyTrans_BlowdownCalcMode_type& x);

        void
        SimFlowEnergyTrans_BlowdownCalcMode (const SimFlowEnergyTrans_BlowdownCalcMode_optional& x);

        void
        SimFlowEnergyTrans_BlowdownCalcMode (::std::auto_ptr< SimFlowEnergyTrans_BlowdownCalcMode_type > p);

        // SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type > SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type, char > SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_traits;

        const SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional&
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName () const;

        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional&
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName ();

        void
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (const SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type& x);

        void
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (const SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional& x);

        void
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName (::std::auto_ptr< SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_type > p);

        // SimFlowEnergyTrans_HighFanSpeedAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighFanSpeedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighFanSpeedAirFlowRate_type > SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighFanSpeedAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighFanSpeedAirFlowRate_traits;

        const SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate () const;

        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate ();

        void
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate (const SimFlowEnergyTrans_HighFanSpeedAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate (const SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional& x);

        // SimFlowEnergyTrans_HighFanSpeedFanPower
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighFanSpeedFanPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighFanSpeedFanPower_type > SimFlowEnergyTrans_HighFanSpeedFanPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighFanSpeedFanPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighFanSpeedFanPower_traits;

        const SimFlowEnergyTrans_HighFanSpeedFanPower_optional&
        SimFlowEnergyTrans_HighFanSpeedFanPower () const;

        SimFlowEnergyTrans_HighFanSpeedFanPower_optional&
        SimFlowEnergyTrans_HighFanSpeedFanPower ();

        void
        SimFlowEnergyTrans_HighFanSpeedFanPower (const SimFlowEnergyTrans_HighFanSpeedFanPower_type& x);

        void
        SimFlowEnergyTrans_HighFanSpeedFanPower (const SimFlowEnergyTrans_HighFanSpeedFanPower_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedAirFlowRate_type > SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedAirFlowRate_traits;

        const SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate () const;

        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional&
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate ();

        void
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate (const SimFlowEnergyTrans_LowFanSpeedAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate (const SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_type > SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_traits;

        const SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor () const;

        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor ();

        void
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor (const SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor (const SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedFanPower
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedFanPower_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedFanPower_type > SimFlowEnergyTrans_LowFanSpeedFanPower_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedFanPower_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedFanPower_traits;

        const SimFlowEnergyTrans_LowFanSpeedFanPower_optional&
        SimFlowEnergyTrans_LowFanSpeedFanPower () const;

        SimFlowEnergyTrans_LowFanSpeedFanPower_optional&
        SimFlowEnergyTrans_LowFanSpeedFanPower ();

        void
        SimFlowEnergyTrans_LowFanSpeedFanPower (const SimFlowEnergyTrans_LowFanSpeedFanPower_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedFanPower (const SimFlowEnergyTrans_LowFanSpeedFanPower_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_type > SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_traits;

        const SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor () const;

        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor ();

        void
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor (const SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor (const SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional& x);

        // SimFlowEnergyTrans_HighSpeedStandardDesignCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedStandardDesignCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedStandardDesignCap_type > SimFlowEnergyTrans_HighSpeedStandardDesignCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedStandardDesignCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedStandardDesignCap_traits;

        const SimFlowEnergyTrans_HighSpeedStandardDesignCap_optional&
        SimFlowEnergyTrans_HighSpeedStandardDesignCap () const;

        SimFlowEnergyTrans_HighSpeedStandardDesignCap_optional&
        SimFlowEnergyTrans_HighSpeedStandardDesignCap ();

        void
        SimFlowEnergyTrans_HighSpeedStandardDesignCap (const SimFlowEnergyTrans_HighSpeedStandardDesignCap_type& x);

        void
        SimFlowEnergyTrans_HighSpeedStandardDesignCap (const SimFlowEnergyTrans_HighSpeedStandardDesignCap_optional& x);

        // SimFlowEnergyTrans_LowSpeedStandardDesignCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedStandardDesignCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedStandardDesignCap_type > SimFlowEnergyTrans_LowSpeedStandardDesignCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedStandardDesignCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedStandardDesignCap_traits;

        const SimFlowEnergyTrans_LowSpeedStandardDesignCap_optional&
        SimFlowEnergyTrans_LowSpeedStandardDesignCap () const;

        SimFlowEnergyTrans_LowSpeedStandardDesignCap_optional&
        SimFlowEnergyTrans_LowSpeedStandardDesignCap ();

        void
        SimFlowEnergyTrans_LowSpeedStandardDesignCap (const SimFlowEnergyTrans_LowSpeedStandardDesignCap_type& x);

        void
        SimFlowEnergyTrans_LowSpeedStandardDesignCap (const SimFlowEnergyTrans_LowSpeedStandardDesignCap_optional& x);

        // SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_type > SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_traits;

        const SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_optional&
        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor () const;

        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_optional&
        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor ();

        void
        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor (const SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_type& x);

        void
        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor (const SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_optional& x);

        // SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_type > SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_traits;

        const SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional&
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue () const;

        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional&
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue ();

        void
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_type& x);

        void
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_type > SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_traits;

        const SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional&
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue () const;

        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional&
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue ();

        void
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue (const SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional& x);

        // SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_type > SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_traits;

        const SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor () const;

        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional&
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor ();

        void
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor (const SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_type& x);

        void
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor (const SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional& x);

        // SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_type > SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_traits;

        const SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_optional&
        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap () const;

        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_optional&
        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap ();

        void
        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap (const SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_type& x);

        void
        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap (const SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_optional& x);

        // SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_type > SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_traits;

        const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_optional&
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap () const;

        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_optional&
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap ();

        void
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap (const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_type& x);

        void
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap (const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_optional& x);

        // SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_type > SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_traits;

        const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_optional&
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor () const;

        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_optional&
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor ();

        void
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor (const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_type& x);

        void
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor (const SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_optional& x);

        // SimFlowEnergyTrans_HighSpeedSizingFactor
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_HighSpeedSizingFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_HighSpeedSizingFactor_type > SimFlowEnergyTrans_HighSpeedSizingFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_HighSpeedSizingFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_HighSpeedSizingFactor_traits;

        const SimFlowEnergyTrans_HighSpeedSizingFactor_optional&
        SimFlowEnergyTrans_HighSpeedSizingFactor () const;

        SimFlowEnergyTrans_HighSpeedSizingFactor_optional&
        SimFlowEnergyTrans_HighSpeedSizingFactor ();

        void
        SimFlowEnergyTrans_HighSpeedSizingFactor (const SimFlowEnergyTrans_HighSpeedSizingFactor_type& x);

        void
        SimFlowEnergyTrans_HighSpeedSizingFactor (const SimFlowEnergyTrans_HighSpeedSizingFactor_optional& x);

        // Constructors.
        //
        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW ();

        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW (const RefId_type&);

        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW (const ::xercesc::DOMElement& e,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW (const SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW& x,
                                                                   ::xml_schema::flags f = 0,
                                                                   ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW&
        operator= (const SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW& x);

        virtual 
        ~SimFlowEnergyTransfer_FluidCooler_EvaporativeTwoSpeed_MxW ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_SupWaterStoTankName_optional SimFlowEnergyTrans_SupWaterStoTankName_;
        SimFlowEnergyTrans_BlowdownConcentrationRatio_optional SimFlowEnergyTrans_BlowdownConcentrationRatio_;
        SimFlowEnergyTrans_DesignSprayWaterFlowRate_optional SimFlowEnergyTrans_DesignSprayWaterFlowRate_;
        SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_optional SimFlowEnergyTrans_HeatRejectionCapandNomCapSizingRatio_;
        SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_optional SimFlowEnergyTrans_DesignEnterAirWetbulbTemp_;
        SimFlowEnergyTrans_EvapLossMode_optional SimFlowEnergyTrans_EvapLossMode_;
        SimFlowEnergyTrans_EvapLossFactor_optional SimFlowEnergyTrans_EvapLossFactor_;
        SimFlowEnergyTrans_DriftLossPercent_optional SimFlowEnergyTrans_DriftLossPercent_;
        SimFlowEnergyTrans_BlowdownCalcMode_optional SimFlowEnergyTrans_BlowdownCalcMode_;
        SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_optional SimFlowEnergyTrans_BlowdownMakeupWaterUsageSchedName_;
        SimFlowEnergyTrans_HighFanSpeedAirFlowRate_optional SimFlowEnergyTrans_HighFanSpeedAirFlowRate_;
        SimFlowEnergyTrans_HighFanSpeedFanPower_optional SimFlowEnergyTrans_HighFanSpeedFanPower_;
        SimFlowEnergyTrans_LowFanSpeedAirFlowRate_optional SimFlowEnergyTrans_LowFanSpeedAirFlowRate_;
        SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_optional SimFlowEnergyTrans_LowFanSpeedAirFlowRateSizingFactor_;
        SimFlowEnergyTrans_LowFanSpeedFanPower_optional SimFlowEnergyTrans_LowFanSpeedFanPower_;
        SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_optional SimFlowEnergyTrans_LowFanSpeedFanPowerSizingFactor_;
        SimFlowEnergyTrans_HighSpeedStandardDesignCap_optional SimFlowEnergyTrans_HighSpeedStandardDesignCap_;
        SimFlowEnergyTrans_LowSpeedStandardDesignCap_optional SimFlowEnergyTrans_LowSpeedStandardDesignCap_;
        SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_optional SimFlowEnergyTrans_LowSpeedStandardCapSizingFactor_;
        SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_optional SimFlowEnergyTrans_HighFanSpeedU_factorTimesAreaValue_;
        SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_optional SimFlowEnergyTrans_LowFanSpeedU_factorTimesAreaValue_;
        SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_optional SimFlowEnergyTrans_LowFanSpeedU_FactorTimesAreaSizingFactor_;
        SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_optional SimFlowEnergyTrans_HighSpeedUserSpecifiedDesignCap_;
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_optional SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCap_;
        SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_optional SimFlowEnergyTrans_LowSpeedUserSpecifiedDesignCapSizingFactor_;
        SimFlowEnergyTrans_HighSpeedSizingFactor_optional SimFlowEnergyTrans_HighSpeedSizingFactor_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_FLUID_COOLER_EVAPORATIVE_TWO_SPEED_MX_W_HXX
