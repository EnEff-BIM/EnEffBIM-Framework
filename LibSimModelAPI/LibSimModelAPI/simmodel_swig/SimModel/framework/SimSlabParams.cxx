// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSlabParams.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSlabParams
      // 

      const SimSlabParams::DimensionX_optional& SimSlabParams::
      DimensionX () const
      {
        return this->DimensionX_;
      }

      SimSlabParams::DimensionX_optional& SimSlabParams::
      DimensionX ()
      {
        return this->DimensionX_;
      }

      void SimSlabParams::
      DimensionX (const DimensionX_type& x)
      {
        this->DimensionX_.set (x);
      }

      void SimSlabParams::
      DimensionX (const DimensionX_optional& x)
      {
        this->DimensionX_ = x;
      }

      const SimSlabParams::DimensionY_optional& SimSlabParams::
      DimensionY () const
      {
        return this->DimensionY_;
      }

      SimSlabParams::DimensionY_optional& SimSlabParams::
      DimensionY ()
      {
        return this->DimensionY_;
      }

      void SimSlabParams::
      DimensionY (const DimensionY_type& x)
      {
        this->DimensionY_.set (x);
      }

      void SimSlabParams::
      DimensionY (const DimensionY_optional& x)
      {
        this->DimensionY_ = x;
      }

      const SimSlabParams::DimensionZ_optional& SimSlabParams::
      DimensionZ () const
      {
        return this->DimensionZ_;
      }

      SimSlabParams::DimensionZ_optional& SimSlabParams::
      DimensionZ ()
      {
        return this->DimensionZ_;
      }

      void SimSlabParams::
      DimensionZ (const DimensionZ_type& x)
      {
        this->DimensionZ_.set (x);
      }

      void SimSlabParams::
      DimensionZ (const DimensionZ_optional& x)
      {
        this->DimensionZ_ = x;
      }

      const SimSlabParams::SlabElevation_optional& SimSlabParams::
      SlabElevation () const
      {
        return this->SlabElevation_;
      }

      SimSlabParams::SlabElevation_optional& SimSlabParams::
      SlabElevation ()
      {
        return this->SlabElevation_;
      }

      void SimSlabParams::
      SlabElevation (const SlabElevation_type& x)
      {
        this->SlabElevation_.set (x);
      }

      void SimSlabParams::
      SlabElevation (const SlabElevation_optional& x)
      {
        this->SlabElevation_ = x;
      }

      const SimSlabParams::SlabThickness_optional& SimSlabParams::
      SlabThickness () const
      {
        return this->SlabThickness_;
      }

      SimSlabParams::SlabThickness_optional& SimSlabParams::
      SlabThickness ()
      {
        return this->SlabThickness_;
      }

      void SimSlabParams::
      SlabThickness (const SlabThickness_type& x)
      {
        this->SlabThickness_.set (x);
      }

      void SimSlabParams::
      SlabThickness (const SlabThickness_optional& x)
      {
        this->SlabThickness_ = x;
      }

      const SimSlabParams::ProfilePath_optional& SimSlabParams::
      ProfilePath () const
      {
        return this->ProfilePath_;
      }

      SimSlabParams::ProfilePath_optional& SimSlabParams::
      ProfilePath ()
      {
        return this->ProfilePath_;
      }

      void SimSlabParams::
      ProfilePath (const ProfilePath_type& x)
      {
        this->ProfilePath_.set (x);
      }

      void SimSlabParams::
      ProfilePath (const ProfilePath_optional& x)
      {
        this->ProfilePath_ = x;
      }

      void SimSlabParams::
      ProfilePath (::std::auto_ptr< ProfilePath_type > x)
      {
        this->ProfilePath_.set (x);
      }

      const SimSlabParams::VoidProfilePaths_optional& SimSlabParams::
      VoidProfilePaths () const
      {
        return this->VoidProfilePaths_;
      }

      SimSlabParams::VoidProfilePaths_optional& SimSlabParams::
      VoidProfilePaths ()
      {
        return this->VoidProfilePaths_;
      }

      void SimSlabParams::
      VoidProfilePaths (const VoidProfilePaths_type& x)
      {
        this->VoidProfilePaths_.set (x);
      }

      void SimSlabParams::
      VoidProfilePaths (const VoidProfilePaths_optional& x)
      {
        this->VoidProfilePaths_ = x;
      }

      void SimSlabParams::
      VoidProfilePaths (::std::auto_ptr< VoidProfilePaths_type > x)
      {
        this->VoidProfilePaths_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimSlabParams
      //

      SimSlabParams::
      SimSlabParams ()
      : ::schema::simxml::SimModelCore::SimBldgModelParams (),
        DimensionX_ (this),
        DimensionY_ (this),
        DimensionZ_ (this),
        SlabElevation_ (this),
        SlabThickness_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
      }

      SimSlabParams::
      SimSlabParams (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (RefId),
        DimensionX_ (this),
        DimensionY_ (this),
        DimensionZ_ (this),
        SlabElevation_ (this),
        SlabThickness_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
      }

      SimSlabParams::
      SimSlabParams (const SimSlabParams& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (x, f, c),
        DimensionX_ (x.DimensionX_, f, this),
        DimensionY_ (x.DimensionY_, f, this),
        DimensionZ_ (x.DimensionZ_, f, this),
        SlabElevation_ (x.SlabElevation_, f, this),
        SlabThickness_ (x.SlabThickness_, f, this),
        ProfilePath_ (x.ProfilePath_, f, this),
        VoidProfilePaths_ (x.VoidProfilePaths_, f, this)
      {
      }

      SimSlabParams::
      SimSlabParams (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        DimensionX_ (this),
        DimensionY_ (this),
        DimensionZ_ (this),
        SlabElevation_ (this),
        SlabThickness_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSlabParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DimensionX
          //
          if (n.name () == "DimensionX" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DimensionX_)
            {
              this->DimensionX_.set (DimensionX_traits::create (i, f, this));
              continue;
            }
          }

          // DimensionY
          //
          if (n.name () == "DimensionY" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DimensionY_)
            {
              this->DimensionY_.set (DimensionY_traits::create (i, f, this));
              continue;
            }
          }

          // DimensionZ
          //
          if (n.name () == "DimensionZ" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->DimensionZ_)
            {
              this->DimensionZ_.set (DimensionZ_traits::create (i, f, this));
              continue;
            }
          }

          // SlabElevation
          //
          if (n.name () == "SlabElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SlabElevation_)
            {
              this->SlabElevation_.set (SlabElevation_traits::create (i, f, this));
              continue;
            }
          }

          // SlabThickness
          //
          if (n.name () == "SlabThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SlabThickness_)
            {
              this->SlabThickness_.set (SlabThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ProfilePath
          //
          if (n.name () == "ProfilePath" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< ProfilePath_type > r (
              ProfilePath_traits::create (i, f, this));

            if (!this->ProfilePath_)
            {
              this->ProfilePath_.set (r);
              continue;
            }
          }

          // VoidProfilePaths
          //
          if (n.name () == "VoidProfilePaths" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< VoidProfilePaths_type > r (
              VoidProfilePaths_traits::create (i, f, this));

            if (!this->VoidProfilePaths_)
            {
              this->VoidProfilePaths_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSlabParams* SimSlabParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSlabParams (*this, f, c);
      }

      SimSlabParams& SimSlabParams::
      operator= (const SimSlabParams& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBldgModelParams& > (*this) = x;
          this->DimensionX_ = x.DimensionX_;
          this->DimensionY_ = x.DimensionY_;
          this->DimensionZ_ = x.DimensionZ_;
          this->SlabElevation_ = x.SlabElevation_;
          this->SlabThickness_ = x.SlabThickness_;
          this->ProfilePath_ = x.ProfilePath_;
          this->VoidProfilePaths_ = x.VoidProfilePaths_;
        }

        return *this;
      }

      SimSlabParams::
      ~SimSlabParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

