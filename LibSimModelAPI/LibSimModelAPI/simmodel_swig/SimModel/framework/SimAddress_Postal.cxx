// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimAddress_Postal.hxx"

#include "addresslines.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimAddress_Postal
      // 

      const SimAddress_Postal::InternalLocation_optional& SimAddress_Postal::
      InternalLocation () const
      {
        return this->InternalLocation_;
      }

      SimAddress_Postal::InternalLocation_optional& SimAddress_Postal::
      InternalLocation ()
      {
        return this->InternalLocation_;
      }

      void SimAddress_Postal::
      InternalLocation (const InternalLocation_type& x)
      {
        this->InternalLocation_.set (x);
      }

      void SimAddress_Postal::
      InternalLocation (const InternalLocation_optional& x)
      {
        this->InternalLocation_ = x;
      }

      void SimAddress_Postal::
      InternalLocation (::std::auto_ptr< InternalLocation_type > x)
      {
        this->InternalLocation_.set (x);
      }

      const SimAddress_Postal::AddressLines_optional& SimAddress_Postal::
      AddressLines () const
      {
        return this->AddressLines_;
      }

      SimAddress_Postal::AddressLines_optional& SimAddress_Postal::
      AddressLines ()
      {
        return this->AddressLines_;
      }

      void SimAddress_Postal::
      AddressLines (const AddressLines_type& x)
      {
        this->AddressLines_.set (x);
      }

      void SimAddress_Postal::
      AddressLines (const AddressLines_optional& x)
      {
        this->AddressLines_ = x;
      }

      void SimAddress_Postal::
      AddressLines (::std::auto_ptr< AddressLines_type > x)
      {
        this->AddressLines_.set (x);
      }

      const SimAddress_Postal::PostalBox_optional& SimAddress_Postal::
      PostalBox () const
      {
        return this->PostalBox_;
      }

      SimAddress_Postal::PostalBox_optional& SimAddress_Postal::
      PostalBox ()
      {
        return this->PostalBox_;
      }

      void SimAddress_Postal::
      PostalBox (const PostalBox_type& x)
      {
        this->PostalBox_.set (x);
      }

      void SimAddress_Postal::
      PostalBox (const PostalBox_optional& x)
      {
        this->PostalBox_ = x;
      }

      void SimAddress_Postal::
      PostalBox (::std::auto_ptr< PostalBox_type > x)
      {
        this->PostalBox_.set (x);
      }

      const SimAddress_Postal::Town_optional& SimAddress_Postal::
      Town () const
      {
        return this->Town_;
      }

      SimAddress_Postal::Town_optional& SimAddress_Postal::
      Town ()
      {
        return this->Town_;
      }

      void SimAddress_Postal::
      Town (const Town_type& x)
      {
        this->Town_.set (x);
      }

      void SimAddress_Postal::
      Town (const Town_optional& x)
      {
        this->Town_ = x;
      }

      void SimAddress_Postal::
      Town (::std::auto_ptr< Town_type > x)
      {
        this->Town_.set (x);
      }

      const SimAddress_Postal::Region_optional& SimAddress_Postal::
      Region () const
      {
        return this->Region_;
      }

      SimAddress_Postal::Region_optional& SimAddress_Postal::
      Region ()
      {
        return this->Region_;
      }

      void SimAddress_Postal::
      Region (const Region_type& x)
      {
        this->Region_.set (x);
      }

      void SimAddress_Postal::
      Region (const Region_optional& x)
      {
        this->Region_ = x;
      }

      void SimAddress_Postal::
      Region (::std::auto_ptr< Region_type > x)
      {
        this->Region_.set (x);
      }

      const SimAddress_Postal::PostalCode_optional& SimAddress_Postal::
      PostalCode () const
      {
        return this->PostalCode_;
      }

      SimAddress_Postal::PostalCode_optional& SimAddress_Postal::
      PostalCode ()
      {
        return this->PostalCode_;
      }

      void SimAddress_Postal::
      PostalCode (const PostalCode_type& x)
      {
        this->PostalCode_.set (x);
      }

      void SimAddress_Postal::
      PostalCode (const PostalCode_optional& x)
      {
        this->PostalCode_ = x;
      }

      void SimAddress_Postal::
      PostalCode (::std::auto_ptr< PostalCode_type > x)
      {
        this->PostalCode_.set (x);
      }

      const SimAddress_Postal::Country_optional& SimAddress_Postal::
      Country () const
      {
        return this->Country_;
      }

      SimAddress_Postal::Country_optional& SimAddress_Postal::
      Country ()
      {
        return this->Country_;
      }

      void SimAddress_Postal::
      Country (const Country_type& x)
      {
        this->Country_.set (x);
      }

      void SimAddress_Postal::
      Country (const Country_optional& x)
      {
        this->Country_ = x;
      }

      void SimAddress_Postal::
      Country (::std::auto_ptr< Country_type > x)
      {
        this->Country_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimAddress_Postal
      //

      SimAddress_Postal::
      SimAddress_Postal ()
      : ::schema::simxml::ResourcesGeneral::SimAddress (),
        InternalLocation_ (this),
        AddressLines_ (this),
        PostalBox_ (this),
        Town_ (this),
        Region_ (this),
        PostalCode_ (this),
        Country_ (this)
      {
      }

      SimAddress_Postal::
      SimAddress_Postal (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimAddress (RefId),
        InternalLocation_ (this),
        AddressLines_ (this),
        PostalBox_ (this),
        Town_ (this),
        Region_ (this),
        PostalCode_ (this),
        Country_ (this)
      {
      }

      SimAddress_Postal::
      SimAddress_Postal (const SimAddress_Postal& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimAddress (x, f, c),
        InternalLocation_ (x.InternalLocation_, f, this),
        AddressLines_ (x.AddressLines_, f, this),
        PostalBox_ (x.PostalBox_, f, this),
        Town_ (x.Town_, f, this),
        Region_ (x.Region_, f, this),
        PostalCode_ (x.PostalCode_, f, this),
        Country_ (x.Country_, f, this)
      {
      }

      SimAddress_Postal::
      SimAddress_Postal (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimAddress (e, f | ::xml_schema::flags::base, c),
        InternalLocation_ (this),
        AddressLines_ (this),
        PostalBox_ (this),
        Town_ (this),
        Region_ (this),
        PostalCode_ (this),
        Country_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimAddress_Postal::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimAddress::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // InternalLocation
          //
          if (n.name () == "InternalLocation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< InternalLocation_type > r (
              InternalLocation_traits::create (i, f, this));

            if (!this->InternalLocation_)
            {
              this->InternalLocation_.set (r);
              continue;
            }
          }

          // AddressLines
          //
          if (n.name () == "AddressLines" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< AddressLines_type > r (
              AddressLines_traits::create (i, f, this));

            if (!this->AddressLines_)
            {
              this->AddressLines_.set (r);
              continue;
            }
          }

          // PostalBox
          //
          if (n.name () == "PostalBox" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PostalBox_type > r (
              PostalBox_traits::create (i, f, this));

            if (!this->PostalBox_)
            {
              this->PostalBox_.set (r);
              continue;
            }
          }

          // Town
          //
          if (n.name () == "Town" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Town_type > r (
              Town_traits::create (i, f, this));

            if (!this->Town_)
            {
              this->Town_.set (r);
              continue;
            }
          }

          // Region
          //
          if (n.name () == "Region" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Region_type > r (
              Region_traits::create (i, f, this));

            if (!this->Region_)
            {
              this->Region_.set (r);
              continue;
            }
          }

          // PostalCode
          //
          if (n.name () == "PostalCode" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< PostalCode_type > r (
              PostalCode_traits::create (i, f, this));

            if (!this->PostalCode_)
            {
              this->PostalCode_.set (r);
              continue;
            }
          }

          // Country
          //
          if (n.name () == "Country" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Country_type > r (
              Country_traits::create (i, f, this));

            if (!this->Country_)
            {
              this->Country_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimAddress_Postal* SimAddress_Postal::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimAddress_Postal (*this, f, c);
      }

      SimAddress_Postal& SimAddress_Postal::
      operator= (const SimAddress_Postal& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimAddress& > (*this) = x;
          this->InternalLocation_ = x.InternalLocation_;
          this->AddressLines_ = x.AddressLines_;
          this->PostalBox_ = x.PostalBox_;
          this->Town_ = x.Town_;
          this->Region_ = x.Region_;
          this->PostalCode_ = x.PostalCode_;
          this->Country_ = x.Country_;
        }

        return *this;
      }

      SimAddress_Postal::
      ~SimAddress_Postal ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

