// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTimeSeriesSchedule_Limits.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTimeSeriesSchedule_Limits
      // 

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_Name_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_Name () const
      {
        return this->SimTimeSeriesSched_Name_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_Name_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_Name ()
      {
        return this->SimTimeSeriesSched_Name_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_Name (const SimTimeSeriesSched_Name_type& x)
      {
        this->SimTimeSeriesSched_Name_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_Name (const SimTimeSeriesSched_Name_optional& x)
      {
        this->SimTimeSeriesSched_Name_ = x;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_Name (::std::auto_ptr< SimTimeSeriesSched_Name_type > x)
      {
        this->SimTimeSeriesSched_Name_.set (x);
      }

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_LowLimitVal_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_LowLimitVal () const
      {
        return this->SimTimeSeriesSched_LowLimitVal_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_LowLimitVal_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_LowLimitVal ()
      {
        return this->SimTimeSeriesSched_LowLimitVal_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_LowLimitVal (const SimTimeSeriesSched_LowLimitVal_type& x)
      {
        this->SimTimeSeriesSched_LowLimitVal_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_LowLimitVal (const SimTimeSeriesSched_LowLimitVal_optional& x)
      {
        this->SimTimeSeriesSched_LowLimitVal_ = x;
      }

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_UpLimitVal_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UpLimitVal () const
      {
        return this->SimTimeSeriesSched_UpLimitVal_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_UpLimitVal_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UpLimitVal ()
      {
        return this->SimTimeSeriesSched_UpLimitVal_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UpLimitVal (const SimTimeSeriesSched_UpLimitVal_type& x)
      {
        this->SimTimeSeriesSched_UpLimitVal_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UpLimitVal (const SimTimeSeriesSched_UpLimitVal_optional& x)
      {
        this->SimTimeSeriesSched_UpLimitVal_ = x;
      }

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_NumericType_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_NumericType () const
      {
        return this->SimTimeSeriesSched_NumericType_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_NumericType_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_NumericType ()
      {
        return this->SimTimeSeriesSched_NumericType_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_NumericType (const SimTimeSeriesSched_NumericType_type& x)
      {
        this->SimTimeSeriesSched_NumericType_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_NumericType (const SimTimeSeriesSched_NumericType_optional& x)
      {
        this->SimTimeSeriesSched_NumericType_ = x;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_NumericType (::std::auto_ptr< SimTimeSeriesSched_NumericType_type > x)
      {
        this->SimTimeSeriesSched_NumericType_.set (x);
      }

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_UnitType_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UnitType () const
      {
        return this->SimTimeSeriesSched_UnitType_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_UnitType_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UnitType ()
      {
        return this->SimTimeSeriesSched_UnitType_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UnitType (const SimTimeSeriesSched_UnitType_type& x)
      {
        this->SimTimeSeriesSched_UnitType_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UnitType (const SimTimeSeriesSched_UnitType_optional& x)
      {
        this->SimTimeSeriesSched_UnitType_ = x;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_UnitType (::std::auto_ptr< SimTimeSeriesSched_UnitType_type > x)
      {
        this->SimTimeSeriesSched_UnitType_.set (x);
      }

      const SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_ValueInterval_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_ValueInterval () const
      {
        return this->SimTimeSeriesSched_ValueInterval_;
      }

      SimTimeSeriesSchedule_Limits::SimTimeSeriesSched_ValueInterval_optional& SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_ValueInterval ()
      {
        return this->SimTimeSeriesSched_ValueInterval_;
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_ValueInterval (const SimTimeSeriesSched_ValueInterval_type& x)
      {
        this->SimTimeSeriesSched_ValueInterval_.set (x);
      }

      void SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSched_ValueInterval (const SimTimeSeriesSched_ValueInterval_optional& x)
      {
        this->SimTimeSeriesSched_ValueInterval_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTimeSeriesSchedule_Limits
      //

      SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSchedule_Limits ()
      : ::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule (),
        SimTimeSeriesSched_Name_ (this),
        SimTimeSeriesSched_LowLimitVal_ (this),
        SimTimeSeriesSched_UpLimitVal_ (this),
        SimTimeSeriesSched_NumericType_ (this),
        SimTimeSeriesSched_UnitType_ (this),
        SimTimeSeriesSched_ValueInterval_ (this)
      {
      }

      SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSchedule_Limits (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule (RefId),
        SimTimeSeriesSched_Name_ (this),
        SimTimeSeriesSched_LowLimitVal_ (this),
        SimTimeSeriesSched_UpLimitVal_ (this),
        SimTimeSeriesSched_NumericType_ (this),
        SimTimeSeriesSched_UnitType_ (this),
        SimTimeSeriesSched_ValueInterval_ (this)
      {
      }

      SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSchedule_Limits (const SimTimeSeriesSchedule_Limits& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule (x, f, c),
        SimTimeSeriesSched_Name_ (x.SimTimeSeriesSched_Name_, f, this),
        SimTimeSeriesSched_LowLimitVal_ (x.SimTimeSeriesSched_LowLimitVal_, f, this),
        SimTimeSeriesSched_UpLimitVal_ (x.SimTimeSeriesSched_UpLimitVal_, f, this),
        SimTimeSeriesSched_NumericType_ (x.SimTimeSeriesSched_NumericType_, f, this),
        SimTimeSeriesSched_UnitType_ (x.SimTimeSeriesSched_UnitType_, f, this),
        SimTimeSeriesSched_ValueInterval_ (x.SimTimeSeriesSched_ValueInterval_, f, this)
      {
      }

      SimTimeSeriesSchedule_Limits::
      SimTimeSeriesSchedule_Limits (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule (e, f | ::xml_schema::flags::base, c),
        SimTimeSeriesSched_Name_ (this),
        SimTimeSeriesSched_LowLimitVal_ (this),
        SimTimeSeriesSched_UpLimitVal_ (this),
        SimTimeSeriesSched_NumericType_ (this),
        SimTimeSeriesSched_UnitType_ (this),
        SimTimeSeriesSched_ValueInterval_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTimeSeriesSchedule_Limits::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimTimeSeriesSched_Name
          //
          if (n.name () == "SimTimeSeriesSched_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimTimeSeriesSched_Name_type > r (
              SimTimeSeriesSched_Name_traits::create (i, f, this));

            if (!this->SimTimeSeriesSched_Name_)
            {
              this->SimTimeSeriesSched_Name_.set (r);
              continue;
            }
          }

          // SimTimeSeriesSched_LowLimitVal
          //
          if (n.name () == "SimTimeSeriesSched_LowLimitVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimTimeSeriesSched_LowLimitVal_)
            {
              this->SimTimeSeriesSched_LowLimitVal_.set (SimTimeSeriesSched_LowLimitVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimTimeSeriesSched_UpLimitVal
          //
          if (n.name () == "SimTimeSeriesSched_UpLimitVal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimTimeSeriesSched_UpLimitVal_)
            {
              this->SimTimeSeriesSched_UpLimitVal_.set (SimTimeSeriesSched_UpLimitVal_traits::create (i, f, this));
              continue;
            }
          }

          // SimTimeSeriesSched_NumericType
          //
          if (n.name () == "SimTimeSeriesSched_NumericType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimTimeSeriesSched_NumericType_type > r (
              SimTimeSeriesSched_NumericType_traits::create (i, f, this));

            if (!this->SimTimeSeriesSched_NumericType_)
            {
              this->SimTimeSeriesSched_NumericType_.set (r);
              continue;
            }
          }

          // SimTimeSeriesSched_UnitType
          //
          if (n.name () == "SimTimeSeriesSched_UnitType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimTimeSeriesSched_UnitType_type > r (
              SimTimeSeriesSched_UnitType_traits::create (i, f, this));

            if (!this->SimTimeSeriesSched_UnitType_)
            {
              this->SimTimeSeriesSched_UnitType_.set (r);
              continue;
            }
          }

          // SimTimeSeriesSched_ValueInterval
          //
          if (n.name () == "SimTimeSeriesSched_ValueInterval" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->SimTimeSeriesSched_ValueInterval_)
            {
              this->SimTimeSeriesSched_ValueInterval_.set (SimTimeSeriesSched_ValueInterval_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimTimeSeriesSchedule_Limits* SimTimeSeriesSchedule_Limits::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTimeSeriesSchedule_Limits (*this, f, c);
      }

      SimTimeSeriesSchedule_Limits& SimTimeSeriesSchedule_Limits::
      operator= (const SimTimeSeriesSchedule_Limits& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimTimeSeriesSchedule& > (*this) = x;
          this->SimTimeSeriesSched_Name_ = x.SimTimeSeriesSched_Name_;
          this->SimTimeSeriesSched_LowLimitVal_ = x.SimTimeSeriesSched_LowLimitVal_;
          this->SimTimeSeriesSched_UpLimitVal_ = x.SimTimeSeriesSched_UpLimitVal_;
          this->SimTimeSeriesSched_NumericType_ = x.SimTimeSeriesSched_NumericType_;
          this->SimTimeSeriesSched_UnitType_ = x.SimTimeSeriesSched_UnitType_;
          this->SimTimeSeriesSched_ValueInterval_ = x.SimTimeSeriesSched_ValueInterval_;
        }

        return *this;
      }

      SimTimeSeriesSchedule_Limits::
      ~SimTimeSeriesSchedule_Limits ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

