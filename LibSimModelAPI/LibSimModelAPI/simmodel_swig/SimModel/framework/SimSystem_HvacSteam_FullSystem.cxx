// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_HvacSteam_FullSystem.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_HvacSteam_FullSystem
      // 

      const SimSystem_HvacSteam_FullSystem::SimSys_AvailMngrListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_AvailMngrListName () const
      {
        return this->SimSys_AvailMngrListName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_AvailMngrListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_AvailMngrListName ()
      {
        return this->SimSys_AvailMngrListName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_AvailMngrListName (const SimSys_AvailMngrListName_type& x)
      {
        this->SimSys_AvailMngrListName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_AvailMngrListName (const SimSys_AvailMngrListName_optional& x)
      {
        this->SimSys_AvailMngrListName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_AvailMngrListName (::std::auto_ptr< SimSys_AvailMngrListName_type > x)
      {
        this->SimSys_AvailMngrListName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_DemandSideOutNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideOutNodeName () const
      {
        return this->SimSys_DemandSideOutNodeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_DemandSideOutNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideOutNodeName ()
      {
        return this->SimSys_DemandSideOutNodeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_type& x)
      {
        this->SimSys_DemandSideOutNodeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_optional& x)
      {
        this->SimSys_DemandSideOutNodeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideOutNodeName (::std::auto_ptr< SimSys_DemandSideOutNodeName_type > x)
      {
        this->SimSys_DemandSideOutNodeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_FluidType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_FluidType () const
      {
        return this->SimSys_FluidType_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_FluidType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_FluidType ()
      {
        return this->SimSys_FluidType_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_FluidType (const SimSys_FluidType_type& x)
      {
        this->SimSys_FluidType_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_FluidType (const SimSys_FluidType_optional& x)
      {
        this->SimSys_FluidType_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_FluidType (::std::auto_ptr< SimSys_FluidType_type > x)
      {
        this->SimSys_FluidType_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_UserDefFluidType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_UserDefFluidType () const
      {
        return this->SimSys_UserDefFluidType_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_UserDefFluidType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_UserDefFluidType ()
      {
        return this->SimSys_UserDefFluidType_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_UserDefFluidType (const SimSys_UserDefFluidType_type& x)
      {
        this->SimSys_UserDefFluidType_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_UserDefFluidType (const SimSys_UserDefFluidType_optional& x)
      {
        this->SimSys_UserDefFluidType_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_UserDefFluidType (::std::auto_ptr< SimSys_UserDefFluidType_type > x)
      {
        this->SimSys_UserDefFluidType_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantEqmtOpSchemeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantEqmtOpSchemeName () const
      {
        return this->SimSys_PlantEqmtOpSchemeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantEqmtOpSchemeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantEqmtOpSchemeName ()
      {
        return this->SimSys_PlantEqmtOpSchemeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantEqmtOpSchemeName (const SimSys_PlantEqmtOpSchemeName_type& x)
      {
        this->SimSys_PlantEqmtOpSchemeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantEqmtOpSchemeName (const SimSys_PlantEqmtOpSchemeName_optional& x)
      {
        this->SimSys_PlantEqmtOpSchemeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantEqmtOpSchemeName (::std::auto_ptr< SimSys_PlantEqmtOpSchemeName_type > x)
      {
        this->SimSys_PlantEqmtOpSchemeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_LoopTempSetpntNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_LoopTempSetpntNodeName () const
      {
        return this->SimSys_LoopTempSetpntNodeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_LoopTempSetpntNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_LoopTempSetpntNodeName ()
      {
        return this->SimSys_LoopTempSetpntNodeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoopTempSetpntNodeName (const SimSys_LoopTempSetpntNodeName_type& x)
      {
        this->SimSys_LoopTempSetpntNodeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoopTempSetpntNodeName (const SimSys_LoopTempSetpntNodeName_optional& x)
      {
        this->SimSys_LoopTempSetpntNodeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoopTempSetpntNodeName (::std::auto_ptr< SimSys_LoopTempSetpntNodeName_type > x)
      {
        this->SimSys_LoopTempSetpntNodeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_MaxLoopTemp_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopTemp () const
      {
        return this->SimSys_MaxLoopTemp_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_MaxLoopTemp_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopTemp ()
      {
        return this->SimSys_MaxLoopTemp_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_type& x)
      {
        this->SimSys_MaxLoopTemp_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_optional& x)
      {
        this->SimSys_MaxLoopTemp_ = x;
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_MinLoopTemp_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopTemp () const
      {
        return this->SimSys_MinLoopTemp_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_MinLoopTemp_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopTemp ()
      {
        return this->SimSys_MinLoopTemp_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopTemp (const SimSys_MinLoopTemp_type& x)
      {
        this->SimSys_MinLoopTemp_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopTemp (const SimSys_MinLoopTemp_optional& x)
      {
        this->SimSys_MinLoopTemp_ = x;
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_MaxLoopFlowRate_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopFlowRate () const
      {
        return this->SimSys_MaxLoopFlowRate_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_MaxLoopFlowRate_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopFlowRate ()
      {
        return this->SimSys_MaxLoopFlowRate_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_type& x)
      {
        this->SimSys_MaxLoopFlowRate_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_optional& x)
      {
        this->SimSys_MaxLoopFlowRate_ = x;
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_MinLoopFlowRate_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopFlowRate () const
      {
        return this->SimSys_MinLoopFlowRate_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_MinLoopFlowRate_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopFlowRate ()
      {
        return this->SimSys_MinLoopFlowRate_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_type& x)
      {
        this->SimSys_MinLoopFlowRate_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_optional& x)
      {
        this->SimSys_MinLoopFlowRate_ = x;
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantLoopVolume_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopVolume () const
      {
        return this->SimSys_PlantLoopVolume_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantLoopVolume_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopVolume ()
      {
        return this->SimSys_PlantLoopVolume_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopVolume (const SimSys_PlantLoopVolume_type& x)
      {
        this->SimSys_PlantLoopVolume_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopVolume (const SimSys_PlantLoopVolume_optional& x)
      {
        this->SimSys_PlantLoopVolume_ = x;
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantSideInNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideInNodeName () const
      {
        return this->SimSys_PlantSideInNodeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantSideInNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideInNodeName ()
      {
        return this->SimSys_PlantSideInNodeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideInNodeName (const SimSys_PlantSideInNodeName_type& x)
      {
        this->SimSys_PlantSideInNodeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideInNodeName (const SimSys_PlantSideInNodeName_optional& x)
      {
        this->SimSys_PlantSideInNodeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideInNodeName (::std::auto_ptr< SimSys_PlantSideInNodeName_type > x)
      {
        this->SimSys_PlantSideInNodeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantSideOutNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideOutNodeName () const
      {
        return this->SimSys_PlantSideOutNodeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantSideOutNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideOutNodeName ()
      {
        return this->SimSys_PlantSideOutNodeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideOutNodeName (const SimSys_PlantSideOutNodeName_type& x)
      {
        this->SimSys_PlantSideOutNodeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideOutNodeName (const SimSys_PlantSideOutNodeName_optional& x)
      {
        this->SimSys_PlantSideOutNodeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideOutNodeName (::std::auto_ptr< SimSys_PlantSideOutNodeName_type > x)
      {
        this->SimSys_PlantSideOutNodeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantSideBranchListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideBranchListName () const
      {
        return this->SimSys_PlantSideBranchListName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantSideBranchListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideBranchListName ()
      {
        return this->SimSys_PlantSideBranchListName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideBranchListName (const SimSys_PlantSideBranchListName_type& x)
      {
        this->SimSys_PlantSideBranchListName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideBranchListName (const SimSys_PlantSideBranchListName_optional& x)
      {
        this->SimSys_PlantSideBranchListName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideBranchListName (::std::auto_ptr< SimSys_PlantSideBranchListName_type > x)
      {
        this->SimSys_PlantSideBranchListName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantSideConnListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideConnListName () const
      {
        return this->SimSys_PlantSideConnListName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantSideConnListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideConnListName ()
      {
        return this->SimSys_PlantSideConnListName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideConnListName (const SimSys_PlantSideConnListName_type& x)
      {
        this->SimSys_PlantSideConnListName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideConnListName (const SimSys_PlantSideConnListName_optional& x)
      {
        this->SimSys_PlantSideConnListName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantSideConnListName (::std::auto_ptr< SimSys_PlantSideConnListName_type > x)
      {
        this->SimSys_PlantSideConnListName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_DemandSideInNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideInNodeName () const
      {
        return this->SimSys_DemandSideInNodeName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_DemandSideInNodeName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideInNodeName ()
      {
        return this->SimSys_DemandSideInNodeName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_type& x)
      {
        this->SimSys_DemandSideInNodeName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_optional& x)
      {
        this->SimSys_DemandSideInNodeName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideInNodeName (::std::auto_ptr< SimSys_DemandSideInNodeName_type > x)
      {
        this->SimSys_DemandSideInNodeName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_DemandSideBranchListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideBranchListName () const
      {
        return this->SimSys_DemandSideBranchListName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_DemandSideBranchListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideBranchListName ()
      {
        return this->SimSys_DemandSideBranchListName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideBranchListName (const SimSys_DemandSideBranchListName_type& x)
      {
        this->SimSys_DemandSideBranchListName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideBranchListName (const SimSys_DemandSideBranchListName_optional& x)
      {
        this->SimSys_DemandSideBranchListName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideBranchListName (::std::auto_ptr< SimSys_DemandSideBranchListName_type > x)
      {
        this->SimSys_DemandSideBranchListName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_DemandSideConnListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideConnListName () const
      {
        return this->SimSys_DemandSideConnListName_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_DemandSideConnListName_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideConnListName ()
      {
        return this->SimSys_DemandSideConnListName_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideConnListName (const SimSys_DemandSideConnListName_type& x)
      {
        this->SimSys_DemandSideConnListName_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideConnListName (const SimSys_DemandSideConnListName_optional& x)
      {
        this->SimSys_DemandSideConnListName_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_DemandSideConnListName (::std::auto_ptr< SimSys_DemandSideConnListName_type > x)
      {
        this->SimSys_DemandSideConnListName_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_LoadDistScheme_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_LoadDistScheme () const
      {
        return this->SimSys_LoadDistScheme_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_LoadDistScheme_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_LoadDistScheme ()
      {
        return this->SimSys_LoadDistScheme_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoadDistScheme (const SimSys_LoadDistScheme_type& x)
      {
        this->SimSys_LoadDistScheme_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoadDistScheme (const SimSys_LoadDistScheme_optional& x)
      {
        this->SimSys_LoadDistScheme_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_LoadDistScheme (::std::auto_ptr< SimSys_LoadDistScheme_type > x)
      {
        this->SimSys_LoadDistScheme_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PlantLoopDemandCalcScheme_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopDemandCalcScheme () const
      {
        return this->SimSys_PlantLoopDemandCalcScheme_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PlantLoopDemandCalcScheme_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopDemandCalcScheme ()
      {
        return this->SimSys_PlantLoopDemandCalcScheme_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (const SimSys_PlantLoopDemandCalcScheme_type& x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (const SimSys_PlantLoopDemandCalcScheme_optional& x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PlantLoopDemandCalcScheme (::std::auto_ptr< SimSys_PlantLoopDemandCalcScheme_type > x)
      {
        this->SimSys_PlantLoopDemandCalcScheme_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_CommonPipeSim_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_CommonPipeSim () const
      {
        return this->SimSys_CommonPipeSim_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_CommonPipeSim_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_CommonPipeSim ()
      {
        return this->SimSys_CommonPipeSim_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_CommonPipeSim (const SimSys_CommonPipeSim_type& x)
      {
        this->SimSys_CommonPipeSim_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_CommonPipeSim (const SimSys_CommonPipeSim_optional& x)
      {
        this->SimSys_CommonPipeSim_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_CommonPipeSim (::std::auto_ptr< SimSys_CommonPipeSim_type > x)
      {
        this->SimSys_CommonPipeSim_.set (x);
      }

      const SimSystem_HvacSteam_FullSystem::SimSys_PresSimType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PresSimType () const
      {
        return this->SimSys_PresSimType_;
      }

      SimSystem_HvacSteam_FullSystem::SimSys_PresSimType_optional& SimSystem_HvacSteam_FullSystem::
      SimSys_PresSimType ()
      {
        return this->SimSys_PresSimType_;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PresSimType (const SimSys_PresSimType_type& x)
      {
        this->SimSys_PresSimType_.set (x);
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PresSimType (const SimSys_PresSimType_optional& x)
      {
        this->SimSys_PresSimType_ = x;
      }

      void SimSystem_HvacSteam_FullSystem::
      SimSys_PresSimType (::std::auto_ptr< SimSys_PresSimType_type > x)
      {
        this->SimSys_PresSimType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSystem_HvacSteam_FullSystem
      //

      SimSystem_HvacSteam_FullSystem::
      SimSystem_HvacSteam_FullSystem ()
      : ::schema::simxml::BuildingModel::SimSystem_HvacSteam (),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this)
      {
      }

      SimSystem_HvacSteam_FullSystem::
      SimSystem_HvacSteam_FullSystem (const RefId_type& RefId)
      : ::schema::simxml::BuildingModel::SimSystem_HvacSteam (RefId),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this)
      {
      }

      SimSystem_HvacSteam_FullSystem::
      SimSystem_HvacSteam_FullSystem (const SimSystem_HvacSteam_FullSystem& x,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_HvacSteam (x, f, c),
        SimSys_AvailMngrListName_ (x.SimSys_AvailMngrListName_, f, this),
        SimSys_DemandSideOutNodeName_ (x.SimSys_DemandSideOutNodeName_, f, this),
        SimSys_FluidType_ (x.SimSys_FluidType_, f, this),
        SimSys_UserDefFluidType_ (x.SimSys_UserDefFluidType_, f, this),
        SimSys_PlantEqmtOpSchemeName_ (x.SimSys_PlantEqmtOpSchemeName_, f, this),
        SimSys_LoopTempSetpntNodeName_ (x.SimSys_LoopTempSetpntNodeName_, f, this),
        SimSys_MaxLoopTemp_ (x.SimSys_MaxLoopTemp_, f, this),
        SimSys_MinLoopTemp_ (x.SimSys_MinLoopTemp_, f, this),
        SimSys_MaxLoopFlowRate_ (x.SimSys_MaxLoopFlowRate_, f, this),
        SimSys_MinLoopFlowRate_ (x.SimSys_MinLoopFlowRate_, f, this),
        SimSys_PlantLoopVolume_ (x.SimSys_PlantLoopVolume_, f, this),
        SimSys_PlantSideInNodeName_ (x.SimSys_PlantSideInNodeName_, f, this),
        SimSys_PlantSideOutNodeName_ (x.SimSys_PlantSideOutNodeName_, f, this),
        SimSys_PlantSideBranchListName_ (x.SimSys_PlantSideBranchListName_, f, this),
        SimSys_PlantSideConnListName_ (x.SimSys_PlantSideConnListName_, f, this),
        SimSys_DemandSideInNodeName_ (x.SimSys_DemandSideInNodeName_, f, this),
        SimSys_DemandSideBranchListName_ (x.SimSys_DemandSideBranchListName_, f, this),
        SimSys_DemandSideConnListName_ (x.SimSys_DemandSideConnListName_, f, this),
        SimSys_LoadDistScheme_ (x.SimSys_LoadDistScheme_, f, this),
        SimSys_PlantLoopDemandCalcScheme_ (x.SimSys_PlantLoopDemandCalcScheme_, f, this),
        SimSys_CommonPipeSim_ (x.SimSys_CommonPipeSim_, f, this),
        SimSys_PresSimType_ (x.SimSys_PresSimType_, f, this)
      {
      }

      SimSystem_HvacSteam_FullSystem::
      SimSystem_HvacSteam_FullSystem (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f,
                                      ::xml_schema::container* c)
      : ::schema::simxml::BuildingModel::SimSystem_HvacSteam (e, f | ::xml_schema::flags::base, c),
        SimSys_AvailMngrListName_ (this),
        SimSys_DemandSideOutNodeName_ (this),
        SimSys_FluidType_ (this),
        SimSys_UserDefFluidType_ (this),
        SimSys_PlantEqmtOpSchemeName_ (this),
        SimSys_LoopTempSetpntNodeName_ (this),
        SimSys_MaxLoopTemp_ (this),
        SimSys_MinLoopTemp_ (this),
        SimSys_MaxLoopFlowRate_ (this),
        SimSys_MinLoopFlowRate_ (this),
        SimSys_PlantLoopVolume_ (this),
        SimSys_PlantSideInNodeName_ (this),
        SimSys_PlantSideOutNodeName_ (this),
        SimSys_PlantSideBranchListName_ (this),
        SimSys_PlantSideConnListName_ (this),
        SimSys_DemandSideInNodeName_ (this),
        SimSys_DemandSideBranchListName_ (this),
        SimSys_DemandSideConnListName_ (this),
        SimSys_LoadDistScheme_ (this),
        SimSys_PlantLoopDemandCalcScheme_ (this),
        SimSys_CommonPipeSim_ (this),
        SimSys_PresSimType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_HvacSteam_FullSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::BuildingModel::SimSystem_HvacSteam::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_AvailMngrListName
          //
          if (n.name () == "SimSys_AvailMngrListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_AvailMngrListName_type > r (
              SimSys_AvailMngrListName_traits::create (i, f, this));

            if (!this->SimSys_AvailMngrListName_)
            {
              this->SimSys_AvailMngrListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideOutNodeName
          //
          if (n.name () == "SimSys_DemandSideOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideOutNodeName_type > r (
              SimSys_DemandSideOutNodeName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideOutNodeName_)
            {
              this->SimSys_DemandSideOutNodeName_.set (r);
              continue;
            }
          }

          // SimSys_FluidType
          //
          if (n.name () == "SimSys_FluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_FluidType_type > r (
              SimSys_FluidType_traits::create (i, f, this));

            if (!this->SimSys_FluidType_)
            {
              this->SimSys_FluidType_.set (r);
              continue;
            }
          }

          // SimSys_UserDefFluidType
          //
          if (n.name () == "SimSys_UserDefFluidType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_UserDefFluidType_type > r (
              SimSys_UserDefFluidType_traits::create (i, f, this));

            if (!this->SimSys_UserDefFluidType_)
            {
              this->SimSys_UserDefFluidType_.set (r);
              continue;
            }
          }

          // SimSys_PlantEqmtOpSchemeName
          //
          if (n.name () == "SimSys_PlantEqmtOpSchemeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantEqmtOpSchemeName_type > r (
              SimSys_PlantEqmtOpSchemeName_traits::create (i, f, this));

            if (!this->SimSys_PlantEqmtOpSchemeName_)
            {
              this->SimSys_PlantEqmtOpSchemeName_.set (r);
              continue;
            }
          }

          // SimSys_LoopTempSetpntNodeName
          //
          if (n.name () == "SimSys_LoopTempSetpntNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LoopTempSetpntNodeName_type > r (
              SimSys_LoopTempSetpntNodeName_traits::create (i, f, this));

            if (!this->SimSys_LoopTempSetpntNodeName_)
            {
              this->SimSys_LoopTempSetpntNodeName_.set (r);
              continue;
            }
          }

          // SimSys_MaxLoopTemp
          //
          if (n.name () == "SimSys_MaxLoopTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MaxLoopTemp_)
            {
              this->SimSys_MaxLoopTemp_.set (SimSys_MaxLoopTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MinLoopTemp
          //
          if (n.name () == "SimSys_MinLoopTemp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MinLoopTemp_)
            {
              this->SimSys_MinLoopTemp_.set (SimSys_MinLoopTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MaxLoopFlowRate
          //
          if (n.name () == "SimSys_MaxLoopFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MaxLoopFlowRate_)
            {
              this->SimSys_MaxLoopFlowRate_.set (SimSys_MaxLoopFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_MinLoopFlowRate
          //
          if (n.name () == "SimSys_MinLoopFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_MinLoopFlowRate_)
            {
              this->SimSys_MinLoopFlowRate_.set (SimSys_MinLoopFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PlantLoopVolume
          //
          if (n.name () == "SimSys_PlantLoopVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SimSys_PlantLoopVolume_)
            {
              this->SimSys_PlantLoopVolume_.set (SimSys_PlantLoopVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PlantSideInNodeName
          //
          if (n.name () == "SimSys_PlantSideInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideInNodeName_type > r (
              SimSys_PlantSideInNodeName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideInNodeName_)
            {
              this->SimSys_PlantSideInNodeName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideOutNodeName
          //
          if (n.name () == "SimSys_PlantSideOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideOutNodeName_type > r (
              SimSys_PlantSideOutNodeName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideOutNodeName_)
            {
              this->SimSys_PlantSideOutNodeName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideBranchListName
          //
          if (n.name () == "SimSys_PlantSideBranchListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideBranchListName_type > r (
              SimSys_PlantSideBranchListName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideBranchListName_)
            {
              this->SimSys_PlantSideBranchListName_.set (r);
              continue;
            }
          }

          // SimSys_PlantSideConnListName
          //
          if (n.name () == "SimSys_PlantSideConnListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantSideConnListName_type > r (
              SimSys_PlantSideConnListName_traits::create (i, f, this));

            if (!this->SimSys_PlantSideConnListName_)
            {
              this->SimSys_PlantSideConnListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideInNodeName
          //
          if (n.name () == "SimSys_DemandSideInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideInNodeName_type > r (
              SimSys_DemandSideInNodeName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideInNodeName_)
            {
              this->SimSys_DemandSideInNodeName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideBranchListName
          //
          if (n.name () == "SimSys_DemandSideBranchListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideBranchListName_type > r (
              SimSys_DemandSideBranchListName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideBranchListName_)
            {
              this->SimSys_DemandSideBranchListName_.set (r);
              continue;
            }
          }

          // SimSys_DemandSideConnListName
          //
          if (n.name () == "SimSys_DemandSideConnListName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DemandSideConnListName_type > r (
              SimSys_DemandSideConnListName_traits::create (i, f, this));

            if (!this->SimSys_DemandSideConnListName_)
            {
              this->SimSys_DemandSideConnListName_.set (r);
              continue;
            }
          }

          // SimSys_LoadDistScheme
          //
          if (n.name () == "SimSys_LoadDistScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_LoadDistScheme_type > r (
              SimSys_LoadDistScheme_traits::create (i, f, this));

            if (!this->SimSys_LoadDistScheme_)
            {
              this->SimSys_LoadDistScheme_.set (r);
              continue;
            }
          }

          // SimSys_PlantLoopDemandCalcScheme
          //
          if (n.name () == "SimSys_PlantLoopDemandCalcScheme" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PlantLoopDemandCalcScheme_type > r (
              SimSys_PlantLoopDemandCalcScheme_traits::create (i, f, this));

            if (!this->SimSys_PlantLoopDemandCalcScheme_)
            {
              this->SimSys_PlantLoopDemandCalcScheme_.set (r);
              continue;
            }
          }

          // SimSys_CommonPipeSim
          //
          if (n.name () == "SimSys_CommonPipeSim" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CommonPipeSim_type > r (
              SimSys_CommonPipeSim_traits::create (i, f, this));

            if (!this->SimSys_CommonPipeSim_)
            {
              this->SimSys_CommonPipeSim_.set (r);
              continue;
            }
          }

          // SimSys_PresSimType
          //
          if (n.name () == "SimSys_PresSimType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PresSimType_type > r (
              SimSys_PresSimType_traits::create (i, f, this));

            if (!this->SimSys_PresSimType_)
            {
              this->SimSys_PresSimType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSystem_HvacSteam_FullSystem* SimSystem_HvacSteam_FullSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_HvacSteam_FullSystem (*this, f, c);
      }

      SimSystem_HvacSteam_FullSystem& SimSystem_HvacSteam_FullSystem::
      operator= (const SimSystem_HvacSteam_FullSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::BuildingModel::SimSystem_HvacSteam& > (*this) = x;
          this->SimSys_AvailMngrListName_ = x.SimSys_AvailMngrListName_;
          this->SimSys_DemandSideOutNodeName_ = x.SimSys_DemandSideOutNodeName_;
          this->SimSys_FluidType_ = x.SimSys_FluidType_;
          this->SimSys_UserDefFluidType_ = x.SimSys_UserDefFluidType_;
          this->SimSys_PlantEqmtOpSchemeName_ = x.SimSys_PlantEqmtOpSchemeName_;
          this->SimSys_LoopTempSetpntNodeName_ = x.SimSys_LoopTempSetpntNodeName_;
          this->SimSys_MaxLoopTemp_ = x.SimSys_MaxLoopTemp_;
          this->SimSys_MinLoopTemp_ = x.SimSys_MinLoopTemp_;
          this->SimSys_MaxLoopFlowRate_ = x.SimSys_MaxLoopFlowRate_;
          this->SimSys_MinLoopFlowRate_ = x.SimSys_MinLoopFlowRate_;
          this->SimSys_PlantLoopVolume_ = x.SimSys_PlantLoopVolume_;
          this->SimSys_PlantSideInNodeName_ = x.SimSys_PlantSideInNodeName_;
          this->SimSys_PlantSideOutNodeName_ = x.SimSys_PlantSideOutNodeName_;
          this->SimSys_PlantSideBranchListName_ = x.SimSys_PlantSideBranchListName_;
          this->SimSys_PlantSideConnListName_ = x.SimSys_PlantSideConnListName_;
          this->SimSys_DemandSideInNodeName_ = x.SimSys_DemandSideInNodeName_;
          this->SimSys_DemandSideBranchListName_ = x.SimSys_DemandSideBranchListName_;
          this->SimSys_DemandSideConnListName_ = x.SimSys_DemandSideConnListName_;
          this->SimSys_LoadDistScheme_ = x.SimSys_LoadDistScheme_;
          this->SimSys_PlantLoopDemandCalcScheme_ = x.SimSys_PlantLoopDemandCalcScheme_;
          this->SimSys_CommonPipeSim_ = x.SimSys_CommonPipeSim_;
          this->SimSys_PresSimType_ = x.SimSys_PresSimType_;
        }

        return *this;
      }

      SimSystem_HvacSteam_FullSystem::
      ~SimSystem_HvacSteam_FullSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

