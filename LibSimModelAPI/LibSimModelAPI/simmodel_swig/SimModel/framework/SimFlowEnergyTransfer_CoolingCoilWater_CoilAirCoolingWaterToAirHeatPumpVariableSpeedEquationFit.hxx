// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_WATER_COIL_AIR_COOLING_WATER_TO_AIR_HEAT_PUMP_VARIABLE_SPEED_EQUATION_FIT_HXX
#define SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_WATER_COIL_AIR_COOLING_WATER_TO_AIR_HEAT_PUMP_VARIABLE_SPEED_EQUATION_FIT_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowenergytransfer_coolingcoilwater.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit: public ::schema::simxml::MepModel::SimFlowEnergyTransfer_CoolingCoilWater
      {
        public:
        // SimFlowEnergyTrans_Name
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Name_type > SimFlowEnergyTrans_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Name_type, char > SimFlowEnergyTrans_Name_traits;

        const SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name () const;

        SimFlowEnergyTrans_Name_optional&
        SimFlowEnergyTrans_Name ();

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_type& x);

        void
        SimFlowEnergyTrans_Name (const SimFlowEnergyTrans_Name_optional& x);

        void
        SimFlowEnergyTrans_Name (::std::auto_ptr< SimFlowEnergyTrans_Name_type > p);

        // SimFlowEnergyTrans_NumSpeeds
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_NumSpeeds_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NumSpeeds_type > SimFlowEnergyTrans_NumSpeeds_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NumSpeeds_type, char > SimFlowEnergyTrans_NumSpeeds_traits;

        const SimFlowEnergyTrans_NumSpeeds_optional&
        SimFlowEnergyTrans_NumSpeeds () const;

        SimFlowEnergyTrans_NumSpeeds_optional&
        SimFlowEnergyTrans_NumSpeeds ();

        void
        SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_type& x);

        void
        SimFlowEnergyTrans_NumSpeeds (const SimFlowEnergyTrans_NumSpeeds_optional& x);

        // SimFlowEnergyTrans_IndoorAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_IndoorAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_IndoorAirInletNodeName_type > SimFlowEnergyTrans_IndoorAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_IndoorAirInletNodeName_type, char > SimFlowEnergyTrans_IndoorAirInletNodeName_traits;

        const SimFlowEnergyTrans_IndoorAirInletNodeName_optional&
        SimFlowEnergyTrans_IndoorAirInletNodeName () const;

        SimFlowEnergyTrans_IndoorAirInletNodeName_optional&
        SimFlowEnergyTrans_IndoorAirInletNodeName ();

        void
        SimFlowEnergyTrans_IndoorAirInletNodeName (const SimFlowEnergyTrans_IndoorAirInletNodeName_type& x);

        void
        SimFlowEnergyTrans_IndoorAirInletNodeName (const SimFlowEnergyTrans_IndoorAirInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_IndoorAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_IndoorAirInletNodeName_type > p);

        // SimFlowEnergyTrans_IndoorAirOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_IndoorAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_IndoorAirOutletNodeName_type > SimFlowEnergyTrans_IndoorAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_IndoorAirOutletNodeName_type, char > SimFlowEnergyTrans_IndoorAirOutletNodeName_traits;

        const SimFlowEnergyTrans_IndoorAirOutletNodeName_optional&
        SimFlowEnergyTrans_IndoorAirOutletNodeName () const;

        SimFlowEnergyTrans_IndoorAirOutletNodeName_optional&
        SimFlowEnergyTrans_IndoorAirOutletNodeName ();

        void
        SimFlowEnergyTrans_IndoorAirOutletNodeName (const SimFlowEnergyTrans_IndoorAirOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_IndoorAirOutletNodeName (const SimFlowEnergyTrans_IndoorAirOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_IndoorAirOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_IndoorAirOutletNodeName_type > p);

        // SimFlowEnergyTrans_NominalSpeedLevel
        //
        typedef ::xml_schema::int_ SimFlowEnergyTrans_NominalSpeedLevel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NominalSpeedLevel_type > SimFlowEnergyTrans_NominalSpeedLevel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NominalSpeedLevel_type, char > SimFlowEnergyTrans_NominalSpeedLevel_traits;

        const SimFlowEnergyTrans_NominalSpeedLevel_optional&
        SimFlowEnergyTrans_NominalSpeedLevel () const;

        SimFlowEnergyTrans_NominalSpeedLevel_optional&
        SimFlowEnergyTrans_NominalSpeedLevel ();

        void
        SimFlowEnergyTrans_NominalSpeedLevel (const SimFlowEnergyTrans_NominalSpeedLevel_type& x);

        void
        SimFlowEnergyTrans_NominalSpeedLevel (const SimFlowEnergyTrans_NominalSpeedLevel_optional& x);

        // SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_type > SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_traits;

        const SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel () const;

        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel ();

        void
        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_type& x);

        void
        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_optional& x);

        // SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_type > SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_traits;

        const SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel () const;

        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel ();

        void
        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_type& x);

        void
        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_optional& x);

        // SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_type > SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_traits;

        const SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_optional&
        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil () const;

        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_optional&
        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil ();

        void
        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil (const SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_type& x);

        void
        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil (const SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_optional& x);

        // SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_type > SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_traits;

        const SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_optional&
        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap () const;

        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_optional&
        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap ();

        void
        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap (const SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_type& x);

        void
        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap (const SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_optional& x);

        // SimFlowEnergyTrans_EnergyPartLoadFractionCurveName
        //
        typedef ::xml_schema::idref SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type > SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type, char > SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_traits;

        const SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional&
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName () const;

        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional&
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName ();

        void
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (const SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type& x);

        void
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (const SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional& x);

        void
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_type > p);

        // SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type > SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type, char > SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_traits;

        const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional&
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName () const;

        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional&
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName ();

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type& x);

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional& x);

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_type > p);

        // SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type > SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type, char > SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_traits;

        const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional&
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName () const;

        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional&
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName ();

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type& x);

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (const SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional& x);

        void
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName (::std::auto_ptr< SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_type > p);

        // SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_type > SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_traits;

        const SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel () const;

        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_optional&
        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel ();

        void
        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_type& x);

        void
        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel (const SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_optional& x);

        // SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1
        //
        typedef ::xml_schema::double_ SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_type > SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_traits;

        const SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_optional&
        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1 () const;

        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_optional&
        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1 ();

        void
        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1 (const SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_type& x);

        void
        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1 (const SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_optional& x);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_type > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_type > p);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_type > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_type > p);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_type > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP (const SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_type > p);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_type > SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate (const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate (const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_type > p);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_type > SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate (const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate (const SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_type > p);

        // SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_type > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_type > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_type > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_type > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_type > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_type > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName (const SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_type > p);

        // SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_type > SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_type, char > SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_traits;

        const SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds () const;

        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_optional&
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds ();

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds (const SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds (const SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_type > p);

        // SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName
        //
        typedef ::xml_schema::idrefs SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_type > SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_type, char > SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_traits;

        const SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName () const;

        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_optional&
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName ();

        void
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_type& x);

        void
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName (const SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_optional& x);

        void
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_type > p);

        // Constructors.
        //
        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit ();

        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit (const RefId_type&);

        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit (const ::xercesc::DOMElement& e,
                                                                                                         ::xml_schema::flags f = 0,
                                                                                                         ::xml_schema::container* c = 0);

        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit& x,
                                                                                                         ::xml_schema::flags f = 0,
                                                                                                         ::xml_schema::container* c = 0);

        virtual SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit&
        operator= (const SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit& x);

        virtual 
        ~SimFlowEnergyTransfer_CoolingCoilWater_CoilAirCoolingWaterToAirHeatPumpVariableSpeedEquationFit ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowEnergyTrans_Name_optional SimFlowEnergyTrans_Name_;
        SimFlowEnergyTrans_NumSpeeds_optional SimFlowEnergyTrans_NumSpeeds_;
        SimFlowEnergyTrans_IndoorAirInletNodeName_optional SimFlowEnergyTrans_IndoorAirInletNodeName_;
        SimFlowEnergyTrans_IndoorAirOutletNodeName_optional SimFlowEnergyTrans_IndoorAirOutletNodeName_;
        SimFlowEnergyTrans_NominalSpeedLevel_optional SimFlowEnergyTrans_NominalSpeedLevel_;
        SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_optional SimFlowEnergyTrans_GrossRatedTotalCoolCapAtSelectedNomSpeedLevel_;
        SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_optional SimFlowEnergyTrans_RatedAirFlowRateAtSelectedNomSpeedLevel_;
        SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_optional SimFlowEnergyTrans_NominalTimeforCondensateToBeginLeavingtheCoil_;
        SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_optional SimFlowEnergyTrans_InitialMoistureEvapRateDiviBySteady_StateACLatentCap_;
        SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_optional SimFlowEnergyTrans_EnergyPartLoadFractionCurveName_;
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_optional SimFlowEnergyTrans_Water_to_RefrigerantHXWaterInletNodeName_;
        SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_optional SimFlowEnergyTrans_Water_to_RefrigerantHXWaterOutletNodeName_;
        SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_optional SimFlowEnergyTrans_RatedWaterFlowRateAtSelectedNomSpeedLevel_;
        SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_optional SimFlowEnergyTrans_FlagforUsingHotGasReheat_0_or_1_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_optional SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedTotalCoolCap_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_optional SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedSensHeatRatio_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_optional SimFlowEnergyTrans_Speed_1_10_RefUnitGrossRatedCoolCOP_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_optional SimFlowEnergyTrans_Speed_1_10_RefUnitRatedAirFlowRate_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_optional SimFlowEnergyTrans_Speed_1_10_RefUnitRatedWaterFlowRate_;
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_optional SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfTempCurveName_;
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_optional SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfAirFlowFractionCurveName_;
        SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_optional SimFlowEnergyTrans_Speed_1_10_TotCoolingCapFuncOfWaterFlowFractionCurveName_;
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_optional SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfTempCurveName_;
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_optional SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfAirFlowFractionCurveName_;
        SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_optional SimFlowEnergyTrans_Speed_1_10_EnergyInputRatioFuncOfWaterFlowFractionCurveName_;
        SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_optional SimFlowEnergyTrans_Speed_1_10_RefUnitWasteHeatFractionofInputPowerAtRatedConds_;
        SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_optional SimFlowEnergyTrans_Speed_1_10_WasteHeatFuncOfTempCurveName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_ENERGY_TRANSFER_COOLING_COIL_WATER_COIL_AIR_COOLING_WATER_TO_AIR_HEAT_PUMP_VARIABLE_SPEED_EQUATION_FIT_HXX
