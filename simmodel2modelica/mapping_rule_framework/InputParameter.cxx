// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "InputParameter.hxx"

#include "stringlist.hxx"

#include "valuetype.hxx"

#include "refstringlist.hxx"

#include "map_doublelist.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // InputParameter
      // 

      const InputParameter::Description_optional& InputParameter::
      Description () const
      {
        return this->Description_;
      }

      InputParameter::Description_optional& InputParameter::
      Description ()
      {
        return this->Description_;
      }

      void InputParameter::
      Description (const Description_type& x)
      {
        this->Description_.set (x);
      }

      void InputParameter::
      Description (const Description_optional& x)
      {
        this->Description_ = x;
      }

      void InputParameter::
      Description (::std::auto_ptr< Description_type > x)
      {
        this->Description_.set (x);
      }

      const InputParameter::ParameterName_type& InputParameter::
      ParameterName () const
      {
        return this->ParameterName_.get ();
      }

      InputParameter::ParameterName_type& InputParameter::
      ParameterName ()
      {
        return this->ParameterName_.get ();
      }

      void InputParameter::
      ParameterName (const ParameterName_type& x)
      {
        this->ParameterName_.set (x);
      }

      void InputParameter::
      ParameterName (::std::auto_ptr< ParameterName_type > x)
      {
        this->ParameterName_.set (x);
      }

      const InputParameter::ValueType_optional& InputParameter::
      ValueType () const
      {
        return this->ValueType_;
      }

      InputParameter::ValueType_optional& InputParameter::
      ValueType ()
      {
        return this->ValueType_;
      }

      void InputParameter::
      ValueType (const ValueType_type& x)
      {
        this->ValueType_.set (x);
      }

      void InputParameter::
      ValueType (const ValueType_optional& x)
      {
        this->ValueType_ = x;
      }

      void InputParameter::
      ValueType (::std::auto_ptr< ValueType_type > x)
      {
        this->ValueType_.set (x);
      }

      const InputParameter::IsReferenced_optional& InputParameter::
      IsReferenced () const
      {
        return this->IsReferenced_;
      }

      InputParameter::IsReferenced_optional& InputParameter::
      IsReferenced ()
      {
        return this->IsReferenced_;
      }

      void InputParameter::
      IsReferenced (const IsReferenced_type& x)
      {
        this->IsReferenced_.set (x);
      }

      void InputParameter::
      IsReferenced (const IsReferenced_optional& x)
      {
        this->IsReferenced_ = x;
      }

      const InputParameter::RefValue_optional& InputParameter::
      RefValue () const
      {
        return this->RefValue_;
      }

      InputParameter::RefValue_optional& InputParameter::
      RefValue ()
      {
        return this->RefValue_;
      }

      void InputParameter::
      RefValue (const RefValue_type& x)
      {
        this->RefValue_.set (x);
      }

      void InputParameter::
      RefValue (const RefValue_optional& x)
      {
        this->RefValue_ = x;
      }

      void InputParameter::
      RefValue (::std::auto_ptr< RefValue_type > x)
      {
        this->RefValue_.set (x);
      }

      const InputParameter::ValueList_optional& InputParameter::
      ValueList () const
      {
        return this->ValueList_;
      }

      InputParameter::ValueList_optional& InputParameter::
      ValueList ()
      {
        return this->ValueList_;
      }

      void InputParameter::
      ValueList (const ValueList_type& x)
      {
        this->ValueList_.set (x);
      }

      void InputParameter::
      ValueList (const ValueList_optional& x)
      {
        this->ValueList_ = x;
      }

      void InputParameter::
      ValueList (::std::auto_ptr< ValueList_type > x)
      {
        this->ValueList_.set (x);
      }

      const InputParameter::LowerBoundRef_optional& InputParameter::
      LowerBoundRef () const
      {
        return this->LowerBoundRef_;
      }

      InputParameter::LowerBoundRef_optional& InputParameter::
      LowerBoundRef ()
      {
        return this->LowerBoundRef_;
      }

      void InputParameter::
      LowerBoundRef (const LowerBoundRef_type& x)
      {
        this->LowerBoundRef_.set (x);
      }

      void InputParameter::
      LowerBoundRef (const LowerBoundRef_optional& x)
      {
        this->LowerBoundRef_ = x;
      }

      void InputParameter::
      LowerBoundRef (::std::auto_ptr< LowerBoundRef_type > x)
      {
        this->LowerBoundRef_.set (x);
      }

      const InputParameter::LowerBoundValue_optional& InputParameter::
      LowerBoundValue () const
      {
        return this->LowerBoundValue_;
      }

      InputParameter::LowerBoundValue_optional& InputParameter::
      LowerBoundValue ()
      {
        return this->LowerBoundValue_;
      }

      void InputParameter::
      LowerBoundValue (const LowerBoundValue_type& x)
      {
        this->LowerBoundValue_.set (x);
      }

      void InputParameter::
      LowerBoundValue (const LowerBoundValue_optional& x)
      {
        this->LowerBoundValue_ = x;
      }

      const InputParameter::UpperBoundRef_optional& InputParameter::
      UpperBoundRef () const
      {
        return this->UpperBoundRef_;
      }

      InputParameter::UpperBoundRef_optional& InputParameter::
      UpperBoundRef ()
      {
        return this->UpperBoundRef_;
      }

      void InputParameter::
      UpperBoundRef (const UpperBoundRef_type& x)
      {
        this->UpperBoundRef_.set (x);
      }

      void InputParameter::
      UpperBoundRef (const UpperBoundRef_optional& x)
      {
        this->UpperBoundRef_ = x;
      }

      void InputParameter::
      UpperBoundRef (::std::auto_ptr< UpperBoundRef_type > x)
      {
        this->UpperBoundRef_.set (x);
      }

      const InputParameter::UpperBoundValue_optional& InputParameter::
      UpperBoundValue () const
      {
        return this->UpperBoundValue_;
      }

      InputParameter::UpperBoundValue_optional& InputParameter::
      UpperBoundValue ()
      {
        return this->UpperBoundValue_;
      }

      void InputParameter::
      UpperBoundValue (const UpperBoundValue_type& x)
      {
        this->UpperBoundValue_.set (x);
      }

      void InputParameter::
      UpperBoundValue (const UpperBoundValue_optional& x)
      {
        this->UpperBoundValue_ = x;
      }

      const InputParameter::RefId_type& InputParameter::
      RefId () const
      {
        return this->RefId_.get ();
      }

      InputParameter::RefId_type& InputParameter::
      RefId ()
      {
        return this->RefId_.get ();
      }

      void InputParameter::
      RefId (const RefId_type& x)
      {
        this->RefId_.set (x);
      }

      void InputParameter::
      RefId (::std::auto_ptr< RefId_type > x)
      {
        this->RefId_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
      // InputParameter
      //

      InputParameter::
      InputParameter (const ParameterName_type& ParameterName,
                      const RefId_type& RefId)
      : ::xml_schema::type (),
        Description_ (this),
        ParameterName_ (ParameterName, this),
        ValueType_ (this),
        IsReferenced_ (this),
        RefValue_ (this),
        ValueList_ (this),
        LowerBoundRef_ (this),
        LowerBoundValue_ (this),
        UpperBoundRef_ (this),
        UpperBoundValue_ (this),
        RefId_ (RefId, this)
      {
      }

      InputParameter::
      InputParameter (const InputParameter& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        Description_ (x.Description_, f, this),
        ParameterName_ (x.ParameterName_, f, this),
        ValueType_ (x.ValueType_, f, this),
        IsReferenced_ (x.IsReferenced_, f, this),
        RefValue_ (x.RefValue_, f, this),
        ValueList_ (x.ValueList_, f, this),
        LowerBoundRef_ (x.LowerBoundRef_, f, this),
        LowerBoundValue_ (x.LowerBoundValue_, f, this),
        UpperBoundRef_ (x.UpperBoundRef_, f, this),
        UpperBoundValue_ (x.UpperBoundValue_, f, this),
        RefId_ (x.RefId_, f, this)
      {
      }

      InputParameter::
      InputParameter (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        Description_ (this),
        ParameterName_ (this),
        ValueType_ (this),
        IsReferenced_ (this),
        RefValue_ (this),
        ValueList_ (this),
        LowerBoundRef_ (this),
        LowerBoundValue_ (this),
        UpperBoundRef_ (this),
        UpperBoundValue_ (this),
        RefId_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void InputParameter::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Description
          //
          if (n.name () == "Description" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< Description_type > r (
              Description_traits::create (i, f, this));

            if (!this->Description_)
            {
              this->Description_.set (r);
              continue;
            }
          }

          // ParameterName
          //
          if (n.name () == "ParameterName" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< ParameterName_type > r (
              ParameterName_traits::create (i, f, this));

            if (!ParameterName_.present ())
            {
              this->ParameterName_.set (r);
              continue;
            }
          }

          // ValueType
          //
          if (n.name () == "ValueType" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< ValueType_type > r (
              ValueType_traits::create (i, f, this));

            if (!this->ValueType_)
            {
              this->ValueType_.set (r);
              continue;
            }
          }

          // IsReferenced
          //
          if (n.name () == "IsReferenced" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            if (!this->IsReferenced_)
            {
              this->IsReferenced_.set (IsReferenced_traits::create (i, f, this));
              continue;
            }
          }

          // RefValue
          //
          if (n.name () == "RefValue" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< RefValue_type > r (
              RefValue_traits::create (i, f, this));

            if (!this->RefValue_)
            {
              this->RefValue_.set (r);
              continue;
            }
          }

          // ValueList
          //
          if (n.name () == "ValueList" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< ValueList_type > r (
              ValueList_traits::create (i, f, this));

            if (!this->ValueList_)
            {
              this->ValueList_.set (r);
              continue;
            }
          }

          // LowerBoundRef
          //
          if (n.name () == "LowerBoundRef" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< LowerBoundRef_type > r (
              LowerBoundRef_traits::create (i, f, this));

            if (!this->LowerBoundRef_)
            {
              this->LowerBoundRef_.set (r);
              continue;
            }
          }

          // LowerBoundValue
          //
          if (n.name () == "LowerBoundValue" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            if (!this->LowerBoundValue_)
            {
              this->LowerBoundValue_.set (LowerBoundValue_traits::create (i, f, this));
              continue;
            }
          }

          // UpperBoundRef
          //
          if (n.name () == "UpperBoundRef" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            ::std::auto_ptr< UpperBoundRef_type > r (
              UpperBoundRef_traits::create (i, f, this));

            if (!this->UpperBoundRef_)
            {
              this->UpperBoundRef_.set (r);
              continue;
            }
          }

          // UpperBoundValue
          //
          if (n.name () == "UpperBoundValue" && n.namespace_ () == "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap")
          {
            if (!this->UpperBoundValue_)
            {
              this->UpperBoundValue_.set (UpperBoundValue_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }

        if (!ParameterName_.present ())
        {
          throw ::xsd::cxx::tree::expected_element< char > (
            "ParameterName",
            "http://www.e3d.rwth-aachen.de/namespaces/Sim/DataMap");
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "RefId" && n.namespace_ ().empty ())
          {
            this->RefId_.set (RefId_traits::create (i, f, this));
            continue;
          }
        }

        if (!RefId_.present ())
        {
          throw ::xsd::cxx::tree::expected_attribute< char > (
            "RefId",
            "");
        }
      }

      InputParameter* InputParameter::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class InputParameter (*this, f, c);
      }

      InputParameter& InputParameter::
      operator= (const InputParameter& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::type& > (*this) = x;
          this->Description_ = x.Description_;
          this->ParameterName_ = x.ParameterName_;
          this->ValueType_ = x.ValueType_;
          this->IsReferenced_ = x.IsReferenced_;
          this->RefValue_ = x.RefValue_;
          this->ValueList_ = x.ValueList_;
          this->LowerBoundRef_ = x.LowerBoundRef_;
          this->LowerBoundValue_ = x.LowerBoundValue_;
          this->UpperBoundRef_ = x.UpperBoundRef_;
          this->UpperBoundValue_ = x.UpperBoundValue_;
          this->RefId_ = x.RefId_;
        }

        return *this;
      }

      InputParameter::
      ~InputParameter ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace DataMap
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

