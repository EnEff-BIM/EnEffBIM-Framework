// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSystem_RefrigerationSecondary_FullSystem.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationSecondary_FullSystem
      // 

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName () const
      {
        return this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName ()
      {
        return this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_type& x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (const SimSys_RefrigCaseWalkinCaseAndWalkInListName_optional& x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_RefrigCaseWalkinCaseAndWalkInListName (::std::auto_ptr< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > x)
      {
        this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EndUseSubCat () const
      {
        return this->SimSys_EndUseSubCat_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EndUseSubCat_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EndUseSubCat ()
      {
        return this->SimSys_EndUseSubCat_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_type& x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EndUseSubCat (const SimSys_EndUseSubCat_optional& x)
      {
        this->SimSys_EndUseSubCat_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EndUseSubCat (::std::auto_ptr< SimSys_EndUseSubCat_type > x)
      {
        this->SimSys_EndUseSubCat_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_CircFluidType_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidType () const
      {
        return this->SimSys_CircFluidType_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_CircFluidType_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidType ()
      {
        return this->SimSys_CircFluidType_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidType (const SimSys_CircFluidType_type& x)
      {
        this->SimSys_CircFluidType_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidType (const SimSys_CircFluidType_optional& x)
      {
        this->SimSys_CircFluidType_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidType (::std::auto_ptr< SimSys_CircFluidType_type > x)
      {
        this->SimSys_CircFluidType_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_CircFluidName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidName () const
      {
        return this->SimSys_CircFluidName_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_CircFluidName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidName ()
      {
        return this->SimSys_CircFluidName_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidName (const SimSys_CircFluidName_type& x)
      {
        this->SimSys_CircFluidName_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidName (const SimSys_CircFluidName_optional& x)
      {
        this->SimSys_CircFluidName_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_CircFluidName (::std::auto_ptr< SimSys_CircFluidName_type > x)
      {
        this->SimSys_CircFluidName_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapCapacity_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapCapacity () const
      {
        return this->SimSys_EvapCapacity_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapCapacity_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapCapacity ()
      {
        return this->SimSys_EvapCapacity_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapCapacity (const SimSys_EvapCapacity_type& x)
      {
        this->SimSys_EvapCapacity_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapCapacity (const SimSys_EvapCapacity_optional& x)
      {
        this->SimSys_EvapCapacity_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapFlowRateSecndFluid_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapFlowRateSecndFluid () const
      {
        return this->SimSys_EvapFlowRateSecndFluid_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapFlowRateSecndFluid_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapFlowRateSecndFluid ()
      {
        return this->SimSys_EvapFlowRateSecndFluid_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapFlowRateSecndFluid (const SimSys_EvapFlowRateSecndFluid_type& x)
      {
        this->SimSys_EvapFlowRateSecndFluid_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapFlowRateSecndFluid (const SimSys_EvapFlowRateSecndFluid_optional& x)
      {
        this->SimSys_EvapFlowRateSecndFluid_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapEvaporatingTemp_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapEvaporatingTemp () const
      {
        return this->SimSys_EvapEvaporatingTemp_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapEvaporatingTemp_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapEvaporatingTemp ()
      {
        return this->SimSys_EvapEvaporatingTemp_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapEvaporatingTemp (const SimSys_EvapEvaporatingTemp_type& x)
      {
        this->SimSys_EvapEvaporatingTemp_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapEvaporatingTemp (const SimSys_EvapEvaporatingTemp_optional& x)
      {
        this->SimSys_EvapEvaporatingTemp_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapApproachTempDiff_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapApproachTempDiff () const
      {
        return this->SimSys_EvapApproachTempDiff_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapApproachTempDiff_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapApproachTempDiff ()
      {
        return this->SimSys_EvapApproachTempDiff_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapApproachTempDiff (const SimSys_EvapApproachTempDiff_type& x)
      {
        this->SimSys_EvapApproachTempDiff_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapApproachTempDiff (const SimSys_EvapApproachTempDiff_optional& x)
      {
        this->SimSys_EvapApproachTempDiff_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapRangeTempDiff_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRangeTempDiff () const
      {
        return this->SimSys_EvapRangeTempDiff_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapRangeTempDiff_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRangeTempDiff ()
      {
        return this->SimSys_EvapRangeTempDiff_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRangeTempDiff (const SimSys_EvapRangeTempDiff_type& x)
      {
        this->SimSys_EvapRangeTempDiff_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRangeTempDiff (const SimSys_EvapRangeTempDiff_optional& x)
      {
        this->SimSys_EvapRangeTempDiff_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_NumbPumpsInLoop_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_NumbPumpsInLoop () const
      {
        return this->SimSys_NumbPumpsInLoop_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_NumbPumpsInLoop_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_NumbPumpsInLoop ()
      {
        return this->SimSys_NumbPumpsInLoop_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_NumbPumpsInLoop (const SimSys_NumbPumpsInLoop_type& x)
      {
        this->SimSys_NumbPumpsInLoop_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_NumbPumpsInLoop (const SimSys_NumbPumpsInLoop_optional& x)
      {
        this->SimSys_NumbPumpsInLoop_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpFlowRate_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpFlowRate () const
      {
        return this->SimSys_TotalPumpFlowRate_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpFlowRate_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpFlowRate ()
      {
        return this->SimSys_TotalPumpFlowRate_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpFlowRate (const SimSys_TotalPumpFlowRate_type& x)
      {
        this->SimSys_TotalPumpFlowRate_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpFlowRate (const SimSys_TotalPumpFlowRate_optional& x)
      {
        this->SimSys_TotalPumpFlowRate_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpPower_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpPower () const
      {
        return this->SimSys_TotalPumpPower_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpPower_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpPower ()
      {
        return this->SimSys_TotalPumpPower_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpPower (const SimSys_TotalPumpPower_type& x)
      {
        this->SimSys_TotalPumpPower_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpPower (const SimSys_TotalPumpPower_optional& x)
      {
        this->SimSys_TotalPumpPower_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpHead_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpHead () const
      {
        return this->SimSys_TotalPumpHead_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_TotalPumpHead_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpHead ()
      {
        return this->SimSys_TotalPumpHead_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpHead (const SimSys_TotalPumpHead_type& x)
      {
        this->SimSys_TotalPumpHead_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_TotalPumpHead (const SimSys_TotalPumpHead_optional& x)
      {
        this->SimSys_TotalPumpHead_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_PhaseChangeCircRate_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PhaseChangeCircRate () const
      {
        return this->SimSys_PhaseChangeCircRate_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_PhaseChangeCircRate_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PhaseChangeCircRate ()
      {
        return this->SimSys_PhaseChangeCircRate_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PhaseChangeCircRate (const SimSys_PhaseChangeCircRate_type& x)
      {
        this->SimSys_PhaseChangeCircRate_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PhaseChangeCircRate (const SimSys_PhaseChangeCircRate_optional& x)
      {
        this->SimSys_PhaseChangeCircRate_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_PumpDriveType_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpDriveType () const
      {
        return this->SimSys_PumpDriveType_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_PumpDriveType_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpDriveType ()
      {
        return this->SimSys_PumpDriveType_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpDriveType (const SimSys_PumpDriveType_type& x)
      {
        this->SimSys_PumpDriveType_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpDriveType (const SimSys_PumpDriveType_optional& x)
      {
        this->SimSys_PumpDriveType_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpDriveType (::std::auto_ptr< SimSys_PumpDriveType_type > x)
      {
        this->SimSys_PumpDriveType_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_VarSpdPumpCubicCurveName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_VarSpdPumpCubicCurveName () const
      {
        return this->SimSys_VarSpdPumpCubicCurveName_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_VarSpdPumpCubicCurveName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_VarSpdPumpCubicCurveName ()
      {
        return this->SimSys_VarSpdPumpCubicCurveName_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_VarSpdPumpCubicCurveName (const SimSys_VarSpdPumpCubicCurveName_type& x)
      {
        this->SimSys_VarSpdPumpCubicCurveName_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_VarSpdPumpCubicCurveName (const SimSys_VarSpdPumpCubicCurveName_optional& x)
      {
        this->SimSys_VarSpdPumpCubicCurveName_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_VarSpdPumpCubicCurveName (::std::auto_ptr< SimSys_VarSpdPumpCubicCurveName_type > x)
      {
        this->SimSys_VarSpdPumpCubicCurveName_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_PumpMotorHeatToFluid_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpMotorHeatToFluid () const
      {
        return this->SimSys_PumpMotorHeatToFluid_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_PumpMotorHeatToFluid_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpMotorHeatToFluid ()
      {
        return this->SimSys_PumpMotorHeatToFluid_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpMotorHeatToFluid (const SimSys_PumpMotorHeatToFluid_type& x)
      {
        this->SimSys_PumpMotorHeatToFluid_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_PumpMotorHeatToFluid (const SimSys_PumpMotorHeatToFluid_optional& x)
      {
        this->SimSys_PumpMotorHeatToFluid_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_SumUADistPiping_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUADistPiping () const
      {
        return this->SimSys_SumUADistPiping_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_SumUADistPiping_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUADistPiping ()
      {
        return this->SimSys_SumUADistPiping_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUADistPiping (const SimSys_SumUADistPiping_type& x)
      {
        this->SimSys_SumUADistPiping_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUADistPiping (const SimSys_SumUADistPiping_optional& x)
      {
        this->SimSys_SumUADistPiping_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_DistPipingZoneName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_DistPipingZoneName () const
      {
        return this->SimSys_DistPipingZoneName_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_DistPipingZoneName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_DistPipingZoneName ()
      {
        return this->SimSys_DistPipingZoneName_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_DistPipingZoneName (const SimSys_DistPipingZoneName_type& x)
      {
        this->SimSys_DistPipingZoneName_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_DistPipingZoneName (const SimSys_DistPipingZoneName_optional& x)
      {
        this->SimSys_DistPipingZoneName_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_DistPipingZoneName (::std::auto_ptr< SimSys_DistPipingZoneName_type > x)
      {
        this->SimSys_DistPipingZoneName_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_SumUARecvr_SepShell_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUARecvr_SepShell () const
      {
        return this->SimSys_SumUARecvr_SepShell_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_SumUARecvr_SepShell_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUARecvr_SepShell ()
      {
        return this->SimSys_SumUARecvr_SepShell_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUARecvr_SepShell (const SimSys_SumUARecvr_SepShell_type& x)
      {
        this->SimSys_SumUARecvr_SepShell_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_SumUARecvr_SepShell (const SimSys_SumUARecvr_SepShell_optional& x)
      {
        this->SimSys_SumUARecvr_SepShell_ = x;
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_Recvr_SepZoneName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_Recvr_SepZoneName () const
      {
        return this->SimSys_Recvr_SepZoneName_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_Recvr_SepZoneName_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_Recvr_SepZoneName ()
      {
        return this->SimSys_Recvr_SepZoneName_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_Recvr_SepZoneName (const SimSys_Recvr_SepZoneName_type& x)
      {
        this->SimSys_Recvr_SepZoneName_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_Recvr_SepZoneName (const SimSys_Recvr_SepZoneName_optional& x)
      {
        this->SimSys_Recvr_SepZoneName_ = x;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_Recvr_SepZoneName (::std::auto_ptr< SimSys_Recvr_SepZoneName_type > x)
      {
        this->SimSys_Recvr_SepZoneName_.set (x);
      }

      const SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapRefrigInventory_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRefrigInventory () const
      {
        return this->SimSys_EvapRefrigInventory_;
      }

      SimSystem_RefrigerationSecondary_FullSystem::SimSys_EvapRefrigInventory_optional& SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRefrigInventory ()
      {
        return this->SimSys_EvapRefrigInventory_;
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRefrigInventory (const SimSys_EvapRefrigInventory_type& x)
      {
        this->SimSys_EvapRefrigInventory_.set (x);
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      SimSys_EvapRefrigInventory (const SimSys_EvapRefrigInventory_optional& x)
      {
        this->SimSys_EvapRefrigInventory_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimSystem_RefrigerationSecondary_FullSystem
      //

      SimSystem_RefrigerationSecondary_FullSystem::
      SimSystem_RefrigerationSecondary_FullSystem (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary (RefId),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_CircFluidType_ (this),
        SimSys_CircFluidName_ (this),
        SimSys_EvapCapacity_ (this),
        SimSys_EvapFlowRateSecndFluid_ (this),
        SimSys_EvapEvaporatingTemp_ (this),
        SimSys_EvapApproachTempDiff_ (this),
        SimSys_EvapRangeTempDiff_ (this),
        SimSys_NumbPumpsInLoop_ (this),
        SimSys_TotalPumpFlowRate_ (this),
        SimSys_TotalPumpPower_ (this),
        SimSys_TotalPumpHead_ (this),
        SimSys_PhaseChangeCircRate_ (this),
        SimSys_PumpDriveType_ (this),
        SimSys_VarSpdPumpCubicCurveName_ (this),
        SimSys_PumpMotorHeatToFluid_ (this),
        SimSys_SumUADistPiping_ (this),
        SimSys_DistPipingZoneName_ (this),
        SimSys_SumUARecvr_SepShell_ (this),
        SimSys_Recvr_SepZoneName_ (this),
        SimSys_EvapRefrigInventory_ (this)
      {
      }

      SimSystem_RefrigerationSecondary_FullSystem::
      SimSystem_RefrigerationSecondary_FullSystem (const SimSystem_RefrigerationSecondary_FullSystem& x,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary (x, f, c),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (x.SimSys_RefrigCaseWalkinCaseAndWalkInListName_, f, this),
        SimSys_EndUseSubCat_ (x.SimSys_EndUseSubCat_, f, this),
        SimSys_CircFluidType_ (x.SimSys_CircFluidType_, f, this),
        SimSys_CircFluidName_ (x.SimSys_CircFluidName_, f, this),
        SimSys_EvapCapacity_ (x.SimSys_EvapCapacity_, f, this),
        SimSys_EvapFlowRateSecndFluid_ (x.SimSys_EvapFlowRateSecndFluid_, f, this),
        SimSys_EvapEvaporatingTemp_ (x.SimSys_EvapEvaporatingTemp_, f, this),
        SimSys_EvapApproachTempDiff_ (x.SimSys_EvapApproachTempDiff_, f, this),
        SimSys_EvapRangeTempDiff_ (x.SimSys_EvapRangeTempDiff_, f, this),
        SimSys_NumbPumpsInLoop_ (x.SimSys_NumbPumpsInLoop_, f, this),
        SimSys_TotalPumpFlowRate_ (x.SimSys_TotalPumpFlowRate_, f, this),
        SimSys_TotalPumpPower_ (x.SimSys_TotalPumpPower_, f, this),
        SimSys_TotalPumpHead_ (x.SimSys_TotalPumpHead_, f, this),
        SimSys_PhaseChangeCircRate_ (x.SimSys_PhaseChangeCircRate_, f, this),
        SimSys_PumpDriveType_ (x.SimSys_PumpDriveType_, f, this),
        SimSys_VarSpdPumpCubicCurveName_ (x.SimSys_VarSpdPumpCubicCurveName_, f, this),
        SimSys_PumpMotorHeatToFluid_ (x.SimSys_PumpMotorHeatToFluid_, f, this),
        SimSys_SumUADistPiping_ (x.SimSys_SumUADistPiping_, f, this),
        SimSys_DistPipingZoneName_ (x.SimSys_DistPipingZoneName_, f, this),
        SimSys_SumUARecvr_SepShell_ (x.SimSys_SumUARecvr_SepShell_, f, this),
        SimSys_Recvr_SepZoneName_ (x.SimSys_Recvr_SepZoneName_, f, this),
        SimSys_EvapRefrigInventory_ (x.SimSys_EvapRefrigInventory_, f, this)
      {
      }

      SimSystem_RefrigerationSecondary_FullSystem::
      SimSystem_RefrigerationSecondary_FullSystem (const ::xercesc::DOMElement& e,
                                                   ::xml_schema::flags f,
                                                   ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary (e, f | ::xml_schema::flags::base, c),
        SimSys_RefrigCaseWalkinCaseAndWalkInListName_ (this),
        SimSys_EndUseSubCat_ (this),
        SimSys_CircFluidType_ (this),
        SimSys_CircFluidName_ (this),
        SimSys_EvapCapacity_ (this),
        SimSys_EvapFlowRateSecndFluid_ (this),
        SimSys_EvapEvaporatingTemp_ (this),
        SimSys_EvapApproachTempDiff_ (this),
        SimSys_EvapRangeTempDiff_ (this),
        SimSys_NumbPumpsInLoop_ (this),
        SimSys_TotalPumpFlowRate_ (this),
        SimSys_TotalPumpPower_ (this),
        SimSys_TotalPumpHead_ (this),
        SimSys_PhaseChangeCircRate_ (this),
        SimSys_PumpDriveType_ (this),
        SimSys_VarSpdPumpCubicCurveName_ (this),
        SimSys_PumpMotorHeatToFluid_ (this),
        SimSys_SumUADistPiping_ (this),
        SimSys_DistPipingZoneName_ (this),
        SimSys_SumUARecvr_SepShell_ (this),
        SimSys_Recvr_SepZoneName_ (this),
        SimSys_EvapRefrigInventory_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSystem_RefrigerationSecondary_FullSystem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimSys_RefrigCaseWalkinCaseAndWalkInListName
          //
          if (n.name () == "SimSys_RefrigCaseWalkinCaseAndWalkInListName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_RefrigCaseWalkinCaseAndWalkInListName_type > r (
              SimSys_RefrigCaseWalkinCaseAndWalkInListName_traits::create (i, f, this));

            if (!this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_)
            {
              this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_.set (r);
              continue;
            }
          }

          // SimSys_EndUseSubCat
          //
          if (n.name () == "SimSys_EndUseSubCat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_EndUseSubCat_type > r (
              SimSys_EndUseSubCat_traits::create (i, f, this));

            if (!this->SimSys_EndUseSubCat_)
            {
              this->SimSys_EndUseSubCat_.set (r);
              continue;
            }
          }

          // SimSys_CircFluidType
          //
          if (n.name () == "SimSys_CircFluidType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CircFluidType_type > r (
              SimSys_CircFluidType_traits::create (i, f, this));

            if (!this->SimSys_CircFluidType_)
            {
              this->SimSys_CircFluidType_.set (r);
              continue;
            }
          }

          // SimSys_CircFluidName
          //
          if (n.name () == "SimSys_CircFluidName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_CircFluidName_type > r (
              SimSys_CircFluidName_traits::create (i, f, this));

            if (!this->SimSys_CircFluidName_)
            {
              this->SimSys_CircFluidName_.set (r);
              continue;
            }
          }

          // SimSys_EvapCapacity
          //
          if (n.name () == "SimSys_EvapCapacity" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapCapacity_)
            {
              this->SimSys_EvapCapacity_.set (SimSys_EvapCapacity_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_EvapFlowRateSecndFluid
          //
          if (n.name () == "SimSys_EvapFlowRateSecndFluid" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapFlowRateSecndFluid_)
            {
              this->SimSys_EvapFlowRateSecndFluid_.set (SimSys_EvapFlowRateSecndFluid_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_EvapEvaporatingTemp
          //
          if (n.name () == "SimSys_EvapEvaporatingTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapEvaporatingTemp_)
            {
              this->SimSys_EvapEvaporatingTemp_.set (SimSys_EvapEvaporatingTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_EvapApproachTempDiff
          //
          if (n.name () == "SimSys_EvapApproachTempDiff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapApproachTempDiff_)
            {
              this->SimSys_EvapApproachTempDiff_.set (SimSys_EvapApproachTempDiff_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_EvapRangeTempDiff
          //
          if (n.name () == "SimSys_EvapRangeTempDiff" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapRangeTempDiff_)
            {
              this->SimSys_EvapRangeTempDiff_.set (SimSys_EvapRangeTempDiff_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_NumbPumpsInLoop
          //
          if (n.name () == "SimSys_NumbPumpsInLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_NumbPumpsInLoop_)
            {
              this->SimSys_NumbPumpsInLoop_.set (SimSys_NumbPumpsInLoop_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_TotalPumpFlowRate
          //
          if (n.name () == "SimSys_TotalPumpFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_TotalPumpFlowRate_)
            {
              this->SimSys_TotalPumpFlowRate_.set (SimSys_TotalPumpFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_TotalPumpPower
          //
          if (n.name () == "SimSys_TotalPumpPower" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_TotalPumpPower_)
            {
              this->SimSys_TotalPumpPower_.set (SimSys_TotalPumpPower_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_TotalPumpHead
          //
          if (n.name () == "SimSys_TotalPumpHead" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_TotalPumpHead_)
            {
              this->SimSys_TotalPumpHead_.set (SimSys_TotalPumpHead_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PhaseChangeCircRate
          //
          if (n.name () == "SimSys_PhaseChangeCircRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PhaseChangeCircRate_)
            {
              this->SimSys_PhaseChangeCircRate_.set (SimSys_PhaseChangeCircRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_PumpDriveType
          //
          if (n.name () == "SimSys_PumpDriveType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_PumpDriveType_type > r (
              SimSys_PumpDriveType_traits::create (i, f, this));

            if (!this->SimSys_PumpDriveType_)
            {
              this->SimSys_PumpDriveType_.set (r);
              continue;
            }
          }

          // SimSys_VarSpdPumpCubicCurveName
          //
          if (n.name () == "SimSys_VarSpdPumpCubicCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_VarSpdPumpCubicCurveName_type > r (
              SimSys_VarSpdPumpCubicCurveName_traits::create (i, f, this));

            if (!this->SimSys_VarSpdPumpCubicCurveName_)
            {
              this->SimSys_VarSpdPumpCubicCurveName_.set (r);
              continue;
            }
          }

          // SimSys_PumpMotorHeatToFluid
          //
          if (n.name () == "SimSys_PumpMotorHeatToFluid" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_PumpMotorHeatToFluid_)
            {
              this->SimSys_PumpMotorHeatToFluid_.set (SimSys_PumpMotorHeatToFluid_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_SumUADistPiping
          //
          if (n.name () == "SimSys_SumUADistPiping" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_SumUADistPiping_)
            {
              this->SimSys_SumUADistPiping_.set (SimSys_SumUADistPiping_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_DistPipingZoneName
          //
          if (n.name () == "SimSys_DistPipingZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_DistPipingZoneName_type > r (
              SimSys_DistPipingZoneName_traits::create (i, f, this));

            if (!this->SimSys_DistPipingZoneName_)
            {
              this->SimSys_DistPipingZoneName_.set (r);
              continue;
            }
          }

          // SimSys_SumUARecvr_SepShell
          //
          if (n.name () == "SimSys_SumUARecvr_SepShell" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_SumUARecvr_SepShell_)
            {
              this->SimSys_SumUARecvr_SepShell_.set (SimSys_SumUARecvr_SepShell_traits::create (i, f, this));
              continue;
            }
          }

          // SimSys_Recvr_SepZoneName
          //
          if (n.name () == "SimSys_Recvr_SepZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimSys_Recvr_SepZoneName_type > r (
              SimSys_Recvr_SepZoneName_traits::create (i, f, this));

            if (!this->SimSys_Recvr_SepZoneName_)
            {
              this->SimSys_Recvr_SepZoneName_.set (r);
              continue;
            }
          }

          // SimSys_EvapRefrigInventory
          //
          if (n.name () == "SimSys_EvapRefrigInventory" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimSys_EvapRefrigInventory_)
            {
              this->SimSys_EvapRefrigInventory_.set (SimSys_EvapRefrigInventory_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimSystem_RefrigerationSecondary_FullSystem* SimSystem_RefrigerationSecondary_FullSystem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSystem_RefrigerationSecondary_FullSystem (*this, f, c);
      }

      SimSystem_RefrigerationSecondary_FullSystem& SimSystem_RefrigerationSecondary_FullSystem::
      operator= (const SimSystem_RefrigerationSecondary_FullSystem& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSystem_RefrigerationSecondary& > (*this) = x;
          this->SimSys_RefrigCaseWalkinCaseAndWalkInListName_ = x.SimSys_RefrigCaseWalkinCaseAndWalkInListName_;
          this->SimSys_EndUseSubCat_ = x.SimSys_EndUseSubCat_;
          this->SimSys_CircFluidType_ = x.SimSys_CircFluidType_;
          this->SimSys_CircFluidName_ = x.SimSys_CircFluidName_;
          this->SimSys_EvapCapacity_ = x.SimSys_EvapCapacity_;
          this->SimSys_EvapFlowRateSecndFluid_ = x.SimSys_EvapFlowRateSecndFluid_;
          this->SimSys_EvapEvaporatingTemp_ = x.SimSys_EvapEvaporatingTemp_;
          this->SimSys_EvapApproachTempDiff_ = x.SimSys_EvapApproachTempDiff_;
          this->SimSys_EvapRangeTempDiff_ = x.SimSys_EvapRangeTempDiff_;
          this->SimSys_NumbPumpsInLoop_ = x.SimSys_NumbPumpsInLoop_;
          this->SimSys_TotalPumpFlowRate_ = x.SimSys_TotalPumpFlowRate_;
          this->SimSys_TotalPumpPower_ = x.SimSys_TotalPumpPower_;
          this->SimSys_TotalPumpHead_ = x.SimSys_TotalPumpHead_;
          this->SimSys_PhaseChangeCircRate_ = x.SimSys_PhaseChangeCircRate_;
          this->SimSys_PumpDriveType_ = x.SimSys_PumpDriveType_;
          this->SimSys_VarSpdPumpCubicCurveName_ = x.SimSys_VarSpdPumpCubicCurveName_;
          this->SimSys_PumpMotorHeatToFluid_ = x.SimSys_PumpMotorHeatToFluid_;
          this->SimSys_SumUADistPiping_ = x.SimSys_SumUADistPiping_;
          this->SimSys_DistPipingZoneName_ = x.SimSys_DistPipingZoneName_;
          this->SimSys_SumUARecvr_SepShell_ = x.SimSys_SumUARecvr_SepShell_;
          this->SimSys_Recvr_SepZoneName_ = x.SimSys_Recvr_SepZoneName_;
          this->SimSys_EvapRefrigInventory_ = x.SimSys_EvapRefrigInventory_;
        }

        return *this;
      }

      SimSystem_RefrigerationSecondary_FullSystem::
      ~SimSystem_RefrigerationSecondary_FullSystem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

