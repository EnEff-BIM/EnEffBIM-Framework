// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBldgParams.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimBldgParams
      // 

      const SimBldgParams::BuildingName_optional& SimBldgParams::
      BuildingName () const
      {
        return this->BuildingName_;
      }

      SimBldgParams::BuildingName_optional& SimBldgParams::
      BuildingName ()
      {
        return this->BuildingName_;
      }

      void SimBldgParams::
      BuildingName (const BuildingName_type& x)
      {
        this->BuildingName_.set (x);
      }

      void SimBldgParams::
      BuildingName (const BuildingName_optional& x)
      {
        this->BuildingName_ = x;
      }

      void SimBldgParams::
      BuildingName (::std::auto_ptr< BuildingName_type > x)
      {
        this->BuildingName_.set (x);
      }

      const SimBldgParams::ContainingBldgSiteParams_optional& SimBldgParams::
      ContainingBldgSiteParams () const
      {
        return this->ContainingBldgSiteParams_;
      }

      SimBldgParams::ContainingBldgSiteParams_optional& SimBldgParams::
      ContainingBldgSiteParams ()
      {
        return this->ContainingBldgSiteParams_;
      }

      void SimBldgParams::
      ContainingBldgSiteParams (const ContainingBldgSiteParams_type& x)
      {
        this->ContainingBldgSiteParams_.set (x);
      }

      void SimBldgParams::
      ContainingBldgSiteParams (const ContainingBldgSiteParams_optional& x)
      {
        this->ContainingBldgSiteParams_ = x;
      }

      void SimBldgParams::
      ContainingBldgSiteParams (::std::auto_ptr< ContainingBldgSiteParams_type > x)
      {
        this->ContainingBldgSiteParams_.set (x);
      }

      const SimBldgParams::ContainedBldgStoryParams_optional& SimBldgParams::
      ContainedBldgStoryParams () const
      {
        return this->ContainedBldgStoryParams_;
      }

      SimBldgParams::ContainedBldgStoryParams_optional& SimBldgParams::
      ContainedBldgStoryParams ()
      {
        return this->ContainedBldgStoryParams_;
      }

      void SimBldgParams::
      ContainedBldgStoryParams (const ContainedBldgStoryParams_type& x)
      {
        this->ContainedBldgStoryParams_.set (x);
      }

      void SimBldgParams::
      ContainedBldgStoryParams (const ContainedBldgStoryParams_optional& x)
      {
        this->ContainedBldgStoryParams_ = x;
      }

      void SimBldgParams::
      ContainedBldgStoryParams (::std::auto_ptr< ContainedBldgStoryParams_type > x)
      {
        this->ContainedBldgStoryParams_.set (x);
      }

      const SimBldgParams::BldgConstructionsTemplate_optional& SimBldgParams::
      BldgConstructionsTemplate () const
      {
        return this->BldgConstructionsTemplate_;
      }

      SimBldgParams::BldgConstructionsTemplate_optional& SimBldgParams::
      BldgConstructionsTemplate ()
      {
        return this->BldgConstructionsTemplate_;
      }

      void SimBldgParams::
      BldgConstructionsTemplate (const BldgConstructionsTemplate_type& x)
      {
        this->BldgConstructionsTemplate_.set (x);
      }

      void SimBldgParams::
      BldgConstructionsTemplate (const BldgConstructionsTemplate_optional& x)
      {
        this->BldgConstructionsTemplate_ = x;
      }

      void SimBldgParams::
      BldgConstructionsTemplate (::std::auto_ptr< BldgConstructionsTemplate_type > x)
      {
        this->BldgConstructionsTemplate_.set (x);
      }

      const SimBldgParams::OverallHeight_optional& SimBldgParams::
      OverallHeight () const
      {
        return this->OverallHeight_;
      }

      SimBldgParams::OverallHeight_optional& SimBldgParams::
      OverallHeight ()
      {
        return this->OverallHeight_;
      }

      void SimBldgParams::
      OverallHeight (const OverallHeight_type& x)
      {
        this->OverallHeight_.set (x);
      }

      void SimBldgParams::
      OverallHeight (const OverallHeight_optional& x)
      {
        this->OverallHeight_ = x;
      }

      const SimBldgParams::GrossFloorAreaAllStories_optional& SimBldgParams::
      GrossFloorAreaAllStories () const
      {
        return this->GrossFloorAreaAllStories_;
      }

      SimBldgParams::GrossFloorAreaAllStories_optional& SimBldgParams::
      GrossFloorAreaAllStories ()
      {
        return this->GrossFloorAreaAllStories_;
      }

      void SimBldgParams::
      GrossFloorAreaAllStories (const GrossFloorAreaAllStories_type& x)
      {
        this->GrossFloorAreaAllStories_.set (x);
      }

      void SimBldgParams::
      GrossFloorAreaAllStories (const GrossFloorAreaAllStories_optional& x)
      {
        this->GrossFloorAreaAllStories_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimBldgParams
      //

      SimBldgParams::
      SimBldgParams (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (RefId),
        BuildingName_ (this),
        ContainingBldgSiteParams_ (this),
        ContainedBldgStoryParams_ (this),
        BldgConstructionsTemplate_ (this),
        OverallHeight_ (this),
        GrossFloorAreaAllStories_ (this)
      {
      }

      SimBldgParams::
      SimBldgParams (const SimBldgParams& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (x, f, c),
        BuildingName_ (x.BuildingName_, f, this),
        ContainingBldgSiteParams_ (x.ContainingBldgSiteParams_, f, this),
        ContainedBldgStoryParams_ (x.ContainedBldgStoryParams_, f, this),
        BldgConstructionsTemplate_ (x.BldgConstructionsTemplate_, f, this),
        OverallHeight_ (x.OverallHeight_, f, this),
        GrossFloorAreaAllStories_ (x.GrossFloorAreaAllStories_, f, this)
      {
      }

      SimBldgParams::
      SimBldgParams (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        BuildingName_ (this),
        ContainingBldgSiteParams_ (this),
        ContainedBldgStoryParams_ (this),
        BldgConstructionsTemplate_ (this),
        OverallHeight_ (this),
        GrossFloorAreaAllStories_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBldgParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // BuildingName
          //
          if (n.name () == "BuildingName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< BuildingName_type > r (
              BuildingName_traits::create (i, f, this));

            if (!this->BuildingName_)
            {
              this->BuildingName_.set (r);
              continue;
            }
          }

          // ContainingBldgSiteParams
          //
          if (n.name () == "ContainingBldgSiteParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainingBldgSiteParams_type > r (
              ContainingBldgSiteParams_traits::create (i, f, this));

            if (!this->ContainingBldgSiteParams_)
            {
              this->ContainingBldgSiteParams_.set (r);
              continue;
            }
          }

          // ContainedBldgStoryParams
          //
          if (n.name () == "ContainedBldgStoryParams" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ContainedBldgStoryParams_type > r (
              ContainedBldgStoryParams_traits::create (i, f, this));

            if (!this->ContainedBldgStoryParams_)
            {
              this->ContainedBldgStoryParams_.set (r);
              continue;
            }
          }

          // BldgConstructionsTemplate
          //
          if (n.name () == "BldgConstructionsTemplate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< BldgConstructionsTemplate_type > r (
              BldgConstructionsTemplate_traits::create (i, f, this));

            if (!this->BldgConstructionsTemplate_)
            {
              this->BldgConstructionsTemplate_.set (r);
              continue;
            }
          }

          // OverallHeight
          //
          if (n.name () == "OverallHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->OverallHeight_)
            {
              this->OverallHeight_.set (OverallHeight_traits::create (i, f, this));
              continue;
            }
          }

          // GrossFloorAreaAllStories
          //
          if (n.name () == "GrossFloorAreaAllStories" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->GrossFloorAreaAllStories_)
            {
              this->GrossFloorAreaAllStories_.set (GrossFloorAreaAllStories_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBldgParams* SimBldgParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBldgParams (*this, f, c);
      }

      SimBldgParams& SimBldgParams::
      operator= (const SimBldgParams& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams& > (*this) = x;
          this->BuildingName_ = x.BuildingName_;
          this->ContainingBldgSiteParams_ = x.ContainingBldgSiteParams_;
          this->ContainedBldgStoryParams_ = x.ContainedBldgStoryParams_;
          this->BldgConstructionsTemplate_ = x.BldgConstructionsTemplate_;
          this->OverallHeight_ = x.OverallHeight_;
          this->GrossFloorAreaAllStories_ = x.GrossFloorAreaAllStories_;
        }

        return *this;
      }

      SimBldgParams::
      ~SimBldgParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

