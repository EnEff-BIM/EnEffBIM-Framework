// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_OpaqueMaterial_Default.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_OpaqueMaterial_Default
      // 

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_Rough_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Rough () const
      {
        return this->SimMaterial_Rough_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_Rough_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Rough ()
      {
        return this->SimMaterial_Rough_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Rough (const SimMaterial_Rough_type& x)
      {
        this->SimMaterial_Rough_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Rough (const SimMaterial_Rough_optional& x)
      {
        this->SimMaterial_Rough_ = x;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Rough (::std::auto_ptr< SimMaterial_Rough_type > x)
      {
        this->SimMaterial_Rough_.set (x);
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_Thick_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_Thick_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_Cond_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Cond () const
      {
        return this->SimMaterial_Cond_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_Cond_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Cond ()
      {
        return this->SimMaterial_Cond_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Cond (const SimMaterial_Cond_type& x)
      {
        this->SimMaterial_Cond_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Cond (const SimMaterial_Cond_optional& x)
      {
        this->SimMaterial_Cond_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_Density_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Density () const
      {
        return this->SimMaterial_Density_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_Density_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Density ()
      {
        return this->SimMaterial_Density_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Density (const SimMaterial_Density_type& x)
      {
        this->SimMaterial_Density_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_Density (const SimMaterial_Density_optional& x)
      {
        this->SimMaterial_Density_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_SpecificHeat_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SpecificHeat () const
      {
        return this->SimMaterial_SpecificHeat_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_SpecificHeat_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SpecificHeat ()
      {
        return this->SimMaterial_SpecificHeat_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SpecificHeat (const SimMaterial_SpecificHeat_type& x)
      {
        this->SimMaterial_SpecificHeat_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SpecificHeat (const SimMaterial_SpecificHeat_optional& x)
      {
        this->SimMaterial_SpecificHeat_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_ThermalAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_ThermalAbsorptance () const
      {
        return this->SimMaterial_ThermalAbsorptance_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_ThermalAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_ThermalAbsorptance ()
      {
        return this->SimMaterial_ThermalAbsorptance_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_ThermalAbsorptance (const SimMaterial_ThermalAbsorptance_type& x)
      {
        this->SimMaterial_ThermalAbsorptance_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_ThermalAbsorptance (const SimMaterial_ThermalAbsorptance_optional& x)
      {
        this->SimMaterial_ThermalAbsorptance_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_SolarAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SolarAbsorptance () const
      {
        return this->SimMaterial_SolarAbsorptance_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_SolarAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SolarAbsorptance ()
      {
        return this->SimMaterial_SolarAbsorptance_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SolarAbsorptance (const SimMaterial_SolarAbsorptance_type& x)
      {
        this->SimMaterial_SolarAbsorptance_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_SolarAbsorptance (const SimMaterial_SolarAbsorptance_optional& x)
      {
        this->SimMaterial_SolarAbsorptance_ = x;
      }

      const SimMaterial_OpaqueMaterial_Default::SimMaterial_VisAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_VisAbsorptance () const
      {
        return this->SimMaterial_VisAbsorptance_;
      }

      SimMaterial_OpaqueMaterial_Default::SimMaterial_VisAbsorptance_optional& SimMaterial_OpaqueMaterial_Default::
      SimMaterial_VisAbsorptance ()
      {
        return this->SimMaterial_VisAbsorptance_;
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_VisAbsorptance (const SimMaterial_VisAbsorptance_type& x)
      {
        this->SimMaterial_VisAbsorptance_.set (x);
      }

      void SimMaterial_OpaqueMaterial_Default::
      SimMaterial_VisAbsorptance (const SimMaterial_VisAbsorptance_optional& x)
      {
        this->SimMaterial_VisAbsorptance_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_OpaqueMaterial_Default
      //

      SimMaterial_OpaqueMaterial_Default::
      SimMaterial_OpaqueMaterial_Default (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_OpaqueMaterial (RefId),
        SimMaterial_Rough_ (this),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_Density_ (this),
        SimMaterial_SpecificHeat_ (this),
        SimMaterial_ThermalAbsorptance_ (this),
        SimMaterial_SolarAbsorptance_ (this),
        SimMaterial_VisAbsorptance_ (this)
      {
      }

      SimMaterial_OpaqueMaterial_Default::
      SimMaterial_OpaqueMaterial_Default (const SimMaterial_OpaqueMaterial_Default& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_OpaqueMaterial (x, f, c),
        SimMaterial_Rough_ (x.SimMaterial_Rough_, f, this),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_Cond_ (x.SimMaterial_Cond_, f, this),
        SimMaterial_Density_ (x.SimMaterial_Density_, f, this),
        SimMaterial_SpecificHeat_ (x.SimMaterial_SpecificHeat_, f, this),
        SimMaterial_ThermalAbsorptance_ (x.SimMaterial_ThermalAbsorptance_, f, this),
        SimMaterial_SolarAbsorptance_ (x.SimMaterial_SolarAbsorptance_, f, this),
        SimMaterial_VisAbsorptance_ (x.SimMaterial_VisAbsorptance_, f, this)
      {
      }

      SimMaterial_OpaqueMaterial_Default::
      SimMaterial_OpaqueMaterial_Default (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_OpaqueMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Rough_ (this),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_Density_ (this),
        SimMaterial_SpecificHeat_ (this),
        SimMaterial_ThermalAbsorptance_ (this),
        SimMaterial_SolarAbsorptance_ (this),
        SimMaterial_VisAbsorptance_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_OpaqueMaterial_Default::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimMaterial_OpaqueMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Rough
          //
          if (n.name () == "SimMaterial_Rough" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_Rough_type > r (
              SimMaterial_Rough_traits::create (i, f, this));

            if (!this->SimMaterial_Rough_)
            {
              this->SimMaterial_Rough_.set (r);
              continue;
            }
          }

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Cond
          //
          if (n.name () == "SimMaterial_Cond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Cond_)
            {
              this->SimMaterial_Cond_.set (SimMaterial_Cond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Density
          //
          if (n.name () == "SimMaterial_Density" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Density_)
            {
              this->SimMaterial_Density_.set (SimMaterial_Density_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SpecificHeat
          //
          if (n.name () == "SimMaterial_SpecificHeat" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SpecificHeat_)
            {
              this->SimMaterial_SpecificHeat_.set (SimMaterial_SpecificHeat_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_ThermalAbsorptance
          //
          if (n.name () == "SimMaterial_ThermalAbsorptance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_ThermalAbsorptance_)
            {
              this->SimMaterial_ThermalAbsorptance_.set (SimMaterial_ThermalAbsorptance_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SolarAbsorptance
          //
          if (n.name () == "SimMaterial_SolarAbsorptance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SolarAbsorptance_)
            {
              this->SimMaterial_SolarAbsorptance_.set (SimMaterial_SolarAbsorptance_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_VisAbsorptance
          //
          if (n.name () == "SimMaterial_VisAbsorptance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_VisAbsorptance_)
            {
              this->SimMaterial_VisAbsorptance_.set (SimMaterial_VisAbsorptance_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_OpaqueMaterial_Default* SimMaterial_OpaqueMaterial_Default::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_OpaqueMaterial_Default (*this, f, c);
      }

      SimMaterial_OpaqueMaterial_Default& SimMaterial_OpaqueMaterial_Default::
      operator= (const SimMaterial_OpaqueMaterial_Default& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimMaterial_OpaqueMaterial& > (*this) = x;
          this->SimMaterial_Rough_ = x.SimMaterial_Rough_;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_Cond_ = x.SimMaterial_Cond_;
          this->SimMaterial_Density_ = x.SimMaterial_Density_;
          this->SimMaterial_SpecificHeat_ = x.SimMaterial_SpecificHeat_;
          this->SimMaterial_ThermalAbsorptance_ = x.SimMaterial_ThermalAbsorptance_;
          this->SimMaterial_SolarAbsorptance_ = x.SimMaterial_SolarAbsorptance_;
          this->SimMaterial_VisAbsorptance_ = x.SimMaterial_VisAbsorptance_;
        }

        return *this;
      }

      SimMaterial_OpaqueMaterial_Default::
      ~SimMaterial_OpaqueMaterial_Default ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

