// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_CONTROLLER_OUTDOOR_AIR_ECONOMIZER_CONTROL_HXX
#define SIM_CONTROLLER_OUTDOOR_AIR_ECONOMIZER_CONTROL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimController_OutdoorAir_EconomizerControl;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simcontroller_outdoorair.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimController_OutdoorAir_EconomizerControl: public ::namespaces::Sim::MepModel::SimController_OutdoorAir
      {
        public:
        // SimCntrl_ReliefAirOutletNodeName
        //
        typedef ::xml_schema::string SimCntrl_ReliefAirOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_ReliefAirOutletNodeName_type > SimCntrl_ReliefAirOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_ReliefAirOutletNodeName_type, char > SimCntrl_ReliefAirOutletNodeName_traits;

        const SimCntrl_ReliefAirOutletNodeName_optional&
        SimCntrl_ReliefAirOutletNodeName () const;

        SimCntrl_ReliefAirOutletNodeName_optional&
        SimCntrl_ReliefAirOutletNodeName ();

        void
        SimCntrl_ReliefAirOutletNodeName (const SimCntrl_ReliefAirOutletNodeName_type& x);

        void
        SimCntrl_ReliefAirOutletNodeName (const SimCntrl_ReliefAirOutletNodeName_optional& x);

        void
        SimCntrl_ReliefAirOutletNodeName (::std::auto_ptr< SimCntrl_ReliefAirOutletNodeName_type > p);

        // SimCntrl_RtnAirNodeName
        //
        typedef ::xml_schema::string SimCntrl_RtnAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_RtnAirNodeName_type > SimCntrl_RtnAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_RtnAirNodeName_type, char > SimCntrl_RtnAirNodeName_traits;

        const SimCntrl_RtnAirNodeName_optional&
        SimCntrl_RtnAirNodeName () const;

        SimCntrl_RtnAirNodeName_optional&
        SimCntrl_RtnAirNodeName ();

        void
        SimCntrl_RtnAirNodeName (const SimCntrl_RtnAirNodeName_type& x);

        void
        SimCntrl_RtnAirNodeName (const SimCntrl_RtnAirNodeName_optional& x);

        void
        SimCntrl_RtnAirNodeName (::std::auto_ptr< SimCntrl_RtnAirNodeName_type > p);

        // SimCntrl_MixedAirNodeName
        //
        typedef ::xml_schema::string SimCntrl_MixedAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MixedAirNodeName_type > SimCntrl_MixedAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MixedAirNodeName_type, char > SimCntrl_MixedAirNodeName_traits;

        const SimCntrl_MixedAirNodeName_optional&
        SimCntrl_MixedAirNodeName () const;

        SimCntrl_MixedAirNodeName_optional&
        SimCntrl_MixedAirNodeName ();

        void
        SimCntrl_MixedAirNodeName (const SimCntrl_MixedAirNodeName_type& x);

        void
        SimCntrl_MixedAirNodeName (const SimCntrl_MixedAirNodeName_optional& x);

        void
        SimCntrl_MixedAirNodeName (::std::auto_ptr< SimCntrl_MixedAirNodeName_type > p);

        // SimCntrl_ActuatorNodeName
        //
        typedef ::xml_schema::string SimCntrl_ActuatorNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_ActuatorNodeName_type > SimCntrl_ActuatorNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_ActuatorNodeName_type, char > SimCntrl_ActuatorNodeName_traits;

        const SimCntrl_ActuatorNodeName_optional&
        SimCntrl_ActuatorNodeName () const;

        SimCntrl_ActuatorNodeName_optional&
        SimCntrl_ActuatorNodeName ();

        void
        SimCntrl_ActuatorNodeName (const SimCntrl_ActuatorNodeName_type& x);

        void
        SimCntrl_ActuatorNodeName (const SimCntrl_ActuatorNodeName_optional& x);

        void
        SimCntrl_ActuatorNodeName (::std::auto_ptr< SimCntrl_ActuatorNodeName_type > p);

        // SimCntrl_MinOutdrAirFlowRate
        //
        typedef ::xml_schema::double_ SimCntrl_MinOutdrAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MinOutdrAirFlowRate_type > SimCntrl_MinOutdrAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MinOutdrAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_MinOutdrAirFlowRate_traits;

        const SimCntrl_MinOutdrAirFlowRate_optional&
        SimCntrl_MinOutdrAirFlowRate () const;

        SimCntrl_MinOutdrAirFlowRate_optional&
        SimCntrl_MinOutdrAirFlowRate ();

        void
        SimCntrl_MinOutdrAirFlowRate (const SimCntrl_MinOutdrAirFlowRate_type& x);

        void
        SimCntrl_MinOutdrAirFlowRate (const SimCntrl_MinOutdrAirFlowRate_optional& x);

        // SimCntrl_MaxOutdrAirFlowRate
        //
        typedef ::xml_schema::double_ SimCntrl_MaxOutdrAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MaxOutdrAirFlowRate_type > SimCntrl_MaxOutdrAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MaxOutdrAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_MaxOutdrAirFlowRate_traits;

        const SimCntrl_MaxOutdrAirFlowRate_optional&
        SimCntrl_MaxOutdrAirFlowRate () const;

        SimCntrl_MaxOutdrAirFlowRate_optional&
        SimCntrl_MaxOutdrAirFlowRate ();

        void
        SimCntrl_MaxOutdrAirFlowRate (const SimCntrl_MaxOutdrAirFlowRate_type& x);

        void
        SimCntrl_MaxOutdrAirFlowRate (const SimCntrl_MaxOutdrAirFlowRate_optional& x);

        // SimCntrl_EconControlType
        //
        typedef ::xml_schema::string SimCntrl_EconControlType_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconControlType_type > SimCntrl_EconControlType_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconControlType_type, char > SimCntrl_EconControlType_traits;

        const SimCntrl_EconControlType_optional&
        SimCntrl_EconControlType () const;

        SimCntrl_EconControlType_optional&
        SimCntrl_EconControlType ();

        void
        SimCntrl_EconControlType (const SimCntrl_EconControlType_type& x);

        void
        SimCntrl_EconControlType (const SimCntrl_EconControlType_optional& x);

        void
        SimCntrl_EconControlType (::std::auto_ptr< SimCntrl_EconControlType_type > p);

        // SimCntrl_EconControlActionType
        //
        typedef ::xml_schema::string SimCntrl_EconControlActionType_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconControlActionType_type > SimCntrl_EconControlActionType_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconControlActionType_type, char > SimCntrl_EconControlActionType_traits;

        const SimCntrl_EconControlActionType_optional&
        SimCntrl_EconControlActionType () const;

        SimCntrl_EconControlActionType_optional&
        SimCntrl_EconControlActionType ();

        void
        SimCntrl_EconControlActionType (const SimCntrl_EconControlActionType_type& x);

        void
        SimCntrl_EconControlActionType (const SimCntrl_EconControlActionType_optional& x);

        void
        SimCntrl_EconControlActionType (::std::auto_ptr< SimCntrl_EconControlActionType_type > p);

        // SimCntrl_EconMaxLimitDryBulbTemp
        //
        typedef ::xml_schema::double_ SimCntrl_EconMaxLimitDryBulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconMaxLimitDryBulbTemp_type > SimCntrl_EconMaxLimitDryBulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconMaxLimitDryBulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_EconMaxLimitDryBulbTemp_traits;

        const SimCntrl_EconMaxLimitDryBulbTemp_optional&
        SimCntrl_EconMaxLimitDryBulbTemp () const;

        SimCntrl_EconMaxLimitDryBulbTemp_optional&
        SimCntrl_EconMaxLimitDryBulbTemp ();

        void
        SimCntrl_EconMaxLimitDryBulbTemp (const SimCntrl_EconMaxLimitDryBulbTemp_type& x);

        void
        SimCntrl_EconMaxLimitDryBulbTemp (const SimCntrl_EconMaxLimitDryBulbTemp_optional& x);

        // SimCntrl_EconMaxLimitEnthalpy
        //
        typedef ::xml_schema::double_ SimCntrl_EconMaxLimitEnthalpy_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconMaxLimitEnthalpy_type > SimCntrl_EconMaxLimitEnthalpy_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconMaxLimitEnthalpy_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_EconMaxLimitEnthalpy_traits;

        const SimCntrl_EconMaxLimitEnthalpy_optional&
        SimCntrl_EconMaxLimitEnthalpy () const;

        SimCntrl_EconMaxLimitEnthalpy_optional&
        SimCntrl_EconMaxLimitEnthalpy ();

        void
        SimCntrl_EconMaxLimitEnthalpy (const SimCntrl_EconMaxLimitEnthalpy_type& x);

        void
        SimCntrl_EconMaxLimitEnthalpy (const SimCntrl_EconMaxLimitEnthalpy_optional& x);

        // SimCntrl_EconMaxLimitDewpointTemp
        //
        typedef ::xml_schema::double_ SimCntrl_EconMaxLimitDewpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconMaxLimitDewpointTemp_type > SimCntrl_EconMaxLimitDewpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconMaxLimitDewpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_EconMaxLimitDewpointTemp_traits;

        const SimCntrl_EconMaxLimitDewpointTemp_optional&
        SimCntrl_EconMaxLimitDewpointTemp () const;

        SimCntrl_EconMaxLimitDewpointTemp_optional&
        SimCntrl_EconMaxLimitDewpointTemp ();

        void
        SimCntrl_EconMaxLimitDewpointTemp (const SimCntrl_EconMaxLimitDewpointTemp_type& x);

        void
        SimCntrl_EconMaxLimitDewpointTemp (const SimCntrl_EconMaxLimitDewpointTemp_optional& x);

        // SimCntrl_ElecEnthalpyLimitCurveName
        //
        typedef ::xml_schema::idref SimCntrl_ElecEnthalpyLimitCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_ElecEnthalpyLimitCurveName_type > SimCntrl_ElecEnthalpyLimitCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_ElecEnthalpyLimitCurveName_type, char > SimCntrl_ElecEnthalpyLimitCurveName_traits;

        const SimCntrl_ElecEnthalpyLimitCurveName_optional&
        SimCntrl_ElecEnthalpyLimitCurveName () const;

        SimCntrl_ElecEnthalpyLimitCurveName_optional&
        SimCntrl_ElecEnthalpyLimitCurveName ();

        void
        SimCntrl_ElecEnthalpyLimitCurveName (const SimCntrl_ElecEnthalpyLimitCurveName_type& x);

        void
        SimCntrl_ElecEnthalpyLimitCurveName (const SimCntrl_ElecEnthalpyLimitCurveName_optional& x);

        void
        SimCntrl_ElecEnthalpyLimitCurveName (::std::auto_ptr< SimCntrl_ElecEnthalpyLimitCurveName_type > p);

        // SimCntrl_EconMinLimitDryBulbTemp
        //
        typedef ::xml_schema::double_ SimCntrl_EconMinLimitDryBulbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_EconMinLimitDryBulbTemp_type > SimCntrl_EconMinLimitDryBulbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_EconMinLimitDryBulbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_EconMinLimitDryBulbTemp_traits;

        const SimCntrl_EconMinLimitDryBulbTemp_optional&
        SimCntrl_EconMinLimitDryBulbTemp () const;

        SimCntrl_EconMinLimitDryBulbTemp_optional&
        SimCntrl_EconMinLimitDryBulbTemp ();

        void
        SimCntrl_EconMinLimitDryBulbTemp (const SimCntrl_EconMinLimitDryBulbTemp_type& x);

        void
        SimCntrl_EconMinLimitDryBulbTemp (const SimCntrl_EconMinLimitDryBulbTemp_optional& x);

        // SimCntrl_LockoutType
        //
        typedef ::xml_schema::string SimCntrl_LockoutType_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_LockoutType_type > SimCntrl_LockoutType_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_LockoutType_type, char > SimCntrl_LockoutType_traits;

        const SimCntrl_LockoutType_optional&
        SimCntrl_LockoutType () const;

        SimCntrl_LockoutType_optional&
        SimCntrl_LockoutType ();

        void
        SimCntrl_LockoutType (const SimCntrl_LockoutType_type& x);

        void
        SimCntrl_LockoutType (const SimCntrl_LockoutType_optional& x);

        void
        SimCntrl_LockoutType (::std::auto_ptr< SimCntrl_LockoutType_type > p);

        // SimCntrl_MinLimitType
        //
        typedef ::xml_schema::string SimCntrl_MinLimitType_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MinLimitType_type > SimCntrl_MinLimitType_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MinLimitType_type, char > SimCntrl_MinLimitType_traits;

        const SimCntrl_MinLimitType_optional&
        SimCntrl_MinLimitType () const;

        SimCntrl_MinLimitType_optional&
        SimCntrl_MinLimitType ();

        void
        SimCntrl_MinLimitType (const SimCntrl_MinLimitType_type& x);

        void
        SimCntrl_MinLimitType (const SimCntrl_MinLimitType_optional& x);

        void
        SimCntrl_MinLimitType (::std::auto_ptr< SimCntrl_MinLimitType_type > p);

        // SimCntrl_MinOutdrAirSchedName
        //
        typedef ::xml_schema::idref SimCntrl_MinOutdrAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MinOutdrAirSchedName_type > SimCntrl_MinOutdrAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MinOutdrAirSchedName_type, char > SimCntrl_MinOutdrAirSchedName_traits;

        const SimCntrl_MinOutdrAirSchedName_optional&
        SimCntrl_MinOutdrAirSchedName () const;

        SimCntrl_MinOutdrAirSchedName_optional&
        SimCntrl_MinOutdrAirSchedName ();

        void
        SimCntrl_MinOutdrAirSchedName (const SimCntrl_MinOutdrAirSchedName_type& x);

        void
        SimCntrl_MinOutdrAirSchedName (const SimCntrl_MinOutdrAirSchedName_optional& x);

        void
        SimCntrl_MinOutdrAirSchedName (::std::auto_ptr< SimCntrl_MinOutdrAirSchedName_type > p);

        // SimCntrl_MinFractionofOutdrAirSchedName
        //
        typedef ::xml_schema::idref SimCntrl_MinFractionofOutdrAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MinFractionofOutdrAirSchedName_type > SimCntrl_MinFractionofOutdrAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MinFractionofOutdrAirSchedName_type, char > SimCntrl_MinFractionofOutdrAirSchedName_traits;

        const SimCntrl_MinFractionofOutdrAirSchedName_optional&
        SimCntrl_MinFractionofOutdrAirSchedName () const;

        SimCntrl_MinFractionofOutdrAirSchedName_optional&
        SimCntrl_MinFractionofOutdrAirSchedName ();

        void
        SimCntrl_MinFractionofOutdrAirSchedName (const SimCntrl_MinFractionofOutdrAirSchedName_type& x);

        void
        SimCntrl_MinFractionofOutdrAirSchedName (const SimCntrl_MinFractionofOutdrAirSchedName_optional& x);

        void
        SimCntrl_MinFractionofOutdrAirSchedName (::std::auto_ptr< SimCntrl_MinFractionofOutdrAirSchedName_type > p);

        // SimCntrl_MaxFractionofOutdrAirSchedName
        //
        typedef ::xml_schema::idref SimCntrl_MaxFractionofOutdrAirSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MaxFractionofOutdrAirSchedName_type > SimCntrl_MaxFractionofOutdrAirSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MaxFractionofOutdrAirSchedName_type, char > SimCntrl_MaxFractionofOutdrAirSchedName_traits;

        const SimCntrl_MaxFractionofOutdrAirSchedName_optional&
        SimCntrl_MaxFractionofOutdrAirSchedName () const;

        SimCntrl_MaxFractionofOutdrAirSchedName_optional&
        SimCntrl_MaxFractionofOutdrAirSchedName ();

        void
        SimCntrl_MaxFractionofOutdrAirSchedName (const SimCntrl_MaxFractionofOutdrAirSchedName_type& x);

        void
        SimCntrl_MaxFractionofOutdrAirSchedName (const SimCntrl_MaxFractionofOutdrAirSchedName_optional& x);

        void
        SimCntrl_MaxFractionofOutdrAirSchedName (::std::auto_ptr< SimCntrl_MaxFractionofOutdrAirSchedName_type > p);

        // SimCntrl_MechanicalVentControllerName
        //
        typedef ::xml_schema::idref SimCntrl_MechanicalVentControllerName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_MechanicalVentControllerName_type > SimCntrl_MechanicalVentControllerName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_MechanicalVentControllerName_type, char > SimCntrl_MechanicalVentControllerName_traits;

        const SimCntrl_MechanicalVentControllerName_optional&
        SimCntrl_MechanicalVentControllerName () const;

        SimCntrl_MechanicalVentControllerName_optional&
        SimCntrl_MechanicalVentControllerName ();

        void
        SimCntrl_MechanicalVentControllerName (const SimCntrl_MechanicalVentControllerName_type& x);

        void
        SimCntrl_MechanicalVentControllerName (const SimCntrl_MechanicalVentControllerName_optional& x);

        void
        SimCntrl_MechanicalVentControllerName (::std::auto_ptr< SimCntrl_MechanicalVentControllerName_type > p);

        // SimCntrl_TimeofDayEconControlSchedName
        //
        typedef ::xml_schema::idref SimCntrl_TimeofDayEconControlSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_TimeofDayEconControlSchedName_type > SimCntrl_TimeofDayEconControlSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_TimeofDayEconControlSchedName_type, char > SimCntrl_TimeofDayEconControlSchedName_traits;

        const SimCntrl_TimeofDayEconControlSchedName_optional&
        SimCntrl_TimeofDayEconControlSchedName () const;

        SimCntrl_TimeofDayEconControlSchedName_optional&
        SimCntrl_TimeofDayEconControlSchedName ();

        void
        SimCntrl_TimeofDayEconControlSchedName (const SimCntrl_TimeofDayEconControlSchedName_type& x);

        void
        SimCntrl_TimeofDayEconControlSchedName (const SimCntrl_TimeofDayEconControlSchedName_optional& x);

        void
        SimCntrl_TimeofDayEconControlSchedName (::std::auto_ptr< SimCntrl_TimeofDayEconControlSchedName_type > p);

        // SimCntrl_HighHumidityControl
        //
        typedef ::xml_schema::string SimCntrl_HighHumidityControl_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_HighHumidityControl_type > SimCntrl_HighHumidityControl_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_HighHumidityControl_type, char > SimCntrl_HighHumidityControl_traits;

        const SimCntrl_HighHumidityControl_optional&
        SimCntrl_HighHumidityControl () const;

        SimCntrl_HighHumidityControl_optional&
        SimCntrl_HighHumidityControl ();

        void
        SimCntrl_HighHumidityControl (const SimCntrl_HighHumidityControl_type& x);

        void
        SimCntrl_HighHumidityControl (const SimCntrl_HighHumidityControl_optional& x);

        void
        SimCntrl_HighHumidityControl (::std::auto_ptr< SimCntrl_HighHumidityControl_type > p);

        // SimCntrl_HumidistatCntlZoneName
        //
        typedef ::xml_schema::idref SimCntrl_HumidistatCntlZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_HumidistatCntlZoneName_type > SimCntrl_HumidistatCntlZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_HumidistatCntlZoneName_type, char > SimCntrl_HumidistatCntlZoneName_traits;

        const SimCntrl_HumidistatCntlZoneName_optional&
        SimCntrl_HumidistatCntlZoneName () const;

        SimCntrl_HumidistatCntlZoneName_optional&
        SimCntrl_HumidistatCntlZoneName ();

        void
        SimCntrl_HumidistatCntlZoneName (const SimCntrl_HumidistatCntlZoneName_type& x);

        void
        SimCntrl_HumidistatCntlZoneName (const SimCntrl_HumidistatCntlZoneName_optional& x);

        void
        SimCntrl_HumidistatCntlZoneName (::std::auto_ptr< SimCntrl_HumidistatCntlZoneName_type > p);

        // SimCntrl_HighHumidOutdrAirFlowRatio
        //
        typedef ::xml_schema::double_ SimCntrl_HighHumidOutdrAirFlowRatio_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_HighHumidOutdrAirFlowRatio_type > SimCntrl_HighHumidOutdrAirFlowRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_HighHumidOutdrAirFlowRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimCntrl_HighHumidOutdrAirFlowRatio_traits;

        const SimCntrl_HighHumidOutdrAirFlowRatio_optional&
        SimCntrl_HighHumidOutdrAirFlowRatio () const;

        SimCntrl_HighHumidOutdrAirFlowRatio_optional&
        SimCntrl_HighHumidOutdrAirFlowRatio ();

        void
        SimCntrl_HighHumidOutdrAirFlowRatio (const SimCntrl_HighHumidOutdrAirFlowRatio_type& x);

        void
        SimCntrl_HighHumidOutdrAirFlowRatio (const SimCntrl_HighHumidOutdrAirFlowRatio_optional& x);

        // SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio
        //
        typedef ::xml_schema::string SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_type > SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_type, char > SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_traits;

        const SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_optional&
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio () const;

        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_optional&
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio ();

        void
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio (const SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_type& x);

        void
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio (const SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_optional& x);

        void
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio (::std::auto_ptr< SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_type > p);

        // SimCntrl_HeatRecoveryBypassControlType
        //
        typedef ::xml_schema::string SimCntrl_HeatRecoveryBypassControlType_type;
        typedef ::xsd::cxx::tree::optional< SimCntrl_HeatRecoveryBypassControlType_type > SimCntrl_HeatRecoveryBypassControlType_optional;
        typedef ::xsd::cxx::tree::traits< SimCntrl_HeatRecoveryBypassControlType_type, char > SimCntrl_HeatRecoveryBypassControlType_traits;

        const SimCntrl_HeatRecoveryBypassControlType_optional&
        SimCntrl_HeatRecoveryBypassControlType () const;

        SimCntrl_HeatRecoveryBypassControlType_optional&
        SimCntrl_HeatRecoveryBypassControlType ();

        void
        SimCntrl_HeatRecoveryBypassControlType (const SimCntrl_HeatRecoveryBypassControlType_type& x);

        void
        SimCntrl_HeatRecoveryBypassControlType (const SimCntrl_HeatRecoveryBypassControlType_optional& x);

        void
        SimCntrl_HeatRecoveryBypassControlType (::std::auto_ptr< SimCntrl_HeatRecoveryBypassControlType_type > p);

        // Constructors.
        //
        SimController_OutdoorAir_EconomizerControl (const RefId_type&);

        SimController_OutdoorAir_EconomizerControl (const ::xercesc::DOMElement& e,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

        SimController_OutdoorAir_EconomizerControl (const SimController_OutdoorAir_EconomizerControl& x,
                                                    ::xml_schema::flags f = 0,
                                                    ::xml_schema::container* c = 0);

        virtual SimController_OutdoorAir_EconomizerControl*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimController_OutdoorAir_EconomizerControl&
        operator= (const SimController_OutdoorAir_EconomizerControl& x);

        virtual 
        ~SimController_OutdoorAir_EconomizerControl ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimCntrl_ReliefAirOutletNodeName_optional SimCntrl_ReliefAirOutletNodeName_;
        SimCntrl_RtnAirNodeName_optional SimCntrl_RtnAirNodeName_;
        SimCntrl_MixedAirNodeName_optional SimCntrl_MixedAirNodeName_;
        SimCntrl_ActuatorNodeName_optional SimCntrl_ActuatorNodeName_;
        SimCntrl_MinOutdrAirFlowRate_optional SimCntrl_MinOutdrAirFlowRate_;
        SimCntrl_MaxOutdrAirFlowRate_optional SimCntrl_MaxOutdrAirFlowRate_;
        SimCntrl_EconControlType_optional SimCntrl_EconControlType_;
        SimCntrl_EconControlActionType_optional SimCntrl_EconControlActionType_;
        SimCntrl_EconMaxLimitDryBulbTemp_optional SimCntrl_EconMaxLimitDryBulbTemp_;
        SimCntrl_EconMaxLimitEnthalpy_optional SimCntrl_EconMaxLimitEnthalpy_;
        SimCntrl_EconMaxLimitDewpointTemp_optional SimCntrl_EconMaxLimitDewpointTemp_;
        SimCntrl_ElecEnthalpyLimitCurveName_optional SimCntrl_ElecEnthalpyLimitCurveName_;
        SimCntrl_EconMinLimitDryBulbTemp_optional SimCntrl_EconMinLimitDryBulbTemp_;
        SimCntrl_LockoutType_optional SimCntrl_LockoutType_;
        SimCntrl_MinLimitType_optional SimCntrl_MinLimitType_;
        SimCntrl_MinOutdrAirSchedName_optional SimCntrl_MinOutdrAirSchedName_;
        SimCntrl_MinFractionofOutdrAirSchedName_optional SimCntrl_MinFractionofOutdrAirSchedName_;
        SimCntrl_MaxFractionofOutdrAirSchedName_optional SimCntrl_MaxFractionofOutdrAirSchedName_;
        SimCntrl_MechanicalVentControllerName_optional SimCntrl_MechanicalVentControllerName_;
        SimCntrl_TimeofDayEconControlSchedName_optional SimCntrl_TimeofDayEconControlSchedName_;
        SimCntrl_HighHumidityControl_optional SimCntrl_HighHumidityControl_;
        SimCntrl_HumidistatCntlZoneName_optional SimCntrl_HumidistatCntlZoneName_;
        SimCntrl_HighHumidOutdrAirFlowRatio_optional SimCntrl_HighHumidOutdrAirFlowRatio_;
        SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_optional SimCntrl_CntlHighIndrHumidBasedOnOutdrHumidRatio_;
        SimCntrl_HeatRecoveryBypassControlType_optional SimCntrl_HeatRecoveryBypassControlType_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_CONTROLLER_OUTDOOR_AIR_ECONOMIZER_CONTROL_HXX
