// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimValidationResultsWater.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimValidationResultsWater
      // 

      const SimValidationResultsWater::PlantLoopType_optional& SimValidationResultsWater::
      PlantLoopType () const
      {
        return this->PlantLoopType_;
      }

      SimValidationResultsWater::PlantLoopType_optional& SimValidationResultsWater::
      PlantLoopType ()
      {
        return this->PlantLoopType_;
      }

      void SimValidationResultsWater::
      PlantLoopType (const PlantLoopType_type& x)
      {
        this->PlantLoopType_.set (x);
      }

      void SimValidationResultsWater::
      PlantLoopType (const PlantLoopType_optional& x)
      {
        this->PlantLoopType_ = x;
      }

      void SimValidationResultsWater::
      PlantLoopType (::std::auto_ptr< PlantLoopType_type > x)
      {
        this->PlantLoopType_.set (x);
      }

      const SimValidationResultsWater::WaterLoopConfig_optional& SimValidationResultsWater::
      WaterLoopConfig () const
      {
        return this->WaterLoopConfig_;
      }

      SimValidationResultsWater::WaterLoopConfig_optional& SimValidationResultsWater::
      WaterLoopConfig ()
      {
        return this->WaterLoopConfig_;
      }

      void SimValidationResultsWater::
      WaterLoopConfig (const WaterLoopConfig_type& x)
      {
        this->WaterLoopConfig_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopConfig (const WaterLoopConfig_optional& x)
      {
        this->WaterLoopConfig_ = x;
      }

      void SimValidationResultsWater::
      WaterLoopConfig (::std::auto_ptr< WaterLoopConfig_type > x)
      {
        this->WaterLoopConfig_.set (x);
      }

      const SimValidationResultsWater::TESTankType_optional& SimValidationResultsWater::
      TESTankType () const
      {
        return this->TESTankType_;
      }

      SimValidationResultsWater::TESTankType_optional& SimValidationResultsWater::
      TESTankType ()
      {
        return this->TESTankType_;
      }

      void SimValidationResultsWater::
      TESTankType (const TESTankType_type& x)
      {
        this->TESTankType_.set (x);
      }

      void SimValidationResultsWater::
      TESTankType (const TESTankType_optional& x)
      {
        this->TESTankType_ = x;
      }

      void SimValidationResultsWater::
      TESTankType (::std::auto_ptr< TESTankType_type > x)
      {
        this->TESTankType_.set (x);
      }

      const SimValidationResultsWater::SupplySideLoopPumpFound_optional& SimValidationResultsWater::
      SupplySideLoopPumpFound () const
      {
        return this->SupplySideLoopPumpFound_;
      }

      SimValidationResultsWater::SupplySideLoopPumpFound_optional& SimValidationResultsWater::
      SupplySideLoopPumpFound ()
      {
        return this->SupplySideLoopPumpFound_;
      }

      void SimValidationResultsWater::
      SupplySideLoopPumpFound (const SupplySideLoopPumpFound_type& x)
      {
        this->SupplySideLoopPumpFound_.set (x);
      }

      void SimValidationResultsWater::
      SupplySideLoopPumpFound (const SupplySideLoopPumpFound_optional& x)
      {
        this->SupplySideLoopPumpFound_ = x;
      }

      const SimValidationResultsWater::DemandSideLoopPumpFound_optional& SimValidationResultsWater::
      DemandSideLoopPumpFound () const
      {
        return this->DemandSideLoopPumpFound_;
      }

      SimValidationResultsWater::DemandSideLoopPumpFound_optional& SimValidationResultsWater::
      DemandSideLoopPumpFound ()
      {
        return this->DemandSideLoopPumpFound_;
      }

      void SimValidationResultsWater::
      DemandSideLoopPumpFound (const DemandSideLoopPumpFound_type& x)
      {
        this->DemandSideLoopPumpFound_.set (x);
      }

      void SimValidationResultsWater::
      DemandSideLoopPumpFound (const DemandSideLoopPumpFound_optional& x)
      {
        this->DemandSideLoopPumpFound_ = x;
      }

      const SimValidationResultsWater::TemperingValvePresent_optional& SimValidationResultsWater::
      TemperingValvePresent () const
      {
        return this->TemperingValvePresent_;
      }

      SimValidationResultsWater::TemperingValvePresent_optional& SimValidationResultsWater::
      TemperingValvePresent ()
      {
        return this->TemperingValvePresent_;
      }

      void SimValidationResultsWater::
      TemperingValvePresent (const TemperingValvePresent_type& x)
      {
        this->TemperingValvePresent_.set (x);
      }

      void SimValidationResultsWater::
      TemperingValvePresent (const TemperingValvePresent_optional& x)
      {
        this->TemperingValvePresent_ = x;
      }

      const SimValidationResultsWater::TemperingValveID_optional& SimValidationResultsWater::
      TemperingValveID () const
      {
        return this->TemperingValveID_;
      }

      SimValidationResultsWater::TemperingValveID_optional& SimValidationResultsWater::
      TemperingValveID ()
      {
        return this->TemperingValveID_;
      }

      void SimValidationResultsWater::
      TemperingValveID (const TemperingValveID_type& x)
      {
        this->TemperingValveID_.set (x);
      }

      void SimValidationResultsWater::
      TemperingValveID (const TemperingValveID_optional& x)
      {
        this->TemperingValveID_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbcs_optional& SimValidationResultsWater::
      WaterLoopNbcs () const
      {
        return this->WaterLoopNbcs_;
      }

      SimValidationResultsWater::WaterLoopNbcs_optional& SimValidationResultsWater::
      WaterLoopNbcs ()
      {
        return this->WaterLoopNbcs_;
      }

      void SimValidationResultsWater::
      WaterLoopNbcs (const WaterLoopNbcs_type& x)
      {
        this->WaterLoopNbcs_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbcs (const WaterLoopNbcs_optional& x)
      {
        this->WaterLoopNbcs_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbed_optional& SimValidationResultsWater::
      WaterLoopNbed () const
      {
        return this->WaterLoopNbed_;
      }

      SimValidationResultsWater::WaterLoopNbed_optional& SimValidationResultsWater::
      WaterLoopNbed ()
      {
        return this->WaterLoopNbed_;
      }

      void SimValidationResultsWater::
      WaterLoopNbed (const WaterLoopNbed_type& x)
      {
        this->WaterLoopNbed_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbed (const WaterLoopNbed_optional& x)
      {
        this->WaterLoopNbed_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbes_optional& SimValidationResultsWater::
      WaterLoopNbes () const
      {
        return this->WaterLoopNbes_;
      }

      SimValidationResultsWater::WaterLoopNbes_optional& SimValidationResultsWater::
      WaterLoopNbes ()
      {
        return this->WaterLoopNbes_;
      }

      void SimValidationResultsWater::
      WaterLoopNbes (const WaterLoopNbes_type& x)
      {
        this->WaterLoopNbes_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbes (const WaterLoopNbes_optional& x)
      {
        this->WaterLoopNbes_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbis_optional& SimValidationResultsWater::
      WaterLoopNbis () const
      {
        return this->WaterLoopNbis_;
      }

      SimValidationResultsWater::WaterLoopNbis_optional& SimValidationResultsWater::
      WaterLoopNbis ()
      {
        return this->WaterLoopNbis_;
      }

      void SimValidationResultsWater::
      WaterLoopNbis (const WaterLoopNbis_type& x)
      {
        this->WaterLoopNbis_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbis (const WaterLoopNbis_optional& x)
      {
        this->WaterLoopNbis_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbod_optional& SimValidationResultsWater::
      WaterLoopNbod () const
      {
        return this->WaterLoopNbod_;
      }

      SimValidationResultsWater::WaterLoopNbod_optional& SimValidationResultsWater::
      WaterLoopNbod ()
      {
        return this->WaterLoopNbod_;
      }

      void SimValidationResultsWater::
      WaterLoopNbod (const WaterLoopNbod_type& x)
      {
        this->WaterLoopNbod_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbod (const WaterLoopNbod_optional& x)
      {
        this->WaterLoopNbod_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbos_optional& SimValidationResultsWater::
      WaterLoopNbos () const
      {
        return this->WaterLoopNbos_;
      }

      SimValidationResultsWater::WaterLoopNbos_optional& SimValidationResultsWater::
      WaterLoopNbos ()
      {
        return this->WaterLoopNbos_;
      }

      void SimValidationResultsWater::
      WaterLoopNbos (const WaterLoopNbos_type& x)
      {
        this->WaterLoopNbos_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbos (const WaterLoopNbos_optional& x)
      {
        this->WaterLoopNbos_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbpd_optional& SimValidationResultsWater::
      WaterLoopNbpd () const
      {
        return this->WaterLoopNbpd_;
      }

      SimValidationResultsWater::WaterLoopNbpd_optional& SimValidationResultsWater::
      WaterLoopNbpd ()
      {
        return this->WaterLoopNbpd_;
      }

      void SimValidationResultsWater::
      WaterLoopNbpd (const WaterLoopNbpd_type& x)
      {
        this->WaterLoopNbpd_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbpd (const WaterLoopNbpd_optional& x)
      {
        this->WaterLoopNbpd_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbps_optional& SimValidationResultsWater::
      WaterLoopNbps () const
      {
        return this->WaterLoopNbps_;
      }

      SimValidationResultsWater::WaterLoopNbps_optional& SimValidationResultsWater::
      WaterLoopNbps ()
      {
        return this->WaterLoopNbps_;
      }

      void SimValidationResultsWater::
      WaterLoopNbps (const WaterLoopNbps_type& x)
      {
        this->WaterLoopNbps_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbps (const WaterLoopNbps_optional& x)
      {
        this->WaterLoopNbps_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbtd_optional& SimValidationResultsWater::
      WaterLoopNbtd () const
      {
        return this->WaterLoopNbtd_;
      }

      SimValidationResultsWater::WaterLoopNbtd_optional& SimValidationResultsWater::
      WaterLoopNbtd ()
      {
        return this->WaterLoopNbtd_;
      }

      void SimValidationResultsWater::
      WaterLoopNbtd (const WaterLoopNbtd_type& x)
      {
        this->WaterLoopNbtd_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbtd (const WaterLoopNbtd_optional& x)
      {
        this->WaterLoopNbtd_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbws_optional& SimValidationResultsWater::
      WaterLoopNbws () const
      {
        return this->WaterLoopNbws_;
      }

      SimValidationResultsWater::WaterLoopNbws_optional& SimValidationResultsWater::
      WaterLoopNbws ()
      {
        return this->WaterLoopNbws_;
      }

      void SimValidationResultsWater::
      WaterLoopNbws (const WaterLoopNbws_type& x)
      {
        this->WaterLoopNbws_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbws (const WaterLoopNbws_optional& x)
      {
        this->WaterLoopNbws_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbxd_optional& SimValidationResultsWater::
      WaterLoopNbxd () const
      {
        return this->WaterLoopNbxd_;
      }

      SimValidationResultsWater::WaterLoopNbxd_optional& SimValidationResultsWater::
      WaterLoopNbxd ()
      {
        return this->WaterLoopNbxd_;
      }

      void SimValidationResultsWater::
      WaterLoopNbxd (const WaterLoopNbxd_type& x)
      {
        this->WaterLoopNbxd_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbxd (const WaterLoopNbxd_optional& x)
      {
        this->WaterLoopNbxd_ = x;
      }

      const SimValidationResultsWater::WaterLoopNbxs_optional& SimValidationResultsWater::
      WaterLoopNbxs () const
      {
        return this->WaterLoopNbxs_;
      }

      SimValidationResultsWater::WaterLoopNbxs_optional& SimValidationResultsWater::
      WaterLoopNbxs ()
      {
        return this->WaterLoopNbxs_;
      }

      void SimValidationResultsWater::
      WaterLoopNbxs (const WaterLoopNbxs_type& x)
      {
        this->WaterLoopNbxs_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNbxs (const WaterLoopNbxs_optional& x)
      {
        this->WaterLoopNbxs_ = x;
      }

      const SimValidationResultsWater::WaterLoopNped_optional& SimValidationResultsWater::
      WaterLoopNped () const
      {
        return this->WaterLoopNped_;
      }

      SimValidationResultsWater::WaterLoopNped_optional& SimValidationResultsWater::
      WaterLoopNped ()
      {
        return this->WaterLoopNped_;
      }

      void SimValidationResultsWater::
      WaterLoopNped (const WaterLoopNped_type& x)
      {
        this->WaterLoopNped_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNped (const WaterLoopNped_optional& x)
      {
        this->WaterLoopNped_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpes_optional& SimValidationResultsWater::
      WaterLoopNpes () const
      {
        return this->WaterLoopNpes_;
      }

      SimValidationResultsWater::WaterLoopNpes_optional& SimValidationResultsWater::
      WaterLoopNpes ()
      {
        return this->WaterLoopNpes_;
      }

      void SimValidationResultsWater::
      WaterLoopNpes (const WaterLoopNpes_type& x)
      {
        this->WaterLoopNpes_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpes (const WaterLoopNpes_optional& x)
      {
        this->WaterLoopNpes_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpod_optional& SimValidationResultsWater::
      WaterLoopNpod () const
      {
        return this->WaterLoopNpod_;
      }

      SimValidationResultsWater::WaterLoopNpod_optional& SimValidationResultsWater::
      WaterLoopNpod ()
      {
        return this->WaterLoopNpod_;
      }

      void SimValidationResultsWater::
      WaterLoopNpod (const WaterLoopNpod_type& x)
      {
        this->WaterLoopNpod_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpod (const WaterLoopNpod_optional& x)
      {
        this->WaterLoopNpod_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpos_optional& SimValidationResultsWater::
      WaterLoopNpos () const
      {
        return this->WaterLoopNpos_;
      }

      SimValidationResultsWater::WaterLoopNpos_optional& SimValidationResultsWater::
      WaterLoopNpos ()
      {
        return this->WaterLoopNpos_;
      }

      void SimValidationResultsWater::
      WaterLoopNpos (const WaterLoopNpos_type& x)
      {
        this->WaterLoopNpos_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpos (const WaterLoopNpos_optional& x)
      {
        this->WaterLoopNpos_ = x;
      }

      const SimValidationResultsWater::WaterLoopNppd_optional& SimValidationResultsWater::
      WaterLoopNppd () const
      {
        return this->WaterLoopNppd_;
      }

      SimValidationResultsWater::WaterLoopNppd_optional& SimValidationResultsWater::
      WaterLoopNppd ()
      {
        return this->WaterLoopNppd_;
      }

      void SimValidationResultsWater::
      WaterLoopNppd (const WaterLoopNppd_type& x)
      {
        this->WaterLoopNppd_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNppd (const WaterLoopNppd_optional& x)
      {
        this->WaterLoopNppd_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpps_optional& SimValidationResultsWater::
      WaterLoopNpps () const
      {
        return this->WaterLoopNpps_;
      }

      SimValidationResultsWater::WaterLoopNpps_optional& SimValidationResultsWater::
      WaterLoopNpps ()
      {
        return this->WaterLoopNpps_;
      }

      void SimValidationResultsWater::
      WaterLoopNpps (const WaterLoopNpps_type& x)
      {
        this->WaterLoopNpps_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpps (const WaterLoopNpps_optional& x)
      {
        this->WaterLoopNpps_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpxd_optional& SimValidationResultsWater::
      WaterLoopNpxd () const
      {
        return this->WaterLoopNpxd_;
      }

      SimValidationResultsWater::WaterLoopNpxd_optional& SimValidationResultsWater::
      WaterLoopNpxd ()
      {
        return this->WaterLoopNpxd_;
      }

      void SimValidationResultsWater::
      WaterLoopNpxd (const WaterLoopNpxd_type& x)
      {
        this->WaterLoopNpxd_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpxd (const WaterLoopNpxd_optional& x)
      {
        this->WaterLoopNpxd_ = x;
      }

      const SimValidationResultsWater::WaterLoopNpxs_optional& SimValidationResultsWater::
      WaterLoopNpxs () const
      {
        return this->WaterLoopNpxs_;
      }

      SimValidationResultsWater::WaterLoopNpxs_optional& SimValidationResultsWater::
      WaterLoopNpxs ()
      {
        return this->WaterLoopNpxs_;
      }

      void SimValidationResultsWater::
      WaterLoopNpxs (const WaterLoopNpxs_type& x)
      {
        this->WaterLoopNpxs_.set (x);
      }

      void SimValidationResultsWater::
      WaterLoopNpxs (const WaterLoopNpxs_optional& x)
      {
        this->WaterLoopNpxs_ = x;
      }

      const SimValidationResultsWater::NodeStartSupplyInletBranch_optional& SimValidationResultsWater::
      NodeStartSupplyInletBranch () const
      {
        return this->NodeStartSupplyInletBranch_;
      }

      SimValidationResultsWater::NodeStartSupplyInletBranch_optional& SimValidationResultsWater::
      NodeStartSupplyInletBranch ()
      {
        return this->NodeStartSupplyInletBranch_;
      }

      void SimValidationResultsWater::
      NodeStartSupplyInletBranch (const NodeStartSupplyInletBranch_type& x)
      {
        this->NodeStartSupplyInletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartSupplyInletBranch (const NodeStartSupplyInletBranch_optional& x)
      {
        this->NodeStartSupplyInletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeStartSupplyInletBranch (::std::auto_ptr< NodeStartSupplyInletBranch_type > x)
      {
        this->NodeStartSupplyInletBranch_.set (x);
      }

      const SimValidationResultsWater::NodeEndSupplyInletBranch_optional& SimValidationResultsWater::
      NodeEndSupplyInletBranch () const
      {
        return this->NodeEndSupplyInletBranch_;
      }

      SimValidationResultsWater::NodeEndSupplyInletBranch_optional& SimValidationResultsWater::
      NodeEndSupplyInletBranch ()
      {
        return this->NodeEndSupplyInletBranch_;
      }

      void SimValidationResultsWater::
      NodeEndSupplyInletBranch (const NodeEndSupplyInletBranch_type& x)
      {
        this->NodeEndSupplyInletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeEndSupplyInletBranch (const NodeEndSupplyInletBranch_optional& x)
      {
        this->NodeEndSupplyInletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeEndSupplyInletBranch (::std::auto_ptr< NodeEndSupplyInletBranch_type > x)
      {
        this->NodeEndSupplyInletBranch_.set (x);
      }

      const SimValidationResultsWater::NodeStartDemandInletBranch_optional& SimValidationResultsWater::
      NodeStartDemandInletBranch () const
      {
        return this->NodeStartDemandInletBranch_;
      }

      SimValidationResultsWater::NodeStartDemandInletBranch_optional& SimValidationResultsWater::
      NodeStartDemandInletBranch ()
      {
        return this->NodeStartDemandInletBranch_;
      }

      void SimValidationResultsWater::
      NodeStartDemandInletBranch (const NodeStartDemandInletBranch_type& x)
      {
        this->NodeStartDemandInletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartDemandInletBranch (const NodeStartDemandInletBranch_optional& x)
      {
        this->NodeStartDemandInletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeStartDemandInletBranch (::std::auto_ptr< NodeStartDemandInletBranch_type > x)
      {
        this->NodeStartDemandInletBranch_.set (x);
      }

      const SimValidationResultsWater::NodeEndDemandInletBranch_optional& SimValidationResultsWater::
      NodeEndDemandInletBranch () const
      {
        return this->NodeEndDemandInletBranch_;
      }

      SimValidationResultsWater::NodeEndDemandInletBranch_optional& SimValidationResultsWater::
      NodeEndDemandInletBranch ()
      {
        return this->NodeEndDemandInletBranch_;
      }

      void SimValidationResultsWater::
      NodeEndDemandInletBranch (const NodeEndDemandInletBranch_type& x)
      {
        this->NodeEndDemandInletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeEndDemandInletBranch (const NodeEndDemandInletBranch_optional& x)
      {
        this->NodeEndDemandInletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeEndDemandInletBranch (::std::auto_ptr< NodeEndDemandInletBranch_type > x)
      {
        this->NodeEndDemandInletBranch_.set (x);
      }

      const SimValidationResultsWater::NodeStartSupplySubLoop_optional& SimValidationResultsWater::
      NodeStartSupplySubLoop () const
      {
        return this->NodeStartSupplySubLoop_;
      }

      SimValidationResultsWater::NodeStartSupplySubLoop_optional& SimValidationResultsWater::
      NodeStartSupplySubLoop ()
      {
        return this->NodeStartSupplySubLoop_;
      }

      void SimValidationResultsWater::
      NodeStartSupplySubLoop (const NodeStartSupplySubLoop_type& x)
      {
        this->NodeStartSupplySubLoop_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartSupplySubLoop (const NodeStartSupplySubLoop_optional& x)
      {
        this->NodeStartSupplySubLoop_ = x;
      }

      void SimValidationResultsWater::
      NodeStartSupplySubLoop (::std::auto_ptr< NodeStartSupplySubLoop_type > x)
      {
        this->NodeStartSupplySubLoop_.set (x);
      }

      const SimValidationResultsWater::NodeStartDemandSubLoop_optional& SimValidationResultsWater::
      NodeStartDemandSubLoop () const
      {
        return this->NodeStartDemandSubLoop_;
      }

      SimValidationResultsWater::NodeStartDemandSubLoop_optional& SimValidationResultsWater::
      NodeStartDemandSubLoop ()
      {
        return this->NodeStartDemandSubLoop_;
      }

      void SimValidationResultsWater::
      NodeStartDemandSubLoop (const NodeStartDemandSubLoop_type& x)
      {
        this->NodeStartDemandSubLoop_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartDemandSubLoop (const NodeStartDemandSubLoop_optional& x)
      {
        this->NodeStartDemandSubLoop_ = x;
      }

      void SimValidationResultsWater::
      NodeStartDemandSubLoop (::std::auto_ptr< NodeStartDemandSubLoop_type > x)
      {
        this->NodeStartDemandSubLoop_.set (x);
      }

      const SimValidationResultsWater::NodeEndSupplySubLoop_optional& SimValidationResultsWater::
      NodeEndSupplySubLoop () const
      {
        return this->NodeEndSupplySubLoop_;
      }

      SimValidationResultsWater::NodeEndSupplySubLoop_optional& SimValidationResultsWater::
      NodeEndSupplySubLoop ()
      {
        return this->NodeEndSupplySubLoop_;
      }

      void SimValidationResultsWater::
      NodeEndSupplySubLoop (const NodeEndSupplySubLoop_type& x)
      {
        this->NodeEndSupplySubLoop_.set (x);
      }

      void SimValidationResultsWater::
      NodeEndSupplySubLoop (const NodeEndSupplySubLoop_optional& x)
      {
        this->NodeEndSupplySubLoop_ = x;
      }

      void SimValidationResultsWater::
      NodeEndSupplySubLoop (::std::auto_ptr< NodeEndSupplySubLoop_type > x)
      {
        this->NodeEndSupplySubLoop_.set (x);
      }

      const SimValidationResultsWater::NodeStartSupplyOutletBranch_optional& SimValidationResultsWater::
      NodeStartSupplyOutletBranch () const
      {
        return this->NodeStartSupplyOutletBranch_;
      }

      SimValidationResultsWater::NodeStartSupplyOutletBranch_optional& SimValidationResultsWater::
      NodeStartSupplyOutletBranch ()
      {
        return this->NodeStartSupplyOutletBranch_;
      }

      void SimValidationResultsWater::
      NodeStartSupplyOutletBranch (const NodeStartSupplyOutletBranch_type& x)
      {
        this->NodeStartSupplyOutletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartSupplyOutletBranch (const NodeStartSupplyOutletBranch_optional& x)
      {
        this->NodeStartSupplyOutletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeStartSupplyOutletBranch (::std::auto_ptr< NodeStartSupplyOutletBranch_type > x)
      {
        this->NodeStartSupplyOutletBranch_.set (x);
      }

      const SimValidationResultsWater::NodeEndDemandSubLoop_optional& SimValidationResultsWater::
      NodeEndDemandSubLoop () const
      {
        return this->NodeEndDemandSubLoop_;
      }

      SimValidationResultsWater::NodeEndDemandSubLoop_optional& SimValidationResultsWater::
      NodeEndDemandSubLoop ()
      {
        return this->NodeEndDemandSubLoop_;
      }

      void SimValidationResultsWater::
      NodeEndDemandSubLoop (const NodeEndDemandSubLoop_type& x)
      {
        this->NodeEndDemandSubLoop_.set (x);
      }

      void SimValidationResultsWater::
      NodeEndDemandSubLoop (const NodeEndDemandSubLoop_optional& x)
      {
        this->NodeEndDemandSubLoop_ = x;
      }

      void SimValidationResultsWater::
      NodeEndDemandSubLoop (::std::auto_ptr< NodeEndDemandSubLoop_type > x)
      {
        this->NodeEndDemandSubLoop_.set (x);
      }

      const SimValidationResultsWater::NodeStartDemandOutletBranch_optional& SimValidationResultsWater::
      NodeStartDemandOutletBranch () const
      {
        return this->NodeStartDemandOutletBranch_;
      }

      SimValidationResultsWater::NodeStartDemandOutletBranch_optional& SimValidationResultsWater::
      NodeStartDemandOutletBranch ()
      {
        return this->NodeStartDemandOutletBranch_;
      }

      void SimValidationResultsWater::
      NodeStartDemandOutletBranch (const NodeStartDemandOutletBranch_type& x)
      {
        this->NodeStartDemandOutletBranch_.set (x);
      }

      void SimValidationResultsWater::
      NodeStartDemandOutletBranch (const NodeStartDemandOutletBranch_optional& x)
      {
        this->NodeStartDemandOutletBranch_ = x;
      }

      void SimValidationResultsWater::
      NodeStartDemandOutletBranch (::std::auto_ptr< NodeStartDemandOutletBranch_type > x)
      {
        this->NodeStartDemandOutletBranch_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimValidationResultsWater
      //

      SimValidationResultsWater::
      SimValidationResultsWater (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimValidationResults (RefId),
        PlantLoopType_ (this),
        WaterLoopConfig_ (this),
        TESTankType_ (this),
        SupplySideLoopPumpFound_ (this),
        DemandSideLoopPumpFound_ (this),
        TemperingValvePresent_ (this),
        TemperingValveID_ (this),
        WaterLoopNbcs_ (this),
        WaterLoopNbed_ (this),
        WaterLoopNbes_ (this),
        WaterLoopNbis_ (this),
        WaterLoopNbod_ (this),
        WaterLoopNbos_ (this),
        WaterLoopNbpd_ (this),
        WaterLoopNbps_ (this),
        WaterLoopNbtd_ (this),
        WaterLoopNbws_ (this),
        WaterLoopNbxd_ (this),
        WaterLoopNbxs_ (this),
        WaterLoopNped_ (this),
        WaterLoopNpes_ (this),
        WaterLoopNpod_ (this),
        WaterLoopNpos_ (this),
        WaterLoopNppd_ (this),
        WaterLoopNpps_ (this),
        WaterLoopNpxd_ (this),
        WaterLoopNpxs_ (this),
        NodeStartSupplyInletBranch_ (this),
        NodeEndSupplyInletBranch_ (this),
        NodeStartDemandInletBranch_ (this),
        NodeEndDemandInletBranch_ (this),
        NodeStartSupplySubLoop_ (this),
        NodeStartDemandSubLoop_ (this),
        NodeEndSupplySubLoop_ (this),
        NodeStartSupplyOutletBranch_ (this),
        NodeEndDemandSubLoop_ (this),
        NodeStartDemandOutletBranch_ (this)
      {
      }

      SimValidationResultsWater::
      SimValidationResultsWater (const SimValidationResultsWater& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimValidationResults (x, f, c),
        PlantLoopType_ (x.PlantLoopType_, f, this),
        WaterLoopConfig_ (x.WaterLoopConfig_, f, this),
        TESTankType_ (x.TESTankType_, f, this),
        SupplySideLoopPumpFound_ (x.SupplySideLoopPumpFound_, f, this),
        DemandSideLoopPumpFound_ (x.DemandSideLoopPumpFound_, f, this),
        TemperingValvePresent_ (x.TemperingValvePresent_, f, this),
        TemperingValveID_ (x.TemperingValveID_, f, this),
        WaterLoopNbcs_ (x.WaterLoopNbcs_, f, this),
        WaterLoopNbed_ (x.WaterLoopNbed_, f, this),
        WaterLoopNbes_ (x.WaterLoopNbes_, f, this),
        WaterLoopNbis_ (x.WaterLoopNbis_, f, this),
        WaterLoopNbod_ (x.WaterLoopNbod_, f, this),
        WaterLoopNbos_ (x.WaterLoopNbos_, f, this),
        WaterLoopNbpd_ (x.WaterLoopNbpd_, f, this),
        WaterLoopNbps_ (x.WaterLoopNbps_, f, this),
        WaterLoopNbtd_ (x.WaterLoopNbtd_, f, this),
        WaterLoopNbws_ (x.WaterLoopNbws_, f, this),
        WaterLoopNbxd_ (x.WaterLoopNbxd_, f, this),
        WaterLoopNbxs_ (x.WaterLoopNbxs_, f, this),
        WaterLoopNped_ (x.WaterLoopNped_, f, this),
        WaterLoopNpes_ (x.WaterLoopNpes_, f, this),
        WaterLoopNpod_ (x.WaterLoopNpod_, f, this),
        WaterLoopNpos_ (x.WaterLoopNpos_, f, this),
        WaterLoopNppd_ (x.WaterLoopNppd_, f, this),
        WaterLoopNpps_ (x.WaterLoopNpps_, f, this),
        WaterLoopNpxd_ (x.WaterLoopNpxd_, f, this),
        WaterLoopNpxs_ (x.WaterLoopNpxs_, f, this),
        NodeStartSupplyInletBranch_ (x.NodeStartSupplyInletBranch_, f, this),
        NodeEndSupplyInletBranch_ (x.NodeEndSupplyInletBranch_, f, this),
        NodeStartDemandInletBranch_ (x.NodeStartDemandInletBranch_, f, this),
        NodeEndDemandInletBranch_ (x.NodeEndDemandInletBranch_, f, this),
        NodeStartSupplySubLoop_ (x.NodeStartSupplySubLoop_, f, this),
        NodeStartDemandSubLoop_ (x.NodeStartDemandSubLoop_, f, this),
        NodeEndSupplySubLoop_ (x.NodeEndSupplySubLoop_, f, this),
        NodeStartSupplyOutletBranch_ (x.NodeStartSupplyOutletBranch_, f, this),
        NodeEndDemandSubLoop_ (x.NodeEndDemandSubLoop_, f, this),
        NodeStartDemandOutletBranch_ (x.NodeStartDemandOutletBranch_, f, this)
      {
      }

      SimValidationResultsWater::
      SimValidationResultsWater (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimValidationResults (e, f | ::xml_schema::flags::base, c),
        PlantLoopType_ (this),
        WaterLoopConfig_ (this),
        TESTankType_ (this),
        SupplySideLoopPumpFound_ (this),
        DemandSideLoopPumpFound_ (this),
        TemperingValvePresent_ (this),
        TemperingValveID_ (this),
        WaterLoopNbcs_ (this),
        WaterLoopNbed_ (this),
        WaterLoopNbes_ (this),
        WaterLoopNbis_ (this),
        WaterLoopNbod_ (this),
        WaterLoopNbos_ (this),
        WaterLoopNbpd_ (this),
        WaterLoopNbps_ (this),
        WaterLoopNbtd_ (this),
        WaterLoopNbws_ (this),
        WaterLoopNbxd_ (this),
        WaterLoopNbxs_ (this),
        WaterLoopNped_ (this),
        WaterLoopNpes_ (this),
        WaterLoopNpod_ (this),
        WaterLoopNpos_ (this),
        WaterLoopNppd_ (this),
        WaterLoopNpps_ (this),
        WaterLoopNpxd_ (this),
        WaterLoopNpxs_ (this),
        NodeStartSupplyInletBranch_ (this),
        NodeEndSupplyInletBranch_ (this),
        NodeStartDemandInletBranch_ (this),
        NodeEndDemandInletBranch_ (this),
        NodeStartSupplySubLoop_ (this),
        NodeStartDemandSubLoop_ (this),
        NodeEndSupplySubLoop_ (this),
        NodeStartSupplyOutletBranch_ (this),
        NodeEndDemandSubLoop_ (this),
        NodeStartDemandOutletBranch_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimValidationResultsWater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimValidationResults::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // PlantLoopType
          //
          if (n.name () == "PlantLoopType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< PlantLoopType_type > r (
              PlantLoopType_traits::create (i, f, this));

            if (!this->PlantLoopType_)
            {
              this->PlantLoopType_.set (r);
              continue;
            }
          }

          // WaterLoopConfig
          //
          if (n.name () == "WaterLoopConfig" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< WaterLoopConfig_type > r (
              WaterLoopConfig_traits::create (i, f, this));

            if (!this->WaterLoopConfig_)
            {
              this->WaterLoopConfig_.set (r);
              continue;
            }
          }

          // TESTankType
          //
          if (n.name () == "TESTankType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TESTankType_type > r (
              TESTankType_traits::create (i, f, this));

            if (!this->TESTankType_)
            {
              this->TESTankType_.set (r);
              continue;
            }
          }

          // SupplySideLoopPumpFound
          //
          if (n.name () == "SupplySideLoopPumpFound" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SupplySideLoopPumpFound_)
            {
              this->SupplySideLoopPumpFound_.set (SupplySideLoopPumpFound_traits::create (i, f, this));
              continue;
            }
          }

          // DemandSideLoopPumpFound
          //
          if (n.name () == "DemandSideLoopPumpFound" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->DemandSideLoopPumpFound_)
            {
              this->DemandSideLoopPumpFound_.set (DemandSideLoopPumpFound_traits::create (i, f, this));
              continue;
            }
          }

          // TemperingValvePresent
          //
          if (n.name () == "TemperingValvePresent" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemperingValvePresent_)
            {
              this->TemperingValvePresent_.set (TemperingValvePresent_traits::create (i, f, this));
              continue;
            }
          }

          // TemperingValveID
          //
          if (n.name () == "TemperingValveID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->TemperingValveID_)
            {
              this->TemperingValveID_.set (TemperingValveID_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbcs
          //
          if (n.name () == "WaterLoopNbcs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbcs_)
            {
              this->WaterLoopNbcs_.set (WaterLoopNbcs_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbed
          //
          if (n.name () == "WaterLoopNbed" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbed_)
            {
              this->WaterLoopNbed_.set (WaterLoopNbed_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbes
          //
          if (n.name () == "WaterLoopNbes" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbes_)
            {
              this->WaterLoopNbes_.set (WaterLoopNbes_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbis
          //
          if (n.name () == "WaterLoopNbis" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbis_)
            {
              this->WaterLoopNbis_.set (WaterLoopNbis_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbod
          //
          if (n.name () == "WaterLoopNbod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbod_)
            {
              this->WaterLoopNbod_.set (WaterLoopNbod_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbos
          //
          if (n.name () == "WaterLoopNbos" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbos_)
            {
              this->WaterLoopNbos_.set (WaterLoopNbos_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbpd
          //
          if (n.name () == "WaterLoopNbpd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbpd_)
            {
              this->WaterLoopNbpd_.set (WaterLoopNbpd_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbps
          //
          if (n.name () == "WaterLoopNbps" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbps_)
            {
              this->WaterLoopNbps_.set (WaterLoopNbps_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbtd
          //
          if (n.name () == "WaterLoopNbtd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbtd_)
            {
              this->WaterLoopNbtd_.set (WaterLoopNbtd_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbws
          //
          if (n.name () == "WaterLoopNbws" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbws_)
            {
              this->WaterLoopNbws_.set (WaterLoopNbws_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbxd
          //
          if (n.name () == "WaterLoopNbxd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbxd_)
            {
              this->WaterLoopNbxd_.set (WaterLoopNbxd_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNbxs
          //
          if (n.name () == "WaterLoopNbxs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNbxs_)
            {
              this->WaterLoopNbxs_.set (WaterLoopNbxs_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNped
          //
          if (n.name () == "WaterLoopNped" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNped_)
            {
              this->WaterLoopNped_.set (WaterLoopNped_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpes
          //
          if (n.name () == "WaterLoopNpes" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpes_)
            {
              this->WaterLoopNpes_.set (WaterLoopNpes_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpod
          //
          if (n.name () == "WaterLoopNpod" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpod_)
            {
              this->WaterLoopNpod_.set (WaterLoopNpod_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpos
          //
          if (n.name () == "WaterLoopNpos" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpos_)
            {
              this->WaterLoopNpos_.set (WaterLoopNpos_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNppd
          //
          if (n.name () == "WaterLoopNppd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNppd_)
            {
              this->WaterLoopNppd_.set (WaterLoopNppd_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpps
          //
          if (n.name () == "WaterLoopNpps" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpps_)
            {
              this->WaterLoopNpps_.set (WaterLoopNpps_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpxd
          //
          if (n.name () == "WaterLoopNpxd" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpxd_)
            {
              this->WaterLoopNpxd_.set (WaterLoopNpxd_traits::create (i, f, this));
              continue;
            }
          }

          // WaterLoopNpxs
          //
          if (n.name () == "WaterLoopNpxs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->WaterLoopNpxs_)
            {
              this->WaterLoopNpxs_.set (WaterLoopNpxs_traits::create (i, f, this));
              continue;
            }
          }

          // NodeStartSupplyInletBranch
          //
          if (n.name () == "NodeStartSupplyInletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartSupplyInletBranch_type > r (
              NodeStartSupplyInletBranch_traits::create (i, f, this));

            if (!this->NodeStartSupplyInletBranch_)
            {
              this->NodeStartSupplyInletBranch_.set (r);
              continue;
            }
          }

          // NodeEndSupplyInletBranch
          //
          if (n.name () == "NodeEndSupplyInletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeEndSupplyInletBranch_type > r (
              NodeEndSupplyInletBranch_traits::create (i, f, this));

            if (!this->NodeEndSupplyInletBranch_)
            {
              this->NodeEndSupplyInletBranch_.set (r);
              continue;
            }
          }

          // NodeStartDemandInletBranch
          //
          if (n.name () == "NodeStartDemandInletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartDemandInletBranch_type > r (
              NodeStartDemandInletBranch_traits::create (i, f, this));

            if (!this->NodeStartDemandInletBranch_)
            {
              this->NodeStartDemandInletBranch_.set (r);
              continue;
            }
          }

          // NodeEndDemandInletBranch
          //
          if (n.name () == "NodeEndDemandInletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeEndDemandInletBranch_type > r (
              NodeEndDemandInletBranch_traits::create (i, f, this));

            if (!this->NodeEndDemandInletBranch_)
            {
              this->NodeEndDemandInletBranch_.set (r);
              continue;
            }
          }

          // NodeStartSupplySubLoop
          //
          if (n.name () == "NodeStartSupplySubLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartSupplySubLoop_type > r (
              NodeStartSupplySubLoop_traits::create (i, f, this));

            if (!this->NodeStartSupplySubLoop_)
            {
              this->NodeStartSupplySubLoop_.set (r);
              continue;
            }
          }

          // NodeStartDemandSubLoop
          //
          if (n.name () == "NodeStartDemandSubLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartDemandSubLoop_type > r (
              NodeStartDemandSubLoop_traits::create (i, f, this));

            if (!this->NodeStartDemandSubLoop_)
            {
              this->NodeStartDemandSubLoop_.set (r);
              continue;
            }
          }

          // NodeEndSupplySubLoop
          //
          if (n.name () == "NodeEndSupplySubLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeEndSupplySubLoop_type > r (
              NodeEndSupplySubLoop_traits::create (i, f, this));

            if (!this->NodeEndSupplySubLoop_)
            {
              this->NodeEndSupplySubLoop_.set (r);
              continue;
            }
          }

          // NodeStartSupplyOutletBranch
          //
          if (n.name () == "NodeStartSupplyOutletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartSupplyOutletBranch_type > r (
              NodeStartSupplyOutletBranch_traits::create (i, f, this));

            if (!this->NodeStartSupplyOutletBranch_)
            {
              this->NodeStartSupplyOutletBranch_.set (r);
              continue;
            }
          }

          // NodeEndDemandSubLoop
          //
          if (n.name () == "NodeEndDemandSubLoop" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeEndDemandSubLoop_type > r (
              NodeEndDemandSubLoop_traits::create (i, f, this));

            if (!this->NodeEndDemandSubLoop_)
            {
              this->NodeEndDemandSubLoop_.set (r);
              continue;
            }
          }

          // NodeStartDemandOutletBranch
          //
          if (n.name () == "NodeStartDemandOutletBranch" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NodeStartDemandOutletBranch_type > r (
              NodeStartDemandOutletBranch_traits::create (i, f, this));

            if (!this->NodeStartDemandOutletBranch_)
            {
              this->NodeStartDemandOutletBranch_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimValidationResultsWater* SimValidationResultsWater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimValidationResultsWater (*this, f, c);
      }

      SimValidationResultsWater& SimValidationResultsWater::
      operator= (const SimValidationResultsWater& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimValidationResults& > (*this) = x;
          this->PlantLoopType_ = x.PlantLoopType_;
          this->WaterLoopConfig_ = x.WaterLoopConfig_;
          this->TESTankType_ = x.TESTankType_;
          this->SupplySideLoopPumpFound_ = x.SupplySideLoopPumpFound_;
          this->DemandSideLoopPumpFound_ = x.DemandSideLoopPumpFound_;
          this->TemperingValvePresent_ = x.TemperingValvePresent_;
          this->TemperingValveID_ = x.TemperingValveID_;
          this->WaterLoopNbcs_ = x.WaterLoopNbcs_;
          this->WaterLoopNbed_ = x.WaterLoopNbed_;
          this->WaterLoopNbes_ = x.WaterLoopNbes_;
          this->WaterLoopNbis_ = x.WaterLoopNbis_;
          this->WaterLoopNbod_ = x.WaterLoopNbod_;
          this->WaterLoopNbos_ = x.WaterLoopNbos_;
          this->WaterLoopNbpd_ = x.WaterLoopNbpd_;
          this->WaterLoopNbps_ = x.WaterLoopNbps_;
          this->WaterLoopNbtd_ = x.WaterLoopNbtd_;
          this->WaterLoopNbws_ = x.WaterLoopNbws_;
          this->WaterLoopNbxd_ = x.WaterLoopNbxd_;
          this->WaterLoopNbxs_ = x.WaterLoopNbxs_;
          this->WaterLoopNped_ = x.WaterLoopNped_;
          this->WaterLoopNpes_ = x.WaterLoopNpes_;
          this->WaterLoopNpod_ = x.WaterLoopNpod_;
          this->WaterLoopNpos_ = x.WaterLoopNpos_;
          this->WaterLoopNppd_ = x.WaterLoopNppd_;
          this->WaterLoopNpps_ = x.WaterLoopNpps_;
          this->WaterLoopNpxd_ = x.WaterLoopNpxd_;
          this->WaterLoopNpxs_ = x.WaterLoopNpxs_;
          this->NodeStartSupplyInletBranch_ = x.NodeStartSupplyInletBranch_;
          this->NodeEndSupplyInletBranch_ = x.NodeEndSupplyInletBranch_;
          this->NodeStartDemandInletBranch_ = x.NodeStartDemandInletBranch_;
          this->NodeEndDemandInletBranch_ = x.NodeEndDemandInletBranch_;
          this->NodeStartSupplySubLoop_ = x.NodeStartSupplySubLoop_;
          this->NodeStartDemandSubLoop_ = x.NodeStartDemandSubLoop_;
          this->NodeEndSupplySubLoop_ = x.NodeEndSupplySubLoop_;
          this->NodeStartSupplyOutletBranch_ = x.NodeStartSupplyOutletBranch_;
          this->NodeEndDemandSubLoop_ = x.NodeEndDemandSubLoop_;
          this->NodeStartDemandOutletBranch_ = x.NodeStartDemandOutletBranch_;
        }

        return *this;
      }

      SimValidationResultsWater::
      ~SimValidationResultsWater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

