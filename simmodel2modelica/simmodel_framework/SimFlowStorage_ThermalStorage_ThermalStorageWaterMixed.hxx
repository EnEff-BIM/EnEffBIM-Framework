// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_STORAGE_THERMAL_STORAGE_THERMAL_STORAGE_WATER_MIXED_HXX
#define SIM_FLOW_STORAGE_THERMAL_STORAGE_THERMAL_STORAGE_WATER_MIXED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowstorage_thermalstorage.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed: public ::namespaces::Sim::MepModel::SimFlowStorage_ThermalStorage
      {
        public:
        // SimFlowSto_TankVol
        //
        typedef ::xml_schema::double_ SimFlowSto_TankVol_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TankVol_type > SimFlowSto_TankVol_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TankVol_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_TankVol_traits;

        const SimFlowSto_TankVol_optional&
        SimFlowSto_TankVol () const;

        SimFlowSto_TankVol_optional&
        SimFlowSto_TankVol ();

        void
        SimFlowSto_TankVol (const SimFlowSto_TankVol_type& x);

        void
        SimFlowSto_TankVol (const SimFlowSto_TankVol_optional& x);

        // SimFlowSto_SetpointTempSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_SetpointTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SetpointTempSchedName_type > SimFlowSto_SetpointTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SetpointTempSchedName_type, char > SimFlowSto_SetpointTempSchedName_traits;

        const SimFlowSto_SetpointTempSchedName_optional&
        SimFlowSto_SetpointTempSchedName () const;

        SimFlowSto_SetpointTempSchedName_optional&
        SimFlowSto_SetpointTempSchedName ();

        void
        SimFlowSto_SetpointTempSchedName (const SimFlowSto_SetpointTempSchedName_type& x);

        void
        SimFlowSto_SetpointTempSchedName (const SimFlowSto_SetpointTempSchedName_optional& x);

        void
        SimFlowSto_SetpointTempSchedName (::std::auto_ptr< SimFlowSto_SetpointTempSchedName_type > p);

        // SimFlowSto_DeadbandTempDifference
        //
        typedef ::xml_schema::double_ SimFlowSto_DeadbandTempDifference_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_DeadbandTempDifference_type > SimFlowSto_DeadbandTempDifference_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_DeadbandTempDifference_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_DeadbandTempDifference_traits;

        const SimFlowSto_DeadbandTempDifference_optional&
        SimFlowSto_DeadbandTempDifference () const;

        SimFlowSto_DeadbandTempDifference_optional&
        SimFlowSto_DeadbandTempDifference ();

        void
        SimFlowSto_DeadbandTempDifference (const SimFlowSto_DeadbandTempDifference_type& x);

        void
        SimFlowSto_DeadbandTempDifference (const SimFlowSto_DeadbandTempDifference_optional& x);

        // SimFlowSto_MinTempLimit
        //
        typedef ::xml_schema::double_ SimFlowSto_MinTempLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_MinTempLimit_type > SimFlowSto_MinTempLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_MinTempLimit_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_MinTempLimit_traits;

        const SimFlowSto_MinTempLimit_optional&
        SimFlowSto_MinTempLimit () const;

        SimFlowSto_MinTempLimit_optional&
        SimFlowSto_MinTempLimit ();

        void
        SimFlowSto_MinTempLimit (const SimFlowSto_MinTempLimit_type& x);

        void
        SimFlowSto_MinTempLimit (const SimFlowSto_MinTempLimit_optional& x);

        // SimFlowSto_NomCoolingCap
        //
        typedef ::xml_schema::double_ SimFlowSto_NomCoolingCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_NomCoolingCap_type > SimFlowSto_NomCoolingCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_NomCoolingCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_NomCoolingCap_traits;

        const SimFlowSto_NomCoolingCap_optional&
        SimFlowSto_NomCoolingCap () const;

        SimFlowSto_NomCoolingCap_optional&
        SimFlowSto_NomCoolingCap ();

        void
        SimFlowSto_NomCoolingCap (const SimFlowSto_NomCoolingCap_type& x);

        void
        SimFlowSto_NomCoolingCap (const SimFlowSto_NomCoolingCap_optional& x);

        // SimFlowSto_AmbTempdic
        //
        typedef ::xml_schema::string SimFlowSto_AmbTempdic_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempdic_type > SimFlowSto_AmbTempdic_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempdic_type, char > SimFlowSto_AmbTempdic_traits;

        const SimFlowSto_AmbTempdic_optional&
        SimFlowSto_AmbTempdic () const;

        SimFlowSto_AmbTempdic_optional&
        SimFlowSto_AmbTempdic ();

        void
        SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_type& x);

        void
        SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_optional& x);

        void
        SimFlowSto_AmbTempdic (::std::auto_ptr< SimFlowSto_AmbTempdic_type > p);

        // SimFlowSto_AmbTempSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_AmbTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempSchedName_type > SimFlowSto_AmbTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempSchedName_type, char > SimFlowSto_AmbTempSchedName_traits;

        const SimFlowSto_AmbTempSchedName_optional&
        SimFlowSto_AmbTempSchedName () const;

        SimFlowSto_AmbTempSchedName_optional&
        SimFlowSto_AmbTempSchedName ();

        void
        SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_type& x);

        void
        SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_optional& x);

        void
        SimFlowSto_AmbTempSchedName (::std::auto_ptr< SimFlowSto_AmbTempSchedName_type > p);

        // SimFlowSto_AmbTempZoneName
        //
        typedef ::xml_schema::idref SimFlowSto_AmbTempZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempZoneName_type > SimFlowSto_AmbTempZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempZoneName_type, char > SimFlowSto_AmbTempZoneName_traits;

        const SimFlowSto_AmbTempZoneName_optional&
        SimFlowSto_AmbTempZoneName () const;

        SimFlowSto_AmbTempZoneName_optional&
        SimFlowSto_AmbTempZoneName ();

        void
        SimFlowSto_AmbTempZoneName (const SimFlowSto_AmbTempZoneName_type& x);

        void
        SimFlowSto_AmbTempZoneName (const SimFlowSto_AmbTempZoneName_optional& x);

        void
        SimFlowSto_AmbTempZoneName (::std::auto_ptr< SimFlowSto_AmbTempZoneName_type > p);

        // SimFlowSto_AmbTempOutdrAirNodeName
        //
        typedef ::xml_schema::string SimFlowSto_AmbTempOutdrAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempOutdrAirNodeName_type > SimFlowSto_AmbTempOutdrAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempOutdrAirNodeName_type, char > SimFlowSto_AmbTempOutdrAirNodeName_traits;

        const SimFlowSto_AmbTempOutdrAirNodeName_optional&
        SimFlowSto_AmbTempOutdrAirNodeName () const;

        SimFlowSto_AmbTempOutdrAirNodeName_optional&
        SimFlowSto_AmbTempOutdrAirNodeName ();

        void
        SimFlowSto_AmbTempOutdrAirNodeName (const SimFlowSto_AmbTempOutdrAirNodeName_type& x);

        void
        SimFlowSto_AmbTempOutdrAirNodeName (const SimFlowSto_AmbTempOutdrAirNodeName_optional& x);

        void
        SimFlowSto_AmbTempOutdrAirNodeName (::std::auto_ptr< SimFlowSto_AmbTempOutdrAirNodeName_type > p);

        // SimFlowSto_HeatGainCoefFromAmbTemp
        //
        typedef ::xml_schema::double_ SimFlowSto_HeatGainCoefFromAmbTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_HeatGainCoefFromAmbTemp_type > SimFlowSto_HeatGainCoefFromAmbTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_HeatGainCoefFromAmbTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_HeatGainCoefFromAmbTemp_traits;

        const SimFlowSto_HeatGainCoefFromAmbTemp_optional&
        SimFlowSto_HeatGainCoefFromAmbTemp () const;

        SimFlowSto_HeatGainCoefFromAmbTemp_optional&
        SimFlowSto_HeatGainCoefFromAmbTemp ();

        void
        SimFlowSto_HeatGainCoefFromAmbTemp (const SimFlowSto_HeatGainCoefFromAmbTemp_type& x);

        void
        SimFlowSto_HeatGainCoefFromAmbTemp (const SimFlowSto_HeatGainCoefFromAmbTemp_optional& x);

        // SimFlowSto_UseSideInletNodeName
        //
        typedef ::xml_schema::string SimFlowSto_UseSideInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_UseSideInletNodeName_type > SimFlowSto_UseSideInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_UseSideInletNodeName_type, char > SimFlowSto_UseSideInletNodeName_traits;

        const SimFlowSto_UseSideInletNodeName_optional&
        SimFlowSto_UseSideInletNodeName () const;

        SimFlowSto_UseSideInletNodeName_optional&
        SimFlowSto_UseSideInletNodeName ();

        void
        SimFlowSto_UseSideInletNodeName (const SimFlowSto_UseSideInletNodeName_type& x);

        void
        SimFlowSto_UseSideInletNodeName (const SimFlowSto_UseSideInletNodeName_optional& x);

        void
        SimFlowSto_UseSideInletNodeName (::std::auto_ptr< SimFlowSto_UseSideInletNodeName_type > p);

        // SimFlowSto_UseSideOutletNodeName
        //
        typedef ::xml_schema::string SimFlowSto_UseSideOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_UseSideOutletNodeName_type > SimFlowSto_UseSideOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_UseSideOutletNodeName_type, char > SimFlowSto_UseSideOutletNodeName_traits;

        const SimFlowSto_UseSideOutletNodeName_optional&
        SimFlowSto_UseSideOutletNodeName () const;

        SimFlowSto_UseSideOutletNodeName_optional&
        SimFlowSto_UseSideOutletNodeName ();

        void
        SimFlowSto_UseSideOutletNodeName (const SimFlowSto_UseSideOutletNodeName_type& x);

        void
        SimFlowSto_UseSideOutletNodeName (const SimFlowSto_UseSideOutletNodeName_optional& x);

        void
        SimFlowSto_UseSideOutletNodeName (::std::auto_ptr< SimFlowSto_UseSideOutletNodeName_type > p);

        // SimFlowSto_UseSideHeatTransEffect
        //
        typedef ::xml_schema::double_ SimFlowSto_UseSideHeatTransEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_UseSideHeatTransEffect_type > SimFlowSto_UseSideHeatTransEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_UseSideHeatTransEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_UseSideHeatTransEffect_traits;

        const SimFlowSto_UseSideHeatTransEffect_optional&
        SimFlowSto_UseSideHeatTransEffect () const;

        SimFlowSto_UseSideHeatTransEffect_optional&
        SimFlowSto_UseSideHeatTransEffect ();

        void
        SimFlowSto_UseSideHeatTransEffect (const SimFlowSto_UseSideHeatTransEffect_type& x);

        void
        SimFlowSto_UseSideHeatTransEffect (const SimFlowSto_UseSideHeatTransEffect_optional& x);

        // SimFlowSto_UseSideAvailSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_UseSideAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_UseSideAvailSchedName_type > SimFlowSto_UseSideAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_UseSideAvailSchedName_type, char > SimFlowSto_UseSideAvailSchedName_traits;

        const SimFlowSto_UseSideAvailSchedName_optional&
        SimFlowSto_UseSideAvailSchedName () const;

        SimFlowSto_UseSideAvailSchedName_optional&
        SimFlowSto_UseSideAvailSchedName ();

        void
        SimFlowSto_UseSideAvailSchedName (const SimFlowSto_UseSideAvailSchedName_type& x);

        void
        SimFlowSto_UseSideAvailSchedName (const SimFlowSto_UseSideAvailSchedName_optional& x);

        void
        SimFlowSto_UseSideAvailSchedName (::std::auto_ptr< SimFlowSto_UseSideAvailSchedName_type > p);

        // SimFlowSto_UseSideDesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowSto_UseSideDesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_UseSideDesignFlowRate_type > SimFlowSto_UseSideDesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_UseSideDesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_UseSideDesignFlowRate_traits;

        const SimFlowSto_UseSideDesignFlowRate_optional&
        SimFlowSto_UseSideDesignFlowRate () const;

        SimFlowSto_UseSideDesignFlowRate_optional&
        SimFlowSto_UseSideDesignFlowRate ();

        void
        SimFlowSto_UseSideDesignFlowRate (const SimFlowSto_UseSideDesignFlowRate_type& x);

        void
        SimFlowSto_UseSideDesignFlowRate (const SimFlowSto_UseSideDesignFlowRate_optional& x);

        // SimFlowSto_SrcSideInletNodeName
        //
        typedef ::xml_schema::string SimFlowSto_SrcSideInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SrcSideInletNodeName_type > SimFlowSto_SrcSideInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SrcSideInletNodeName_type, char > SimFlowSto_SrcSideInletNodeName_traits;

        const SimFlowSto_SrcSideInletNodeName_optional&
        SimFlowSto_SrcSideInletNodeName () const;

        SimFlowSto_SrcSideInletNodeName_optional&
        SimFlowSto_SrcSideInletNodeName ();

        void
        SimFlowSto_SrcSideInletNodeName (const SimFlowSto_SrcSideInletNodeName_type& x);

        void
        SimFlowSto_SrcSideInletNodeName (const SimFlowSto_SrcSideInletNodeName_optional& x);

        void
        SimFlowSto_SrcSideInletNodeName (::std::auto_ptr< SimFlowSto_SrcSideInletNodeName_type > p);

        // SimFlowSto_SrcSideOutletNodeName
        //
        typedef ::xml_schema::string SimFlowSto_SrcSideOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SrcSideOutletNodeName_type > SimFlowSto_SrcSideOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SrcSideOutletNodeName_type, char > SimFlowSto_SrcSideOutletNodeName_traits;

        const SimFlowSto_SrcSideOutletNodeName_optional&
        SimFlowSto_SrcSideOutletNodeName () const;

        SimFlowSto_SrcSideOutletNodeName_optional&
        SimFlowSto_SrcSideOutletNodeName ();

        void
        SimFlowSto_SrcSideOutletNodeName (const SimFlowSto_SrcSideOutletNodeName_type& x);

        void
        SimFlowSto_SrcSideOutletNodeName (const SimFlowSto_SrcSideOutletNodeName_optional& x);

        void
        SimFlowSto_SrcSideOutletNodeName (::std::auto_ptr< SimFlowSto_SrcSideOutletNodeName_type > p);

        // SimFlowSto_SrcSideHeatTransEffect
        //
        typedef ::xml_schema::double_ SimFlowSto_SrcSideHeatTransEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SrcSideHeatTransEffect_type > SimFlowSto_SrcSideHeatTransEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SrcSideHeatTransEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_SrcSideHeatTransEffect_traits;

        const SimFlowSto_SrcSideHeatTransEffect_optional&
        SimFlowSto_SrcSideHeatTransEffect () const;

        SimFlowSto_SrcSideHeatTransEffect_optional&
        SimFlowSto_SrcSideHeatTransEffect ();

        void
        SimFlowSto_SrcSideHeatTransEffect (const SimFlowSto_SrcSideHeatTransEffect_type& x);

        void
        SimFlowSto_SrcSideHeatTransEffect (const SimFlowSto_SrcSideHeatTransEffect_optional& x);

        // SimFlowSto_SrcSideAvailSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_SrcSideAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SrcSideAvailSchedName_type > SimFlowSto_SrcSideAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SrcSideAvailSchedName_type, char > SimFlowSto_SrcSideAvailSchedName_traits;

        const SimFlowSto_SrcSideAvailSchedName_optional&
        SimFlowSto_SrcSideAvailSchedName () const;

        SimFlowSto_SrcSideAvailSchedName_optional&
        SimFlowSto_SrcSideAvailSchedName ();

        void
        SimFlowSto_SrcSideAvailSchedName (const SimFlowSto_SrcSideAvailSchedName_type& x);

        void
        SimFlowSto_SrcSideAvailSchedName (const SimFlowSto_SrcSideAvailSchedName_optional& x);

        void
        SimFlowSto_SrcSideAvailSchedName (::std::auto_ptr< SimFlowSto_SrcSideAvailSchedName_type > p);

        // SimFlowSto_SrcSideDesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowSto_SrcSideDesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_SrcSideDesignFlowRate_type > SimFlowSto_SrcSideDesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_SrcSideDesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_SrcSideDesignFlowRate_traits;

        const SimFlowSto_SrcSideDesignFlowRate_optional&
        SimFlowSto_SrcSideDesignFlowRate () const;

        SimFlowSto_SrcSideDesignFlowRate_optional&
        SimFlowSto_SrcSideDesignFlowRate ();

        void
        SimFlowSto_SrcSideDesignFlowRate (const SimFlowSto_SrcSideDesignFlowRate_type& x);

        void
        SimFlowSto_SrcSideDesignFlowRate (const SimFlowSto_SrcSideDesignFlowRate_optional& x);

        // SimFlowSto_TankRecovTime
        //
        typedef ::xml_schema::double_ SimFlowSto_TankRecovTime_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TankRecovTime_type > SimFlowSto_TankRecovTime_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TankRecovTime_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_TankRecovTime_traits;

        const SimFlowSto_TankRecovTime_optional&
        SimFlowSto_TankRecovTime () const;

        SimFlowSto_TankRecovTime_optional&
        SimFlowSto_TankRecovTime ();

        void
        SimFlowSto_TankRecovTime (const SimFlowSto_TankRecovTime_type& x);

        void
        SimFlowSto_TankRecovTime (const SimFlowSto_TankRecovTime_optional& x);

        // Constructors.
        //
        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed (const RefId_type&);

        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed (const ::xercesc::DOMElement& e,
                                                                ::xml_schema::flags f = 0,
                                                                ::xml_schema::container* c = 0);

        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed (const SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed& x,
                                                                ::xml_schema::flags f = 0,
                                                                ::xml_schema::container* c = 0);

        virtual SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed&
        operator= (const SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed& x);

        virtual 
        ~SimFlowStorage_ThermalStorage_ThermalStorageWaterMixed ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowSto_TankVol_optional SimFlowSto_TankVol_;
        SimFlowSto_SetpointTempSchedName_optional SimFlowSto_SetpointTempSchedName_;
        SimFlowSto_DeadbandTempDifference_optional SimFlowSto_DeadbandTempDifference_;
        SimFlowSto_MinTempLimit_optional SimFlowSto_MinTempLimit_;
        SimFlowSto_NomCoolingCap_optional SimFlowSto_NomCoolingCap_;
        SimFlowSto_AmbTempdic_optional SimFlowSto_AmbTempdic_;
        SimFlowSto_AmbTempSchedName_optional SimFlowSto_AmbTempSchedName_;
        SimFlowSto_AmbTempZoneName_optional SimFlowSto_AmbTempZoneName_;
        SimFlowSto_AmbTempOutdrAirNodeName_optional SimFlowSto_AmbTempOutdrAirNodeName_;
        SimFlowSto_HeatGainCoefFromAmbTemp_optional SimFlowSto_HeatGainCoefFromAmbTemp_;
        SimFlowSto_UseSideInletNodeName_optional SimFlowSto_UseSideInletNodeName_;
        SimFlowSto_UseSideOutletNodeName_optional SimFlowSto_UseSideOutletNodeName_;
        SimFlowSto_UseSideHeatTransEffect_optional SimFlowSto_UseSideHeatTransEffect_;
        SimFlowSto_UseSideAvailSchedName_optional SimFlowSto_UseSideAvailSchedName_;
        SimFlowSto_UseSideDesignFlowRate_optional SimFlowSto_UseSideDesignFlowRate_;
        SimFlowSto_SrcSideInletNodeName_optional SimFlowSto_SrcSideInletNodeName_;
        SimFlowSto_SrcSideOutletNodeName_optional SimFlowSto_SrcSideOutletNodeName_;
        SimFlowSto_SrcSideHeatTransEffect_optional SimFlowSto_SrcSideHeatTransEffect_;
        SimFlowSto_SrcSideAvailSchedName_optional SimFlowSto_SrcSideAvailSchedName_;
        SimFlowSto_SrcSideDesignFlowRate_optional SimFlowSto_SrcSideDesignFlowRate_;
        SimFlowSto_TankRecovTime_optional SimFlowSto_TankRecovTime_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_STORAGE_THERMAL_STORAGE_THERMAL_STORAGE_WATER_MIXED_HXX
