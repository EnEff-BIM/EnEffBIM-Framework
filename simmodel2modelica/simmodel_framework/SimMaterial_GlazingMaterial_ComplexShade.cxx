// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterial_GlazingMaterial_ComplexShade.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_ComplexShade
      // 

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Thick () const
      {
        return this->SimMaterial_Thick_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_Thick_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Thick ()
      {
        return this->SimMaterial_Thick_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Thick (const SimMaterial_Thick_type& x)
      {
        this->SimMaterial_Thick_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Thick (const SimMaterial_Thick_optional& x)
      {
        this->SimMaterial_Thick_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Cond () const
      {
        return this->SimMaterial_Cond_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_Cond_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Cond ()
      {
        return this->SimMaterial_Cond_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Cond (const SimMaterial_Cond_type& x)
      {
        this->SimMaterial_Cond_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_Cond (const SimMaterial_Cond_optional& x)
      {
        this->SimMaterial_Cond_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_LayerType_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LayerType () const
      {
        return this->SimMaterial_LayerType_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_LayerType_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LayerType ()
      {
        return this->SimMaterial_LayerType_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LayerType (const SimMaterial_LayerType_type& x)
      {
        this->SimMaterial_LayerType_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LayerType (const SimMaterial_LayerType_optional& x)
      {
        this->SimMaterial_LayerType_ = x;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LayerType (::std::auto_ptr< SimMaterial_LayerType_type > x)
      {
        this->SimMaterial_LayerType_.set (x);
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_IRTransmit_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_IRTransmit () const
      {
        return this->SimMaterial_IRTransmit_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_IRTransmit_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_IRTransmit ()
      {
        return this->SimMaterial_IRTransmit_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_IRTransmit (const SimMaterial_IRTransmit_type& x)
      {
        this->SimMaterial_IRTransmit_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_IRTransmit (const SimMaterial_IRTransmit_optional& x)
      {
        this->SimMaterial_IRTransmit_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_FrontEmissivity_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontEmissivity () const
      {
        return this->SimMaterial_FrontEmissivity_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_FrontEmissivity_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontEmissivity ()
      {
        return this->SimMaterial_FrontEmissivity_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontEmissivity (const SimMaterial_FrontEmissivity_type& x)
      {
        this->SimMaterial_FrontEmissivity_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontEmissivity (const SimMaterial_FrontEmissivity_optional& x)
      {
        this->SimMaterial_FrontEmissivity_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_BackEmissivity_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BackEmissivity () const
      {
        return this->SimMaterial_BackEmissivity_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_BackEmissivity_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BackEmissivity ()
      {
        return this->SimMaterial_BackEmissivity_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BackEmissivity (const SimMaterial_BackEmissivity_type& x)
      {
        this->SimMaterial_BackEmissivity_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BackEmissivity (const SimMaterial_BackEmissivity_optional& x)
      {
        this->SimMaterial_BackEmissivity_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_TopOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_TopOpeningMult () const
      {
        return this->SimMaterial_TopOpeningMult_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_TopOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_TopOpeningMult ()
      {
        return this->SimMaterial_TopOpeningMult_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_TopOpeningMult (const SimMaterial_TopOpeningMult_type& x)
      {
        this->SimMaterial_TopOpeningMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_TopOpeningMult (const SimMaterial_TopOpeningMult_optional& x)
      {
        this->SimMaterial_TopOpeningMult_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_BottomOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BottomOpeningMult () const
      {
        return this->SimMaterial_BottomOpeningMult_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_BottomOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BottomOpeningMult ()
      {
        return this->SimMaterial_BottomOpeningMult_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BottomOpeningMult (const SimMaterial_BottomOpeningMult_type& x)
      {
        this->SimMaterial_BottomOpeningMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_BottomOpeningMult (const SimMaterial_BottomOpeningMult_optional& x)
      {
        this->SimMaterial_BottomOpeningMult_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_LeftSideOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LeftSideOpeningMult () const
      {
        return this->SimMaterial_LeftSideOpeningMult_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_LeftSideOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LeftSideOpeningMult ()
      {
        return this->SimMaterial_LeftSideOpeningMult_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LeftSideOpeningMult (const SimMaterial_LeftSideOpeningMult_type& x)
      {
        this->SimMaterial_LeftSideOpeningMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_LeftSideOpeningMult (const SimMaterial_LeftSideOpeningMult_optional& x)
      {
        this->SimMaterial_LeftSideOpeningMult_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_RightSideOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_RightSideOpeningMult () const
      {
        return this->SimMaterial_RightSideOpeningMult_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_RightSideOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_RightSideOpeningMult ()
      {
        return this->SimMaterial_RightSideOpeningMult_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_RightSideOpeningMult (const SimMaterial_RightSideOpeningMult_type& x)
      {
        this->SimMaterial_RightSideOpeningMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_RightSideOpeningMult (const SimMaterial_RightSideOpeningMult_optional& x)
      {
        this->SimMaterial_RightSideOpeningMult_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_FrontOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontOpeningMult () const
      {
        return this->SimMaterial_FrontOpeningMult_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_FrontOpeningMult_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontOpeningMult ()
      {
        return this->SimMaterial_FrontOpeningMult_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontOpeningMult (const SimMaterial_FrontOpeningMult_type& x)
      {
        this->SimMaterial_FrontOpeningMult_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_FrontOpeningMult (const SimMaterial_FrontOpeningMult_optional& x)
      {
        this->SimMaterial_FrontOpeningMult_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatWidth_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatWidth () const
      {
        return this->SimMaterial_SlatWidth_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatWidth_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatWidth ()
      {
        return this->SimMaterial_SlatWidth_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_type& x)
      {
        this->SimMaterial_SlatWidth_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatWidth (const SimMaterial_SlatWidth_optional& x)
      {
        this->SimMaterial_SlatWidth_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatSpacing_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatSpacing () const
      {
        return this->SimMaterial_SlatSpacing_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatSpacing_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatSpacing ()
      {
        return this->SimMaterial_SlatSpacing_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatSpacing (const SimMaterial_SlatSpacing_type& x)
      {
        this->SimMaterial_SlatSpacing_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatSpacing (const SimMaterial_SlatSpacing_optional& x)
      {
        this->SimMaterial_SlatSpacing_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatThick_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatThick () const
      {
        return this->SimMaterial_SlatThick_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatThick_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatThick ()
      {
        return this->SimMaterial_SlatThick_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatThick (const SimMaterial_SlatThick_type& x)
      {
        this->SimMaterial_SlatThick_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatThick (const SimMaterial_SlatThick_optional& x)
      {
        this->SimMaterial_SlatThick_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatAngle_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatAngle () const
      {
        return this->SimMaterial_SlatAngle_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatAngle_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatAngle ()
      {
        return this->SimMaterial_SlatAngle_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_type& x)
      {
        this->SimMaterial_SlatAngle_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatAngle (const SimMaterial_SlatAngle_optional& x)
      {
        this->SimMaterial_SlatAngle_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatCond_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCond () const
      {
        return this->SimMaterial_SlatCond_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatCond_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCond ()
      {
        return this->SimMaterial_SlatCond_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCond (const SimMaterial_SlatCond_type& x)
      {
        this->SimMaterial_SlatCond_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCond (const SimMaterial_SlatCond_optional& x)
      {
        this->SimMaterial_SlatCond_ = x;
      }

      const SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatCurve_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCurve () const
      {
        return this->SimMaterial_SlatCurve_;
      }

      SimMaterial_GlazingMaterial_ComplexShade::SimMaterial_SlatCurve_optional& SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCurve ()
      {
        return this->SimMaterial_SlatCurve_;
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCurve (const SimMaterial_SlatCurve_type& x)
      {
        this->SimMaterial_SlatCurve_.set (x);
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_SlatCurve (const SimMaterial_SlatCurve_optional& x)
      {
        this->SimMaterial_SlatCurve_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimMaterial_GlazingMaterial_ComplexShade
      //

      SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_GlazingMaterial_ComplexShade (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (RefId),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_LayerType_ (this),
        SimMaterial_IRTransmit_ (this),
        SimMaterial_FrontEmissivity_ (this),
        SimMaterial_BackEmissivity_ (this),
        SimMaterial_TopOpeningMult_ (this),
        SimMaterial_BottomOpeningMult_ (this),
        SimMaterial_LeftSideOpeningMult_ (this),
        SimMaterial_RightSideOpeningMult_ (this),
        SimMaterial_FrontOpeningMult_ (this),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatSpacing_ (this),
        SimMaterial_SlatThick_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatCond_ (this),
        SimMaterial_SlatCurve_ (this)
      {
      }

      SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_GlazingMaterial_ComplexShade (const SimMaterial_GlazingMaterial_ComplexShade& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (x, f, c),
        SimMaterial_Thick_ (x.SimMaterial_Thick_, f, this),
        SimMaterial_Cond_ (x.SimMaterial_Cond_, f, this),
        SimMaterial_LayerType_ (x.SimMaterial_LayerType_, f, this),
        SimMaterial_IRTransmit_ (x.SimMaterial_IRTransmit_, f, this),
        SimMaterial_FrontEmissivity_ (x.SimMaterial_FrontEmissivity_, f, this),
        SimMaterial_BackEmissivity_ (x.SimMaterial_BackEmissivity_, f, this),
        SimMaterial_TopOpeningMult_ (x.SimMaterial_TopOpeningMult_, f, this),
        SimMaterial_BottomOpeningMult_ (x.SimMaterial_BottomOpeningMult_, f, this),
        SimMaterial_LeftSideOpeningMult_ (x.SimMaterial_LeftSideOpeningMult_, f, this),
        SimMaterial_RightSideOpeningMult_ (x.SimMaterial_RightSideOpeningMult_, f, this),
        SimMaterial_FrontOpeningMult_ (x.SimMaterial_FrontOpeningMult_, f, this),
        SimMaterial_SlatWidth_ (x.SimMaterial_SlatWidth_, f, this),
        SimMaterial_SlatSpacing_ (x.SimMaterial_SlatSpacing_, f, this),
        SimMaterial_SlatThick_ (x.SimMaterial_SlatThick_, f, this),
        SimMaterial_SlatAngle_ (x.SimMaterial_SlatAngle_, f, this),
        SimMaterial_SlatCond_ (x.SimMaterial_SlatCond_, f, this),
        SimMaterial_SlatCurve_ (x.SimMaterial_SlatCurve_, f, this)
      {
      }

      SimMaterial_GlazingMaterial_ComplexShade::
      SimMaterial_GlazingMaterial_ComplexShade (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial (e, f | ::xml_schema::flags::base, c),
        SimMaterial_Thick_ (this),
        SimMaterial_Cond_ (this),
        SimMaterial_LayerType_ (this),
        SimMaterial_IRTransmit_ (this),
        SimMaterial_FrontEmissivity_ (this),
        SimMaterial_BackEmissivity_ (this),
        SimMaterial_TopOpeningMult_ (this),
        SimMaterial_BottomOpeningMult_ (this),
        SimMaterial_LeftSideOpeningMult_ (this),
        SimMaterial_RightSideOpeningMult_ (this),
        SimMaterial_FrontOpeningMult_ (this),
        SimMaterial_SlatWidth_ (this),
        SimMaterial_SlatSpacing_ (this),
        SimMaterial_SlatThick_ (this),
        SimMaterial_SlatAngle_ (this),
        SimMaterial_SlatCond_ (this),
        SimMaterial_SlatCurve_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterial_GlazingMaterial_ComplexShade::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMaterial_Thick
          //
          if (n.name () == "SimMaterial_Thick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Thick_)
            {
              this->SimMaterial_Thick_.set (SimMaterial_Thick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_Cond
          //
          if (n.name () == "SimMaterial_Cond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_Cond_)
            {
              this->SimMaterial_Cond_.set (SimMaterial_Cond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_LayerType
          //
          if (n.name () == "SimMaterial_LayerType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMaterial_LayerType_type > r (
              SimMaterial_LayerType_traits::create (i, f, this));

            if (!this->SimMaterial_LayerType_)
            {
              this->SimMaterial_LayerType_.set (r);
              continue;
            }
          }

          // SimMaterial_IRTransmit
          //
          if (n.name () == "SimMaterial_IRTransmit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_IRTransmit_)
            {
              this->SimMaterial_IRTransmit_.set (SimMaterial_IRTransmit_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontEmissivity
          //
          if (n.name () == "SimMaterial_FrontEmissivity" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontEmissivity_)
            {
              this->SimMaterial_FrontEmissivity_.set (SimMaterial_FrontEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BackEmissivity
          //
          if (n.name () == "SimMaterial_BackEmissivity" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BackEmissivity_)
            {
              this->SimMaterial_BackEmissivity_.set (SimMaterial_BackEmissivity_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_TopOpeningMult
          //
          if (n.name () == "SimMaterial_TopOpeningMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_TopOpeningMult_)
            {
              this->SimMaterial_TopOpeningMult_.set (SimMaterial_TopOpeningMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_BottomOpeningMult
          //
          if (n.name () == "SimMaterial_BottomOpeningMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_BottomOpeningMult_)
            {
              this->SimMaterial_BottomOpeningMult_.set (SimMaterial_BottomOpeningMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_LeftSideOpeningMult
          //
          if (n.name () == "SimMaterial_LeftSideOpeningMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_LeftSideOpeningMult_)
            {
              this->SimMaterial_LeftSideOpeningMult_.set (SimMaterial_LeftSideOpeningMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_RightSideOpeningMult
          //
          if (n.name () == "SimMaterial_RightSideOpeningMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_RightSideOpeningMult_)
            {
              this->SimMaterial_RightSideOpeningMult_.set (SimMaterial_RightSideOpeningMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_FrontOpeningMult
          //
          if (n.name () == "SimMaterial_FrontOpeningMult" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_FrontOpeningMult_)
            {
              this->SimMaterial_FrontOpeningMult_.set (SimMaterial_FrontOpeningMult_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatWidth
          //
          if (n.name () == "SimMaterial_SlatWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatWidth_)
            {
              this->SimMaterial_SlatWidth_.set (SimMaterial_SlatWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatSpacing
          //
          if (n.name () == "SimMaterial_SlatSpacing" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatSpacing_)
            {
              this->SimMaterial_SlatSpacing_.set (SimMaterial_SlatSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatThick
          //
          if (n.name () == "SimMaterial_SlatThick" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatThick_)
            {
              this->SimMaterial_SlatThick_.set (SimMaterial_SlatThick_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatAngle
          //
          if (n.name () == "SimMaterial_SlatAngle" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatAngle_)
            {
              this->SimMaterial_SlatAngle_.set (SimMaterial_SlatAngle_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatCond
          //
          if (n.name () == "SimMaterial_SlatCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatCond_)
            {
              this->SimMaterial_SlatCond_.set (SimMaterial_SlatCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimMaterial_SlatCurve
          //
          if (n.name () == "SimMaterial_SlatCurve" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->SimMaterial_SlatCurve_)
            {
              this->SimMaterial_SlatCurve_.set (SimMaterial_SlatCurve_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimMaterial_GlazingMaterial_ComplexShade* SimMaterial_GlazingMaterial_ComplexShade::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterial_GlazingMaterial_ComplexShade (*this, f, c);
      }

      SimMaterial_GlazingMaterial_ComplexShade& SimMaterial_GlazingMaterial_ComplexShade::
      operator= (const SimMaterial_GlazingMaterial_ComplexShade& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimMaterial_GlazingMaterial& > (*this) = x;
          this->SimMaterial_Thick_ = x.SimMaterial_Thick_;
          this->SimMaterial_Cond_ = x.SimMaterial_Cond_;
          this->SimMaterial_LayerType_ = x.SimMaterial_LayerType_;
          this->SimMaterial_IRTransmit_ = x.SimMaterial_IRTransmit_;
          this->SimMaterial_FrontEmissivity_ = x.SimMaterial_FrontEmissivity_;
          this->SimMaterial_BackEmissivity_ = x.SimMaterial_BackEmissivity_;
          this->SimMaterial_TopOpeningMult_ = x.SimMaterial_TopOpeningMult_;
          this->SimMaterial_BottomOpeningMult_ = x.SimMaterial_BottomOpeningMult_;
          this->SimMaterial_LeftSideOpeningMult_ = x.SimMaterial_LeftSideOpeningMult_;
          this->SimMaterial_RightSideOpeningMult_ = x.SimMaterial_RightSideOpeningMult_;
          this->SimMaterial_FrontOpeningMult_ = x.SimMaterial_FrontOpeningMult_;
          this->SimMaterial_SlatWidth_ = x.SimMaterial_SlatWidth_;
          this->SimMaterial_SlatSpacing_ = x.SimMaterial_SlatSpacing_;
          this->SimMaterial_SlatThick_ = x.SimMaterial_SlatThick_;
          this->SimMaterial_SlatAngle_ = x.SimMaterial_SlatAngle_;
          this->SimMaterial_SlatCond_ = x.SimMaterial_SlatCond_;
          this->SimMaterial_SlatCurve_ = x.SimMaterial_SlatCurve_;
        }

        return *this;
      }

      SimMaterial_GlazingMaterial_ComplexShade::
      ~SimMaterial_GlazingMaterial_ComplexShade ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

