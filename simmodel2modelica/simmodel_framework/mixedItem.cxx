// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "mixedItem.hxx"

#include "logical.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
      // mixedItem
      // 

      const mixedItem::booleanItem_optional& mixedItem::
      booleanItem () const
      {
        return this->booleanItem_;
      }

      mixedItem::booleanItem_optional& mixedItem::
      booleanItem ()
      {
        return this->booleanItem_;
      }

      void mixedItem::
      booleanItem (const booleanItem_type& x)
      {
        this->booleanItem_.set (x);
      }

      void mixedItem::
      booleanItem (const booleanItem_optional& x)
      {
        this->booleanItem_ = x;
      }

      const mixedItem::doubleItem_optional& mixedItem::
      doubleItem () const
      {
        return this->doubleItem_;
      }

      mixedItem::doubleItem_optional& mixedItem::
      doubleItem ()
      {
        return this->doubleItem_;
      }

      void mixedItem::
      doubleItem (const doubleItem_type& x)
      {
        this->doubleItem_.set (x);
      }

      void mixedItem::
      doubleItem (const doubleItem_optional& x)
      {
        this->doubleItem_ = x;
      }

      const mixedItem::integerItem_optional& mixedItem::
      integerItem () const
      {
        return this->integerItem_;
      }

      mixedItem::integerItem_optional& mixedItem::
      integerItem ()
      {
        return this->integerItem_;
      }

      void mixedItem::
      integerItem (const integerItem_type& x)
      {
        this->integerItem_.set (x);
      }

      void mixedItem::
      integerItem (const integerItem_optional& x)
      {
        this->integerItem_ = x;
      }

      const mixedItem::logicalItem_optional& mixedItem::
      logicalItem () const
      {
        return this->logicalItem_;
      }

      mixedItem::logicalItem_optional& mixedItem::
      logicalItem ()
      {
        return this->logicalItem_;
      }

      void mixedItem::
      logicalItem (const logicalItem_type& x)
      {
        this->logicalItem_.set (x);
      }

      void mixedItem::
      logicalItem (const logicalItem_optional& x)
      {
        this->logicalItem_ = x;
      }

      void mixedItem::
      logicalItem (::std::auto_ptr< logicalItem_type > x)
      {
        this->logicalItem_.set (x);
      }

      const mixedItem::stringItem_optional& mixedItem::
      stringItem () const
      {
        return this->stringItem_;
      }

      mixedItem::stringItem_optional& mixedItem::
      stringItem ()
      {
        return this->stringItem_;
      }

      void mixedItem::
      stringItem (const stringItem_type& x)
      {
        this->stringItem_.set (x);
      }

      void mixedItem::
      stringItem (const stringItem_optional& x)
      {
        this->stringItem_ = x;
      }

      void mixedItem::
      stringItem (::std::auto_ptr< stringItem_type > x)
      {
        this->stringItem_.set (x);
      }

      const mixedItem::TypeName_optional& mixedItem::
      TypeName () const
      {
        return this->TypeName_;
      }

      mixedItem::TypeName_optional& mixedItem::
      TypeName ()
      {
        return this->TypeName_;
      }

      void mixedItem::
      TypeName (const TypeName_type& x)
      {
        this->TypeName_.set (x);
      }

      void mixedItem::
      TypeName (const TypeName_optional& x)
      {
        this->TypeName_ = x;
      }

      void mixedItem::
      TypeName (::std::auto_ptr< TypeName_type > x)
      {
        this->TypeName_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
      // mixedItem
      //

      mixedItem::
      mixedItem ()
      : ::xml_schema::type (),
        booleanItem_ (this),
        doubleItem_ (this),
        integerItem_ (this),
        logicalItem_ (this),
        stringItem_ (this),
        TypeName_ (this)
      {
      }

      mixedItem::
      mixedItem (const mixedItem& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::xml_schema::type (x, f, c),
        booleanItem_ (x.booleanItem_, f, this),
        doubleItem_ (x.doubleItem_, f, this),
        integerItem_ (x.integerItem_, f, this),
        logicalItem_ (x.logicalItem_, f, this),
        stringItem_ (x.stringItem_, f, this),
        TypeName_ (x.TypeName_, f, this)
      {
      }

      mixedItem::
      mixedItem (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
      : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
        booleanItem_ (this),
        doubleItem_ (this),
        integerItem_ (this),
        logicalItem_ (this),
        stringItem_ (this),
        TypeName_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void mixedItem::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // booleanItem
          //
          if (n.name () == "booleanItem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            if (!this->booleanItem_)
            {
              this->booleanItem_.set (booleanItem_traits::create (i, f, this));
              continue;
            }
          }

          // doubleItem
          //
          if (n.name () == "doubleItem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            if (!this->doubleItem_)
            {
              this->doubleItem_.set (doubleItem_traits::create (i, f, this));
              continue;
            }
          }

          // integerItem
          //
          if (n.name () == "integerItem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            if (!this->integerItem_)
            {
              this->integerItem_.set (integerItem_traits::create (i, f, this));
              continue;
            }
          }

          // logicalItem
          //
          if (n.name () == "logicalItem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< logicalItem_type > r (
              logicalItem_traits::create (i, f, this));

            if (!this->logicalItem_)
            {
              this->logicalItem_.set (r);
              continue;
            }
          }

          // stringItem
          //
          if (n.name () == "stringItem" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/SimModelCore")
          {
            ::std::auto_ptr< stringItem_type > r (
              stringItem_traits::create (i, f, this));

            if (!this->stringItem_)
            {
              this->stringItem_.set (r);
              continue;
            }
          }

          break;
        }

        while (p.more_attributes ())
        {
          const ::xercesc::DOMAttr& i (p.next_attribute ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          if (n.name () == "TypeName" && n.namespace_ ().empty ())
          {
            this->TypeName_.set (TypeName_traits::create (i, f, this));
            continue;
          }
        }
      }

      mixedItem* mixedItem::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class mixedItem (*this, f, c);
      }

      mixedItem& mixedItem::
      operator= (const mixedItem& x)
      {
        if (this != &x)
        {
          static_cast< ::xml_schema::type& > (*this) = x;
          this->booleanItem_ = x.booleanItem_;
          this->doubleItem_ = x.doubleItem_;
          this->integerItem_ = x.integerItem_;
          this->logicalItem_ = x.logicalItem_;
          this->stringItem_ = x.stringItem_;
          this->TypeName_ = x.TypeName_;
        }

        return *this;
      }

      mixedItem::
      ~mixedItem ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace SimModelCore
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

