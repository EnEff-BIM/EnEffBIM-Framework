// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFeatureElementSubtraction_Void.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimFeatureElementSubtraction_Void
      // 

      const SimFeatureElementSubtraction_Void::Name_optional& SimFeatureElementSubtraction_Void::
      Name () const
      {
        return this->Name_;
      }

      SimFeatureElementSubtraction_Void::Name_optional& SimFeatureElementSubtraction_Void::
      Name ()
      {
        return this->Name_;
      }

      void SimFeatureElementSubtraction_Void::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimFeatureElementSubtraction_Void::ObjectType_optional& SimFeatureElementSubtraction_Void::
      ObjectType () const
      {
        return this->ObjectType_;
      }

      SimFeatureElementSubtraction_Void::ObjectType_optional& SimFeatureElementSubtraction_Void::
      ObjectType ()
      {
        return this->ObjectType_;
      }

      void SimFeatureElementSubtraction_Void::
      ObjectType (const ObjectType_type& x)
      {
        this->ObjectType_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      ObjectType (const ObjectType_optional& x)
      {
        this->ObjectType_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      ObjectType (::std::auto_ptr< ObjectType_type > x)
      {
        this->ObjectType_.set (x);
      }

      const SimFeatureElementSubtraction_Void::Representation_optional& SimFeatureElementSubtraction_Void::
      Representation () const
      {
        return this->Representation_;
      }

      SimFeatureElementSubtraction_Void::Representation_optional& SimFeatureElementSubtraction_Void::
      Representation ()
      {
        return this->Representation_;
      }

      void SimFeatureElementSubtraction_Void::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimFeatureElementSubtraction_Void::Tag_optional& SimFeatureElementSubtraction_Void::
      Tag () const
      {
        return this->Tag_;
      }

      SimFeatureElementSubtraction_Void::Tag_optional& SimFeatureElementSubtraction_Void::
      Tag ()
      {
        return this->Tag_;
      }

      void SimFeatureElementSubtraction_Void::
      Tag (const Tag_type& x)
      {
        this->Tag_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      Tag (const Tag_optional& x)
      {
        this->Tag_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      Tag (::std::auto_ptr< Tag_type > x)
      {
        this->Tag_.set (x);
      }

      const SimFeatureElementSubtraction_Void::IfcGlobalID_optional& SimFeatureElementSubtraction_Void::
      IfcGlobalID () const
      {
        return this->IfcGlobalID_;
      }

      SimFeatureElementSubtraction_Void::IfcGlobalID_optional& SimFeatureElementSubtraction_Void::
      IfcGlobalID ()
      {
        return this->IfcGlobalID_;
      }

      void SimFeatureElementSubtraction_Void::
      IfcGlobalID (const IfcGlobalID_type& x)
      {
        this->IfcGlobalID_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      IfcGlobalID (const IfcGlobalID_optional& x)
      {
        this->IfcGlobalID_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      IfcGlobalID (::std::auto_ptr< IfcGlobalID_type > x)
      {
        this->IfcGlobalID_.set (x);
      }

      const SimFeatureElementSubtraction_Void::ObjectOwnerHistory_optional& SimFeatureElementSubtraction_Void::
      ObjectOwnerHistory () const
      {
        return this->ObjectOwnerHistory_;
      }

      SimFeatureElementSubtraction_Void::ObjectOwnerHistory_optional& SimFeatureElementSubtraction_Void::
      ObjectOwnerHistory ()
      {
        return this->ObjectOwnerHistory_;
      }

      void SimFeatureElementSubtraction_Void::
      ObjectOwnerHistory (const ObjectOwnerHistory_type& x)
      {
        this->ObjectOwnerHistory_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      ObjectOwnerHistory (const ObjectOwnerHistory_optional& x)
      {
        this->ObjectOwnerHistory_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      ObjectOwnerHistory (::std::auto_ptr< ObjectOwnerHistory_type > x)
      {
        this->ObjectOwnerHistory_.set (x);
      }

      const SimFeatureElementSubtraction_Void::OpeningHeight_optional& SimFeatureElementSubtraction_Void::
      OpeningHeight () const
      {
        return this->OpeningHeight_;
      }

      SimFeatureElementSubtraction_Void::OpeningHeight_optional& SimFeatureElementSubtraction_Void::
      OpeningHeight ()
      {
        return this->OpeningHeight_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningHeight (const OpeningHeight_type& x)
      {
        this->OpeningHeight_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningHeight (const OpeningHeight_optional& x)
      {
        this->OpeningHeight_ = x;
      }

      const SimFeatureElementSubtraction_Void::OpeningWidth_optional& SimFeatureElementSubtraction_Void::
      OpeningWidth () const
      {
        return this->OpeningWidth_;
      }

      SimFeatureElementSubtraction_Void::OpeningWidth_optional& SimFeatureElementSubtraction_Void::
      OpeningWidth ()
      {
        return this->OpeningWidth_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningWidth (const OpeningWidth_type& x)
      {
        this->OpeningWidth_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningWidth (const OpeningWidth_optional& x)
      {
        this->OpeningWidth_ = x;
      }

      const SimFeatureElementSubtraction_Void::OpeningDepth_optional& SimFeatureElementSubtraction_Void::
      OpeningDepth () const
      {
        return this->OpeningDepth_;
      }

      SimFeatureElementSubtraction_Void::OpeningDepth_optional& SimFeatureElementSubtraction_Void::
      OpeningDepth ()
      {
        return this->OpeningDepth_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningDepth (const OpeningDepth_type& x)
      {
        this->OpeningDepth_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningDepth (const OpeningDepth_optional& x)
      {
        this->OpeningDepth_ = x;
      }

      const SimFeatureElementSubtraction_Void::OpeningPerimeter_optional& SimFeatureElementSubtraction_Void::
      OpeningPerimeter () const
      {
        return this->OpeningPerimeter_;
      }

      SimFeatureElementSubtraction_Void::OpeningPerimeter_optional& SimFeatureElementSubtraction_Void::
      OpeningPerimeter ()
      {
        return this->OpeningPerimeter_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningPerimeter (const OpeningPerimeter_type& x)
      {
        this->OpeningPerimeter_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningPerimeter (const OpeningPerimeter_optional& x)
      {
        this->OpeningPerimeter_ = x;
      }

      const SimFeatureElementSubtraction_Void::OpeningArea_optional& SimFeatureElementSubtraction_Void::
      OpeningArea () const
      {
        return this->OpeningArea_;
      }

      SimFeatureElementSubtraction_Void::OpeningArea_optional& SimFeatureElementSubtraction_Void::
      OpeningArea ()
      {
        return this->OpeningArea_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningArea (const OpeningArea_type& x)
      {
        this->OpeningArea_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningArea (const OpeningArea_optional& x)
      {
        this->OpeningArea_ = x;
      }

      const SimFeatureElementSubtraction_Void::OpeningVolume_optional& SimFeatureElementSubtraction_Void::
      OpeningVolume () const
      {
        return this->OpeningVolume_;
      }

      SimFeatureElementSubtraction_Void::OpeningVolume_optional& SimFeatureElementSubtraction_Void::
      OpeningVolume ()
      {
        return this->OpeningVolume_;
      }

      void SimFeatureElementSubtraction_Void::
      OpeningVolume (const OpeningVolume_type& x)
      {
        this->OpeningVolume_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      OpeningVolume (const OpeningVolume_optional& x)
      {
        this->OpeningVolume_ = x;
      }

      const SimFeatureElementSubtraction_Void::TypeDefinition_optional& SimFeatureElementSubtraction_Void::
      TypeDefinition () const
      {
        return this->TypeDefinition_;
      }

      SimFeatureElementSubtraction_Void::TypeDefinition_optional& SimFeatureElementSubtraction_Void::
      TypeDefinition ()
      {
        return this->TypeDefinition_;
      }

      void SimFeatureElementSubtraction_Void::
      TypeDefinition (const TypeDefinition_type& x)
      {
        this->TypeDefinition_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      TypeDefinition (const TypeDefinition_optional& x)
      {
        this->TypeDefinition_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      TypeDefinition (::std::auto_ptr< TypeDefinition_type > x)
      {
        this->TypeDefinition_.set (x);
      }

      const SimFeatureElementSubtraction_Void::Placement_optional& SimFeatureElementSubtraction_Void::
      Placement () const
      {
        return this->Placement_;
      }

      SimFeatureElementSubtraction_Void::Placement_optional& SimFeatureElementSubtraction_Void::
      Placement ()
      {
        return this->Placement_;
      }

      void SimFeatureElementSubtraction_Void::
      Placement (const Placement_type& x)
      {
        this->Placement_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      Placement (const Placement_optional& x)
      {
        this->Placement_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      Placement (::std::auto_ptr< Placement_type > x)
      {
        this->Placement_.set (x);
      }

      const SimFeatureElementSubtraction_Void::GeometricRepresentations_optional& SimFeatureElementSubtraction_Void::
      GeometricRepresentations () const
      {
        return this->GeometricRepresentations_;
      }

      SimFeatureElementSubtraction_Void::GeometricRepresentations_optional& SimFeatureElementSubtraction_Void::
      GeometricRepresentations ()
      {
        return this->GeometricRepresentations_;
      }

      void SimFeatureElementSubtraction_Void::
      GeometricRepresentations (const GeometricRepresentations_type& x)
      {
        this->GeometricRepresentations_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      GeometricRepresentations (const GeometricRepresentations_optional& x)
      {
        this->GeometricRepresentations_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      GeometricRepresentations (::std::auto_ptr< GeometricRepresentations_type > x)
      {
        this->GeometricRepresentations_.set (x);
      }

      const SimFeatureElementSubtraction_Void::VoidedBldgElement_optional& SimFeatureElementSubtraction_Void::
      VoidedBldgElement () const
      {
        return this->VoidedBldgElement_;
      }

      SimFeatureElementSubtraction_Void::VoidedBldgElement_optional& SimFeatureElementSubtraction_Void::
      VoidedBldgElement ()
      {
        return this->VoidedBldgElement_;
      }

      void SimFeatureElementSubtraction_Void::
      VoidedBldgElement (const VoidedBldgElement_type& x)
      {
        this->VoidedBldgElement_.set (x);
      }

      void SimFeatureElementSubtraction_Void::
      VoidedBldgElement (const VoidedBldgElement_optional& x)
      {
        this->VoidedBldgElement_ = x;
      }

      void SimFeatureElementSubtraction_Void::
      VoidedBldgElement (::std::auto_ptr< VoidedBldgElement_type > x)
      {
        this->VoidedBldgElement_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimFeatureElementSubtraction_Void
      //

      SimFeatureElementSubtraction_Void::
      SimFeatureElementSubtraction_Void (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeometry::SimFeatureElementSubtraction (RefId),
        Name_ (this),
        ObjectType_ (this),
        Representation_ (this),
        Tag_ (this),
        IfcGlobalID_ (this),
        ObjectOwnerHistory_ (this),
        OpeningHeight_ (this),
        OpeningWidth_ (this),
        OpeningDepth_ (this),
        OpeningPerimeter_ (this),
        OpeningArea_ (this),
        OpeningVolume_ (this),
        TypeDefinition_ (this),
        Placement_ (this),
        GeometricRepresentations_ (this),
        VoidedBldgElement_ (this)
      {
      }

      SimFeatureElementSubtraction_Void::
      SimFeatureElementSubtraction_Void (const SimFeatureElementSubtraction_Void& x,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimFeatureElementSubtraction (x, f, c),
        Name_ (x.Name_, f, this),
        ObjectType_ (x.ObjectType_, f, this),
        Representation_ (x.Representation_, f, this),
        Tag_ (x.Tag_, f, this),
        IfcGlobalID_ (x.IfcGlobalID_, f, this),
        ObjectOwnerHistory_ (x.ObjectOwnerHistory_, f, this),
        OpeningHeight_ (x.OpeningHeight_, f, this),
        OpeningWidth_ (x.OpeningWidth_, f, this),
        OpeningDepth_ (x.OpeningDepth_, f, this),
        OpeningPerimeter_ (x.OpeningPerimeter_, f, this),
        OpeningArea_ (x.OpeningArea_, f, this),
        OpeningVolume_ (x.OpeningVolume_, f, this),
        TypeDefinition_ (x.TypeDefinition_, f, this),
        Placement_ (x.Placement_, f, this),
        GeometricRepresentations_ (x.GeometricRepresentations_, f, this),
        VoidedBldgElement_ (x.VoidedBldgElement_, f, this)
      {
      }

      SimFeatureElementSubtraction_Void::
      SimFeatureElementSubtraction_Void (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f,
                                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimFeatureElementSubtraction (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        ObjectType_ (this),
        Representation_ (this),
        Tag_ (this),
        IfcGlobalID_ (this),
        ObjectOwnerHistory_ (this),
        OpeningHeight_ (this),
        OpeningWidth_ (this),
        OpeningDepth_ (this),
        OpeningPerimeter_ (this),
        OpeningArea_ (this),
        OpeningVolume_ (this),
        TypeDefinition_ (this),
        Placement_ (this),
        GeometricRepresentations_ (this),
        VoidedBldgElement_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFeatureElementSubtraction_Void::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeometry::SimFeatureElementSubtraction::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // ObjectType
          //
          if (n.name () == "ObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< ObjectType_type > r (
              ObjectType_traits::create (i, f, this));

            if (!this->ObjectType_)
            {
              this->ObjectType_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // Tag
          //
          if (n.name () == "Tag" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< Tag_type > r (
              Tag_traits::create (i, f, this));

            if (!this->Tag_)
            {
              this->Tag_.set (r);
              continue;
            }
          }

          // IfcGlobalID
          //
          if (n.name () == "IfcGlobalID" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< IfcGlobalID_type > r (
              IfcGlobalID_traits::create (i, f, this));

            if (!this->IfcGlobalID_)
            {
              this->IfcGlobalID_.set (r);
              continue;
            }
          }

          // ObjectOwnerHistory
          //
          if (n.name () == "ObjectOwnerHistory" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< ObjectOwnerHistory_type > r (
              ObjectOwnerHistory_traits::create (i, f, this));

            if (!this->ObjectOwnerHistory_)
            {
              this->ObjectOwnerHistory_.set (r);
              continue;
            }
          }

          // OpeningHeight
          //
          if (n.name () == "OpeningHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningHeight_)
            {
              this->OpeningHeight_.set (OpeningHeight_traits::create (i, f, this));
              continue;
            }
          }

          // OpeningWidth
          //
          if (n.name () == "OpeningWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningWidth_)
            {
              this->OpeningWidth_.set (OpeningWidth_traits::create (i, f, this));
              continue;
            }
          }

          // OpeningDepth
          //
          if (n.name () == "OpeningDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningDepth_)
            {
              this->OpeningDepth_.set (OpeningDepth_traits::create (i, f, this));
              continue;
            }
          }

          // OpeningPerimeter
          //
          if (n.name () == "OpeningPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningPerimeter_)
            {
              this->OpeningPerimeter_.set (OpeningPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // OpeningArea
          //
          if (n.name () == "OpeningArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningArea_)
            {
              this->OpeningArea_.set (OpeningArea_traits::create (i, f, this));
              continue;
            }
          }

          // OpeningVolume
          //
          if (n.name () == "OpeningVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->OpeningVolume_)
            {
              this->OpeningVolume_.set (OpeningVolume_traits::create (i, f, this));
              continue;
            }
          }

          // TypeDefinition
          //
          if (n.name () == "TypeDefinition" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< TypeDefinition_type > r (
              TypeDefinition_traits::create (i, f, this));

            if (!this->TypeDefinition_)
            {
              this->TypeDefinition_.set (r);
              continue;
            }
          }

          // Placement
          //
          if (n.name () == "Placement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< Placement_type > r (
              Placement_traits::create (i, f, this));

            if (!this->Placement_)
            {
              this->Placement_.set (r);
              continue;
            }
          }

          // GeometricRepresentations
          //
          if (n.name () == "GeometricRepresentations" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< GeometricRepresentations_type > r (
              GeometricRepresentations_traits::create (i, f, this));

            if (!this->GeometricRepresentations_)
            {
              this->GeometricRepresentations_.set (r);
              continue;
            }
          }

          // VoidedBldgElement
          //
          if (n.name () == "VoidedBldgElement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            ::std::auto_ptr< VoidedBldgElement_type > r (
              VoidedBldgElement_traits::create (i, f, this));

            if (!this->VoidedBldgElement_)
            {
              this->VoidedBldgElement_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFeatureElementSubtraction_Void* SimFeatureElementSubtraction_Void::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFeatureElementSubtraction_Void (*this, f, c);
      }

      SimFeatureElementSubtraction_Void& SimFeatureElementSubtraction_Void::
      operator= (const SimFeatureElementSubtraction_Void& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeometry::SimFeatureElementSubtraction& > (*this) = x;
          this->Name_ = x.Name_;
          this->ObjectType_ = x.ObjectType_;
          this->Representation_ = x.Representation_;
          this->Tag_ = x.Tag_;
          this->IfcGlobalID_ = x.IfcGlobalID_;
          this->ObjectOwnerHistory_ = x.ObjectOwnerHistory_;
          this->OpeningHeight_ = x.OpeningHeight_;
          this->OpeningWidth_ = x.OpeningWidth_;
          this->OpeningDepth_ = x.OpeningDepth_;
          this->OpeningPerimeter_ = x.OpeningPerimeter_;
          this->OpeningArea_ = x.OpeningArea_;
          this->OpeningVolume_ = x.OpeningVolume_;
          this->TypeDefinition_ = x.TypeDefinition_;
          this->Placement_ = x.Placement_;
          this->GeometricRepresentations_ = x.GeometricRepresentations_;
          this->VoidedBldgElement_ = x.VoidedBldgElement_;
        }

        return *this;
      }

      SimFeatureElementSubtraction_Void::
      ~SimFeatureElementSubtraction_Void ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

