// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimBuildingStory.hxx"

#include "logical.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimBuildingStory
      // 

      const SimBuildingStory::Name_optional& SimBuildingStory::
      Name () const
      {
        return this->Name_;
      }

      SimBuildingStory::Name_optional& SimBuildingStory::
      Name ()
      {
        return this->Name_;
      }

      void SimBuildingStory::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimBuildingStory::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimBuildingStory::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimBuildingStory::BuildingStoryElevation_optional& SimBuildingStory::
      BuildingStoryElevation () const
      {
        return this->BuildingStoryElevation_;
      }

      SimBuildingStory::BuildingStoryElevation_optional& SimBuildingStory::
      BuildingStoryElevation ()
      {
        return this->BuildingStoryElevation_;
      }

      void SimBuildingStory::
      BuildingStoryElevation (const BuildingStoryElevation_type& x)
      {
        this->BuildingStoryElevation_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryElevation (const BuildingStoryElevation_optional& x)
      {
        this->BuildingStoryElevation_ = x;
      }

      const SimBuildingStory::BuildingStoryIsEntranceLevel_optional& SimBuildingStory::
      BuildingStoryIsEntranceLevel () const
      {
        return this->BuildingStoryIsEntranceLevel_;
      }

      SimBuildingStory::BuildingStoryIsEntranceLevel_optional& SimBuildingStory::
      BuildingStoryIsEntranceLevel ()
      {
        return this->BuildingStoryIsEntranceLevel_;
      }

      void SimBuildingStory::
      BuildingStoryIsEntranceLevel (const BuildingStoryIsEntranceLevel_type& x)
      {
        this->BuildingStoryIsEntranceLevel_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryIsEntranceLevel (const BuildingStoryIsEntranceLevel_optional& x)
      {
        this->BuildingStoryIsEntranceLevel_ = x;
      }

      const SimBuildingStory::BuildingStoryIsAboveGrade_optional& SimBuildingStory::
      BuildingStoryIsAboveGrade () const
      {
        return this->BuildingStoryIsAboveGrade_;
      }

      SimBuildingStory::BuildingStoryIsAboveGrade_optional& SimBuildingStory::
      BuildingStoryIsAboveGrade ()
      {
        return this->BuildingStoryIsAboveGrade_;
      }

      void SimBuildingStory::
      BuildingStoryIsAboveGrade (const BuildingStoryIsAboveGrade_type& x)
      {
        this->BuildingStoryIsAboveGrade_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryIsAboveGrade (const BuildingStoryIsAboveGrade_optional& x)
      {
        this->BuildingStoryIsAboveGrade_ = x;
      }

      void SimBuildingStory::
      BuildingStoryIsAboveGrade (::std::auto_ptr< BuildingStoryIsAboveGrade_type > x)
      {
        this->BuildingStoryIsAboveGrade_.set (x);
      }

      const SimBuildingStory::BuildingStoryGrossFloorAreaPlanned_optional& SimBuildingStory::
      BuildingStoryGrossFloorAreaPlanned () const
      {
        return this->BuildingStoryGrossFloorAreaPlanned_;
      }

      SimBuildingStory::BuildingStoryGrossFloorAreaPlanned_optional& SimBuildingStory::
      BuildingStoryGrossFloorAreaPlanned ()
      {
        return this->BuildingStoryGrossFloorAreaPlanned_;
      }

      void SimBuildingStory::
      BuildingStoryGrossFloorAreaPlanned (const BuildingStoryGrossFloorAreaPlanned_type& x)
      {
        this->BuildingStoryGrossFloorAreaPlanned_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryGrossFloorAreaPlanned (const BuildingStoryGrossFloorAreaPlanned_optional& x)
      {
        this->BuildingStoryGrossFloorAreaPlanned_ = x;
      }

      const SimBuildingStory::BuildingStoryHeight_optional& SimBuildingStory::
      BuildingStoryHeight () const
      {
        return this->BuildingStoryHeight_;
      }

      SimBuildingStory::BuildingStoryHeight_optional& SimBuildingStory::
      BuildingStoryHeight ()
      {
        return this->BuildingStoryHeight_;
      }

      void SimBuildingStory::
      BuildingStoryHeight (const BuildingStoryHeight_type& x)
      {
        this->BuildingStoryHeight_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryHeight (const BuildingStoryHeight_optional& x)
      {
        this->BuildingStoryHeight_ = x;
      }

      const SimBuildingStory::BuildingStoryPerimeter_optional& SimBuildingStory::
      BuildingStoryPerimeter () const
      {
        return this->BuildingStoryPerimeter_;
      }

      SimBuildingStory::BuildingStoryPerimeter_optional& SimBuildingStory::
      BuildingStoryPerimeter ()
      {
        return this->BuildingStoryPerimeter_;
      }

      void SimBuildingStory::
      BuildingStoryPerimeter (const BuildingStoryPerimeter_type& x)
      {
        this->BuildingStoryPerimeter_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryPerimeter (const BuildingStoryPerimeter_optional& x)
      {
        this->BuildingStoryPerimeter_ = x;
      }

      const SimBuildingStory::BuildingStoryGrossFloorArea_optional& SimBuildingStory::
      BuildingStoryGrossFloorArea () const
      {
        return this->BuildingStoryGrossFloorArea_;
      }

      SimBuildingStory::BuildingStoryGrossFloorArea_optional& SimBuildingStory::
      BuildingStoryGrossFloorArea ()
      {
        return this->BuildingStoryGrossFloorArea_;
      }

      void SimBuildingStory::
      BuildingStoryGrossFloorArea (const BuildingStoryGrossFloorArea_type& x)
      {
        this->BuildingStoryGrossFloorArea_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryGrossFloorArea (const BuildingStoryGrossFloorArea_optional& x)
      {
        this->BuildingStoryGrossFloorArea_ = x;
      }

      const SimBuildingStory::BuildingStoryGrossVolume_optional& SimBuildingStory::
      BuildingStoryGrossVolume () const
      {
        return this->BuildingStoryGrossVolume_;
      }

      SimBuildingStory::BuildingStoryGrossVolume_optional& SimBuildingStory::
      BuildingStoryGrossVolume ()
      {
        return this->BuildingStoryGrossVolume_;
      }

      void SimBuildingStory::
      BuildingStoryGrossVolume (const BuildingStoryGrossVolume_type& x)
      {
        this->BuildingStoryGrossVolume_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryGrossVolume (const BuildingStoryGrossVolume_optional& x)
      {
        this->BuildingStoryGrossVolume_ = x;
      }

      const SimBuildingStory::ClassRef_ConstEntByFunction_optional& SimBuildingStory::
      ClassRef_ConstEntByFunction () const
      {
        return this->ClassRef_ConstEntByFunction_;
      }

      SimBuildingStory::ClassRef_ConstEntByFunction_optional& SimBuildingStory::
      ClassRef_ConstEntByFunction ()
      {
        return this->ClassRef_ConstEntByFunction_;
      }

      void SimBuildingStory::
      ClassRef_ConstEntByFunction (const ClassRef_ConstEntByFunction_type& x)
      {
        this->ClassRef_ConstEntByFunction_.set (x);
      }

      void SimBuildingStory::
      ClassRef_ConstEntByFunction (const ClassRef_ConstEntByFunction_optional& x)
      {
        this->ClassRef_ConstEntByFunction_ = x;
      }

      void SimBuildingStory::
      ClassRef_ConstEntByFunction (::std::auto_ptr< ClassRef_ConstEntByFunction_type > x)
      {
        this->ClassRef_ConstEntByFunction_.set (x);
      }

      const SimBuildingStory::BldgStoryInSpatialContainer_optional& SimBuildingStory::
      BldgStoryInSpatialContainer () const
      {
        return this->BldgStoryInSpatialContainer_;
      }

      SimBuildingStory::BldgStoryInSpatialContainer_optional& SimBuildingStory::
      BldgStoryInSpatialContainer ()
      {
        return this->BldgStoryInSpatialContainer_;
      }

      void SimBuildingStory::
      BldgStoryInSpatialContainer (const BldgStoryInSpatialContainer_type& x)
      {
        this->BldgStoryInSpatialContainer_.set (x);
      }

      void SimBuildingStory::
      BldgStoryInSpatialContainer (const BldgStoryInSpatialContainer_optional& x)
      {
        this->BldgStoryInSpatialContainer_ = x;
      }

      void SimBuildingStory::
      BldgStoryInSpatialContainer (::std::auto_ptr< BldgStoryInSpatialContainer_type > x)
      {
        this->BldgStoryInSpatialContainer_.set (x);
      }

      const SimBuildingStory::Representation_optional& SimBuildingStory::
      Representation () const
      {
        return this->Representation_;
      }

      SimBuildingStory::Representation_optional& SimBuildingStory::
      Representation ()
      {
        return this->Representation_;
      }

      void SimBuildingStory::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimBuildingStory::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimBuildingStory::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimBuildingStory::BuildingStoryNumber_optional& SimBuildingStory::
      BuildingStoryNumber () const
      {
        return this->BuildingStoryNumber_;
      }

      SimBuildingStory::BuildingStoryNumber_optional& SimBuildingStory::
      BuildingStoryNumber ()
      {
        return this->BuildingStoryNumber_;
      }

      void SimBuildingStory::
      BuildingStoryNumber (const BuildingStoryNumber_type& x)
      {
        this->BuildingStoryNumber_.set (x);
      }

      void SimBuildingStory::
      BuildingStoryNumber (const BuildingStoryNumber_optional& x)
      {
        this->BuildingStoryNumber_ = x;
      }

      const SimBuildingStory::IsTopFloor_optional& SimBuildingStory::
      IsTopFloor () const
      {
        return this->IsTopFloor_;
      }

      SimBuildingStory::IsTopFloor_optional& SimBuildingStory::
      IsTopFloor ()
      {
        return this->IsTopFloor_;
      }

      void SimBuildingStory::
      IsTopFloor (const IsTopFloor_type& x)
      {
        this->IsTopFloor_.set (x);
      }

      void SimBuildingStory::
      IsTopFloor (const IsTopFloor_optional& x)
      {
        this->IsTopFloor_ = x;
      }

      const SimBuildingStory::IsBottomFloor_optional& SimBuildingStory::
      IsBottomFloor () const
      {
        return this->IsBottomFloor_;
      }

      SimBuildingStory::IsBottomFloor_optional& SimBuildingStory::
      IsBottomFloor ()
      {
        return this->IsBottomFloor_;
      }

      void SimBuildingStory::
      IsBottomFloor (const IsBottomFloor_type& x)
      {
        this->IsBottomFloor_.set (x);
      }

      void SimBuildingStory::
      IsBottomFloor (const IsBottomFloor_optional& x)
      {
        this->IsBottomFloor_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimBuildingStory
      //

      SimBuildingStory::
      SimBuildingStory (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimSpatialStructureElement (RefId),
        Name_ (this),
        BuildingStoryElevation_ (this),
        BuildingStoryIsEntranceLevel_ (this),
        BuildingStoryIsAboveGrade_ (this),
        BuildingStoryGrossFloorAreaPlanned_ (this),
        BuildingStoryHeight_ (this),
        BuildingStoryPerimeter_ (this),
        BuildingStoryGrossFloorArea_ (this),
        BuildingStoryGrossVolume_ (this),
        ClassRef_ConstEntByFunction_ (this),
        BldgStoryInSpatialContainer_ (this),
        Representation_ (this),
        BuildingStoryNumber_ (this),
        IsTopFloor_ (this),
        IsBottomFloor_ (this)
      {
      }

      SimBuildingStory::
      SimBuildingStory (const SimBuildingStory& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpatialStructureElement (x, f, c),
        Name_ (x.Name_, f, this),
        BuildingStoryElevation_ (x.BuildingStoryElevation_, f, this),
        BuildingStoryIsEntranceLevel_ (x.BuildingStoryIsEntranceLevel_, f, this),
        BuildingStoryIsAboveGrade_ (x.BuildingStoryIsAboveGrade_, f, this),
        BuildingStoryGrossFloorAreaPlanned_ (x.BuildingStoryGrossFloorAreaPlanned_, f, this),
        BuildingStoryHeight_ (x.BuildingStoryHeight_, f, this),
        BuildingStoryPerimeter_ (x.BuildingStoryPerimeter_, f, this),
        BuildingStoryGrossFloorArea_ (x.BuildingStoryGrossFloorArea_, f, this),
        BuildingStoryGrossVolume_ (x.BuildingStoryGrossVolume_, f, this),
        ClassRef_ConstEntByFunction_ (x.ClassRef_ConstEntByFunction_, f, this),
        BldgStoryInSpatialContainer_ (x.BldgStoryInSpatialContainer_, f, this),
        Representation_ (x.Representation_, f, this),
        BuildingStoryNumber_ (x.BuildingStoryNumber_, f, this),
        IsTopFloor_ (x.IsTopFloor_, f, this),
        IsBottomFloor_ (x.IsBottomFloor_, f, this)
      {
      }

      SimBuildingStory::
      SimBuildingStory (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimSpatialStructureElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        BuildingStoryElevation_ (this),
        BuildingStoryIsEntranceLevel_ (this),
        BuildingStoryIsAboveGrade_ (this),
        BuildingStoryGrossFloorAreaPlanned_ (this),
        BuildingStoryHeight_ (this),
        BuildingStoryPerimeter_ (this),
        BuildingStoryGrossFloorArea_ (this),
        BuildingStoryGrossVolume_ (this),
        ClassRef_ConstEntByFunction_ (this),
        BldgStoryInSpatialContainer_ (this),
        Representation_ (this),
        BuildingStoryNumber_ (this),
        IsTopFloor_ (this),
        IsBottomFloor_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimBuildingStory::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimSpatialStructureElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // BuildingStoryElevation
          //
          if (n.name () == "BuildingStoryElevation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryElevation_)
            {
              this->BuildingStoryElevation_.set (BuildingStoryElevation_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryIsEntranceLevel
          //
          if (n.name () == "BuildingStoryIsEntranceLevel" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryIsEntranceLevel_)
            {
              this->BuildingStoryIsEntranceLevel_.set (BuildingStoryIsEntranceLevel_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryIsAboveGrade
          //
          if (n.name () == "BuildingStoryIsAboveGrade" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< BuildingStoryIsAboveGrade_type > r (
              BuildingStoryIsAboveGrade_traits::create (i, f, this));

            if (!this->BuildingStoryIsAboveGrade_)
            {
              this->BuildingStoryIsAboveGrade_.set (r);
              continue;
            }
          }

          // BuildingStoryGrossFloorAreaPlanned
          //
          if (n.name () == "BuildingStoryGrossFloorAreaPlanned" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryGrossFloorAreaPlanned_)
            {
              this->BuildingStoryGrossFloorAreaPlanned_.set (BuildingStoryGrossFloorAreaPlanned_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryHeight
          //
          if (n.name () == "BuildingStoryHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryHeight_)
            {
              this->BuildingStoryHeight_.set (BuildingStoryHeight_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryPerimeter
          //
          if (n.name () == "BuildingStoryPerimeter" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryPerimeter_)
            {
              this->BuildingStoryPerimeter_.set (BuildingStoryPerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryGrossFloorArea
          //
          if (n.name () == "BuildingStoryGrossFloorArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryGrossFloorArea_)
            {
              this->BuildingStoryGrossFloorArea_.set (BuildingStoryGrossFloorArea_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingStoryGrossVolume
          //
          if (n.name () == "BuildingStoryGrossVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryGrossVolume_)
            {
              this->BuildingStoryGrossVolume_.set (BuildingStoryGrossVolume_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_ConstEntByFunction
          //
          if (n.name () == "ClassRef_ConstEntByFunction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_ConstEntByFunction_type > r (
              ClassRef_ConstEntByFunction_traits::create (i, f, this));

            if (!this->ClassRef_ConstEntByFunction_)
            {
              this->ClassRef_ConstEntByFunction_.set (r);
              continue;
            }
          }

          // BldgStoryInSpatialContainer
          //
          if (n.name () == "BldgStoryInSpatialContainer" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< BldgStoryInSpatialContainer_type > r (
              BldgStoryInSpatialContainer_traits::create (i, f, this));

            if (!this->BldgStoryInSpatialContainer_)
            {
              this->BldgStoryInSpatialContainer_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // BuildingStoryNumber
          //
          if (n.name () == "BuildingStoryNumber" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->BuildingStoryNumber_)
            {
              this->BuildingStoryNumber_.set (BuildingStoryNumber_traits::create (i, f, this));
              continue;
            }
          }

          // IsTopFloor
          //
          if (n.name () == "IsTopFloor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->IsTopFloor_)
            {
              this->IsTopFloor_.set (IsTopFloor_traits::create (i, f, this));
              continue;
            }
          }

          // IsBottomFloor
          //
          if (n.name () == "IsBottomFloor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->IsBottomFloor_)
            {
              this->IsBottomFloor_.set (IsBottomFloor_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimBuildingStory* SimBuildingStory::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimBuildingStory (*this, f, c);
      }

      SimBuildingStory& SimBuildingStory::
      operator= (const SimBuildingStory& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimSpatialStructureElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->BuildingStoryElevation_ = x.BuildingStoryElevation_;
          this->BuildingStoryIsEntranceLevel_ = x.BuildingStoryIsEntranceLevel_;
          this->BuildingStoryIsAboveGrade_ = x.BuildingStoryIsAboveGrade_;
          this->BuildingStoryGrossFloorAreaPlanned_ = x.BuildingStoryGrossFloorAreaPlanned_;
          this->BuildingStoryHeight_ = x.BuildingStoryHeight_;
          this->BuildingStoryPerimeter_ = x.BuildingStoryPerimeter_;
          this->BuildingStoryGrossFloorArea_ = x.BuildingStoryGrossFloorArea_;
          this->BuildingStoryGrossVolume_ = x.BuildingStoryGrossVolume_;
          this->ClassRef_ConstEntByFunction_ = x.ClassRef_ConstEntByFunction_;
          this->BldgStoryInSpatialContainer_ = x.BldgStoryInSpatialContainer_;
          this->Representation_ = x.Representation_;
          this->BuildingStoryNumber_ = x.BuildingStoryNumber_;
          this->IsTopFloor_ = x.IsTopFloor_;
          this->IsBottomFloor_ = x.IsBottomFloor_;
        }

        return *this;
      }

      SimBuildingStory::
      ~SimBuildingStory ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

