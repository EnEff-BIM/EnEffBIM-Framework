// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SYSTEM_HVAC_CONDENSER_FULL_SYSTEM_HXX
#define SIM_SYSTEM_HVAC_CONDENSER_FULL_SYSTEM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimSystem_HvacCondenser_FullSystem;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simsystem_hvaccondenser.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      class SimSystem_HvacCondenser_FullSystem: public ::namespaces::Sim::BuildingModel::SimSystem_HvacCondenser
      {
        public:
        // SimSys_DemandSideOutNodeName
        //
        typedef ::xml_schema::string SimSys_DemandSideOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_DemandSideOutNodeName_type > SimSys_DemandSideOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_DemandSideOutNodeName_type, char > SimSys_DemandSideOutNodeName_traits;

        const SimSys_DemandSideOutNodeName_optional&
        SimSys_DemandSideOutNodeName () const;

        SimSys_DemandSideOutNodeName_optional&
        SimSys_DemandSideOutNodeName ();

        void
        SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_type& x);

        void
        SimSys_DemandSideOutNodeName (const SimSys_DemandSideOutNodeName_optional& x);

        void
        SimSys_DemandSideOutNodeName (::std::auto_ptr< SimSys_DemandSideOutNodeName_type > p);

        // SimSys_FluidType
        //
        typedef ::xml_schema::string SimSys_FluidType_type;
        typedef ::xsd::cxx::tree::optional< SimSys_FluidType_type > SimSys_FluidType_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_FluidType_type, char > SimSys_FluidType_traits;

        const SimSys_FluidType_optional&
        SimSys_FluidType () const;

        SimSys_FluidType_optional&
        SimSys_FluidType ();

        void
        SimSys_FluidType (const SimSys_FluidType_type& x);

        void
        SimSys_FluidType (const SimSys_FluidType_optional& x);

        void
        SimSys_FluidType (::std::auto_ptr< SimSys_FluidType_type > p);

        // SimSys_UserDefFluidType
        //
        typedef ::xml_schema::idref SimSys_UserDefFluidType_type;
        typedef ::xsd::cxx::tree::optional< SimSys_UserDefFluidType_type > SimSys_UserDefFluidType_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_UserDefFluidType_type, char > SimSys_UserDefFluidType_traits;

        const SimSys_UserDefFluidType_optional&
        SimSys_UserDefFluidType () const;

        SimSys_UserDefFluidType_optional&
        SimSys_UserDefFluidType ();

        void
        SimSys_UserDefFluidType (const SimSys_UserDefFluidType_type& x);

        void
        SimSys_UserDefFluidType (const SimSys_UserDefFluidType_optional& x);

        void
        SimSys_UserDefFluidType (::std::auto_ptr< SimSys_UserDefFluidType_type > p);

        // SimSys_MaxLoopTemp
        //
        typedef ::xml_schema::double_ SimSys_MaxLoopTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSys_MaxLoopTemp_type > SimSys_MaxLoopTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_MaxLoopTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_MaxLoopTemp_traits;

        const SimSys_MaxLoopTemp_optional&
        SimSys_MaxLoopTemp () const;

        SimSys_MaxLoopTemp_optional&
        SimSys_MaxLoopTemp ();

        void
        SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_type& x);

        void
        SimSys_MaxLoopTemp (const SimSys_MaxLoopTemp_optional& x);

        // SimSys_MinLoopTemp
        //
        typedef ::xml_schema::double_ SimSys_MinLoopTemp_type;
        typedef ::xsd::cxx::tree::optional< SimSys_MinLoopTemp_type > SimSys_MinLoopTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_MinLoopTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_MinLoopTemp_traits;

        const SimSys_MinLoopTemp_optional&
        SimSys_MinLoopTemp () const;

        SimSys_MinLoopTemp_optional&
        SimSys_MinLoopTemp ();

        void
        SimSys_MinLoopTemp (const SimSys_MinLoopTemp_type& x);

        void
        SimSys_MinLoopTemp (const SimSys_MinLoopTemp_optional& x);

        // SimSys_MaxLoopFlowRate
        //
        typedef ::xml_schema::double_ SimSys_MaxLoopFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSys_MaxLoopFlowRate_type > SimSys_MaxLoopFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_MaxLoopFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_MaxLoopFlowRate_traits;

        const SimSys_MaxLoopFlowRate_optional&
        SimSys_MaxLoopFlowRate () const;

        SimSys_MaxLoopFlowRate_optional&
        SimSys_MaxLoopFlowRate ();

        void
        SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_type& x);

        void
        SimSys_MaxLoopFlowRate (const SimSys_MaxLoopFlowRate_optional& x);

        // SimSys_MinLoopFlowRate
        //
        typedef ::xml_schema::double_ SimSys_MinLoopFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimSys_MinLoopFlowRate_type > SimSys_MinLoopFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_MinLoopFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_MinLoopFlowRate_traits;

        const SimSys_MinLoopFlowRate_optional&
        SimSys_MinLoopFlowRate () const;

        SimSys_MinLoopFlowRate_optional&
        SimSys_MinLoopFlowRate ();

        void
        SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_type& x);

        void
        SimSys_MinLoopFlowRate (const SimSys_MinLoopFlowRate_optional& x);

        // SimSys_DemandSideInNodeName
        //
        typedef ::xml_schema::string SimSys_DemandSideInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_DemandSideInNodeName_type > SimSys_DemandSideInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_DemandSideInNodeName_type, char > SimSys_DemandSideInNodeName_traits;

        const SimSys_DemandSideInNodeName_optional&
        SimSys_DemandSideInNodeName () const;

        SimSys_DemandSideInNodeName_optional&
        SimSys_DemandSideInNodeName ();

        void
        SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_type& x);

        void
        SimSys_DemandSideInNodeName (const SimSys_DemandSideInNodeName_optional& x);

        void
        SimSys_DemandSideInNodeName (::std::auto_ptr< SimSys_DemandSideInNodeName_type > p);

        // SimSys_LoadDistScheme
        //
        typedef ::xml_schema::string SimSys_LoadDistScheme_type;
        typedef ::xsd::cxx::tree::optional< SimSys_LoadDistScheme_type > SimSys_LoadDistScheme_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_LoadDistScheme_type, char > SimSys_LoadDistScheme_traits;

        const SimSys_LoadDistScheme_optional&
        SimSys_LoadDistScheme () const;

        SimSys_LoadDistScheme_optional&
        SimSys_LoadDistScheme ();

        void
        SimSys_LoadDistScheme (const SimSys_LoadDistScheme_type& x);

        void
        SimSys_LoadDistScheme (const SimSys_LoadDistScheme_optional& x);

        void
        SimSys_LoadDistScheme (::std::auto_ptr< SimSys_LoadDistScheme_type > p);

        // SimSys_PresSimType
        //
        typedef ::xml_schema::string SimSys_PresSimType_type;
        typedef ::xsd::cxx::tree::optional< SimSys_PresSimType_type > SimSys_PresSimType_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_PresSimType_type, char > SimSys_PresSimType_traits;

        const SimSys_PresSimType_optional&
        SimSys_PresSimType () const;

        SimSys_PresSimType_optional&
        SimSys_PresSimType ();

        void
        SimSys_PresSimType (const SimSys_PresSimType_type& x);

        void
        SimSys_PresSimType (const SimSys_PresSimType_optional& x);

        void
        SimSys_PresSimType (::std::auto_ptr< SimSys_PresSimType_type > p);

        // SimSys_CndnsrEqmtOpSchemeName
        //
        typedef ::xml_schema::idref SimSys_CndnsrEqmtOpSchemeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrEqmtOpSchemeName_type > SimSys_CndnsrEqmtOpSchemeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrEqmtOpSchemeName_type, char > SimSys_CndnsrEqmtOpSchemeName_traits;

        const SimSys_CndnsrEqmtOpSchemeName_optional&
        SimSys_CndnsrEqmtOpSchemeName () const;

        SimSys_CndnsrEqmtOpSchemeName_optional&
        SimSys_CndnsrEqmtOpSchemeName ();

        void
        SimSys_CndnsrEqmtOpSchemeName (const SimSys_CndnsrEqmtOpSchemeName_type& x);

        void
        SimSys_CndnsrEqmtOpSchemeName (const SimSys_CndnsrEqmtOpSchemeName_optional& x);

        void
        SimSys_CndnsrEqmtOpSchemeName (::std::auto_ptr< SimSys_CndnsrEqmtOpSchemeName_type > p);

        // SimSys_CondLoopTempSetPtNodeName
        //
        typedef ::xml_schema::string SimSys_CondLoopTempSetPtNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CondLoopTempSetPtNodeName_type > SimSys_CondLoopTempSetPtNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CondLoopTempSetPtNodeName_type, char > SimSys_CondLoopTempSetPtNodeName_traits;

        const SimSys_CondLoopTempSetPtNodeName_optional&
        SimSys_CondLoopTempSetPtNodeName () const;

        SimSys_CondLoopTempSetPtNodeName_optional&
        SimSys_CondLoopTempSetPtNodeName ();

        void
        SimSys_CondLoopTempSetPtNodeName (const SimSys_CondLoopTempSetPtNodeName_type& x);

        void
        SimSys_CondLoopTempSetPtNodeName (const SimSys_CondLoopTempSetPtNodeName_optional& x);

        void
        SimSys_CondLoopTempSetPtNodeName (::std::auto_ptr< SimSys_CondLoopTempSetPtNodeName_type > p);

        // SimSys_CndnsrLoopVol
        //
        typedef ::xml_schema::double_ SimSys_CndnsrLoopVol_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrLoopVol_type > SimSys_CndnsrLoopVol_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrLoopVol_type, char, ::xsd::cxx::tree::schema_type::double_ > SimSys_CndnsrLoopVol_traits;

        const SimSys_CndnsrLoopVol_optional&
        SimSys_CndnsrLoopVol () const;

        SimSys_CndnsrLoopVol_optional&
        SimSys_CndnsrLoopVol ();

        void
        SimSys_CndnsrLoopVol (const SimSys_CndnsrLoopVol_type& x);

        void
        SimSys_CndnsrLoopVol (const SimSys_CndnsrLoopVol_optional& x);

        // SimSys_CndnsrSideInNodeName
        //
        typedef ::xml_schema::string SimSys_CndnsrSideInNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrSideInNodeName_type > SimSys_CndnsrSideInNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrSideInNodeName_type, char > SimSys_CndnsrSideInNodeName_traits;

        const SimSys_CndnsrSideInNodeName_optional&
        SimSys_CndnsrSideInNodeName () const;

        SimSys_CndnsrSideInNodeName_optional&
        SimSys_CndnsrSideInNodeName ();

        void
        SimSys_CndnsrSideInNodeName (const SimSys_CndnsrSideInNodeName_type& x);

        void
        SimSys_CndnsrSideInNodeName (const SimSys_CndnsrSideInNodeName_optional& x);

        void
        SimSys_CndnsrSideInNodeName (::std::auto_ptr< SimSys_CndnsrSideInNodeName_type > p);

        // SimSys_CndnsrSideOutNodeName
        //
        typedef ::xml_schema::string SimSys_CndnsrSideOutNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrSideOutNodeName_type > SimSys_CndnsrSideOutNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrSideOutNodeName_type, char > SimSys_CndnsrSideOutNodeName_traits;

        const SimSys_CndnsrSideOutNodeName_optional&
        SimSys_CndnsrSideOutNodeName () const;

        SimSys_CndnsrSideOutNodeName_optional&
        SimSys_CndnsrSideOutNodeName ();

        void
        SimSys_CndnsrSideOutNodeName (const SimSys_CndnsrSideOutNodeName_type& x);

        void
        SimSys_CndnsrSideOutNodeName (const SimSys_CndnsrSideOutNodeName_optional& x);

        void
        SimSys_CndnsrSideOutNodeName (::std::auto_ptr< SimSys_CndnsrSideOutNodeName_type > p);

        // SimSys_CndnsrSideBranchListName
        //
        typedef ::xml_schema::idref SimSys_CndnsrSideBranchListName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrSideBranchListName_type > SimSys_CndnsrSideBranchListName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrSideBranchListName_type, char > SimSys_CndnsrSideBranchListName_traits;

        const SimSys_CndnsrSideBranchListName_optional&
        SimSys_CndnsrSideBranchListName () const;

        SimSys_CndnsrSideBranchListName_optional&
        SimSys_CndnsrSideBranchListName ();

        void
        SimSys_CndnsrSideBranchListName (const SimSys_CndnsrSideBranchListName_type& x);

        void
        SimSys_CndnsrSideBranchListName (const SimSys_CndnsrSideBranchListName_optional& x);

        void
        SimSys_CndnsrSideBranchListName (::std::auto_ptr< SimSys_CndnsrSideBranchListName_type > p);

        // SimSys_CndnsrSideConnListName
        //
        typedef ::xml_schema::idref SimSys_CndnsrSideConnListName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrSideConnListName_type > SimSys_CndnsrSideConnListName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrSideConnListName_type, char > SimSys_CndnsrSideConnListName_traits;

        const SimSys_CndnsrSideConnListName_optional&
        SimSys_CndnsrSideConnListName () const;

        SimSys_CndnsrSideConnListName_optional&
        SimSys_CndnsrSideConnListName ();

        void
        SimSys_CndnsrSideConnListName (const SimSys_CndnsrSideConnListName_type& x);

        void
        SimSys_CndnsrSideConnListName (const SimSys_CndnsrSideConnListName_optional& x);

        void
        SimSys_CndnsrSideConnListName (::std::auto_ptr< SimSys_CndnsrSideConnListName_type > p);

        // SimSys_CndnsrDemandSideBranchListName
        //
        typedef ::xml_schema::idref SimSys_CndnsrDemandSideBranchListName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrDemandSideBranchListName_type > SimSys_CndnsrDemandSideBranchListName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrDemandSideBranchListName_type, char > SimSys_CndnsrDemandSideBranchListName_traits;

        const SimSys_CndnsrDemandSideBranchListName_optional&
        SimSys_CndnsrDemandSideBranchListName () const;

        SimSys_CndnsrDemandSideBranchListName_optional&
        SimSys_CndnsrDemandSideBranchListName ();

        void
        SimSys_CndnsrDemandSideBranchListName (const SimSys_CndnsrDemandSideBranchListName_type& x);

        void
        SimSys_CndnsrDemandSideBranchListName (const SimSys_CndnsrDemandSideBranchListName_optional& x);

        void
        SimSys_CndnsrDemandSideBranchListName (::std::auto_ptr< SimSys_CndnsrDemandSideBranchListName_type > p);

        // SimSys_CndnsrDemandSideConnListName
        //
        typedef ::xml_schema::idref SimSys_CndnsrDemandSideConnListName_type;
        typedef ::xsd::cxx::tree::optional< SimSys_CndnsrDemandSideConnListName_type > SimSys_CndnsrDemandSideConnListName_optional;
        typedef ::xsd::cxx::tree::traits< SimSys_CndnsrDemandSideConnListName_type, char > SimSys_CndnsrDemandSideConnListName_traits;

        const SimSys_CndnsrDemandSideConnListName_optional&
        SimSys_CndnsrDemandSideConnListName () const;

        SimSys_CndnsrDemandSideConnListName_optional&
        SimSys_CndnsrDemandSideConnListName ();

        void
        SimSys_CndnsrDemandSideConnListName (const SimSys_CndnsrDemandSideConnListName_type& x);

        void
        SimSys_CndnsrDemandSideConnListName (const SimSys_CndnsrDemandSideConnListName_optional& x);

        void
        SimSys_CndnsrDemandSideConnListName (::std::auto_ptr< SimSys_CndnsrDemandSideConnListName_type > p);

        // Constructors.
        //
        SimSystem_HvacCondenser_FullSystem (const RefId_type&);

        SimSystem_HvacCondenser_FullSystem (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        SimSystem_HvacCondenser_FullSystem (const SimSystem_HvacCondenser_FullSystem& x,
                                            ::xml_schema::flags f = 0,
                                            ::xml_schema::container* c = 0);

        virtual SimSystem_HvacCondenser_FullSystem*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSystem_HvacCondenser_FullSystem&
        operator= (const SimSystem_HvacCondenser_FullSystem& x);

        virtual 
        ~SimSystem_HvacCondenser_FullSystem ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimSys_DemandSideOutNodeName_optional SimSys_DemandSideOutNodeName_;
        SimSys_FluidType_optional SimSys_FluidType_;
        SimSys_UserDefFluidType_optional SimSys_UserDefFluidType_;
        SimSys_MaxLoopTemp_optional SimSys_MaxLoopTemp_;
        SimSys_MinLoopTemp_optional SimSys_MinLoopTemp_;
        SimSys_MaxLoopFlowRate_optional SimSys_MaxLoopFlowRate_;
        SimSys_MinLoopFlowRate_optional SimSys_MinLoopFlowRate_;
        SimSys_DemandSideInNodeName_optional SimSys_DemandSideInNodeName_;
        SimSys_LoadDistScheme_optional SimSys_LoadDistScheme_;
        SimSys_PresSimType_optional SimSys_PresSimType_;
        SimSys_CndnsrEqmtOpSchemeName_optional SimSys_CndnsrEqmtOpSchemeName_;
        SimSys_CondLoopTempSetPtNodeName_optional SimSys_CondLoopTempSetPtNodeName_;
        SimSys_CndnsrLoopVol_optional SimSys_CndnsrLoopVol_;
        SimSys_CndnsrSideInNodeName_optional SimSys_CndnsrSideInNodeName_;
        SimSys_CndnsrSideOutNodeName_optional SimSys_CndnsrSideOutNodeName_;
        SimSys_CndnsrSideBranchListName_optional SimSys_CndnsrSideBranchListName_;
        SimSys_CndnsrSideConnListName_optional SimSys_CndnsrSideConnListName_;
        SimSys_CndnsrDemandSideBranchListName_optional SimSys_CndnsrDemandSideBranchListName_;
        SimSys_CndnsrDemandSideConnListName_optional SimSys_CndnsrDemandSideConnListName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SYSTEM_HVAC_CONDENSER_FULL_SYSTEM_HXX
