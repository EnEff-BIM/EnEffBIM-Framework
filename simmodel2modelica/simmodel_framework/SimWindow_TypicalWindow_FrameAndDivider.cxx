// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWindow_TypicalWindow_FrameAndDivider.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_FrameAndDivider
      // 

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmWidth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmWidth () const
      {
        return this->SimWindow_FrmWidth_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmWidth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmWidth ()
      {
        return this->SimWindow_FrmWidth_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmWidth (const SimWindow_FrmWidth_type& x)
      {
        this->SimWindow_FrmWidth_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmWidth (const SimWindow_FrmWidth_optional& x)
      {
        this->SimWindow_FrmWidth_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmOutsdProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmOutsdProject () const
      {
        return this->SimWindow_FrmOutsdProject_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmOutsdProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmOutsdProject ()
      {
        return this->SimWindow_FrmOutsdProject_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmOutsdProject (const SimWindow_FrmOutsdProject_type& x)
      {
        this->SimWindow_FrmOutsdProject_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmOutsdProject (const SimWindow_FrmOutsdProject_optional& x)
      {
        this->SimWindow_FrmOutsdProject_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmInsideProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmInsideProject () const
      {
        return this->SimWindow_FrmInsideProject_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmInsideProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmInsideProject ()
      {
        return this->SimWindow_FrmInsideProject_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmInsideProject (const SimWindow_FrmInsideProject_type& x)
      {
        this->SimWindow_FrmInsideProject_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmInsideProject (const SimWindow_FrmInsideProject_optional& x)
      {
        this->SimWindow_FrmInsideProject_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmCond () const
      {
        return this->SimWindow_FrmCond_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmCond ()
      {
        return this->SimWindow_FrmCond_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmCond (const SimWindow_FrmCond_type& x)
      {
        this->SimWindow_FrmCond_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmCond (const SimWindow_FrmCond_optional& x)
      {
        this->SimWindow_FrmCond_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond (const SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond (const SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmSolarAbsorp () const
      {
        return this->SimWindow_FrmSolarAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmSolarAbsorp ()
      {
        return this->SimWindow_FrmSolarAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmSolarAbsorp (const SimWindow_FrmSolarAbsorp_type& x)
      {
        this->SimWindow_FrmSolarAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmSolarAbsorp (const SimWindow_FrmSolarAbsorp_optional& x)
      {
        this->SimWindow_FrmSolarAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmVisibleAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmVisibleAbsorp () const
      {
        return this->SimWindow_FrmVisibleAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmVisibleAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmVisibleAbsorp ()
      {
        return this->SimWindow_FrmVisibleAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmVisibleAbsorp (const SimWindow_FrmVisibleAbsorp_type& x)
      {
        this->SimWindow_FrmVisibleAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmVisibleAbsorp (const SimWindow_FrmVisibleAbsorp_optional& x)
      {
        this->SimWindow_FrmVisibleAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmThermHemisEmiss_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmThermHemisEmiss () const
      {
        return this->SimWindow_FrmThermHemisEmiss_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_FrmThermHemisEmiss_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmThermHemisEmiss ()
      {
        return this->SimWindow_FrmThermHemisEmiss_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmThermHemisEmiss (const SimWindow_FrmThermHemisEmiss_type& x)
      {
        this->SimWindow_FrmThermHemisEmiss_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_FrmThermHemisEmiss (const SimWindow_FrmThermHemisEmiss_optional& x)
      {
        this->SimWindow_FrmThermHemisEmiss_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivType_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivType () const
      {
        return this->SimWindow_DivType_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivType_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivType ()
      {
        return this->SimWindow_DivType_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivType (const SimWindow_DivType_type& x)
      {
        this->SimWindow_DivType_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivType (const SimWindow_DivType_optional& x)
      {
        this->SimWindow_DivType_ = x;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivType (::std::auto_ptr< SimWindow_DivType_type > x)
      {
        this->SimWindow_DivType_.set (x);
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivWidth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivWidth () const
      {
        return this->SimWindow_DivWidth_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivWidth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivWidth ()
      {
        return this->SimWindow_DivWidth_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivWidth (const SimWindow_DivWidth_type& x)
      {
        this->SimWindow_DivWidth_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivWidth (const SimWindow_DivWidth_optional& x)
      {
        this->SimWindow_DivWidth_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_NumbHorzDivs_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbHorzDivs () const
      {
        return this->SimWindow_NumbHorzDivs_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_NumbHorzDivs_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbHorzDivs ()
      {
        return this->SimWindow_NumbHorzDivs_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbHorzDivs (const SimWindow_NumbHorzDivs_type& x)
      {
        this->SimWindow_NumbHorzDivs_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbHorzDivs (const SimWindow_NumbHorzDivs_optional& x)
      {
        this->SimWindow_NumbHorzDivs_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_NumbVertlDivs_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbVertlDivs () const
      {
        return this->SimWindow_NumbVertlDivs_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_NumbVertlDivs_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbVertlDivs ()
      {
        return this->SimWindow_NumbVertlDivs_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbVertlDivs (const SimWindow_NumbVertlDivs_type& x)
      {
        this->SimWindow_NumbVertlDivs_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_NumbVertlDivs (const SimWindow_NumbVertlDivs_optional& x)
      {
        this->SimWindow_NumbVertlDivs_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivOutsdProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivOutsdProject () const
      {
        return this->SimWindow_DivOutsdProject_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivOutsdProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivOutsdProject ()
      {
        return this->SimWindow_DivOutsdProject_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivOutsdProject (const SimWindow_DivOutsdProject_type& x)
      {
        this->SimWindow_DivOutsdProject_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivOutsdProject (const SimWindow_DivOutsdProject_optional& x)
      {
        this->SimWindow_DivOutsdProject_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivInsideProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivInsideProject () const
      {
        return this->SimWindow_DivInsideProject_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivInsideProject_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivInsideProject ()
      {
        return this->SimWindow_DivInsideProject_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivInsideProject (const SimWindow_DivInsideProject_type& x)
      {
        this->SimWindow_DivInsideProject_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivInsideProject (const SimWindow_DivInsideProject_optional& x)
      {
        this->SimWindow_DivInsideProject_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivCond () const
      {
        return this->SimWindow_DivCond_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivCond ()
      {
        return this->SimWindow_DivCond_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivCond (const SimWindow_DivCond_type& x)
      {
        this->SimWindow_DivCond_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivCond (const SimWindow_DivCond_optional& x)
      {
        this->SimWindow_DivCond_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioDivEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioDivEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioDivEdgeGlassCondToCntrGlassCond (const SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_RatioDivEdgeGlassCondToCntrGlassCond (const SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivSolarAbsorp () const
      {
        return this->SimWindow_DivSolarAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivSolarAbsorp ()
      {
        return this->SimWindow_DivSolarAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivSolarAbsorp (const SimWindow_DivSolarAbsorp_type& x)
      {
        this->SimWindow_DivSolarAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivSolarAbsorp (const SimWindow_DivSolarAbsorp_optional& x)
      {
        this->SimWindow_DivSolarAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivVisibleAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivVisibleAbsorp () const
      {
        return this->SimWindow_DivVisibleAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivVisibleAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivVisibleAbsorp ()
      {
        return this->SimWindow_DivVisibleAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivVisibleAbsorp (const SimWindow_DivVisibleAbsorp_type& x)
      {
        this->SimWindow_DivVisibleAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivVisibleAbsorp (const SimWindow_DivVisibleAbsorp_optional& x)
      {
        this->SimWindow_DivVisibleAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivThermHemisEmiss_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivThermHemisEmiss () const
      {
        return this->SimWindow_DivThermHemisEmiss_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_DivThermHemisEmiss_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivThermHemisEmiss ()
      {
        return this->SimWindow_DivThermHemisEmiss_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivThermHemisEmiss (const SimWindow_DivThermHemisEmiss_type& x)
      {
        this->SimWindow_DivThermHemisEmiss_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_DivThermHemisEmiss (const SimWindow_DivThermHemisEmiss_optional& x)
      {
        this->SimWindow_DivThermHemisEmiss_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_OutsdRevealSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_OutsdRevealSolarAbsorp () const
      {
        return this->SimWindow_OutsdRevealSolarAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_OutsdRevealSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_OutsdRevealSolarAbsorp ()
      {
        return this->SimWindow_OutsdRevealSolarAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_OutsdRevealSolarAbsorp (const SimWindow_OutsdRevealSolarAbsorp_type& x)
      {
        this->SimWindow_OutsdRevealSolarAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_OutsdRevealSolarAbsorp (const SimWindow_OutsdRevealSolarAbsorp_optional& x)
      {
        this->SimWindow_OutsdRevealSolarAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideSillDepth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillDepth () const
      {
        return this->SimWindow_InsideSillDepth_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideSillDepth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillDepth ()
      {
        return this->SimWindow_InsideSillDepth_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillDepth (const SimWindow_InsideSillDepth_type& x)
      {
        this->SimWindow_InsideSillDepth_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillDepth (const SimWindow_InsideSillDepth_optional& x)
      {
        this->SimWindow_InsideSillDepth_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideSillSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillSolarAbsorp () const
      {
        return this->SimWindow_InsideSillSolarAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideSillSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillSolarAbsorp ()
      {
        return this->SimWindow_InsideSillSolarAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillSolarAbsorp (const SimWindow_InsideSillSolarAbsorp_type& x)
      {
        this->SimWindow_InsideSillSolarAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideSillSolarAbsorp (const SimWindow_InsideSillSolarAbsorp_optional& x)
      {
        this->SimWindow_InsideSillSolarAbsorp_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideRevealDepth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealDepth () const
      {
        return this->SimWindow_InsideRevealDepth_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideRevealDepth_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealDepth ()
      {
        return this->SimWindow_InsideRevealDepth_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealDepth (const SimWindow_InsideRevealDepth_type& x)
      {
        this->SimWindow_InsideRevealDepth_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealDepth (const SimWindow_InsideRevealDepth_optional& x)
      {
        this->SimWindow_InsideRevealDepth_ = x;
      }

      const SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideRevealSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealSolarAbsorp () const
      {
        return this->SimWindow_InsideRevealSolarAbsorp_;
      }

      SimWindow_TypicalWindow_FrameAndDivider::SimWindow_InsideRevealSolarAbsorp_optional& SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealSolarAbsorp ()
      {
        return this->SimWindow_InsideRevealSolarAbsorp_;
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealSolarAbsorp (const SimWindow_InsideRevealSolarAbsorp_type& x)
      {
        this->SimWindow_InsideRevealSolarAbsorp_.set (x);
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_InsideRevealSolarAbsorp (const SimWindow_InsideRevealSolarAbsorp_optional& x)
      {
        this->SimWindow_InsideRevealSolarAbsorp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWindow_TypicalWindow_FrameAndDivider
      //

      SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_TypicalWindow_FrameAndDivider (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (RefId),
        SimWindow_FrmWidth_ (this),
        SimWindow_FrmOutsdProject_ (this),
        SimWindow_FrmInsideProject_ (this),
        SimWindow_FrmCond_ (this),
        SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimWindow_FrmSolarAbsorp_ (this),
        SimWindow_FrmVisibleAbsorp_ (this),
        SimWindow_FrmThermHemisEmiss_ (this),
        SimWindow_DivType_ (this),
        SimWindow_DivWidth_ (this),
        SimWindow_NumbHorzDivs_ (this),
        SimWindow_NumbVertlDivs_ (this),
        SimWindow_DivOutsdProject_ (this),
        SimWindow_DivInsideProject_ (this),
        SimWindow_DivCond_ (this),
        SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimWindow_DivSolarAbsorp_ (this),
        SimWindow_DivVisibleAbsorp_ (this),
        SimWindow_DivThermHemisEmiss_ (this),
        SimWindow_OutsdRevealSolarAbsorp_ (this),
        SimWindow_InsideSillDepth_ (this),
        SimWindow_InsideSillSolarAbsorp_ (this),
        SimWindow_InsideRevealDepth_ (this),
        SimWindow_InsideRevealSolarAbsorp_ (this)
      {
      }

      SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_TypicalWindow_FrameAndDivider (const SimWindow_TypicalWindow_FrameAndDivider& x,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (x, f, c),
        SimWindow_FrmWidth_ (x.SimWindow_FrmWidth_, f, this),
        SimWindow_FrmOutsdProject_ (x.SimWindow_FrmOutsdProject_, f, this),
        SimWindow_FrmInsideProject_ (x.SimWindow_FrmInsideProject_, f, this),
        SimWindow_FrmCond_ (x.SimWindow_FrmCond_, f, this),
        SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_ (x.SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_, f, this),
        SimWindow_FrmSolarAbsorp_ (x.SimWindow_FrmSolarAbsorp_, f, this),
        SimWindow_FrmVisibleAbsorp_ (x.SimWindow_FrmVisibleAbsorp_, f, this),
        SimWindow_FrmThermHemisEmiss_ (x.SimWindow_FrmThermHemisEmiss_, f, this),
        SimWindow_DivType_ (x.SimWindow_DivType_, f, this),
        SimWindow_DivWidth_ (x.SimWindow_DivWidth_, f, this),
        SimWindow_NumbHorzDivs_ (x.SimWindow_NumbHorzDivs_, f, this),
        SimWindow_NumbVertlDivs_ (x.SimWindow_NumbVertlDivs_, f, this),
        SimWindow_DivOutsdProject_ (x.SimWindow_DivOutsdProject_, f, this),
        SimWindow_DivInsideProject_ (x.SimWindow_DivInsideProject_, f, this),
        SimWindow_DivCond_ (x.SimWindow_DivCond_, f, this),
        SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_ (x.SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_, f, this),
        SimWindow_DivSolarAbsorp_ (x.SimWindow_DivSolarAbsorp_, f, this),
        SimWindow_DivVisibleAbsorp_ (x.SimWindow_DivVisibleAbsorp_, f, this),
        SimWindow_DivThermHemisEmiss_ (x.SimWindow_DivThermHemisEmiss_, f, this),
        SimWindow_OutsdRevealSolarAbsorp_ (x.SimWindow_OutsdRevealSolarAbsorp_, f, this),
        SimWindow_InsideSillDepth_ (x.SimWindow_InsideSillDepth_, f, this),
        SimWindow_InsideSillSolarAbsorp_ (x.SimWindow_InsideSillSolarAbsorp_, f, this),
        SimWindow_InsideRevealDepth_ (x.SimWindow_InsideRevealDepth_, f, this),
        SimWindow_InsideRevealSolarAbsorp_ (x.SimWindow_InsideRevealSolarAbsorp_, f, this)
      {
      }

      SimWindow_TypicalWindow_FrameAndDivider::
      SimWindow_TypicalWindow_FrameAndDivider (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f,
                                               ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow (e, f | ::xml_schema::flags::base, c),
        SimWindow_FrmWidth_ (this),
        SimWindow_FrmOutsdProject_ (this),
        SimWindow_FrmInsideProject_ (this),
        SimWindow_FrmCond_ (this),
        SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimWindow_FrmSolarAbsorp_ (this),
        SimWindow_FrmVisibleAbsorp_ (this),
        SimWindow_FrmThermHemisEmiss_ (this),
        SimWindow_DivType_ (this),
        SimWindow_DivWidth_ (this),
        SimWindow_NumbHorzDivs_ (this),
        SimWindow_NumbVertlDivs_ (this),
        SimWindow_DivOutsdProject_ (this),
        SimWindow_DivInsideProject_ (this),
        SimWindow_DivCond_ (this),
        SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimWindow_DivSolarAbsorp_ (this),
        SimWindow_DivVisibleAbsorp_ (this),
        SimWindow_DivThermHemisEmiss_ (this),
        SimWindow_OutsdRevealSolarAbsorp_ (this),
        SimWindow_InsideSillDepth_ (this),
        SimWindow_InsideSillSolarAbsorp_ (this),
        SimWindow_InsideRevealDepth_ (this),
        SimWindow_InsideRevealSolarAbsorp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWindow_TypicalWindow_FrameAndDivider::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWindow_FrmWidth
          //
          if (n.name () == "SimWindow_FrmWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmWidth_)
            {
              this->SimWindow_FrmWidth_.set (SimWindow_FrmWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmOutsdProject
          //
          if (n.name () == "SimWindow_FrmOutsdProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmOutsdProject_)
            {
              this->SimWindow_FrmOutsdProject_.set (SimWindow_FrmOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmInsideProject
          //
          if (n.name () == "SimWindow_FrmInsideProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmInsideProject_)
            {
              this->SimWindow_FrmInsideProject_.set (SimWindow_FrmInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmCond
          //
          if (n.name () == "SimWindow_FrmCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmCond_)
            {
              this->SimWindow_FrmCond_.set (SimWindow_FrmCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_)
            {
              this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_.set (SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmSolarAbsorp
          //
          if (n.name () == "SimWindow_FrmSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmSolarAbsorp_)
            {
              this->SimWindow_FrmSolarAbsorp_.set (SimWindow_FrmSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmVisibleAbsorp
          //
          if (n.name () == "SimWindow_FrmVisibleAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmVisibleAbsorp_)
            {
              this->SimWindow_FrmVisibleAbsorp_.set (SimWindow_FrmVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_FrmThermHemisEmiss
          //
          if (n.name () == "SimWindow_FrmThermHemisEmiss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_FrmThermHemisEmiss_)
            {
              this->SimWindow_FrmThermHemisEmiss_.set (SimWindow_FrmThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivType
          //
          if (n.name () == "SimWindow_DivType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWindow_DivType_type > r (
              SimWindow_DivType_traits::create (i, f, this));

            if (!this->SimWindow_DivType_)
            {
              this->SimWindow_DivType_.set (r);
              continue;
            }
          }

          // SimWindow_DivWidth
          //
          if (n.name () == "SimWindow_DivWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivWidth_)
            {
              this->SimWindow_DivWidth_.set (SimWindow_DivWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_NumbHorzDivs
          //
          if (n.name () == "SimWindow_NumbHorzDivs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_NumbHorzDivs_)
            {
              this->SimWindow_NumbHorzDivs_.set (SimWindow_NumbHorzDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_NumbVertlDivs
          //
          if (n.name () == "SimWindow_NumbVertlDivs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_NumbVertlDivs_)
            {
              this->SimWindow_NumbVertlDivs_.set (SimWindow_NumbVertlDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivOutsdProject
          //
          if (n.name () == "SimWindow_DivOutsdProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivOutsdProject_)
            {
              this->SimWindow_DivOutsdProject_.set (SimWindow_DivOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivInsideProject
          //
          if (n.name () == "SimWindow_DivInsideProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivInsideProject_)
            {
              this->SimWindow_DivInsideProject_.set (SimWindow_DivInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivCond
          //
          if (n.name () == "SimWindow_DivCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivCond_)
            {
              this->SimWindow_DivCond_.set (SimWindow_DivCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_RatioDivEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimWindow_RatioDivEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_)
            {
              this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_.set (SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivSolarAbsorp
          //
          if (n.name () == "SimWindow_DivSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivSolarAbsorp_)
            {
              this->SimWindow_DivSolarAbsorp_.set (SimWindow_DivSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivVisibleAbsorp
          //
          if (n.name () == "SimWindow_DivVisibleAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivVisibleAbsorp_)
            {
              this->SimWindow_DivVisibleAbsorp_.set (SimWindow_DivVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_DivThermHemisEmiss
          //
          if (n.name () == "SimWindow_DivThermHemisEmiss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_DivThermHemisEmiss_)
            {
              this->SimWindow_DivThermHemisEmiss_.set (SimWindow_DivThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_OutsdRevealSolarAbsorp
          //
          if (n.name () == "SimWindow_OutsdRevealSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_OutsdRevealSolarAbsorp_)
            {
              this->SimWindow_OutsdRevealSolarAbsorp_.set (SimWindow_OutsdRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_InsideSillDepth
          //
          if (n.name () == "SimWindow_InsideSillDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_InsideSillDepth_)
            {
              this->SimWindow_InsideSillDepth_.set (SimWindow_InsideSillDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_InsideSillSolarAbsorp
          //
          if (n.name () == "SimWindow_InsideSillSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_InsideSillSolarAbsorp_)
            {
              this->SimWindow_InsideSillSolarAbsorp_.set (SimWindow_InsideSillSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_InsideRevealDepth
          //
          if (n.name () == "SimWindow_InsideRevealDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_InsideRevealDepth_)
            {
              this->SimWindow_InsideRevealDepth_.set (SimWindow_InsideRevealDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimWindow_InsideRevealSolarAbsorp
          //
          if (n.name () == "SimWindow_InsideRevealSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWindow_InsideRevealSolarAbsorp_)
            {
              this->SimWindow_InsideRevealSolarAbsorp_.set (SimWindow_InsideRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimWindow_TypicalWindow_FrameAndDivider* SimWindow_TypicalWindow_FrameAndDivider::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWindow_TypicalWindow_FrameAndDivider (*this, f, c);
      }

      SimWindow_TypicalWindow_FrameAndDivider& SimWindow_TypicalWindow_FrameAndDivider::
      operator= (const SimWindow_TypicalWindow_FrameAndDivider& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimWindow_TypicalWindow& > (*this) = x;
          this->SimWindow_FrmWidth_ = x.SimWindow_FrmWidth_;
          this->SimWindow_FrmOutsdProject_ = x.SimWindow_FrmOutsdProject_;
          this->SimWindow_FrmInsideProject_ = x.SimWindow_FrmInsideProject_;
          this->SimWindow_FrmCond_ = x.SimWindow_FrmCond_;
          this->SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_ = x.SimWindow_RatioFrmEdgeGlassCondToCntrGlassCond_;
          this->SimWindow_FrmSolarAbsorp_ = x.SimWindow_FrmSolarAbsorp_;
          this->SimWindow_FrmVisibleAbsorp_ = x.SimWindow_FrmVisibleAbsorp_;
          this->SimWindow_FrmThermHemisEmiss_ = x.SimWindow_FrmThermHemisEmiss_;
          this->SimWindow_DivType_ = x.SimWindow_DivType_;
          this->SimWindow_DivWidth_ = x.SimWindow_DivWidth_;
          this->SimWindow_NumbHorzDivs_ = x.SimWindow_NumbHorzDivs_;
          this->SimWindow_NumbVertlDivs_ = x.SimWindow_NumbVertlDivs_;
          this->SimWindow_DivOutsdProject_ = x.SimWindow_DivOutsdProject_;
          this->SimWindow_DivInsideProject_ = x.SimWindow_DivInsideProject_;
          this->SimWindow_DivCond_ = x.SimWindow_DivCond_;
          this->SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_ = x.SimWindow_RatioDivEdgeGlassCondToCntrGlassCond_;
          this->SimWindow_DivSolarAbsorp_ = x.SimWindow_DivSolarAbsorp_;
          this->SimWindow_DivVisibleAbsorp_ = x.SimWindow_DivVisibleAbsorp_;
          this->SimWindow_DivThermHemisEmiss_ = x.SimWindow_DivThermHemisEmiss_;
          this->SimWindow_OutsdRevealSolarAbsorp_ = x.SimWindow_OutsdRevealSolarAbsorp_;
          this->SimWindow_InsideSillDepth_ = x.SimWindow_InsideSillDepth_;
          this->SimWindow_InsideSillSolarAbsorp_ = x.SimWindow_InsideSillSolarAbsorp_;
          this->SimWindow_InsideRevealDepth_ = x.SimWindow_InsideRevealDepth_;
          this->SimWindow_InsideRevealSolarAbsorp_ = x.SimWindow_InsideRevealSolarAbsorp_;
        }

        return *this;
      }

      SimWindow_TypicalWindow_FrameAndDivider::
      ~SimWindow_TypicalWindow_FrameAndDivider ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

