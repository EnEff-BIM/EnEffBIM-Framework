// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateConstructions.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateConstructions
      // 

      const SimTemplateConstructions::TemplateExteriorWallConstruction_optional& SimTemplateConstructions::
      TemplateExteriorWallConstruction () const
      {
        return this->TemplateExteriorWallConstruction_;
      }

      SimTemplateConstructions::TemplateExteriorWallConstruction_optional& SimTemplateConstructions::
      TemplateExteriorWallConstruction ()
      {
        return this->TemplateExteriorWallConstruction_;
      }

      void SimTemplateConstructions::
      TemplateExteriorWallConstruction (const TemplateExteriorWallConstruction_type& x)
      {
        this->TemplateExteriorWallConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateExteriorWallConstruction (const TemplateExteriorWallConstruction_optional& x)
      {
        this->TemplateExteriorWallConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateExteriorWallConstruction (::std::auto_ptr< TemplateExteriorWallConstruction_type > x)
      {
        this->TemplateExteriorWallConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateExteriorFloorConstruction_optional& SimTemplateConstructions::
      TemplateExteriorFloorConstruction () const
      {
        return this->TemplateExteriorFloorConstruction_;
      }

      SimTemplateConstructions::TemplateExteriorFloorConstruction_optional& SimTemplateConstructions::
      TemplateExteriorFloorConstruction ()
      {
        return this->TemplateExteriorFloorConstruction_;
      }

      void SimTemplateConstructions::
      TemplateExteriorFloorConstruction (const TemplateExteriorFloorConstruction_type& x)
      {
        this->TemplateExteriorFloorConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateExteriorFloorConstruction (const TemplateExteriorFloorConstruction_optional& x)
      {
        this->TemplateExteriorFloorConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateExteriorFloorConstruction (::std::auto_ptr< TemplateExteriorFloorConstruction_type > x)
      {
        this->TemplateExteriorFloorConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateInterZoneFloorConstruction_optional& SimTemplateConstructions::
      TemplateInterZoneFloorConstruction () const
      {
        return this->TemplateInterZoneFloorConstruction_;
      }

      SimTemplateConstructions::TemplateInterZoneFloorConstruction_optional& SimTemplateConstructions::
      TemplateInterZoneFloorConstruction ()
      {
        return this->TemplateInterZoneFloorConstruction_;
      }

      void SimTemplateConstructions::
      TemplateInterZoneFloorConstruction (const TemplateInterZoneFloorConstruction_type& x)
      {
        this->TemplateInterZoneFloorConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateInterZoneFloorConstruction (const TemplateInterZoneFloorConstruction_optional& x)
      {
        this->TemplateInterZoneFloorConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateInterZoneFloorConstruction (::std::auto_ptr< TemplateInterZoneFloorConstruction_type > x)
      {
        this->TemplateInterZoneFloorConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateRoofConstruction_optional& SimTemplateConstructions::
      TemplateRoofConstruction () const
      {
        return this->TemplateRoofConstruction_;
      }

      SimTemplateConstructions::TemplateRoofConstruction_optional& SimTemplateConstructions::
      TemplateRoofConstruction ()
      {
        return this->TemplateRoofConstruction_;
      }

      void SimTemplateConstructions::
      TemplateRoofConstruction (const TemplateRoofConstruction_type& x)
      {
        this->TemplateRoofConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateRoofConstruction (const TemplateRoofConstruction_optional& x)
      {
        this->TemplateRoofConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateRoofConstruction (::std::auto_ptr< TemplateRoofConstruction_type > x)
      {
        this->TemplateRoofConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateSlabOnGradeConstruction_optional& SimTemplateConstructions::
      TemplateSlabOnGradeConstruction () const
      {
        return this->TemplateSlabOnGradeConstruction_;
      }

      SimTemplateConstructions::TemplateSlabOnGradeConstruction_optional& SimTemplateConstructions::
      TemplateSlabOnGradeConstruction ()
      {
        return this->TemplateSlabOnGradeConstruction_;
      }

      void SimTemplateConstructions::
      TemplateSlabOnGradeConstruction (const TemplateSlabOnGradeConstruction_type& x)
      {
        this->TemplateSlabOnGradeConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateSlabOnGradeConstruction (const TemplateSlabOnGradeConstruction_optional& x)
      {
        this->TemplateSlabOnGradeConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateSlabOnGradeConstruction (::std::auto_ptr< TemplateSlabOnGradeConstruction_type > x)
      {
        this->TemplateSlabOnGradeConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateUndergroundWallConstruction_optional& SimTemplateConstructions::
      TemplateUndergroundWallConstruction () const
      {
        return this->TemplateUndergroundWallConstruction_;
      }

      SimTemplateConstructions::TemplateUndergroundWallConstruction_optional& SimTemplateConstructions::
      TemplateUndergroundWallConstruction ()
      {
        return this->TemplateUndergroundWallConstruction_;
      }

      void SimTemplateConstructions::
      TemplateUndergroundWallConstruction (const TemplateUndergroundWallConstruction_type& x)
      {
        this->TemplateUndergroundWallConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateUndergroundWallConstruction (const TemplateUndergroundWallConstruction_optional& x)
      {
        this->TemplateUndergroundWallConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateUndergroundWallConstruction (::std::auto_ptr< TemplateUndergroundWallConstruction_type > x)
      {
        this->TemplateUndergroundWallConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateUndergroundFloorConstruction_optional& SimTemplateConstructions::
      TemplateUndergroundFloorConstruction () const
      {
        return this->TemplateUndergroundFloorConstruction_;
      }

      SimTemplateConstructions::TemplateUndergroundFloorConstruction_optional& SimTemplateConstructions::
      TemplateUndergroundFloorConstruction ()
      {
        return this->TemplateUndergroundFloorConstruction_;
      }

      void SimTemplateConstructions::
      TemplateUndergroundFloorConstruction (const TemplateUndergroundFloorConstruction_type& x)
      {
        this->TemplateUndergroundFloorConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateUndergroundFloorConstruction (const TemplateUndergroundFloorConstruction_optional& x)
      {
        this->TemplateUndergroundFloorConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateUndergroundFloorConstruction (::std::auto_ptr< TemplateUndergroundFloorConstruction_type > x)
      {
        this->TemplateUndergroundFloorConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateCeilingConstruction_optional& SimTemplateConstructions::
      TemplateCeilingConstruction () const
      {
        return this->TemplateCeilingConstruction_;
      }

      SimTemplateConstructions::TemplateCeilingConstruction_optional& SimTemplateConstructions::
      TemplateCeilingConstruction ()
      {
        return this->TemplateCeilingConstruction_;
      }

      void SimTemplateConstructions::
      TemplateCeilingConstruction (const TemplateCeilingConstruction_type& x)
      {
        this->TemplateCeilingConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateCeilingConstruction (const TemplateCeilingConstruction_optional& x)
      {
        this->TemplateCeilingConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateCeilingConstruction (::std::auto_ptr< TemplateCeilingConstruction_type > x)
      {
        this->TemplateCeilingConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateInteriorPartitionWallConstruction_optional& SimTemplateConstructions::
      TemplateInteriorPartitionWallConstruction () const
      {
        return this->TemplateInteriorPartitionWallConstruction_;
      }

      SimTemplateConstructions::TemplateInteriorPartitionWallConstruction_optional& SimTemplateConstructions::
      TemplateInteriorPartitionWallConstruction ()
      {
        return this->TemplateInteriorPartitionWallConstruction_;
      }

      void SimTemplateConstructions::
      TemplateInteriorPartitionWallConstruction (const TemplateInteriorPartitionWallConstruction_type& x)
      {
        this->TemplateInteriorPartitionWallConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateInteriorPartitionWallConstruction (const TemplateInteriorPartitionWallConstruction_optional& x)
      {
        this->TemplateInteriorPartitionWallConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateInteriorPartitionWallConstruction (::std::auto_ptr< TemplateInteriorPartitionWallConstruction_type > x)
      {
        this->TemplateInteriorPartitionWallConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateRaisedFloorConstruction_optional& SimTemplateConstructions::
      TemplateRaisedFloorConstruction () const
      {
        return this->TemplateRaisedFloorConstruction_;
      }

      SimTemplateConstructions::TemplateRaisedFloorConstruction_optional& SimTemplateConstructions::
      TemplateRaisedFloorConstruction ()
      {
        return this->TemplateRaisedFloorConstruction_;
      }

      void SimTemplateConstructions::
      TemplateRaisedFloorConstruction (const TemplateRaisedFloorConstruction_type& x)
      {
        this->TemplateRaisedFloorConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateRaisedFloorConstruction (const TemplateRaisedFloorConstruction_optional& x)
      {
        this->TemplateRaisedFloorConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateRaisedFloorConstruction (::std::auto_ptr< TemplateRaisedFloorConstruction_type > x)
      {
        this->TemplateRaisedFloorConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateOpaqueDoors_optional& SimTemplateConstructions::
      TemplateOpaqueDoors () const
      {
        return this->TemplateOpaqueDoors_;
      }

      SimTemplateConstructions::TemplateOpaqueDoors_optional& SimTemplateConstructions::
      TemplateOpaqueDoors ()
      {
        return this->TemplateOpaqueDoors_;
      }

      void SimTemplateConstructions::
      TemplateOpaqueDoors (const TemplateOpaqueDoors_type& x)
      {
        this->TemplateOpaqueDoors_.set (x);
      }

      void SimTemplateConstructions::
      TemplateOpaqueDoors (const TemplateOpaqueDoors_optional& x)
      {
        this->TemplateOpaqueDoors_ = x;
      }

      void SimTemplateConstructions::
      TemplateOpaqueDoors (::std::auto_ptr< TemplateOpaqueDoors_type > x)
      {
        this->TemplateOpaqueDoors_.set (x);
      }

      const SimTemplateConstructions::TemplateWindowsNorth_optional& SimTemplateConstructions::
      TemplateWindowsNorth () const
      {
        return this->TemplateWindowsNorth_;
      }

      SimTemplateConstructions::TemplateWindowsNorth_optional& SimTemplateConstructions::
      TemplateWindowsNorth ()
      {
        return this->TemplateWindowsNorth_;
      }

      void SimTemplateConstructions::
      TemplateWindowsNorth (const TemplateWindowsNorth_type& x)
      {
        this->TemplateWindowsNorth_.set (x);
      }

      void SimTemplateConstructions::
      TemplateWindowsNorth (const TemplateWindowsNorth_optional& x)
      {
        this->TemplateWindowsNorth_ = x;
      }

      void SimTemplateConstructions::
      TemplateWindowsNorth (::std::auto_ptr< TemplateWindowsNorth_type > x)
      {
        this->TemplateWindowsNorth_.set (x);
      }

      const SimTemplateConstructions::TemplateWindowsSouth_optional& SimTemplateConstructions::
      TemplateWindowsSouth () const
      {
        return this->TemplateWindowsSouth_;
      }

      SimTemplateConstructions::TemplateWindowsSouth_optional& SimTemplateConstructions::
      TemplateWindowsSouth ()
      {
        return this->TemplateWindowsSouth_;
      }

      void SimTemplateConstructions::
      TemplateWindowsSouth (const TemplateWindowsSouth_type& x)
      {
        this->TemplateWindowsSouth_.set (x);
      }

      void SimTemplateConstructions::
      TemplateWindowsSouth (const TemplateWindowsSouth_optional& x)
      {
        this->TemplateWindowsSouth_ = x;
      }

      void SimTemplateConstructions::
      TemplateWindowsSouth (::std::auto_ptr< TemplateWindowsSouth_type > x)
      {
        this->TemplateWindowsSouth_.set (x);
      }

      const SimTemplateConstructions::TemplateWindowsEast_optional& SimTemplateConstructions::
      TemplateWindowsEast () const
      {
        return this->TemplateWindowsEast_;
      }

      SimTemplateConstructions::TemplateWindowsEast_optional& SimTemplateConstructions::
      TemplateWindowsEast ()
      {
        return this->TemplateWindowsEast_;
      }

      void SimTemplateConstructions::
      TemplateWindowsEast (const TemplateWindowsEast_type& x)
      {
        this->TemplateWindowsEast_.set (x);
      }

      void SimTemplateConstructions::
      TemplateWindowsEast (const TemplateWindowsEast_optional& x)
      {
        this->TemplateWindowsEast_ = x;
      }

      void SimTemplateConstructions::
      TemplateWindowsEast (::std::auto_ptr< TemplateWindowsEast_type > x)
      {
        this->TemplateWindowsEast_.set (x);
      }

      const SimTemplateConstructions::TemplateWindowsWest_optional& SimTemplateConstructions::
      TemplateWindowsWest () const
      {
        return this->TemplateWindowsWest_;
      }

      SimTemplateConstructions::TemplateWindowsWest_optional& SimTemplateConstructions::
      TemplateWindowsWest ()
      {
        return this->TemplateWindowsWest_;
      }

      void SimTemplateConstructions::
      TemplateWindowsWest (const TemplateWindowsWest_type& x)
      {
        this->TemplateWindowsWest_.set (x);
      }

      void SimTemplateConstructions::
      TemplateWindowsWest (const TemplateWindowsWest_optional& x)
      {
        this->TemplateWindowsWest_ = x;
      }

      void SimTemplateConstructions::
      TemplateWindowsWest (::std::auto_ptr< TemplateWindowsWest_type > x)
      {
        this->TemplateWindowsWest_.set (x);
      }

      const SimTemplateConstructions::TemplateExteriorGlassDoors_optional& SimTemplateConstructions::
      TemplateExteriorGlassDoors () const
      {
        return this->TemplateExteriorGlassDoors_;
      }

      SimTemplateConstructions::TemplateExteriorGlassDoors_optional& SimTemplateConstructions::
      TemplateExteriorGlassDoors ()
      {
        return this->TemplateExteriorGlassDoors_;
      }

      void SimTemplateConstructions::
      TemplateExteriorGlassDoors (const TemplateExteriorGlassDoors_type& x)
      {
        this->TemplateExteriorGlassDoors_.set (x);
      }

      void SimTemplateConstructions::
      TemplateExteriorGlassDoors (const TemplateExteriorGlassDoors_optional& x)
      {
        this->TemplateExteriorGlassDoors_ = x;
      }

      void SimTemplateConstructions::
      TemplateExteriorGlassDoors (::std::auto_ptr< TemplateExteriorGlassDoors_type > x)
      {
        this->TemplateExteriorGlassDoors_.set (x);
      }

      const SimTemplateConstructions::TemplateSkylights_optional& SimTemplateConstructions::
      TemplateSkylights () const
      {
        return this->TemplateSkylights_;
      }

      SimTemplateConstructions::TemplateSkylights_optional& SimTemplateConstructions::
      TemplateSkylights ()
      {
        return this->TemplateSkylights_;
      }

      void SimTemplateConstructions::
      TemplateSkylights (const TemplateSkylights_type& x)
      {
        this->TemplateSkylights_.set (x);
      }

      void SimTemplateConstructions::
      TemplateSkylights (const TemplateSkylights_optional& x)
      {
        this->TemplateSkylights_ = x;
      }

      void SimTemplateConstructions::
      TemplateSkylights (::std::auto_ptr< TemplateSkylights_type > x)
      {
        this->TemplateSkylights_.set (x);
      }

      const SimTemplateConstructions::TemplateInteriorWindows_optional& SimTemplateConstructions::
      TemplateInteriorWindows () const
      {
        return this->TemplateInteriorWindows_;
      }

      SimTemplateConstructions::TemplateInteriorWindows_optional& SimTemplateConstructions::
      TemplateInteriorWindows ()
      {
        return this->TemplateInteriorWindows_;
      }

      void SimTemplateConstructions::
      TemplateInteriorWindows (const TemplateInteriorWindows_type& x)
      {
        this->TemplateInteriorWindows_.set (x);
      }

      void SimTemplateConstructions::
      TemplateInteriorWindows (const TemplateInteriorWindows_optional& x)
      {
        this->TemplateInteriorWindows_ = x;
      }

      void SimTemplateConstructions::
      TemplateInteriorWindows (::std::auto_ptr< TemplateInteriorWindows_type > x)
      {
        this->TemplateInteriorWindows_.set (x);
      }

      const SimTemplateConstructions::TemplateInteriorGlassDoors_optional& SimTemplateConstructions::
      TemplateInteriorGlassDoors () const
      {
        return this->TemplateInteriorGlassDoors_;
      }

      SimTemplateConstructions::TemplateInteriorGlassDoors_optional& SimTemplateConstructions::
      TemplateInteriorGlassDoors ()
      {
        return this->TemplateInteriorGlassDoors_;
      }

      void SimTemplateConstructions::
      TemplateInteriorGlassDoors (const TemplateInteriorGlassDoors_type& x)
      {
        this->TemplateInteriorGlassDoors_.set (x);
      }

      void SimTemplateConstructions::
      TemplateInteriorGlassDoors (const TemplateInteriorGlassDoors_optional& x)
      {
        this->TemplateInteriorGlassDoors_ = x;
      }

      void SimTemplateConstructions::
      TemplateInteriorGlassDoors (::std::auto_ptr< TemplateInteriorGlassDoors_type > x)
      {
        this->TemplateInteriorGlassDoors_.set (x);
      }

      const SimTemplateConstructions::TemplateRadiantSlabConstruction_optional& SimTemplateConstructions::
      TemplateRadiantSlabConstruction () const
      {
        return this->TemplateRadiantSlabConstruction_;
      }

      SimTemplateConstructions::TemplateRadiantSlabConstruction_optional& SimTemplateConstructions::
      TemplateRadiantSlabConstruction ()
      {
        return this->TemplateRadiantSlabConstruction_;
      }

      void SimTemplateConstructions::
      TemplateRadiantSlabConstruction (const TemplateRadiantSlabConstruction_type& x)
      {
        this->TemplateRadiantSlabConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateRadiantSlabConstruction (const TemplateRadiantSlabConstruction_optional& x)
      {
        this->TemplateRadiantSlabConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateRadiantSlabConstruction (::std::auto_ptr< TemplateRadiantSlabConstruction_type > x)
      {
        this->TemplateRadiantSlabConstruction_.set (x);
      }

      const SimTemplateConstructions::TemplateRadiantWallConstruction_optional& SimTemplateConstructions::
      TemplateRadiantWallConstruction () const
      {
        return this->TemplateRadiantWallConstruction_;
      }

      SimTemplateConstructions::TemplateRadiantWallConstruction_optional& SimTemplateConstructions::
      TemplateRadiantWallConstruction ()
      {
        return this->TemplateRadiantWallConstruction_;
      }

      void SimTemplateConstructions::
      TemplateRadiantWallConstruction (const TemplateRadiantWallConstruction_type& x)
      {
        this->TemplateRadiantWallConstruction_.set (x);
      }

      void SimTemplateConstructions::
      TemplateRadiantWallConstruction (const TemplateRadiantWallConstruction_optional& x)
      {
        this->TemplateRadiantWallConstruction_ = x;
      }

      void SimTemplateConstructions::
      TemplateRadiantWallConstruction (::std::auto_ptr< TemplateRadiantWallConstruction_type > x)
      {
        this->TemplateRadiantWallConstruction_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimTemplateConstructions
      //

      SimTemplateConstructions::
      SimTemplateConstructions (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (RefId),
        TemplateExteriorWallConstruction_ (this),
        TemplateExteriorFloorConstruction_ (this),
        TemplateInterZoneFloorConstruction_ (this),
        TemplateRoofConstruction_ (this),
        TemplateSlabOnGradeConstruction_ (this),
        TemplateUndergroundWallConstruction_ (this),
        TemplateUndergroundFloorConstruction_ (this),
        TemplateCeilingConstruction_ (this),
        TemplateInteriorPartitionWallConstruction_ (this),
        TemplateRaisedFloorConstruction_ (this),
        TemplateOpaqueDoors_ (this),
        TemplateWindowsNorth_ (this),
        TemplateWindowsSouth_ (this),
        TemplateWindowsEast_ (this),
        TemplateWindowsWest_ (this),
        TemplateExteriorGlassDoors_ (this),
        TemplateSkylights_ (this),
        TemplateInteriorWindows_ (this),
        TemplateInteriorGlassDoors_ (this),
        TemplateRadiantSlabConstruction_ (this),
        TemplateRadiantWallConstruction_ (this)
      {
      }

      SimTemplateConstructions::
      SimTemplateConstructions (const SimTemplateConstructions& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (x, f, c),
        TemplateExteriorWallConstruction_ (x.TemplateExteriorWallConstruction_, f, this),
        TemplateExteriorFloorConstruction_ (x.TemplateExteriorFloorConstruction_, f, this),
        TemplateInterZoneFloorConstruction_ (x.TemplateInterZoneFloorConstruction_, f, this),
        TemplateRoofConstruction_ (x.TemplateRoofConstruction_, f, this),
        TemplateSlabOnGradeConstruction_ (x.TemplateSlabOnGradeConstruction_, f, this),
        TemplateUndergroundWallConstruction_ (x.TemplateUndergroundWallConstruction_, f, this),
        TemplateUndergroundFloorConstruction_ (x.TemplateUndergroundFloorConstruction_, f, this),
        TemplateCeilingConstruction_ (x.TemplateCeilingConstruction_, f, this),
        TemplateInteriorPartitionWallConstruction_ (x.TemplateInteriorPartitionWallConstruction_, f, this),
        TemplateRaisedFloorConstruction_ (x.TemplateRaisedFloorConstruction_, f, this),
        TemplateOpaqueDoors_ (x.TemplateOpaqueDoors_, f, this),
        TemplateWindowsNorth_ (x.TemplateWindowsNorth_, f, this),
        TemplateWindowsSouth_ (x.TemplateWindowsSouth_, f, this),
        TemplateWindowsEast_ (x.TemplateWindowsEast_, f, this),
        TemplateWindowsWest_ (x.TemplateWindowsWest_, f, this),
        TemplateExteriorGlassDoors_ (x.TemplateExteriorGlassDoors_, f, this),
        TemplateSkylights_ (x.TemplateSkylights_, f, this),
        TemplateInteriorWindows_ (x.TemplateInteriorWindows_, f, this),
        TemplateInteriorGlassDoors_ (x.TemplateInteriorGlassDoors_, f, this),
        TemplateRadiantSlabConstruction_ (x.TemplateRadiantSlabConstruction_, f, this),
        TemplateRadiantWallConstruction_ (x.TemplateRadiantWallConstruction_, f, this)
      {
      }

      SimTemplateConstructions::
      SimTemplateConstructions (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateExteriorWallConstruction_ (this),
        TemplateExteriorFloorConstruction_ (this),
        TemplateInterZoneFloorConstruction_ (this),
        TemplateRoofConstruction_ (this),
        TemplateSlabOnGradeConstruction_ (this),
        TemplateUndergroundWallConstruction_ (this),
        TemplateUndergroundFloorConstruction_ (this),
        TemplateCeilingConstruction_ (this),
        TemplateInteriorPartitionWallConstruction_ (this),
        TemplateRaisedFloorConstruction_ (this),
        TemplateOpaqueDoors_ (this),
        TemplateWindowsNorth_ (this),
        TemplateWindowsSouth_ (this),
        TemplateWindowsEast_ (this),
        TemplateWindowsWest_ (this),
        TemplateExteriorGlassDoors_ (this),
        TemplateSkylights_ (this),
        TemplateInteriorWindows_ (this),
        TemplateInteriorGlassDoors_ (this),
        TemplateRadiantSlabConstruction_ (this),
        TemplateRadiantWallConstruction_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateConstructions::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateExteriorWallConstruction
          //
          if (n.name () == "TemplateExteriorWallConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateExteriorWallConstruction_type > r (
              TemplateExteriorWallConstruction_traits::create (i, f, this));

            if (!this->TemplateExteriorWallConstruction_)
            {
              this->TemplateExteriorWallConstruction_.set (r);
              continue;
            }
          }

          // TemplateExteriorFloorConstruction
          //
          if (n.name () == "TemplateExteriorFloorConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateExteriorFloorConstruction_type > r (
              TemplateExteriorFloorConstruction_traits::create (i, f, this));

            if (!this->TemplateExteriorFloorConstruction_)
            {
              this->TemplateExteriorFloorConstruction_.set (r);
              continue;
            }
          }

          // TemplateInterZoneFloorConstruction
          //
          if (n.name () == "TemplateInterZoneFloorConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInterZoneFloorConstruction_type > r (
              TemplateInterZoneFloorConstruction_traits::create (i, f, this));

            if (!this->TemplateInterZoneFloorConstruction_)
            {
              this->TemplateInterZoneFloorConstruction_.set (r);
              continue;
            }
          }

          // TemplateRoofConstruction
          //
          if (n.name () == "TemplateRoofConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateRoofConstruction_type > r (
              TemplateRoofConstruction_traits::create (i, f, this));

            if (!this->TemplateRoofConstruction_)
            {
              this->TemplateRoofConstruction_.set (r);
              continue;
            }
          }

          // TemplateSlabOnGradeConstruction
          //
          if (n.name () == "TemplateSlabOnGradeConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSlabOnGradeConstruction_type > r (
              TemplateSlabOnGradeConstruction_traits::create (i, f, this));

            if (!this->TemplateSlabOnGradeConstruction_)
            {
              this->TemplateSlabOnGradeConstruction_.set (r);
              continue;
            }
          }

          // TemplateUndergroundWallConstruction
          //
          if (n.name () == "TemplateUndergroundWallConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateUndergroundWallConstruction_type > r (
              TemplateUndergroundWallConstruction_traits::create (i, f, this));

            if (!this->TemplateUndergroundWallConstruction_)
            {
              this->TemplateUndergroundWallConstruction_.set (r);
              continue;
            }
          }

          // TemplateUndergroundFloorConstruction
          //
          if (n.name () == "TemplateUndergroundFloorConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateUndergroundFloorConstruction_type > r (
              TemplateUndergroundFloorConstruction_traits::create (i, f, this));

            if (!this->TemplateUndergroundFloorConstruction_)
            {
              this->TemplateUndergroundFloorConstruction_.set (r);
              continue;
            }
          }

          // TemplateCeilingConstruction
          //
          if (n.name () == "TemplateCeilingConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateCeilingConstruction_type > r (
              TemplateCeilingConstruction_traits::create (i, f, this));

            if (!this->TemplateCeilingConstruction_)
            {
              this->TemplateCeilingConstruction_.set (r);
              continue;
            }
          }

          // TemplateInteriorPartitionWallConstruction
          //
          if (n.name () == "TemplateInteriorPartitionWallConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInteriorPartitionWallConstruction_type > r (
              TemplateInteriorPartitionWallConstruction_traits::create (i, f, this));

            if (!this->TemplateInteriorPartitionWallConstruction_)
            {
              this->TemplateInteriorPartitionWallConstruction_.set (r);
              continue;
            }
          }

          // TemplateRaisedFloorConstruction
          //
          if (n.name () == "TemplateRaisedFloorConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateRaisedFloorConstruction_type > r (
              TemplateRaisedFloorConstruction_traits::create (i, f, this));

            if (!this->TemplateRaisedFloorConstruction_)
            {
              this->TemplateRaisedFloorConstruction_.set (r);
              continue;
            }
          }

          // TemplateOpaqueDoors
          //
          if (n.name () == "TemplateOpaqueDoors" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateOpaqueDoors_type > r (
              TemplateOpaqueDoors_traits::create (i, f, this));

            if (!this->TemplateOpaqueDoors_)
            {
              this->TemplateOpaqueDoors_.set (r);
              continue;
            }
          }

          // TemplateWindowsNorth
          //
          if (n.name () == "TemplateWindowsNorth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateWindowsNorth_type > r (
              TemplateWindowsNorth_traits::create (i, f, this));

            if (!this->TemplateWindowsNorth_)
            {
              this->TemplateWindowsNorth_.set (r);
              continue;
            }
          }

          // TemplateWindowsSouth
          //
          if (n.name () == "TemplateWindowsSouth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateWindowsSouth_type > r (
              TemplateWindowsSouth_traits::create (i, f, this));

            if (!this->TemplateWindowsSouth_)
            {
              this->TemplateWindowsSouth_.set (r);
              continue;
            }
          }

          // TemplateWindowsEast
          //
          if (n.name () == "TemplateWindowsEast" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateWindowsEast_type > r (
              TemplateWindowsEast_traits::create (i, f, this));

            if (!this->TemplateWindowsEast_)
            {
              this->TemplateWindowsEast_.set (r);
              continue;
            }
          }

          // TemplateWindowsWest
          //
          if (n.name () == "TemplateWindowsWest" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateWindowsWest_type > r (
              TemplateWindowsWest_traits::create (i, f, this));

            if (!this->TemplateWindowsWest_)
            {
              this->TemplateWindowsWest_.set (r);
              continue;
            }
          }

          // TemplateExteriorGlassDoors
          //
          if (n.name () == "TemplateExteriorGlassDoors" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateExteriorGlassDoors_type > r (
              TemplateExteriorGlassDoors_traits::create (i, f, this));

            if (!this->TemplateExteriorGlassDoors_)
            {
              this->TemplateExteriorGlassDoors_.set (r);
              continue;
            }
          }

          // TemplateSkylights
          //
          if (n.name () == "TemplateSkylights" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSkylights_type > r (
              TemplateSkylights_traits::create (i, f, this));

            if (!this->TemplateSkylights_)
            {
              this->TemplateSkylights_.set (r);
              continue;
            }
          }

          // TemplateInteriorWindows
          //
          if (n.name () == "TemplateInteriorWindows" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInteriorWindows_type > r (
              TemplateInteriorWindows_traits::create (i, f, this));

            if (!this->TemplateInteriorWindows_)
            {
              this->TemplateInteriorWindows_.set (r);
              continue;
            }
          }

          // TemplateInteriorGlassDoors
          //
          if (n.name () == "TemplateInteriorGlassDoors" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateInteriorGlassDoors_type > r (
              TemplateInteriorGlassDoors_traits::create (i, f, this));

            if (!this->TemplateInteriorGlassDoors_)
            {
              this->TemplateInteriorGlassDoors_.set (r);
              continue;
            }
          }

          // TemplateRadiantSlabConstruction
          //
          if (n.name () == "TemplateRadiantSlabConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateRadiantSlabConstruction_type > r (
              TemplateRadiantSlabConstruction_traits::create (i, f, this));

            if (!this->TemplateRadiantSlabConstruction_)
            {
              this->TemplateRadiantSlabConstruction_.set (r);
              continue;
            }
          }

          // TemplateRadiantWallConstruction
          //
          if (n.name () == "TemplateRadiantWallConstruction" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateRadiantWallConstruction_type > r (
              TemplateRadiantWallConstruction_traits::create (i, f, this));

            if (!this->TemplateRadiantWallConstruction_)
            {
              this->TemplateRadiantWallConstruction_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateConstructions* SimTemplateConstructions::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateConstructions (*this, f, c);
      }

      SimTemplateConstructions& SimTemplateConstructions::
      operator= (const SimTemplateConstructions& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimTemplate& > (*this) = x;
          this->TemplateExteriorWallConstruction_ = x.TemplateExteriorWallConstruction_;
          this->TemplateExteriorFloorConstruction_ = x.TemplateExteriorFloorConstruction_;
          this->TemplateInterZoneFloorConstruction_ = x.TemplateInterZoneFloorConstruction_;
          this->TemplateRoofConstruction_ = x.TemplateRoofConstruction_;
          this->TemplateSlabOnGradeConstruction_ = x.TemplateSlabOnGradeConstruction_;
          this->TemplateUndergroundWallConstruction_ = x.TemplateUndergroundWallConstruction_;
          this->TemplateUndergroundFloorConstruction_ = x.TemplateUndergroundFloorConstruction_;
          this->TemplateCeilingConstruction_ = x.TemplateCeilingConstruction_;
          this->TemplateInteriorPartitionWallConstruction_ = x.TemplateInteriorPartitionWallConstruction_;
          this->TemplateRaisedFloorConstruction_ = x.TemplateRaisedFloorConstruction_;
          this->TemplateOpaqueDoors_ = x.TemplateOpaqueDoors_;
          this->TemplateWindowsNorth_ = x.TemplateWindowsNorth_;
          this->TemplateWindowsSouth_ = x.TemplateWindowsSouth_;
          this->TemplateWindowsEast_ = x.TemplateWindowsEast_;
          this->TemplateWindowsWest_ = x.TemplateWindowsWest_;
          this->TemplateExteriorGlassDoors_ = x.TemplateExteriorGlassDoors_;
          this->TemplateSkylights_ = x.TemplateSkylights_;
          this->TemplateInteriorWindows_ = x.TemplateInteriorWindows_;
          this->TemplateInteriorGlassDoors_ = x.TemplateInteriorGlassDoors_;
          this->TemplateRadiantSlabConstruction_ = x.TemplateRadiantSlabConstruction_;
          this->TemplateRadiantWallConstruction_ = x.TemplateRadiantWallConstruction_;
        }

        return *this;
      }

      SimTemplateConstructions::
      ~SimTemplateConstructions ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

