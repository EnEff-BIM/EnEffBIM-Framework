// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimParameterizedProfileDef_ParameterizedProfile_L_Shape.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimParameterizedProfileDef_ParameterizedProfile_L_Shape
      // 

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Depth_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Depth () const
      {
        return this->Depth_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Depth_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Depth ()
      {
        return this->Depth_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Depth (const Depth_type& x)
      {
        this->Depth_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Depth (const Depth_optional& x)
      {
        this->Depth_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Width_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Width () const
      {
        return this->Width_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Width_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Width ()
      {
        return this->Width_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Width (const Width_type& x)
      {
        this->Width_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Width (const Width_optional& x)
      {
        this->Width_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Thickness_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Thickness () const
      {
        return this->Thickness_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::Thickness_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Thickness ()
      {
        return this->Thickness_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Thickness (const Thickness_type& x)
      {
        this->Thickness_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      Thickness (const Thickness_optional& x)
      {
        this->Thickness_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::FilletRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      FilletRadius () const
      {
        return this->FilletRadius_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::FilletRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      FilletRadius ()
      {
        return this->FilletRadius_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      FilletRadius (const FilletRadius_type& x)
      {
        this->FilletRadius_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      FilletRadius (const FilletRadius_optional& x)
      {
        this->FilletRadius_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::EdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      EdgeRadius () const
      {
        return this->EdgeRadius_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::EdgeRadius_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      EdgeRadius ()
      {
        return this->EdgeRadius_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      EdgeRadius (const EdgeRadius_type& x)
      {
        this->EdgeRadius_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      EdgeRadius (const EdgeRadius_optional& x)
      {
        this->EdgeRadius_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::LegSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      LegSlope () const
      {
        return this->LegSlope_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::LegSlope_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      LegSlope ()
      {
        return this->LegSlope_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      LegSlope (const LegSlope_type& x)
      {
        this->LegSlope_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      LegSlope (const LegSlope_optional& x)
      {
        this->LegSlope_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::CentreOfGravityInX_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInX () const
      {
        return this->CentreOfGravityInX_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::CentreOfGravityInX_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInX ()
      {
        return this->CentreOfGravityInX_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInX (const CentreOfGravityInX_type& x)
      {
        this->CentreOfGravityInX_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInX (const CentreOfGravityInX_optional& x)
      {
        this->CentreOfGravityInX_ = x;
      }

      const SimParameterizedProfileDef_ParameterizedProfile_L_Shape::CentreOfGravityInY_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInY () const
      {
        return this->CentreOfGravityInY_;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::CentreOfGravityInY_optional& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInY ()
      {
        return this->CentreOfGravityInY_;
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInY (const CentreOfGravityInY_type& x)
      {
        this->CentreOfGravityInY_.set (x);
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      CentreOfGravityInY (const CentreOfGravityInY_optional& x)
      {
        this->CentreOfGravityInY_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
      // SimParameterizedProfileDef_ParameterizedProfile_L_Shape
      //

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (RefId),
        Depth_ (this),
        Width_ (this),
        Thickness_ (this),
        FilletRadius_ (this),
        EdgeRadius_ (this),
        LegSlope_ (this),
        CentreOfGravityInX_ (this),
        CentreOfGravityInY_ (this)
      {
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape (const SimParameterizedProfileDef_ParameterizedProfile_L_Shape& x,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (x, f, c),
        Depth_ (x.Depth_, f, this),
        Width_ (x.Width_, f, this),
        Thickness_ (x.Thickness_, f, this),
        FilletRadius_ (x.FilletRadius_, f, this),
        EdgeRadius_ (x.EdgeRadius_, f, this),
        LegSlope_ (x.LegSlope_, f, this),
        CentreOfGravityInX_ (x.CentreOfGravityInX_, f, this),
        CentreOfGravityInY_ (x.CentreOfGravityInY_, f, this)
      {
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      SimParameterizedProfileDef_ParameterizedProfile_L_Shape (const ::xercesc::DOMElement& e,
                                                               ::xml_schema::flags f,
                                                               ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile (e, f | ::xml_schema::flags::base, c),
        Depth_ (this),
        Width_ (this),
        Thickness_ (this),
        FilletRadius_ (this),
        EdgeRadius_ (this),
        LegSlope_ (this),
        CentreOfGravityInX_ (this),
        CentreOfGravityInY_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Depth
          //
          if (n.name () == "Depth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->Depth_)
            {
              this->Depth_.set (Depth_traits::create (i, f, this));
              continue;
            }
          }

          // Width
          //
          if (n.name () == "Width" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->Width_)
            {
              this->Width_.set (Width_traits::create (i, f, this));
              continue;
            }
          }

          // Thickness
          //
          if (n.name () == "Thickness" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->Thickness_)
            {
              this->Thickness_.set (Thickness_traits::create (i, f, this));
              continue;
            }
          }

          // FilletRadius
          //
          if (n.name () == "FilletRadius" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->FilletRadius_)
            {
              this->FilletRadius_.set (FilletRadius_traits::create (i, f, this));
              continue;
            }
          }

          // EdgeRadius
          //
          if (n.name () == "EdgeRadius" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->EdgeRadius_)
            {
              this->EdgeRadius_.set (EdgeRadius_traits::create (i, f, this));
              continue;
            }
          }

          // LegSlope
          //
          if (n.name () == "LegSlope" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->LegSlope_)
            {
              this->LegSlope_.set (LegSlope_traits::create (i, f, this));
              continue;
            }
          }

          // CentreOfGravityInX
          //
          if (n.name () == "CentreOfGravityInX" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->CentreOfGravityInX_)
            {
              this->CentreOfGravityInX_.set (CentreOfGravityInX_traits::create (i, f, this));
              continue;
            }
          }

          // CentreOfGravityInY
          //
          if (n.name () == "CentreOfGravityInY" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeometry")
          {
            if (!this->CentreOfGravityInY_)
            {
              this->CentreOfGravityInY_.set (CentreOfGravityInY_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape* SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimParameterizedProfileDef_ParameterizedProfile_L_Shape (*this, f, c);
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape& SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      operator= (const SimParameterizedProfileDef_ParameterizedProfile_L_Shape& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeometry::SimParameterizedProfileDef_ParameterizedProfile& > (*this) = x;
          this->Depth_ = x.Depth_;
          this->Width_ = x.Width_;
          this->Thickness_ = x.Thickness_;
          this->FilletRadius_ = x.FilletRadius_;
          this->EdgeRadius_ = x.EdgeRadius_;
          this->LegSlope_ = x.LegSlope_;
          this->CentreOfGravityInX_ = x.CentreOfGravityInX_;
          this->CentreOfGravityInY_ = x.CentreOfGravityInY_;
        }

        return *this;
      }

      SimParameterizedProfileDef_ParameterizedProfile_L_Shape::
      ~SimParameterizedProfileDef_ParameterizedProfile_L_Shape ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeometry
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

