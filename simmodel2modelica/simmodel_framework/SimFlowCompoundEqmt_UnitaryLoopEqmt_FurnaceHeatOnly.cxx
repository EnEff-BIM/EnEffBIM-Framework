// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly
      // 

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_AvailSchedName () const
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_AvailSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_AvailSchedName ()
      {
        return this->SimFlowCompEqmt_AvailSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x)
      {
        this->SimFlowCompEqmt_AvailSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > x)
      {
        this->SimFlowCompEqmt_AvailSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilObjType () const
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_HeatingCoilObjType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilObjType ()
      {
        return this->SimFlowCompEqmt_HeatingCoilObjType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilObjType (const SimFlowCompEqmt_HeatingCoilObjType_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilObjType (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilObjType_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilName () const
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_HeatingCoilName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilName ()
      {
        return this->SimFlowCompEqmt_HeatingCoilName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_type& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilName (const SimFlowCompEqmt_HeatingCoilName_optional& x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_HeatingCoilName (::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > x)
      {
        this->SimFlowCompEqmt_HeatingCoilName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName () const
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName ()
      {
        return this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (const SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFanOperatModeSchedName (::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > x)
      {
        this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FanPlacement () const
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FanPlacement_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FanPlacement ()
      {
        return this->SimFlowCompEqmt_FanPlacement_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_type& x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FanPlacement (const SimFlowCompEqmt_FanPlacement_optional& x)
      {
        this->SimFlowCompEqmt_FanPlacement_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FanPlacement (::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > x)
      {
        this->SimFlowCompEqmt_FanPlacement_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFlowRate () const
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRate_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyAirFlowRate_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFlowRate ()
      {
        return this->SimFlowCompEqmt_SupplyAirFlowRate_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFlowRate (const SimFlowCompEqmt_SupplyAirFlowRate_type& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRate_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyAirFlowRate (const SimFlowCompEqmt_SupplyAirFlowRate_optional& x)
      {
        this->SimFlowCompEqmt_SupplyAirFlowRate_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyFanName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyFanName () const
      {
        return this->SimFlowCompEqmt_SupplyFanName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupplyFanName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyFanName ()
      {
        return this->SimFlowCompEqmt_SupplyFanName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_type& x)
      {
        this->SimFlowCompEqmt_SupplyFanName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyFanName (const SimFlowCompEqmt_SupplyFanName_optional& x)
      {
        this->SimFlowCompEqmt_SupplyFanName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupplyFanName (::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > x)
      {
        this->SimFlowCompEqmt_SupplyFanName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FurnaceAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirInletNodeName () const
      {
        return this->SimFlowCompEqmt_FurnaceAirInletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FurnaceAirInletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirInletNodeName ()
      {
        return this->SimFlowCompEqmt_FurnaceAirInletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirInletNodeName (const SimFlowCompEqmt_FurnaceAirInletNodeName_type& x)
      {
        this->SimFlowCompEqmt_FurnaceAirInletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirInletNodeName (const SimFlowCompEqmt_FurnaceAirInletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_FurnaceAirInletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirInletNodeName (::std::auto_ptr< SimFlowCompEqmt_FurnaceAirInletNodeName_type > x)
      {
        this->SimFlowCompEqmt_FurnaceAirInletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FurnaceAirOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirOutletNodeName () const
      {
        return this->SimFlowCompEqmt_FurnaceAirOutletNodeName_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_FurnaceAirOutletNodeName_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirOutletNodeName ()
      {
        return this->SimFlowCompEqmt_FurnaceAirOutletNodeName_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirOutletNodeName (const SimFlowCompEqmt_FurnaceAirOutletNodeName_type& x)
      {
        this->SimFlowCompEqmt_FurnaceAirOutletNodeName_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirOutletNodeName (const SimFlowCompEqmt_FurnaceAirOutletNodeName_optional& x)
      {
        this->SimFlowCompEqmt_FurnaceAirOutletNodeName_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_FurnaceAirOutletNodeName (::std::auto_ptr< SimFlowCompEqmt_FurnaceAirOutletNodeName_type > x)
      {
        this->SimFlowCompEqmt_FurnaceAirOutletNodeName_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_MaxSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_MaxSupplyAirTemp () const
      {
        return this->SimFlowCompEqmt_MaxSupplyAirTemp_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_MaxSupplyAirTemp_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_MaxSupplyAirTemp ()
      {
        return this->SimFlowCompEqmt_MaxSupplyAirTemp_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_type& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirTemp_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_MaxSupplyAirTemp (const SimFlowCompEqmt_MaxSupplyAirTemp_optional& x)
      {
        this->SimFlowCompEqmt_MaxSupplyAirTemp_ = x;
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation () const
      {
        return this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation ()
      {
        return this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type& x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (const SimFlowCompEqmt_CntllingZoneOrThermostatLocation_optional& x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_CntllingZoneOrThermostatLocation (::std::auto_ptr< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > x)
      {
        this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (x);
      }

      const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupFanObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupFanObjectType () const
      {
        return this->SimFlowCompEqmt_SupFanObjectType_;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::SimFlowCompEqmt_SupFanObjectType_optional& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupFanObjectType ()
      {
        return this->SimFlowCompEqmt_SupFanObjectType_;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_type& x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_.set (x);
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupFanObjectType (const SimFlowCompEqmt_SupFanObjectType_optional& x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_ = x;
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompEqmt_SupFanObjectType (::std::auto_ptr< SimFlowCompEqmt_SupFanObjectType_type > x)
      {
        this->SimFlowCompEqmt_SupFanObjectType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly
      //

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (RefId),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_SupplyAirFlowRate_ (this),
        SimFlowCompEqmt_SupplyFanName_ (this),
        SimFlowCompEqmt_FurnaceAirInletNodeName_ (this),
        SimFlowCompEqmt_FurnaceAirOutletNodeName_ (this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (this),
        SimFlowCompEqmt_SupFanObjectType_ (this)
      {
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly (const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly& x,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (x, f, c),
        SimFlowCompEqmt_AvailSchedName_ (x.SimFlowCompEqmt_AvailSchedName_, f, this),
        SimFlowCompEqmt_HeatingCoilObjType_ (x.SimFlowCompEqmt_HeatingCoilObjType_, f, this),
        SimFlowCompEqmt_HeatingCoilName_ (x.SimFlowCompEqmt_HeatingCoilName_, f, this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_, f, this),
        SimFlowCompEqmt_FanPlacement_ (x.SimFlowCompEqmt_FanPlacement_, f, this),
        SimFlowCompEqmt_SupplyAirFlowRate_ (x.SimFlowCompEqmt_SupplyAirFlowRate_, f, this),
        SimFlowCompEqmt_SupplyFanName_ (x.SimFlowCompEqmt_SupplyFanName_, f, this),
        SimFlowCompEqmt_FurnaceAirInletNodeName_ (x.SimFlowCompEqmt_FurnaceAirInletNodeName_, f, this),
        SimFlowCompEqmt_FurnaceAirOutletNodeName_ (x.SimFlowCompEqmt_FurnaceAirOutletNodeName_, f, this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (x.SimFlowCompEqmt_MaxSupplyAirTemp_, f, this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (x.SimFlowCompEqmt_CntllingZoneOrThermostatLocation_, f, this),
        SimFlowCompEqmt_SupFanObjectType_ (x.SimFlowCompEqmt_SupFanObjectType_, f, this)
      {
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly (const ::xercesc::DOMElement& e,
                                                           ::xml_schema::flags f,
                                                           ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt (e, f | ::xml_schema::flags::base, c),
        SimFlowCompEqmt_AvailSchedName_ (this),
        SimFlowCompEqmt_HeatingCoilObjType_ (this),
        SimFlowCompEqmt_HeatingCoilName_ (this),
        SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ (this),
        SimFlowCompEqmt_FanPlacement_ (this),
        SimFlowCompEqmt_SupplyAirFlowRate_ (this),
        SimFlowCompEqmt_SupplyFanName_ (this),
        SimFlowCompEqmt_FurnaceAirInletNodeName_ (this),
        SimFlowCompEqmt_FurnaceAirOutletNodeName_ (this),
        SimFlowCompEqmt_MaxSupplyAirTemp_ (this),
        SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ (this),
        SimFlowCompEqmt_SupFanObjectType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowCompEqmt_AvailSchedName
          //
          if (n.name () == "SimFlowCompEqmt_AvailSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > r (
              SimFlowCompEqmt_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_AvailSchedName_)
            {
              this->SimFlowCompEqmt_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilObjType
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilObjType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilObjType_type > r (
              SimFlowCompEqmt_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilObjType_)
            {
              this->SimFlowCompEqmt_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_HeatingCoilName
          //
          if (n.name () == "SimFlowCompEqmt_HeatingCoilName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_HeatingCoilName_type > r (
              SimFlowCompEqmt_HeatingCoilName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_HeatingCoilName_)
            {
              this->SimFlowCompEqmt_HeatingCoilName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFanOperatModeSchedName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFanOperatModeSchedName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_type > r (
              SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_)
            {
              this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FanPlacement
          //
          if (n.name () == "SimFlowCompEqmt_FanPlacement" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FanPlacement_type > r (
              SimFlowCompEqmt_FanPlacement_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FanPlacement_)
            {
              this->SimFlowCompEqmt_FanPlacement_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyAirFlowRate
          //
          if (n.name () == "SimFlowCompEqmt_SupplyAirFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_SupplyAirFlowRate_)
            {
              this->SimFlowCompEqmt_SupplyAirFlowRate_.set (SimFlowCompEqmt_SupplyAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_SupplyFanName
          //
          if (n.name () == "SimFlowCompEqmt_SupplyFanName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupplyFanName_type > r (
              SimFlowCompEqmt_SupplyFanName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupplyFanName_)
            {
              this->SimFlowCompEqmt_SupplyFanName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FurnaceAirInletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_FurnaceAirInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FurnaceAirInletNodeName_type > r (
              SimFlowCompEqmt_FurnaceAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FurnaceAirInletNodeName_)
            {
              this->SimFlowCompEqmt_FurnaceAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_FurnaceAirOutletNodeName
          //
          if (n.name () == "SimFlowCompEqmt_FurnaceAirOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_FurnaceAirOutletNodeName_type > r (
              SimFlowCompEqmt_FurnaceAirOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_FurnaceAirOutletNodeName_)
            {
              this->SimFlowCompEqmt_FurnaceAirOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_MaxSupplyAirTemp
          //
          if (n.name () == "SimFlowCompEqmt_MaxSupplyAirTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowCompEqmt_MaxSupplyAirTemp_)
            {
              this->SimFlowCompEqmt_MaxSupplyAirTemp_.set (SimFlowCompEqmt_MaxSupplyAirTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowCompEqmt_CntllingZoneOrThermostatLocation
          //
          if (n.name () == "SimFlowCompEqmt_CntllingZoneOrThermostatLocation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_CntllingZoneOrThermostatLocation_type > r (
              SimFlowCompEqmt_CntllingZoneOrThermostatLocation_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_)
            {
              this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_.set (r);
              continue;
            }
          }

          // SimFlowCompEqmt_SupFanObjectType
          //
          if (n.name () == "SimFlowCompEqmt_SupFanObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowCompEqmt_SupFanObjectType_type > r (
              SimFlowCompEqmt_SupFanObjectType_traits::create (i, f, this));

            if (!this->SimFlowCompEqmt_SupFanObjectType_)
            {
              this->SimFlowCompEqmt_SupFanObjectType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly* SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly (*this, f, c);
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly& SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      operator= (const SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryLoopEqmt& > (*this) = x;
          this->SimFlowCompEqmt_AvailSchedName_ = x.SimFlowCompEqmt_AvailSchedName_;
          this->SimFlowCompEqmt_HeatingCoilObjType_ = x.SimFlowCompEqmt_HeatingCoilObjType_;
          this->SimFlowCompEqmt_HeatingCoilName_ = x.SimFlowCompEqmt_HeatingCoilName_;
          this->SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_ = x.SimFlowCompEqmt_SupplyAirFanOperatModeSchedName_;
          this->SimFlowCompEqmt_FanPlacement_ = x.SimFlowCompEqmt_FanPlacement_;
          this->SimFlowCompEqmt_SupplyAirFlowRate_ = x.SimFlowCompEqmt_SupplyAirFlowRate_;
          this->SimFlowCompEqmt_SupplyFanName_ = x.SimFlowCompEqmt_SupplyFanName_;
          this->SimFlowCompEqmt_FurnaceAirInletNodeName_ = x.SimFlowCompEqmt_FurnaceAirInletNodeName_;
          this->SimFlowCompEqmt_FurnaceAirOutletNodeName_ = x.SimFlowCompEqmt_FurnaceAirOutletNodeName_;
          this->SimFlowCompEqmt_MaxSupplyAirTemp_ = x.SimFlowCompEqmt_MaxSupplyAirTemp_;
          this->SimFlowCompEqmt_CntllingZoneOrThermostatLocation_ = x.SimFlowCompEqmt_CntllingZoneOrThermostatLocation_;
          this->SimFlowCompEqmt_SupFanObjectType_ = x.SimFlowCompEqmt_SupFanObjectType_;
        }

        return *this;
      }

      SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly::
      ~SimFlowCompoundEqmt_UnitaryLoopEqmt_FurnaceHeatOnly ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

