// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimWall_TypicalWall_InteriorStandard.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWall_TypicalWall_InteriorStandard
      // 

      const SimWall_TypicalWall_InteriorStandard::SimWall_ConstructionName_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_ConstructionName () const
      {
        return this->SimWall_ConstructionName_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_ConstructionName_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_ConstructionName ()
      {
        return this->SimWall_ConstructionName_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ConstructionName (const SimWall_ConstructionName_type& x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ConstructionName (const SimWall_ConstructionName_optional& x)
      {
        this->SimWall_ConstructionName_ = x;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ConstructionName (::std::auto_ptr< SimWall_ConstructionName_type > x)
      {
        this->SimWall_ConstructionName_.set (x);
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_ZoneName_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_ZoneName () const
      {
        return this->SimWall_ZoneName_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_ZoneName_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_ZoneName ()
      {
        return this->SimWall_ZoneName_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ZoneName (const SimWall_ZoneName_type& x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ZoneName (const SimWall_ZoneName_optional& x)
      {
        this->SimWall_ZoneName_ = x;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_ZoneName (::std::auto_ptr< SimWall_ZoneName_type > x)
      {
        this->SimWall_ZoneName_.set (x);
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_OutsdBndCondObject_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_OutsdBndCondObject () const
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_OutsdBndCondObject_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_OutsdBndCondObject ()
      {
        return this->SimWall_OutsdBndCondObject_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_type& x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_OutsdBndCondObject (const SimWall_OutsdBndCondObject_optional& x)
      {
        this->SimWall_OutsdBndCondObject_ = x;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_OutsdBndCondObject (::std::auto_ptr< SimWall_OutsdBndCondObject_type > x)
      {
        this->SimWall_OutsdBndCondObject_.set (x);
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_AzimuthAng_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_AzimuthAng () const
      {
        return this->SimWall_AzimuthAng_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_AzimuthAng_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_AzimuthAng ()
      {
        return this->SimWall_AzimuthAng_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_AzimuthAng (const SimWall_AzimuthAng_type& x)
      {
        this->SimWall_AzimuthAng_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_AzimuthAng (const SimWall_AzimuthAng_optional& x)
      {
        this->SimWall_AzimuthAng_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_TiltAng_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_TiltAng () const
      {
        return this->SimWall_TiltAng_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_TiltAng_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_TiltAng ()
      {
        return this->SimWall_TiltAng_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_TiltAng (const SimWall_TiltAng_type& x)
      {
        this->SimWall_TiltAng_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_TiltAng (const SimWall_TiltAng_optional& x)
      {
        this->SimWall_TiltAng_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_StartXCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartXCoord () const
      {
        return this->SimWall_StartXCoord_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_StartXCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartXCoord ()
      {
        return this->SimWall_StartXCoord_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartXCoord (const SimWall_StartXCoord_type& x)
      {
        this->SimWall_StartXCoord_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartXCoord (const SimWall_StartXCoord_optional& x)
      {
        this->SimWall_StartXCoord_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_StartYCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartYCoord () const
      {
        return this->SimWall_StartYCoord_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_StartYCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartYCoord ()
      {
        return this->SimWall_StartYCoord_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartYCoord (const SimWall_StartYCoord_type& x)
      {
        this->SimWall_StartYCoord_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartYCoord (const SimWall_StartYCoord_optional& x)
      {
        this->SimWall_StartYCoord_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_StartZCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartZCoord () const
      {
        return this->SimWall_StartZCoord_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_StartZCoord_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_StartZCoord ()
      {
        return this->SimWall_StartZCoord_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartZCoord (const SimWall_StartZCoord_type& x)
      {
        this->SimWall_StartZCoord_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_StartZCoord (const SimWall_StartZCoord_optional& x)
      {
        this->SimWall_StartZCoord_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_Length_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_Length () const
      {
        return this->SimWall_Length_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_Length_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_Length ()
      {
        return this->SimWall_Length_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_Length (const SimWall_Length_type& x)
      {
        this->SimWall_Length_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_Length (const SimWall_Length_optional& x)
      {
        this->SimWall_Length_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SimWall_Ht_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_Ht () const
      {
        return this->SimWall_Ht_;
      }

      SimWall_TypicalWall_InteriorStandard::SimWall_Ht_optional& SimWall_TypicalWall_InteriorStandard::
      SimWall_Ht ()
      {
        return this->SimWall_Ht_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_Ht (const SimWall_Ht_type& x)
      {
        this->SimWall_Ht_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SimWall_Ht (const SimWall_Ht_optional& x)
      {
        this->SimWall_Ht_ = x;
      }

      const SimWall_TypicalWall_InteriorStandard::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_TypicalWall_InteriorStandard::
      SurfProp_HeatTransAlg_MultSurf_SurfType () const
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      SimWall_TypicalWall_InteriorStandard::SurfProp_HeatTransAlg_MultSurf_SurfType_optional& SimWall_TypicalWall_InteriorStandard::
      SurfProp_HeatTransAlg_MultSurf_SurfType ()
      {
        return this->SurfProp_HeatTransAlg_MultSurf_SurfType_;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_type& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }

      void SimWall_TypicalWall_InteriorStandard::
      SurfProp_HeatTransAlg_MultSurf_SurfType (const SurfProp_HeatTransAlg_MultSurf_SurfType_optional& x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x;
      }

      void SimWall_TypicalWall_InteriorStandard::
      SurfProp_HeatTransAlg_MultSurf_SurfType (::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > x)
      {
        this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimWall_TypicalWall_InteriorStandard
      //

      SimWall_TypicalWall_InteriorStandard::
      SimWall_TypicalWall_InteriorStandard (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (RefId),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_AzimuthAng_ (this),
        SimWall_TiltAng_ (this),
        SimWall_StartXCoord_ (this),
        SimWall_StartYCoord_ (this),
        SimWall_StartZCoord_ (this),
        SimWall_Length_ (this),
        SimWall_Ht_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this)
      {
      }

      SimWall_TypicalWall_InteriorStandard::
      SimWall_TypicalWall_InteriorStandard (const SimWall_TypicalWall_InteriorStandard& x,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (x, f, c),
        SimWall_ConstructionName_ (x.SimWall_ConstructionName_, f, this),
        SimWall_ZoneName_ (x.SimWall_ZoneName_, f, this),
        SimWall_OutsdBndCondObject_ (x.SimWall_OutsdBndCondObject_, f, this),
        SimWall_AzimuthAng_ (x.SimWall_AzimuthAng_, f, this),
        SimWall_TiltAng_ (x.SimWall_TiltAng_, f, this),
        SimWall_StartXCoord_ (x.SimWall_StartXCoord_, f, this),
        SimWall_StartYCoord_ (x.SimWall_StartYCoord_, f, this),
        SimWall_StartZCoord_ (x.SimWall_StartZCoord_, f, this),
        SimWall_Length_ (x.SimWall_Length_, f, this),
        SimWall_Ht_ (x.SimWall_Ht_, f, this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (x.SurfProp_HeatTransAlg_MultSurf_SurfType_, f, this)
      {
      }

      SimWall_TypicalWall_InteriorStandard::
      SimWall_TypicalWall_InteriorStandard (const ::xercesc::DOMElement& e,
                                            ::xml_schema::flags f,
                                            ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimWall_TypicalWall (e, f | ::xml_schema::flags::base, c),
        SimWall_ConstructionName_ (this),
        SimWall_ZoneName_ (this),
        SimWall_OutsdBndCondObject_ (this),
        SimWall_AzimuthAng_ (this),
        SimWall_TiltAng_ (this),
        SimWall_StartXCoord_ (this),
        SimWall_StartYCoord_ (this),
        SimWall_StartZCoord_ (this),
        SimWall_Length_ (this),
        SimWall_Ht_ (this),
        SurfProp_HeatTransAlg_MultSurf_SurfType_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimWall_TypicalWall_InteriorStandard::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimWall_TypicalWall::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimWall_ConstructionName
          //
          if (n.name () == "SimWall_ConstructionName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ConstructionName_type > r (
              SimWall_ConstructionName_traits::create (i, f, this));

            if (!this->SimWall_ConstructionName_)
            {
              this->SimWall_ConstructionName_.set (r);
              continue;
            }
          }

          // SimWall_ZoneName
          //
          if (n.name () == "SimWall_ZoneName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_ZoneName_type > r (
              SimWall_ZoneName_traits::create (i, f, this));

            if (!this->SimWall_ZoneName_)
            {
              this->SimWall_ZoneName_.set (r);
              continue;
            }
          }

          // SimWall_OutsdBndCondObject
          //
          if (n.name () == "SimWall_OutsdBndCondObject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimWall_OutsdBndCondObject_type > r (
              SimWall_OutsdBndCondObject_traits::create (i, f, this));

            if (!this->SimWall_OutsdBndCondObject_)
            {
              this->SimWall_OutsdBndCondObject_.set (r);
              continue;
            }
          }

          // SimWall_AzimuthAng
          //
          if (n.name () == "SimWall_AzimuthAng" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_AzimuthAng_)
            {
              this->SimWall_AzimuthAng_.set (SimWall_AzimuthAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_TiltAng
          //
          if (n.name () == "SimWall_TiltAng" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_TiltAng_)
            {
              this->SimWall_TiltAng_.set (SimWall_TiltAng_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartXCoord
          //
          if (n.name () == "SimWall_StartXCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_StartXCoord_)
            {
              this->SimWall_StartXCoord_.set (SimWall_StartXCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartYCoord
          //
          if (n.name () == "SimWall_StartYCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_StartYCoord_)
            {
              this->SimWall_StartYCoord_.set (SimWall_StartYCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_StartZCoord
          //
          if (n.name () == "SimWall_StartZCoord" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_StartZCoord_)
            {
              this->SimWall_StartZCoord_.set (SimWall_StartZCoord_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_Length
          //
          if (n.name () == "SimWall_Length" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_Length_)
            {
              this->SimWall_Length_.set (SimWall_Length_traits::create (i, f, this));
              continue;
            }
          }

          // SimWall_Ht
          //
          if (n.name () == "SimWall_Ht" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimWall_Ht_)
            {
              this->SimWall_Ht_.set (SimWall_Ht_traits::create (i, f, this));
              continue;
            }
          }

          // SurfProp_HeatTransAlg_MultSurf_SurfType
          //
          if (n.name () == "SurfProp_HeatTransAlg_MultSurf_SurfType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SurfProp_HeatTransAlg_MultSurf_SurfType_type > r (
              SurfProp_HeatTransAlg_MultSurf_SurfType_traits::create (i, f, this));

            if (!this->SurfProp_HeatTransAlg_MultSurf_SurfType_)
            {
              this->SurfProp_HeatTransAlg_MultSurf_SurfType_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimWall_TypicalWall_InteriorStandard* SimWall_TypicalWall_InteriorStandard::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimWall_TypicalWall_InteriorStandard (*this, f, c);
      }

      SimWall_TypicalWall_InteriorStandard& SimWall_TypicalWall_InteriorStandard::
      operator= (const SimWall_TypicalWall_InteriorStandard& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimWall_TypicalWall& > (*this) = x;
          this->SimWall_ConstructionName_ = x.SimWall_ConstructionName_;
          this->SimWall_ZoneName_ = x.SimWall_ZoneName_;
          this->SimWall_OutsdBndCondObject_ = x.SimWall_OutsdBndCondObject_;
          this->SimWall_AzimuthAng_ = x.SimWall_AzimuthAng_;
          this->SimWall_TiltAng_ = x.SimWall_TiltAng_;
          this->SimWall_StartXCoord_ = x.SimWall_StartXCoord_;
          this->SimWall_StartYCoord_ = x.SimWall_StartYCoord_;
          this->SimWall_StartZCoord_ = x.SimWall_StartZCoord_;
          this->SimWall_Length_ = x.SimWall_Length_;
          this->SimWall_Ht_ = x.SimWall_Ht_;
          this->SurfProp_HeatTransAlg_MultSurf_SurfType_ = x.SurfProp_HeatTransAlg_MultSurf_SurfType_;
        }

        return *this;
      }

      SimWall_TypicalWall_InteriorStandard::
      ~SimWall_TypicalWall_InteriorStandard ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

