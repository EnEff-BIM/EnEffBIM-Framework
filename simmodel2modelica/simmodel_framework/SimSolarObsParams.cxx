// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSolarObsParams.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSolarObsParams
      // 

      const SimSolarObsParams::SolarObstructionType_optional& SimSolarObsParams::
      SolarObstructionType () const
      {
        return this->SolarObstructionType_;
      }

      SimSolarObsParams::SolarObstructionType_optional& SimSolarObsParams::
      SolarObstructionType ()
      {
        return this->SolarObstructionType_;
      }

      void SimSolarObsParams::
      SolarObstructionType (const SolarObstructionType_type& x)
      {
        this->SolarObstructionType_.set (x);
      }

      void SimSolarObsParams::
      SolarObstructionType (const SolarObstructionType_optional& x)
      {
        this->SolarObstructionType_ = x;
      }

      void SimSolarObsParams::
      SolarObstructionType (::std::auto_ptr< SolarObstructionType_type > x)
      {
        this->SolarObstructionType_.set (x);
      }

      const SimSolarObsParams::SolarObstructionShape_optional& SimSolarObsParams::
      SolarObstructionShape () const
      {
        return this->SolarObstructionShape_;
      }

      SimSolarObsParams::SolarObstructionShape_optional& SimSolarObsParams::
      SolarObstructionShape ()
      {
        return this->SolarObstructionShape_;
      }

      void SimSolarObsParams::
      SolarObstructionShape (const SolarObstructionShape_type& x)
      {
        this->SolarObstructionShape_.set (x);
      }

      void SimSolarObsParams::
      SolarObstructionShape (const SolarObstructionShape_optional& x)
      {
        this->SolarObstructionShape_ = x;
      }

      void SimSolarObsParams::
      SolarObstructionShape (::std::auto_ptr< SolarObstructionShape_type > x)
      {
        this->SolarObstructionShape_.set (x);
      }

      const SimSolarObsParams::X1Dim_optional& SimSolarObsParams::
      X1Dim () const
      {
        return this->X1Dim_;
      }

      SimSolarObsParams::X1Dim_optional& SimSolarObsParams::
      X1Dim ()
      {
        return this->X1Dim_;
      }

      void SimSolarObsParams::
      X1Dim (const X1Dim_type& x)
      {
        this->X1Dim_.set (x);
      }

      void SimSolarObsParams::
      X1Dim (const X1Dim_optional& x)
      {
        this->X1Dim_ = x;
      }

      const SimSolarObsParams::X2Dim_optional& SimSolarObsParams::
      X2Dim () const
      {
        return this->X2Dim_;
      }

      SimSolarObsParams::X2Dim_optional& SimSolarObsParams::
      X2Dim ()
      {
        return this->X2Dim_;
      }

      void SimSolarObsParams::
      X2Dim (const X2Dim_type& x)
      {
        this->X2Dim_.set (x);
      }

      void SimSolarObsParams::
      X2Dim (const X2Dim_optional& x)
      {
        this->X2Dim_ = x;
      }

      const SimSolarObsParams::X3Dim_optional& SimSolarObsParams::
      X3Dim () const
      {
        return this->X3Dim_;
      }

      SimSolarObsParams::X3Dim_optional& SimSolarObsParams::
      X3Dim ()
      {
        return this->X3Dim_;
      }

      void SimSolarObsParams::
      X3Dim (const X3Dim_type& x)
      {
        this->X3Dim_.set (x);
      }

      void SimSolarObsParams::
      X3Dim (const X3Dim_optional& x)
      {
        this->X3Dim_ = x;
      }

      const SimSolarObsParams::Y1Dim_optional& SimSolarObsParams::
      Y1Dim () const
      {
        return this->Y1Dim_;
      }

      SimSolarObsParams::Y1Dim_optional& SimSolarObsParams::
      Y1Dim ()
      {
        return this->Y1Dim_;
      }

      void SimSolarObsParams::
      Y1Dim (const Y1Dim_type& x)
      {
        this->Y1Dim_.set (x);
      }

      void SimSolarObsParams::
      Y1Dim (const Y1Dim_optional& x)
      {
        this->Y1Dim_ = x;
      }

      const SimSolarObsParams::Y2Dim_optional& SimSolarObsParams::
      Y2Dim () const
      {
        return this->Y2Dim_;
      }

      SimSolarObsParams::Y2Dim_optional& SimSolarObsParams::
      Y2Dim ()
      {
        return this->Y2Dim_;
      }

      void SimSolarObsParams::
      Y2Dim (const Y2Dim_type& x)
      {
        this->Y2Dim_.set (x);
      }

      void SimSolarObsParams::
      Y2Dim (const Y2Dim_optional& x)
      {
        this->Y2Dim_ = x;
      }

      const SimSolarObsParams::Y3Dim_optional& SimSolarObsParams::
      Y3Dim () const
      {
        return this->Y3Dim_;
      }

      SimSolarObsParams::Y3Dim_optional& SimSolarObsParams::
      Y3Dim ()
      {
        return this->Y3Dim_;
      }

      void SimSolarObsParams::
      Y3Dim (const Y3Dim_type& x)
      {
        this->Y3Dim_.set (x);
      }

      void SimSolarObsParams::
      Y3Dim (const Y3Dim_optional& x)
      {
        this->Y3Dim_ = x;
      }

      const SimSolarObsParams::BaseElevation_optional& SimSolarObsParams::
      BaseElevation () const
      {
        return this->BaseElevation_;
      }

      SimSolarObsParams::BaseElevation_optional& SimSolarObsParams::
      BaseElevation ()
      {
        return this->BaseElevation_;
      }

      void SimSolarObsParams::
      BaseElevation (const BaseElevation_type& x)
      {
        this->BaseElevation_.set (x);
      }

      void SimSolarObsParams::
      BaseElevation (const BaseElevation_optional& x)
      {
        this->BaseElevation_ = x;
      }

      const SimSolarObsParams::Height_optional& SimSolarObsParams::
      Height () const
      {
        return this->Height_;
      }

      SimSolarObsParams::Height_optional& SimSolarObsParams::
      Height ()
      {
        return this->Height_;
      }

      void SimSolarObsParams::
      Height (const Height_type& x)
      {
        this->Height_.set (x);
      }

      void SimSolarObsParams::
      Height (const Height_optional& x)
      {
        this->Height_ = x;
      }

      const SimSolarObsParams::ProfilePath_optional& SimSolarObsParams::
      ProfilePath () const
      {
        return this->ProfilePath_;
      }

      SimSolarObsParams::ProfilePath_optional& SimSolarObsParams::
      ProfilePath ()
      {
        return this->ProfilePath_;
      }

      void SimSolarObsParams::
      ProfilePath (const ProfilePath_type& x)
      {
        this->ProfilePath_.set (x);
      }

      void SimSolarObsParams::
      ProfilePath (const ProfilePath_optional& x)
      {
        this->ProfilePath_ = x;
      }

      void SimSolarObsParams::
      ProfilePath (::std::auto_ptr< ProfilePath_type > x)
      {
        this->ProfilePath_.set (x);
      }

      const SimSolarObsParams::VoidProfilePaths_optional& SimSolarObsParams::
      VoidProfilePaths () const
      {
        return this->VoidProfilePaths_;
      }

      SimSolarObsParams::VoidProfilePaths_optional& SimSolarObsParams::
      VoidProfilePaths ()
      {
        return this->VoidProfilePaths_;
      }

      void SimSolarObsParams::
      VoidProfilePaths (const VoidProfilePaths_type& x)
      {
        this->VoidProfilePaths_.set (x);
      }

      void SimSolarObsParams::
      VoidProfilePaths (const VoidProfilePaths_optional& x)
      {
        this->VoidProfilePaths_ = x;
      }

      void SimSolarObsParams::
      VoidProfilePaths (::std::auto_ptr< VoidProfilePaths_type > x)
      {
        this->VoidProfilePaths_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSolarObsParams
      //

      SimSolarObsParams::
      SimSolarObsParams (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (RefId),
        SolarObstructionType_ (this),
        SolarObstructionShape_ (this),
        X1Dim_ (this),
        X2Dim_ (this),
        X3Dim_ (this),
        Y1Dim_ (this),
        Y2Dim_ (this),
        Y3Dim_ (this),
        BaseElevation_ (this),
        Height_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
      }

      SimSolarObsParams::
      SimSolarObsParams (const SimSolarObsParams& x,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (x, f, c),
        SolarObstructionType_ (x.SolarObstructionType_, f, this),
        SolarObstructionShape_ (x.SolarObstructionShape_, f, this),
        X1Dim_ (x.X1Dim_, f, this),
        X2Dim_ (x.X2Dim_, f, this),
        X3Dim_ (x.X3Dim_, f, this),
        Y1Dim_ (x.Y1Dim_, f, this),
        Y2Dim_ (x.Y2Dim_, f, this),
        Y3Dim_ (x.Y3Dim_, f, this),
        BaseElevation_ (x.BaseElevation_, f, this),
        Height_ (x.Height_, f, this),
        ProfilePath_ (x.ProfilePath_, f, this),
        VoidProfilePaths_ (x.VoidProfilePaths_, f, this)
      {
      }

      SimSolarObsParams::
      SimSolarObsParams (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f,
                         ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams (e, f | ::xml_schema::flags::base, c),
        SolarObstructionType_ (this),
        SolarObstructionShape_ (this),
        X1Dim_ (this),
        X2Dim_ (this),
        X3Dim_ (this),
        Y1Dim_ (this),
        Y2Dim_ (this),
        Y3Dim_ (this),
        BaseElevation_ (this),
        Height_ (this),
        ProfilePath_ (this),
        VoidProfilePaths_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSolarObsParams::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimBldgModelParams::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SolarObstructionType
          //
          if (n.name () == "SolarObstructionType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SolarObstructionType_type > r (
              SolarObstructionType_traits::create (i, f, this));

            if (!this->SolarObstructionType_)
            {
              this->SolarObstructionType_.set (r);
              continue;
            }
          }

          // SolarObstructionShape
          //
          if (n.name () == "SolarObstructionShape" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< SolarObstructionShape_type > r (
              SolarObstructionShape_traits::create (i, f, this));

            if (!this->SolarObstructionShape_)
            {
              this->SolarObstructionShape_.set (r);
              continue;
            }
          }

          // X1Dim
          //
          if (n.name () == "X1Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->X1Dim_)
            {
              this->X1Dim_.set (X1Dim_traits::create (i, f, this));
              continue;
            }
          }

          // X2Dim
          //
          if (n.name () == "X2Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->X2Dim_)
            {
              this->X2Dim_.set (X2Dim_traits::create (i, f, this));
              continue;
            }
          }

          // X3Dim
          //
          if (n.name () == "X3Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->X3Dim_)
            {
              this->X3Dim_.set (X3Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y1Dim
          //
          if (n.name () == "Y1Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Y1Dim_)
            {
              this->Y1Dim_.set (Y1Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y2Dim
          //
          if (n.name () == "Y2Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Y2Dim_)
            {
              this->Y2Dim_.set (Y2Dim_traits::create (i, f, this));
              continue;
            }
          }

          // Y3Dim
          //
          if (n.name () == "Y3Dim" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Y3Dim_)
            {
              this->Y3Dim_.set (Y3Dim_traits::create (i, f, this));
              continue;
            }
          }

          // BaseElevation
          //
          if (n.name () == "BaseElevation" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->BaseElevation_)
            {
              this->BaseElevation_.set (BaseElevation_traits::create (i, f, this));
              continue;
            }
          }

          // Height
          //
          if (n.name () == "Height" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->Height_)
            {
              this->Height_.set (Height_traits::create (i, f, this));
              continue;
            }
          }

          // ProfilePath
          //
          if (n.name () == "ProfilePath" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ProfilePath_type > r (
              ProfilePath_traits::create (i, f, this));

            if (!this->ProfilePath_)
            {
              this->ProfilePath_.set (r);
              continue;
            }
          }

          // VoidProfilePaths
          //
          if (n.name () == "VoidProfilePaths" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< VoidProfilePaths_type > r (
              VoidProfilePaths_traits::create (i, f, this));

            if (!this->VoidProfilePaths_)
            {
              this->VoidProfilePaths_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSolarObsParams* SimSolarObsParams::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSolarObsParams (*this, f, c);
      }

      SimSolarObsParams& SimSolarObsParams::
      operator= (const SimSolarObsParams& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimBldgModelParams& > (*this) = x;
          this->SolarObstructionType_ = x.SolarObstructionType_;
          this->SolarObstructionShape_ = x.SolarObstructionShape_;
          this->X1Dim_ = x.X1Dim_;
          this->X2Dim_ = x.X2Dim_;
          this->X3Dim_ = x.X3Dim_;
          this->Y1Dim_ = x.Y1Dim_;
          this->Y2Dim_ = x.Y2Dim_;
          this->Y3Dim_ = x.Y3Dim_;
          this->BaseElevation_ = x.BaseElevation_;
          this->Height_ = x.Height_;
          this->ProfilePath_ = x.ProfilePath_;
          this->VoidProfilePaths_ = x.VoidProfilePaths_;
        }

        return *this;
      }

      SimSolarObsParams::
      ~SimSolarObsParams ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

