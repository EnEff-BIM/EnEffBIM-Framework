// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage
      // 

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ICSCollectorType () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ICSCollectorType ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ICSCollectorType (const SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ICSCollectorType (const SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_ = x;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ICSCollectorType (::std::auto_ptr< SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_type > x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_.set (x);
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_GrossArea_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_GrossArea () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_GrossArea_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_GrossArea_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_GrossArea ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_GrossArea_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_GrossArea (const SolarCollectorPerf_IntegralCollectSto_GrossArea_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_GrossArea_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_GrossArea (const SolarCollectorPerf_IntegralCollectSto_GrossArea_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_GrossArea_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume (const SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume (const SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance (const SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance (const SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance (const SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance (const SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_AspectRatio_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AspectRatio () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_AspectRatio_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AspectRatio ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AspectRatio (const SolarCollectorPerf_IntegralCollectSto_AspectRatio_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AspectRatio (const SolarCollectorPerf_IntegralCollectSto_AspectRatio_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight (const SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight (const SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_NumberofCovers_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_NumberofCovers () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_NumberofCovers_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_NumberofCovers ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_NumberofCovers (const SolarCollectorPerf_IntegralCollectSto_NumberofCovers_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_NumberofCovers (const SolarCollectorPerf_IntegralCollectSto_NumberofCovers_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CoverSpacing_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CoverSpacing () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_CoverSpacing_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CoverSpacing ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CoverSpacing (const SolarCollectorPerf_IntegralCollectSto_CoverSpacing_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_CoverSpacing (const SolarCollectorPerf_IntegralCollectSto_CoverSpacing_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover (const SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover (const SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover (const SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover (const SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover (const SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover (const SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover (const SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover (const SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover (const SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover (const SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover (const SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover (const SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_ = x;
      }

      const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate () const
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_optional& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate ()
      {
        return this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_;
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_type& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_.set (x);
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate (const SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_optional& x)
      {
        this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage
      //

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (RefId),
        SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_ (this),
        SolarCollectorPerf_IntegralCollectSto_GrossArea_ (this),
        SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_ (this),
        SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_ (this),
        SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_ (this),
        SolarCollectorPerf_IntegralCollectSto_AspectRatio_ (this),
        SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_ (this),
        SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_ (this),
        SolarCollectorPerf_IntegralCollectSto_NumberofCovers_ (this),
        SolarCollectorPerf_IntegralCollectSto_CoverSpacing_ (this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_ (this)
      {
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage (const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage& x,
                                                                                  ::xml_schema::flags f,
                                                                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (x, f, c),
        SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_ (x.SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_, f, this),
        SolarCollectorPerf_IntegralCollectSto_GrossArea_ (x.SolarCollectorPerf_IntegralCollectSto_GrossArea_, f, this),
        SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_ (x.SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_, f, this),
        SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_ (x.SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_, f, this),
        SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_ (x.SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_, f, this),
        SolarCollectorPerf_IntegralCollectSto_AspectRatio_ (x.SolarCollectorPerf_IntegralCollectSto_AspectRatio_, f, this),
        SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_ (x.SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_, f, this),
        SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_ (x.SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_, f, this),
        SolarCollectorPerf_IntegralCollectSto_NumberofCovers_ (x.SolarCollectorPerf_IntegralCollectSto_NumberofCovers_, f, this),
        SolarCollectorPerf_IntegralCollectSto_CoverSpacing_ (x.SolarCollectorPerf_IntegralCollectSto_CoverSpacing_, f, this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_ (x.SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_ (x.SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_ (x.SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_ (x.SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_ (x.SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_ (x.SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_, f, this),
        SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_ (x.SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_, f, this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_ (x.SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_, f, this)
      {
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage (const ::xercesc::DOMElement& e,
                                                                                  ::xml_schema::flags f,
                                                                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice (e, f | ::xml_schema::flags::base, c),
        SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_ (this),
        SolarCollectorPerf_IntegralCollectSto_GrossArea_ (this),
        SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_ (this),
        SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_ (this),
        SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_ (this),
        SolarCollectorPerf_IntegralCollectSto_AspectRatio_ (this),
        SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_ (this),
        SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_ (this),
        SolarCollectorPerf_IntegralCollectSto_NumberofCovers_ (this),
        SolarCollectorPerf_IntegralCollectSto_CoverSpacing_ (this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_ (this),
        SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_ (this),
        SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SolarCollectorPerf_IntegralCollectSto_ICSCollectorType
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_ICSCollectorType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_type > r (
              SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_traits::create (i, f, this));

            if (!this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_.set (r);
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_GrossArea
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_GrossArea" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_GrossArea_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_GrossArea_.set (SolarCollectorPerf_IntegralCollectSto_GrossArea_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_.set (SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_.set (SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_.set (SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_AspectRatio
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_AspectRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_.set (SolarCollectorPerf_IntegralCollectSto_AspectRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_.set (SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_.set (SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_NumberofCovers
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_NumberofCovers" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_.set (SolarCollectorPerf_IntegralCollectSto_NumberofCovers_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_CoverSpacing
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_CoverSpacing" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_.set (SolarCollectorPerf_IntegralCollectSto_CoverSpacing_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_.set (SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_.set (SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_.set (SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_.set (SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_.set (SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_.set (SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_.set (SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_traits::create (i, f, this));
              continue;
            }
          }

          // SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate
          //
          if (n.name () == "SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_)
            {
              this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_.set (SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage* SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage (*this, f, c);
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage& SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      operator= (const SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant_SolarDevice& > (*this) = x;
          this->SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_ = x.SolarCollectorPerf_IntegralCollectSto_ICSCollectorType_;
          this->SolarCollectorPerf_IntegralCollectSto_GrossArea_ = x.SolarCollectorPerf_IntegralCollectSto_GrossArea_;
          this->SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_ = x.SolarCollectorPerf_IntegralCollectSto_CollectorWaterVolume_;
          this->SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_ = x.SolarCollectorPerf_IntegralCollectSto_BottomHeatLossConductance_;
          this->SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_ = x.SolarCollectorPerf_IntegralCollectSto_SideHeatLossConductance_;
          this->SolarCollectorPerf_IntegralCollectSto_AspectRatio_ = x.SolarCollectorPerf_IntegralCollectSto_AspectRatio_;
          this->SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_ = x.SolarCollectorPerf_IntegralCollectSto_CollectorSideHeight_;
          this->SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_ = x.SolarCollectorPerf_IntegralCollectSto_ThermalMassofAbsorberPlate_;
          this->SolarCollectorPerf_IntegralCollectSto_NumberofCovers_ = x.SolarCollectorPerf_IntegralCollectSto_NumberofCovers_;
          this->SolarCollectorPerf_IntegralCollectSto_CoverSpacing_ = x.SolarCollectorPerf_IntegralCollectSto_CoverSpacing_;
          this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_ = x.SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofOuterCover_;
          this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_ = x.SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessofOuterCover_;
          this->SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_ = x.SolarCollectorPerf_IntegralCollectSto_EmissivityofOuterCover_;
          this->SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_ = x.SolarCollectorPerf_IntegralCollectSto_RefractiveIndexofInnerCover_;
          this->SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_ = x.SolarCollectorPerf_IntegralCollectSto_ExtinctionCoefficientTimesThicknessoftheinnerCover_;
          this->SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_ = x.SolarCollectorPerf_IntegralCollectSto_EmmissivityOfInnerCover_;
          this->SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_ = x.SolarCollectorPerf_IntegralCollectSto_AbsorptanceOfAbsorberPlate_;
          this->SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_ = x.SolarCollectorPerf_IntegralCollectSto_EmissivityOfAbsorberPlate_;
        }

        return *this;
      }

      SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage::
      ~SimFlowPlant_SolarDevice_SolarCollectorPerformanceIntegralCollectorStorage ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

