// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimAppObjNameDefault.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimAppObjNameDefault
      // 

      const SimAppObjNameDefault::DefaultForObjectType_optional& SimAppObjNameDefault::
      DefaultForObjectType () const
      {
        return this->DefaultForObjectType_;
      }

      SimAppObjNameDefault::DefaultForObjectType_optional& SimAppObjNameDefault::
      DefaultForObjectType ()
      {
        return this->DefaultForObjectType_;
      }

      void SimAppObjNameDefault::
      DefaultForObjectType (const DefaultForObjectType_type& x)
      {
        this->DefaultForObjectType_.set (x);
      }

      void SimAppObjNameDefault::
      DefaultForObjectType (const DefaultForObjectType_optional& x)
      {
        this->DefaultForObjectType_ = x;
      }

      void SimAppObjNameDefault::
      DefaultForObjectType (::std::auto_ptr< DefaultForObjectType_type > x)
      {
        this->DefaultForObjectType_.set (x);
      }

      const SimAppObjNameDefault::NameString1_optional& SimAppObjNameDefault::
      NameString1 () const
      {
        return this->NameString1_;
      }

      SimAppObjNameDefault::NameString1_optional& SimAppObjNameDefault::
      NameString1 ()
      {
        return this->NameString1_;
      }

      void SimAppObjNameDefault::
      NameString1 (const NameString1_type& x)
      {
        this->NameString1_.set (x);
      }

      void SimAppObjNameDefault::
      NameString1 (const NameString1_optional& x)
      {
        this->NameString1_ = x;
      }

      void SimAppObjNameDefault::
      NameString1 (::std::auto_ptr< NameString1_type > x)
      {
        this->NameString1_.set (x);
      }

      const SimAppObjNameDefault::NameString2_optional& SimAppObjNameDefault::
      NameString2 () const
      {
        return this->NameString2_;
      }

      SimAppObjNameDefault::NameString2_optional& SimAppObjNameDefault::
      NameString2 ()
      {
        return this->NameString2_;
      }

      void SimAppObjNameDefault::
      NameString2 (const NameString2_type& x)
      {
        this->NameString2_.set (x);
      }

      void SimAppObjNameDefault::
      NameString2 (const NameString2_optional& x)
      {
        this->NameString2_ = x;
      }

      void SimAppObjNameDefault::
      NameString2 (::std::auto_ptr< NameString2_type > x)
      {
        this->NameString2_.set (x);
      }

      const SimAppObjNameDefault::IndexType1_optional& SimAppObjNameDefault::
      IndexType1 () const
      {
        return this->IndexType1_;
      }

      SimAppObjNameDefault::IndexType1_optional& SimAppObjNameDefault::
      IndexType1 ()
      {
        return this->IndexType1_;
      }

      void SimAppObjNameDefault::
      IndexType1 (const IndexType1_type& x)
      {
        this->IndexType1_.set (x);
      }

      void SimAppObjNameDefault::
      IndexType1 (const IndexType1_optional& x)
      {
        this->IndexType1_ = x;
      }

      void SimAppObjNameDefault::
      IndexType1 (::std::auto_ptr< IndexType1_type > x)
      {
        this->IndexType1_.set (x);
      }

      const SimAppObjNameDefault::IndexType2_optional& SimAppObjNameDefault::
      IndexType2 () const
      {
        return this->IndexType2_;
      }

      SimAppObjNameDefault::IndexType2_optional& SimAppObjNameDefault::
      IndexType2 ()
      {
        return this->IndexType2_;
      }

      void SimAppObjNameDefault::
      IndexType2 (const IndexType2_type& x)
      {
        this->IndexType2_.set (x);
      }

      void SimAppObjNameDefault::
      IndexType2 (const IndexType2_optional& x)
      {
        this->IndexType2_ = x;
      }

      void SimAppObjNameDefault::
      IndexType2 (::std::auto_ptr< IndexType2_type > x)
      {
        this->IndexType2_.set (x);
      }

      const SimAppObjNameDefault::LastUsedIndex1_optional& SimAppObjNameDefault::
      LastUsedIndex1 () const
      {
        return this->LastUsedIndex1_;
      }

      SimAppObjNameDefault::LastUsedIndex1_optional& SimAppObjNameDefault::
      LastUsedIndex1 ()
      {
        return this->LastUsedIndex1_;
      }

      void SimAppObjNameDefault::
      LastUsedIndex1 (const LastUsedIndex1_type& x)
      {
        this->LastUsedIndex1_.set (x);
      }

      void SimAppObjNameDefault::
      LastUsedIndex1 (const LastUsedIndex1_optional& x)
      {
        this->LastUsedIndex1_ = x;
      }

      void SimAppObjNameDefault::
      LastUsedIndex1 (::std::auto_ptr< LastUsedIndex1_type > x)
      {
        this->LastUsedIndex1_.set (x);
      }

      const SimAppObjNameDefault::LastUsedIndex2_optional& SimAppObjNameDefault::
      LastUsedIndex2 () const
      {
        return this->LastUsedIndex2_;
      }

      SimAppObjNameDefault::LastUsedIndex2_optional& SimAppObjNameDefault::
      LastUsedIndex2 ()
      {
        return this->LastUsedIndex2_;
      }

      void SimAppObjNameDefault::
      LastUsedIndex2 (const LastUsedIndex2_type& x)
      {
        this->LastUsedIndex2_.set (x);
      }

      void SimAppObjNameDefault::
      LastUsedIndex2 (const LastUsedIndex2_optional& x)
      {
        this->LastUsedIndex2_ = x;
      }

      void SimAppObjNameDefault::
      LastUsedIndex2 (::std::auto_ptr< LastUsedIndex2_type > x)
      {
        this->LastUsedIndex2_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimAppObjNameDefault
      //

      SimAppObjNameDefault::
      SimAppObjNameDefault (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimAppDefault (RefId),
        DefaultForObjectType_ (this),
        NameString1_ (this),
        NameString2_ (this),
        IndexType1_ (this),
        IndexType2_ (this),
        LastUsedIndex1_ (this),
        LastUsedIndex2_ (this)
      {
      }

      SimAppObjNameDefault::
      SimAppObjNameDefault (const SimAppObjNameDefault& x,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimAppDefault (x, f, c),
        DefaultForObjectType_ (x.DefaultForObjectType_, f, this),
        NameString1_ (x.NameString1_, f, this),
        NameString2_ (x.NameString2_, f, this),
        IndexType1_ (x.IndexType1_, f, this),
        IndexType2_ (x.IndexType2_, f, this),
        LastUsedIndex1_ (x.LastUsedIndex1_, f, this),
        LastUsedIndex2_ (x.LastUsedIndex2_, f, this)
      {
      }

      SimAppObjNameDefault::
      SimAppObjNameDefault (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f,
                            ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimAppDefault (e, f | ::xml_schema::flags::base, c),
        DefaultForObjectType_ (this),
        NameString1_ (this),
        NameString2_ (this),
        IndexType1_ (this),
        IndexType2_ (this),
        LastUsedIndex1_ (this),
        LastUsedIndex2_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimAppObjNameDefault::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimAppDefault::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DefaultForObjectType
          //
          if (n.name () == "DefaultForObjectType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< DefaultForObjectType_type > r (
              DefaultForObjectType_traits::create (i, f, this));

            if (!this->DefaultForObjectType_)
            {
              this->DefaultForObjectType_.set (r);
              continue;
            }
          }

          // NameString1
          //
          if (n.name () == "NameString1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NameString1_type > r (
              NameString1_traits::create (i, f, this));

            if (!this->NameString1_)
            {
              this->NameString1_.set (r);
              continue;
            }
          }

          // NameString2
          //
          if (n.name () == "NameString2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< NameString2_type > r (
              NameString2_traits::create (i, f, this));

            if (!this->NameString2_)
            {
              this->NameString2_.set (r);
              continue;
            }
          }

          // IndexType1
          //
          if (n.name () == "IndexType1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< IndexType1_type > r (
              IndexType1_traits::create (i, f, this));

            if (!this->IndexType1_)
            {
              this->IndexType1_.set (r);
              continue;
            }
          }

          // IndexType2
          //
          if (n.name () == "IndexType2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< IndexType2_type > r (
              IndexType2_traits::create (i, f, this));

            if (!this->IndexType2_)
            {
              this->IndexType2_.set (r);
              continue;
            }
          }

          // LastUsedIndex1
          //
          if (n.name () == "LastUsedIndex1" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< LastUsedIndex1_type > r (
              LastUsedIndex1_traits::create (i, f, this));

            if (!this->LastUsedIndex1_)
            {
              this->LastUsedIndex1_.set (r);
              continue;
            }
          }

          // LastUsedIndex2
          //
          if (n.name () == "LastUsedIndex2" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< LastUsedIndex2_type > r (
              LastUsedIndex2_traits::create (i, f, this));

            if (!this->LastUsedIndex2_)
            {
              this->LastUsedIndex2_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimAppObjNameDefault* SimAppObjNameDefault::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimAppObjNameDefault (*this, f, c);
      }

      SimAppObjNameDefault& SimAppObjNameDefault::
      operator= (const SimAppObjNameDefault& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimAppDefault& > (*this) = x;
          this->DefaultForObjectType_ = x.DefaultForObjectType_;
          this->NameString1_ = x.NameString1_;
          this->NameString2_ = x.NameString2_;
          this->IndexType1_ = x.IndexType1_;
          this->IndexType2_ = x.IndexType2_;
          this->LastUsedIndex1_ = x.LastUsedIndex1_;
          this->LastUsedIndex2_ = x.LastUsedIndex2_;
        }

        return *this;
      }

      SimAppObjNameDefault::
      ~SimAppObjNameDefault ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

