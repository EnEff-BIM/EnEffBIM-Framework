// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimDoor_GlazedDoor_FrameAndDivider.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_GlazedDoor_FrameAndDivider
      // 

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmWidth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmWidth () const
      {
        return this->SimDoor_FrmWidth_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmWidth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmWidth ()
      {
        return this->SimDoor_FrmWidth_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmWidth (const SimDoor_FrmWidth_type& x)
      {
        this->SimDoor_FrmWidth_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmWidth (const SimDoor_FrmWidth_optional& x)
      {
        this->SimDoor_FrmWidth_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmOutsdProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmOutsdProject () const
      {
        return this->SimDoor_FrmOutsdProject_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmOutsdProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmOutsdProject ()
      {
        return this->SimDoor_FrmOutsdProject_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmOutsdProject (const SimDoor_FrmOutsdProject_type& x)
      {
        this->SimDoor_FrmOutsdProject_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmOutsdProject (const SimDoor_FrmOutsdProject_optional& x)
      {
        this->SimDoor_FrmOutsdProject_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmInsideProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmInsideProject () const
      {
        return this->SimDoor_FrmInsideProject_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmInsideProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmInsideProject ()
      {
        return this->SimDoor_FrmInsideProject_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmInsideProject (const SimDoor_FrmInsideProject_type& x)
      {
        this->SimDoor_FrmInsideProject_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmInsideProject (const SimDoor_FrmInsideProject_optional& x)
      {
        this->SimDoor_FrmInsideProject_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmCond () const
      {
        return this->SimDoor_FrmCond_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmCond ()
      {
        return this->SimDoor_FrmCond_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmCond (const SimDoor_FrmCond_type& x)
      {
        this->SimDoor_FrmCond_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmCond (const SimDoor_FrmCond_optional& x)
      {
        this->SimDoor_FrmCond_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond (const SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond (const SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmSolarAbsorp () const
      {
        return this->SimDoor_FrmSolarAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmSolarAbsorp ()
      {
        return this->SimDoor_FrmSolarAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmSolarAbsorp (const SimDoor_FrmSolarAbsorp_type& x)
      {
        this->SimDoor_FrmSolarAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmSolarAbsorp (const SimDoor_FrmSolarAbsorp_optional& x)
      {
        this->SimDoor_FrmSolarAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmVisibleAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmVisibleAbsorp () const
      {
        return this->SimDoor_FrmVisibleAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmVisibleAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmVisibleAbsorp ()
      {
        return this->SimDoor_FrmVisibleAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmVisibleAbsorp (const SimDoor_FrmVisibleAbsorp_type& x)
      {
        this->SimDoor_FrmVisibleAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmVisibleAbsorp (const SimDoor_FrmVisibleAbsorp_optional& x)
      {
        this->SimDoor_FrmVisibleAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmThermHemisEmiss_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmThermHemisEmiss () const
      {
        return this->SimDoor_FrmThermHemisEmiss_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_FrmThermHemisEmiss_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmThermHemisEmiss ()
      {
        return this->SimDoor_FrmThermHemisEmiss_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmThermHemisEmiss (const SimDoor_FrmThermHemisEmiss_type& x)
      {
        this->SimDoor_FrmThermHemisEmiss_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_FrmThermHemisEmiss (const SimDoor_FrmThermHemisEmiss_optional& x)
      {
        this->SimDoor_FrmThermHemisEmiss_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivType_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivType () const
      {
        return this->SimDoor_DivType_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivType_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivType ()
      {
        return this->SimDoor_DivType_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivType (const SimDoor_DivType_type& x)
      {
        this->SimDoor_DivType_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivType (const SimDoor_DivType_optional& x)
      {
        this->SimDoor_DivType_ = x;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivType (::std::auto_ptr< SimDoor_DivType_type > x)
      {
        this->SimDoor_DivType_.set (x);
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivWidth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivWidth () const
      {
        return this->SimDoor_DivWidth_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivWidth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivWidth ()
      {
        return this->SimDoor_DivWidth_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivWidth (const SimDoor_DivWidth_type& x)
      {
        this->SimDoor_DivWidth_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivWidth (const SimDoor_DivWidth_optional& x)
      {
        this->SimDoor_DivWidth_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_NumbHorzDivs_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbHorzDivs () const
      {
        return this->SimDoor_NumbHorzDivs_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_NumbHorzDivs_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbHorzDivs ()
      {
        return this->SimDoor_NumbHorzDivs_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbHorzDivs (const SimDoor_NumbHorzDivs_type& x)
      {
        this->SimDoor_NumbHorzDivs_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbHorzDivs (const SimDoor_NumbHorzDivs_optional& x)
      {
        this->SimDoor_NumbHorzDivs_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_NumbVertlDivs_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbVertlDivs () const
      {
        return this->SimDoor_NumbVertlDivs_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_NumbVertlDivs_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbVertlDivs ()
      {
        return this->SimDoor_NumbVertlDivs_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbVertlDivs (const SimDoor_NumbVertlDivs_type& x)
      {
        this->SimDoor_NumbVertlDivs_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_NumbVertlDivs (const SimDoor_NumbVertlDivs_optional& x)
      {
        this->SimDoor_NumbVertlDivs_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivOutsdProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivOutsdProject () const
      {
        return this->SimDoor_DivOutsdProject_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivOutsdProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivOutsdProject ()
      {
        return this->SimDoor_DivOutsdProject_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivOutsdProject (const SimDoor_DivOutsdProject_type& x)
      {
        this->SimDoor_DivOutsdProject_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivOutsdProject (const SimDoor_DivOutsdProject_optional& x)
      {
        this->SimDoor_DivOutsdProject_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivInsideProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivInsideProject () const
      {
        return this->SimDoor_DivInsideProject_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivInsideProject_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivInsideProject ()
      {
        return this->SimDoor_DivInsideProject_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivInsideProject (const SimDoor_DivInsideProject_type& x)
      {
        this->SimDoor_DivInsideProject_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivInsideProject (const SimDoor_DivInsideProject_optional& x)
      {
        this->SimDoor_DivInsideProject_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivCond () const
      {
        return this->SimDoor_DivCond_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivCond ()
      {
        return this->SimDoor_DivCond_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivCond (const SimDoor_DivCond_type& x)
      {
        this->SimDoor_DivCond_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivCond (const SimDoor_DivCond_optional& x)
      {
        this->SimDoor_DivCond_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioDivEdgeGlassCondToCntrGlassCond () const
      {
        return this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioDivEdgeGlassCondToCntrGlassCond ()
      {
        return this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioDivEdgeGlassCondToCntrGlassCond (const SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_type& x)
      {
        this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_RatioDivEdgeGlassCondToCntrGlassCond (const SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_optional& x)
      {
        this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivSolarAbsorp () const
      {
        return this->SimDoor_DivSolarAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivSolarAbsorp ()
      {
        return this->SimDoor_DivSolarAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivSolarAbsorp (const SimDoor_DivSolarAbsorp_type& x)
      {
        this->SimDoor_DivSolarAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivSolarAbsorp (const SimDoor_DivSolarAbsorp_optional& x)
      {
        this->SimDoor_DivSolarAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivVisibleAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivVisibleAbsorp () const
      {
        return this->SimDoor_DivVisibleAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivVisibleAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivVisibleAbsorp ()
      {
        return this->SimDoor_DivVisibleAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivVisibleAbsorp (const SimDoor_DivVisibleAbsorp_type& x)
      {
        this->SimDoor_DivVisibleAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivVisibleAbsorp (const SimDoor_DivVisibleAbsorp_optional& x)
      {
        this->SimDoor_DivVisibleAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivThermHemisEmiss_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivThermHemisEmiss () const
      {
        return this->SimDoor_DivThermHemisEmiss_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_DivThermHemisEmiss_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivThermHemisEmiss ()
      {
        return this->SimDoor_DivThermHemisEmiss_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivThermHemisEmiss (const SimDoor_DivThermHemisEmiss_type& x)
      {
        this->SimDoor_DivThermHemisEmiss_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_DivThermHemisEmiss (const SimDoor_DivThermHemisEmiss_optional& x)
      {
        this->SimDoor_DivThermHemisEmiss_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_OutsdRevealSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_OutsdRevealSolarAbsorp () const
      {
        return this->SimDoor_OutsdRevealSolarAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_OutsdRevealSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_OutsdRevealSolarAbsorp ()
      {
        return this->SimDoor_OutsdRevealSolarAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_OutsdRevealSolarAbsorp (const SimDoor_OutsdRevealSolarAbsorp_type& x)
      {
        this->SimDoor_OutsdRevealSolarAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_OutsdRevealSolarAbsorp (const SimDoor_OutsdRevealSolarAbsorp_optional& x)
      {
        this->SimDoor_OutsdRevealSolarAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideSillDepth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillDepth () const
      {
        return this->SimDoor_InsideSillDepth_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideSillDepth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillDepth ()
      {
        return this->SimDoor_InsideSillDepth_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillDepth (const SimDoor_InsideSillDepth_type& x)
      {
        this->SimDoor_InsideSillDepth_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillDepth (const SimDoor_InsideSillDepth_optional& x)
      {
        this->SimDoor_InsideSillDepth_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideSillSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillSolarAbsorp () const
      {
        return this->SimDoor_InsideSillSolarAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideSillSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillSolarAbsorp ()
      {
        return this->SimDoor_InsideSillSolarAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillSolarAbsorp (const SimDoor_InsideSillSolarAbsorp_type& x)
      {
        this->SimDoor_InsideSillSolarAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideSillSolarAbsorp (const SimDoor_InsideSillSolarAbsorp_optional& x)
      {
        this->SimDoor_InsideSillSolarAbsorp_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideRevealDepth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealDepth () const
      {
        return this->SimDoor_InsideRevealDepth_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideRevealDepth_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealDepth ()
      {
        return this->SimDoor_InsideRevealDepth_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealDepth (const SimDoor_InsideRevealDepth_type& x)
      {
        this->SimDoor_InsideRevealDepth_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealDepth (const SimDoor_InsideRevealDepth_optional& x)
      {
        this->SimDoor_InsideRevealDepth_ = x;
      }

      const SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideRevealSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealSolarAbsorp () const
      {
        return this->SimDoor_InsideRevealSolarAbsorp_;
      }

      SimDoor_GlazedDoor_FrameAndDivider::SimDoor_InsideRevealSolarAbsorp_optional& SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealSolarAbsorp ()
      {
        return this->SimDoor_InsideRevealSolarAbsorp_;
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealSolarAbsorp (const SimDoor_InsideRevealSolarAbsorp_type& x)
      {
        this->SimDoor_InsideRevealSolarAbsorp_.set (x);
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_InsideRevealSolarAbsorp (const SimDoor_InsideRevealSolarAbsorp_optional& x)
      {
        this->SimDoor_InsideRevealSolarAbsorp_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
      // SimDoor_GlazedDoor_FrameAndDivider
      //

      SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_GlazedDoor_FrameAndDivider (const RefId_type& RefId)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (RefId),
        SimDoor_FrmWidth_ (this),
        SimDoor_FrmOutsdProject_ (this),
        SimDoor_FrmInsideProject_ (this),
        SimDoor_FrmCond_ (this),
        SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimDoor_FrmSolarAbsorp_ (this),
        SimDoor_FrmVisibleAbsorp_ (this),
        SimDoor_FrmThermHemisEmiss_ (this),
        SimDoor_DivType_ (this),
        SimDoor_DivWidth_ (this),
        SimDoor_NumbHorzDivs_ (this),
        SimDoor_NumbVertlDivs_ (this),
        SimDoor_DivOutsdProject_ (this),
        SimDoor_DivInsideProject_ (this),
        SimDoor_DivCond_ (this),
        SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimDoor_DivSolarAbsorp_ (this),
        SimDoor_DivVisibleAbsorp_ (this),
        SimDoor_DivThermHemisEmiss_ (this),
        SimDoor_OutsdRevealSolarAbsorp_ (this),
        SimDoor_InsideSillDepth_ (this),
        SimDoor_InsideSillSolarAbsorp_ (this),
        SimDoor_InsideRevealDepth_ (this),
        SimDoor_InsideRevealSolarAbsorp_ (this)
      {
      }

      SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_GlazedDoor_FrameAndDivider (const SimDoor_GlazedDoor_FrameAndDivider& x,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (x, f, c),
        SimDoor_FrmWidth_ (x.SimDoor_FrmWidth_, f, this),
        SimDoor_FrmOutsdProject_ (x.SimDoor_FrmOutsdProject_, f, this),
        SimDoor_FrmInsideProject_ (x.SimDoor_FrmInsideProject_, f, this),
        SimDoor_FrmCond_ (x.SimDoor_FrmCond_, f, this),
        SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_ (x.SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_, f, this),
        SimDoor_FrmSolarAbsorp_ (x.SimDoor_FrmSolarAbsorp_, f, this),
        SimDoor_FrmVisibleAbsorp_ (x.SimDoor_FrmVisibleAbsorp_, f, this),
        SimDoor_FrmThermHemisEmiss_ (x.SimDoor_FrmThermHemisEmiss_, f, this),
        SimDoor_DivType_ (x.SimDoor_DivType_, f, this),
        SimDoor_DivWidth_ (x.SimDoor_DivWidth_, f, this),
        SimDoor_NumbHorzDivs_ (x.SimDoor_NumbHorzDivs_, f, this),
        SimDoor_NumbVertlDivs_ (x.SimDoor_NumbVertlDivs_, f, this),
        SimDoor_DivOutsdProject_ (x.SimDoor_DivOutsdProject_, f, this),
        SimDoor_DivInsideProject_ (x.SimDoor_DivInsideProject_, f, this),
        SimDoor_DivCond_ (x.SimDoor_DivCond_, f, this),
        SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_ (x.SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_, f, this),
        SimDoor_DivSolarAbsorp_ (x.SimDoor_DivSolarAbsorp_, f, this),
        SimDoor_DivVisibleAbsorp_ (x.SimDoor_DivVisibleAbsorp_, f, this),
        SimDoor_DivThermHemisEmiss_ (x.SimDoor_DivThermHemisEmiss_, f, this),
        SimDoor_OutsdRevealSolarAbsorp_ (x.SimDoor_OutsdRevealSolarAbsorp_, f, this),
        SimDoor_InsideSillDepth_ (x.SimDoor_InsideSillDepth_, f, this),
        SimDoor_InsideSillSolarAbsorp_ (x.SimDoor_InsideSillSolarAbsorp_, f, this),
        SimDoor_InsideRevealDepth_ (x.SimDoor_InsideRevealDepth_, f, this),
        SimDoor_InsideRevealSolarAbsorp_ (x.SimDoor_InsideRevealSolarAbsorp_, f, this)
      {
      }

      SimDoor_GlazedDoor_FrameAndDivider::
      SimDoor_GlazedDoor_FrameAndDivider (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f,
                                          ::xml_schema::container* c)
      : ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor (e, f | ::xml_schema::flags::base, c),
        SimDoor_FrmWidth_ (this),
        SimDoor_FrmOutsdProject_ (this),
        SimDoor_FrmInsideProject_ (this),
        SimDoor_FrmCond_ (this),
        SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_ (this),
        SimDoor_FrmSolarAbsorp_ (this),
        SimDoor_FrmVisibleAbsorp_ (this),
        SimDoor_FrmThermHemisEmiss_ (this),
        SimDoor_DivType_ (this),
        SimDoor_DivWidth_ (this),
        SimDoor_NumbHorzDivs_ (this),
        SimDoor_NumbVertlDivs_ (this),
        SimDoor_DivOutsdProject_ (this),
        SimDoor_DivInsideProject_ (this),
        SimDoor_DivCond_ (this),
        SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_ (this),
        SimDoor_DivSolarAbsorp_ (this),
        SimDoor_DivVisibleAbsorp_ (this),
        SimDoor_DivThermHemisEmiss_ (this),
        SimDoor_OutsdRevealSolarAbsorp_ (this),
        SimDoor_InsideSillDepth_ (this),
        SimDoor_InsideSillSolarAbsorp_ (this),
        SimDoor_InsideRevealDepth_ (this),
        SimDoor_InsideRevealSolarAbsorp_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimDoor_GlazedDoor_FrameAndDivider::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimDoor_FrmWidth
          //
          if (n.name () == "SimDoor_FrmWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmWidth_)
            {
              this->SimDoor_FrmWidth_.set (SimDoor_FrmWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmOutsdProject
          //
          if (n.name () == "SimDoor_FrmOutsdProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmOutsdProject_)
            {
              this->SimDoor_FrmOutsdProject_.set (SimDoor_FrmOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmInsideProject
          //
          if (n.name () == "SimDoor_FrmInsideProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmInsideProject_)
            {
              this->SimDoor_FrmInsideProject_.set (SimDoor_FrmInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmCond
          //
          if (n.name () == "SimDoor_FrmCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmCond_)
            {
              this->SimDoor_FrmCond_.set (SimDoor_FrmCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_)
            {
              this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_.set (SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmSolarAbsorp
          //
          if (n.name () == "SimDoor_FrmSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmSolarAbsorp_)
            {
              this->SimDoor_FrmSolarAbsorp_.set (SimDoor_FrmSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmVisibleAbsorp
          //
          if (n.name () == "SimDoor_FrmVisibleAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmVisibleAbsorp_)
            {
              this->SimDoor_FrmVisibleAbsorp_.set (SimDoor_FrmVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_FrmThermHemisEmiss
          //
          if (n.name () == "SimDoor_FrmThermHemisEmiss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_FrmThermHemisEmiss_)
            {
              this->SimDoor_FrmThermHemisEmiss_.set (SimDoor_FrmThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivType
          //
          if (n.name () == "SimDoor_DivType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            ::std::auto_ptr< SimDoor_DivType_type > r (
              SimDoor_DivType_traits::create (i, f, this));

            if (!this->SimDoor_DivType_)
            {
              this->SimDoor_DivType_.set (r);
              continue;
            }
          }

          // SimDoor_DivWidth
          //
          if (n.name () == "SimDoor_DivWidth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivWidth_)
            {
              this->SimDoor_DivWidth_.set (SimDoor_DivWidth_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_NumbHorzDivs
          //
          if (n.name () == "SimDoor_NumbHorzDivs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_NumbHorzDivs_)
            {
              this->SimDoor_NumbHorzDivs_.set (SimDoor_NumbHorzDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_NumbVertlDivs
          //
          if (n.name () == "SimDoor_NumbVertlDivs" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_NumbVertlDivs_)
            {
              this->SimDoor_NumbVertlDivs_.set (SimDoor_NumbVertlDivs_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivOutsdProject
          //
          if (n.name () == "SimDoor_DivOutsdProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivOutsdProject_)
            {
              this->SimDoor_DivOutsdProject_.set (SimDoor_DivOutsdProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivInsideProject
          //
          if (n.name () == "SimDoor_DivInsideProject" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivInsideProject_)
            {
              this->SimDoor_DivInsideProject_.set (SimDoor_DivInsideProject_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivCond
          //
          if (n.name () == "SimDoor_DivCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivCond_)
            {
              this->SimDoor_DivCond_.set (SimDoor_DivCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_RatioDivEdgeGlassCondToCntrGlassCond
          //
          if (n.name () == "SimDoor_RatioDivEdgeGlassCondToCntrGlassCond" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_)
            {
              this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_.set (SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivSolarAbsorp
          //
          if (n.name () == "SimDoor_DivSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivSolarAbsorp_)
            {
              this->SimDoor_DivSolarAbsorp_.set (SimDoor_DivSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivVisibleAbsorp
          //
          if (n.name () == "SimDoor_DivVisibleAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivVisibleAbsorp_)
            {
              this->SimDoor_DivVisibleAbsorp_.set (SimDoor_DivVisibleAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_DivThermHemisEmiss
          //
          if (n.name () == "SimDoor_DivThermHemisEmiss" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_DivThermHemisEmiss_)
            {
              this->SimDoor_DivThermHemisEmiss_.set (SimDoor_DivThermHemisEmiss_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_OutsdRevealSolarAbsorp
          //
          if (n.name () == "SimDoor_OutsdRevealSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_OutsdRevealSolarAbsorp_)
            {
              this->SimDoor_OutsdRevealSolarAbsorp_.set (SimDoor_OutsdRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_InsideSillDepth
          //
          if (n.name () == "SimDoor_InsideSillDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_InsideSillDepth_)
            {
              this->SimDoor_InsideSillDepth_.set (SimDoor_InsideSillDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_InsideSillSolarAbsorp
          //
          if (n.name () == "SimDoor_InsideSillSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_InsideSillSolarAbsorp_)
            {
              this->SimDoor_InsideSillSolarAbsorp_.set (SimDoor_InsideSillSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_InsideRevealDepth
          //
          if (n.name () == "SimDoor_InsideRevealDepth" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_InsideRevealDepth_)
            {
              this->SimDoor_InsideRevealDepth_.set (SimDoor_InsideRevealDepth_traits::create (i, f, this));
              continue;
            }
          }

          // SimDoor_InsideRevealSolarAbsorp
          //
          if (n.name () == "SimDoor_InsideRevealSolarAbsorp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/BuildingModel")
          {
            if (!this->SimDoor_InsideRevealSolarAbsorp_)
            {
              this->SimDoor_InsideRevealSolarAbsorp_.set (SimDoor_InsideRevealSolarAbsorp_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimDoor_GlazedDoor_FrameAndDivider* SimDoor_GlazedDoor_FrameAndDivider::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimDoor_GlazedDoor_FrameAndDivider (*this, f, c);
      }

      SimDoor_GlazedDoor_FrameAndDivider& SimDoor_GlazedDoor_FrameAndDivider::
      operator= (const SimDoor_GlazedDoor_FrameAndDivider& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::BuildingModel::SimDoor_GlazedDoor& > (*this) = x;
          this->SimDoor_FrmWidth_ = x.SimDoor_FrmWidth_;
          this->SimDoor_FrmOutsdProject_ = x.SimDoor_FrmOutsdProject_;
          this->SimDoor_FrmInsideProject_ = x.SimDoor_FrmInsideProject_;
          this->SimDoor_FrmCond_ = x.SimDoor_FrmCond_;
          this->SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_ = x.SimDoor_RatioFrmEdgeGlassCondToCntrGlassCond_;
          this->SimDoor_FrmSolarAbsorp_ = x.SimDoor_FrmSolarAbsorp_;
          this->SimDoor_FrmVisibleAbsorp_ = x.SimDoor_FrmVisibleAbsorp_;
          this->SimDoor_FrmThermHemisEmiss_ = x.SimDoor_FrmThermHemisEmiss_;
          this->SimDoor_DivType_ = x.SimDoor_DivType_;
          this->SimDoor_DivWidth_ = x.SimDoor_DivWidth_;
          this->SimDoor_NumbHorzDivs_ = x.SimDoor_NumbHorzDivs_;
          this->SimDoor_NumbVertlDivs_ = x.SimDoor_NumbVertlDivs_;
          this->SimDoor_DivOutsdProject_ = x.SimDoor_DivOutsdProject_;
          this->SimDoor_DivInsideProject_ = x.SimDoor_DivInsideProject_;
          this->SimDoor_DivCond_ = x.SimDoor_DivCond_;
          this->SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_ = x.SimDoor_RatioDivEdgeGlassCondToCntrGlassCond_;
          this->SimDoor_DivSolarAbsorp_ = x.SimDoor_DivSolarAbsorp_;
          this->SimDoor_DivVisibleAbsorp_ = x.SimDoor_DivVisibleAbsorp_;
          this->SimDoor_DivThermHemisEmiss_ = x.SimDoor_DivThermHemisEmiss_;
          this->SimDoor_OutsdRevealSolarAbsorp_ = x.SimDoor_OutsdRevealSolarAbsorp_;
          this->SimDoor_InsideSillDepth_ = x.SimDoor_InsideSillDepth_;
          this->SimDoor_InsideSillSolarAbsorp_ = x.SimDoor_InsideSillSolarAbsorp_;
          this->SimDoor_InsideRevealDepth_ = x.SimDoor_InsideRevealDepth_;
          this->SimDoor_InsideRevealSolarAbsorp_ = x.SimDoor_InsideRevealSolarAbsorp_;
        }

        return *this;
      }

      SimDoor_GlazedDoor_FrameAndDivider::
      ~SimDoor_GlazedDoor_FrameAndDivider ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

