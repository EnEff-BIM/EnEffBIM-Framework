// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSimulationConfiguration.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSimulationConfiguration
      // 

      const SimSimulationConfiguration::DesignAlternative_optional& SimSimulationConfiguration::
      DesignAlternative () const
      {
        return this->DesignAlternative_;
      }

      SimSimulationConfiguration::DesignAlternative_optional& SimSimulationConfiguration::
      DesignAlternative ()
      {
        return this->DesignAlternative_;
      }

      void SimSimulationConfiguration::
      DesignAlternative (const DesignAlternative_type& x)
      {
        this->DesignAlternative_.set (x);
      }

      void SimSimulationConfiguration::
      DesignAlternative (const DesignAlternative_optional& x)
      {
        this->DesignAlternative_ = x;
      }

      void SimSimulationConfiguration::
      DesignAlternative (::std::auto_ptr< DesignAlternative_type > x)
      {
        this->DesignAlternative_.set (x);
      }

      const SimSimulationConfiguration::TemplateSimulationParameters_optional& SimSimulationConfiguration::
      TemplateSimulationParameters () const
      {
        return this->TemplateSimulationParameters_;
      }

      SimSimulationConfiguration::TemplateSimulationParameters_optional& SimSimulationConfiguration::
      TemplateSimulationParameters ()
      {
        return this->TemplateSimulationParameters_;
      }

      void SimSimulationConfiguration::
      TemplateSimulationParameters (const TemplateSimulationParameters_type& x)
      {
        this->TemplateSimulationParameters_.set (x);
      }

      void SimSimulationConfiguration::
      TemplateSimulationParameters (const TemplateSimulationParameters_optional& x)
      {
        this->TemplateSimulationParameters_ = x;
      }

      void SimSimulationConfiguration::
      TemplateSimulationParameters (::std::auto_ptr< TemplateSimulationParameters_type > x)
      {
        this->TemplateSimulationParameters_.set (x);
      }

      const SimSimulationConfiguration::TemplateReportSet_optional& SimSimulationConfiguration::
      TemplateReportSet () const
      {
        return this->TemplateReportSet_;
      }

      SimSimulationConfiguration::TemplateReportSet_optional& SimSimulationConfiguration::
      TemplateReportSet ()
      {
        return this->TemplateReportSet_;
      }

      void SimSimulationConfiguration::
      TemplateReportSet (const TemplateReportSet_type& x)
      {
        this->TemplateReportSet_.set (x);
      }

      void SimSimulationConfiguration::
      TemplateReportSet (const TemplateReportSet_optional& x)
      {
        this->TemplateReportSet_ = x;
      }

      void SimSimulationConfiguration::
      TemplateReportSet (::std::auto_ptr< TemplateReportSet_type > x)
      {
        this->TemplateReportSet_.set (x);
      }

      const SimSimulationConfiguration::TemplateOutputRequestSet_optional& SimSimulationConfiguration::
      TemplateOutputRequestSet () const
      {
        return this->TemplateOutputRequestSet_;
      }

      SimSimulationConfiguration::TemplateOutputRequestSet_optional& SimSimulationConfiguration::
      TemplateOutputRequestSet ()
      {
        return this->TemplateOutputRequestSet_;
      }

      void SimSimulationConfiguration::
      TemplateOutputRequestSet (const TemplateOutputRequestSet_type& x)
      {
        this->TemplateOutputRequestSet_.set (x);
      }

      void SimSimulationConfiguration::
      TemplateOutputRequestSet (const TemplateOutputRequestSet_optional& x)
      {
        this->TemplateOutputRequestSet_ = x;
      }

      void SimSimulationConfiguration::
      TemplateOutputRequestSet (::std::auto_ptr< TemplateOutputRequestSet_type > x)
      {
        this->TemplateOutputRequestSet_.set (x);
      }

      const SimSimulationConfiguration::TemplateOutputFormatSet_optional& SimSimulationConfiguration::
      TemplateOutputFormatSet () const
      {
        return this->TemplateOutputFormatSet_;
      }

      SimSimulationConfiguration::TemplateOutputFormatSet_optional& SimSimulationConfiguration::
      TemplateOutputFormatSet ()
      {
        return this->TemplateOutputFormatSet_;
      }

      void SimSimulationConfiguration::
      TemplateOutputFormatSet (const TemplateOutputFormatSet_type& x)
      {
        this->TemplateOutputFormatSet_.set (x);
      }

      void SimSimulationConfiguration::
      TemplateOutputFormatSet (const TemplateOutputFormatSet_optional& x)
      {
        this->TemplateOutputFormatSet_ = x;
      }

      void SimSimulationConfiguration::
      TemplateOutputFormatSet (::std::auto_ptr< TemplateOutputFormatSet_type > x)
      {
        this->TemplateOutputFormatSet_.set (x);
      }

      const SimSimulationConfiguration::CreationDate_optional& SimSimulationConfiguration::
      CreationDate () const
      {
        return this->CreationDate_;
      }

      SimSimulationConfiguration::CreationDate_optional& SimSimulationConfiguration::
      CreationDate ()
      {
        return this->CreationDate_;
      }

      void SimSimulationConfiguration::
      CreationDate (const CreationDate_type& x)
      {
        this->CreationDate_.set (x);
      }

      void SimSimulationConfiguration::
      CreationDate (const CreationDate_optional& x)
      {
        this->CreationDate_ = x;
      }

      const SimSimulationConfiguration::CreatedBy_optional& SimSimulationConfiguration::
      CreatedBy () const
      {
        return this->CreatedBy_;
      }

      SimSimulationConfiguration::CreatedBy_optional& SimSimulationConfiguration::
      CreatedBy ()
      {
        return this->CreatedBy_;
      }

      void SimSimulationConfiguration::
      CreatedBy (const CreatedBy_type& x)
      {
        this->CreatedBy_.set (x);
      }

      void SimSimulationConfiguration::
      CreatedBy (const CreatedBy_optional& x)
      {
        this->CreatedBy_ = x;
      }

      void SimSimulationConfiguration::
      CreatedBy (::std::auto_ptr< CreatedBy_type > x)
      {
        this->CreatedBy_.set (x);
      }

      const SimSimulationConfiguration::ReviewedBy_optional& SimSimulationConfiguration::
      ReviewedBy () const
      {
        return this->ReviewedBy_;
      }

      SimSimulationConfiguration::ReviewedBy_optional& SimSimulationConfiguration::
      ReviewedBy ()
      {
        return this->ReviewedBy_;
      }

      void SimSimulationConfiguration::
      ReviewedBy (const ReviewedBy_type& x)
      {
        this->ReviewedBy_.set (x);
      }

      void SimSimulationConfiguration::
      ReviewedBy (const ReviewedBy_optional& x)
      {
        this->ReviewedBy_ = x;
      }

      void SimSimulationConfiguration::
      ReviewedBy (::std::auto_ptr< ReviewedBy_type > x)
      {
        this->ReviewedBy_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
      // SimSimulationConfiguration
      //

      SimSimulationConfiguration::
      SimSimulationConfiguration (const RefId_type& RefId)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (RefId),
        DesignAlternative_ (this),
        TemplateSimulationParameters_ (this),
        TemplateReportSet_ (this),
        TemplateOutputRequestSet_ (this),
        TemplateOutputFormatSet_ (this),
        CreationDate_ (this),
        CreatedBy_ (this),
        ReviewedBy_ (this)
      {
      }

      SimSimulationConfiguration::
      SimSimulationConfiguration (const SimSimulationConfiguration& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (x, f, c),
        DesignAlternative_ (x.DesignAlternative_, f, this),
        TemplateSimulationParameters_ (x.TemplateSimulationParameters_, f, this),
        TemplateReportSet_ (x.TemplateReportSet_, f, this),
        TemplateOutputRequestSet_ (x.TemplateOutputRequestSet_, f, this),
        TemplateOutputFormatSet_ (x.TemplateOutputFormatSet_, f, this),
        CreationDate_ (x.CreationDate_, f, this),
        CreatedBy_ (x.CreatedBy_, f, this),
        ReviewedBy_ (x.ReviewedBy_, f, this)
      {
      }

      SimSimulationConfiguration::
      SimSimulationConfiguration (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::ResourcesGeneral::SimResourceObject (e, f | ::xml_schema::flags::base, c),
        DesignAlternative_ (this),
        TemplateSimulationParameters_ (this),
        TemplateReportSet_ (this),
        TemplateOutputRequestSet_ (this),
        TemplateOutputFormatSet_ (this),
        CreationDate_ (this),
        CreatedBy_ (this),
        ReviewedBy_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSimulationConfiguration::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::ResourcesGeneral::SimResourceObject::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // DesignAlternative
          //
          if (n.name () == "DesignAlternative" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< DesignAlternative_type > r (
              DesignAlternative_traits::create (i, f, this));

            if (!this->DesignAlternative_)
            {
              this->DesignAlternative_.set (r);
              continue;
            }
          }

          // TemplateSimulationParameters
          //
          if (n.name () == "TemplateSimulationParameters" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSimulationParameters_type > r (
              TemplateSimulationParameters_traits::create (i, f, this));

            if (!this->TemplateSimulationParameters_)
            {
              this->TemplateSimulationParameters_.set (r);
              continue;
            }
          }

          // TemplateReportSet
          //
          if (n.name () == "TemplateReportSet" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateReportSet_type > r (
              TemplateReportSet_traits::create (i, f, this));

            if (!this->TemplateReportSet_)
            {
              this->TemplateReportSet_.set (r);
              continue;
            }
          }

          // TemplateOutputRequestSet
          //
          if (n.name () == "TemplateOutputRequestSet" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateOutputRequestSet_type > r (
              TemplateOutputRequestSet_traits::create (i, f, this));

            if (!this->TemplateOutputRequestSet_)
            {
              this->TemplateOutputRequestSet_.set (r);
              continue;
            }
          }

          // TemplateOutputFormatSet
          //
          if (n.name () == "TemplateOutputFormatSet" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateOutputFormatSet_type > r (
              TemplateOutputFormatSet_traits::create (i, f, this));

            if (!this->TemplateOutputFormatSet_)
            {
              this->TemplateOutputFormatSet_.set (r);
              continue;
            }
          }

          // CreationDate
          //
          if (n.name () == "CreationDate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            if (!this->CreationDate_)
            {
              this->CreationDate_.set (CreationDate_traits::create (i, f, this));
              continue;
            }
          }

          // CreatedBy
          //
          if (n.name () == "CreatedBy" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< CreatedBy_type > r (
              CreatedBy_traits::create (i, f, this));

            if (!this->CreatedBy_)
            {
              this->CreatedBy_.set (r);
              continue;
            }
          }

          // ReviewedBy
          //
          if (n.name () == "ReviewedBy" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/ResourcesGeneral")
          {
            ::std::auto_ptr< ReviewedBy_type > r (
              ReviewedBy_traits::create (i, f, this));

            if (!this->ReviewedBy_)
            {
              this->ReviewedBy_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSimulationConfiguration* SimSimulationConfiguration::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSimulationConfiguration (*this, f, c);
      }

      SimSimulationConfiguration& SimSimulationConfiguration::
      operator= (const SimSimulationConfiguration& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::ResourcesGeneral::SimResourceObject& > (*this) = x;
          this->DesignAlternative_ = x.DesignAlternative_;
          this->TemplateSimulationParameters_ = x.TemplateSimulationParameters_;
          this->TemplateReportSet_ = x.TemplateReportSet_;
          this->TemplateOutputRequestSet_ = x.TemplateOutputRequestSet_;
          this->TemplateOutputFormatSet_ = x.TemplateOutputFormatSet_;
          this->CreationDate_ = x.CreationDate_;
          this->CreatedBy_ = x.CreatedBy_;
          this->ReviewedBy_ = x.ReviewedBy_;
        }

        return *this;
      }

      SimSimulationConfiguration::
      ~SimSimulationConfiguration ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

