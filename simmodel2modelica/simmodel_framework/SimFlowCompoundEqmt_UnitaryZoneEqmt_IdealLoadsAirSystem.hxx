// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_IDEAL_LOADS_AIR_SYSTEM_HXX
#define SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_IDEAL_LOADS_AIR_SYSTEM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowcompoundeqmt_unitaryzoneeqmt.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      class SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem: public ::namespaces::Sim::MepModel::SimFlowCompoundEqmt_UnitaryZoneEqmt
      {
        public:
        // SimFlowCompEqmt_AvailSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_AvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_AvailSchedName_type > SimFlowCompEqmt_AvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_AvailSchedName_type, char > SimFlowCompEqmt_AvailSchedName_traits;

        const SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName () const;

        SimFlowCompEqmt_AvailSchedName_optional&
        SimFlowCompEqmt_AvailSchedName ();

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_type& x);

        void
        SimFlowCompEqmt_AvailSchedName (const SimFlowCompEqmt_AvailSchedName_optional& x);

        void
        SimFlowCompEqmt_AvailSchedName (::std::auto_ptr< SimFlowCompEqmt_AvailSchedName_type > p);

        // SimFlowCompEqmt_ZoneSupAirNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_ZoneSupAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ZoneSupAirNodeName_type > SimFlowCompEqmt_ZoneSupAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ZoneSupAirNodeName_type, char > SimFlowCompEqmt_ZoneSupAirNodeName_traits;

        const SimFlowCompEqmt_ZoneSupAirNodeName_optional&
        SimFlowCompEqmt_ZoneSupAirNodeName () const;

        SimFlowCompEqmt_ZoneSupAirNodeName_optional&
        SimFlowCompEqmt_ZoneSupAirNodeName ();

        void
        SimFlowCompEqmt_ZoneSupAirNodeName (const SimFlowCompEqmt_ZoneSupAirNodeName_type& x);

        void
        SimFlowCompEqmt_ZoneSupAirNodeName (const SimFlowCompEqmt_ZoneSupAirNodeName_optional& x);

        void
        SimFlowCompEqmt_ZoneSupAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ZoneSupAirNodeName_type > p);

        // SimFlowCompEqmt_ZoneExhaustAirNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_ZoneExhaustAirNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_ZoneExhaustAirNodeName_type > SimFlowCompEqmt_ZoneExhaustAirNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_ZoneExhaustAirNodeName_type, char > SimFlowCompEqmt_ZoneExhaustAirNodeName_traits;

        const SimFlowCompEqmt_ZoneExhaustAirNodeName_optional&
        SimFlowCompEqmt_ZoneExhaustAirNodeName () const;

        SimFlowCompEqmt_ZoneExhaustAirNodeName_optional&
        SimFlowCompEqmt_ZoneExhaustAirNodeName ();

        void
        SimFlowCompEqmt_ZoneExhaustAirNodeName (const SimFlowCompEqmt_ZoneExhaustAirNodeName_type& x);

        void
        SimFlowCompEqmt_ZoneExhaustAirNodeName (const SimFlowCompEqmt_ZoneExhaustAirNodeName_optional& x);

        void
        SimFlowCompEqmt_ZoneExhaustAirNodeName (::std::auto_ptr< SimFlowCompEqmt_ZoneExhaustAirNodeName_type > p);

        // SimFlowCompEqmt_MaxHeatingSupplyAirTemp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxHeatingSupplyAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxHeatingSupplyAirTemp_type > SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxHeatingSupplyAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxHeatingSupplyAirTemp_traits;

        const SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional&
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp () const;

        SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional&
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp ();

        void
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp (const SimFlowCompEqmt_MaxHeatingSupplyAirTemp_type& x);

        void
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp (const SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional& x);

        // SimFlowCompEqmt_MinCoolSupplyAirTemp
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MinCoolSupplyAirTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MinCoolSupplyAirTemp_type > SimFlowCompEqmt_MinCoolSupplyAirTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MinCoolSupplyAirTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MinCoolSupplyAirTemp_traits;

        const SimFlowCompEqmt_MinCoolSupplyAirTemp_optional&
        SimFlowCompEqmt_MinCoolSupplyAirTemp () const;

        SimFlowCompEqmt_MinCoolSupplyAirTemp_optional&
        SimFlowCompEqmt_MinCoolSupplyAirTemp ();

        void
        SimFlowCompEqmt_MinCoolSupplyAirTemp (const SimFlowCompEqmt_MinCoolSupplyAirTemp_type& x);

        void
        SimFlowCompEqmt_MinCoolSupplyAirTemp (const SimFlowCompEqmt_MinCoolSupplyAirTemp_optional& x);

        // SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_type > SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_traits;

        const SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional&
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio () const;

        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional&
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio ();

        void
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio (const SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_type& x);

        void
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio (const SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional& x);

        // SimFlowCompEqmt_MinCoolSupplyAirHumdRatio
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_type > SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_traits;

        const SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional&
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio () const;

        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional&
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio ();

        void
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio (const SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_type& x);

        void
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio (const SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional& x);

        // SimFlowCompEqmt_HeatingLimit
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HeatingLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatingLimit_type > SimFlowCompEqmt_HeatingLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatingLimit_type, char > SimFlowCompEqmt_HeatingLimit_traits;

        const SimFlowCompEqmt_HeatingLimit_optional&
        SimFlowCompEqmt_HeatingLimit () const;

        SimFlowCompEqmt_HeatingLimit_optional&
        SimFlowCompEqmt_HeatingLimit ();

        void
        SimFlowCompEqmt_HeatingLimit (const SimFlowCompEqmt_HeatingLimit_type& x);

        void
        SimFlowCompEqmt_HeatingLimit (const SimFlowCompEqmt_HeatingLimit_optional& x);

        void
        SimFlowCompEqmt_HeatingLimit (::std::auto_ptr< SimFlowCompEqmt_HeatingLimit_type > p);

        // SimFlowCompEqmt_MaxHeatingAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxHeatingAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxHeatingAirFlowRate_type > SimFlowCompEqmt_MaxHeatingAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxHeatingAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxHeatingAirFlowRate_traits;

        const SimFlowCompEqmt_MaxHeatingAirFlowRate_optional&
        SimFlowCompEqmt_MaxHeatingAirFlowRate () const;

        SimFlowCompEqmt_MaxHeatingAirFlowRate_optional&
        SimFlowCompEqmt_MaxHeatingAirFlowRate ();

        void
        SimFlowCompEqmt_MaxHeatingAirFlowRate (const SimFlowCompEqmt_MaxHeatingAirFlowRate_type& x);

        void
        SimFlowCompEqmt_MaxHeatingAirFlowRate (const SimFlowCompEqmt_MaxHeatingAirFlowRate_optional& x);

        // SimFlowCompEqmt_MaxSensHeatingCap
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxSensHeatingCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxSensHeatingCap_type > SimFlowCompEqmt_MaxSensHeatingCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxSensHeatingCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxSensHeatingCap_traits;

        const SimFlowCompEqmt_MaxSensHeatingCap_optional&
        SimFlowCompEqmt_MaxSensHeatingCap () const;

        SimFlowCompEqmt_MaxSensHeatingCap_optional&
        SimFlowCompEqmt_MaxSensHeatingCap ();

        void
        SimFlowCompEqmt_MaxSensHeatingCap (const SimFlowCompEqmt_MaxSensHeatingCap_type& x);

        void
        SimFlowCompEqmt_MaxSensHeatingCap (const SimFlowCompEqmt_MaxSensHeatingCap_optional& x);

        // SimFlowCompEqmt_CoolLimit
        //
        typedef ::xml_schema::string SimFlowCompEqmt_CoolLimit_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CoolLimit_type > SimFlowCompEqmt_CoolLimit_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CoolLimit_type, char > SimFlowCompEqmt_CoolLimit_traits;

        const SimFlowCompEqmt_CoolLimit_optional&
        SimFlowCompEqmt_CoolLimit () const;

        SimFlowCompEqmt_CoolLimit_optional&
        SimFlowCompEqmt_CoolLimit ();

        void
        SimFlowCompEqmt_CoolLimit (const SimFlowCompEqmt_CoolLimit_type& x);

        void
        SimFlowCompEqmt_CoolLimit (const SimFlowCompEqmt_CoolLimit_optional& x);

        void
        SimFlowCompEqmt_CoolLimit (::std::auto_ptr< SimFlowCompEqmt_CoolLimit_type > p);

        // SimFlowCompEqmt_MaxCoolAirFlowRate
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxCoolAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxCoolAirFlowRate_type > SimFlowCompEqmt_MaxCoolAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxCoolAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxCoolAirFlowRate_traits;

        const SimFlowCompEqmt_MaxCoolAirFlowRate_optional&
        SimFlowCompEqmt_MaxCoolAirFlowRate () const;

        SimFlowCompEqmt_MaxCoolAirFlowRate_optional&
        SimFlowCompEqmt_MaxCoolAirFlowRate ();

        void
        SimFlowCompEqmt_MaxCoolAirFlowRate (const SimFlowCompEqmt_MaxCoolAirFlowRate_type& x);

        void
        SimFlowCompEqmt_MaxCoolAirFlowRate (const SimFlowCompEqmt_MaxCoolAirFlowRate_optional& x);

        // SimFlowCompEqmt_MaxTotalCoolCap
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_MaxTotalCoolCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_MaxTotalCoolCap_type > SimFlowCompEqmt_MaxTotalCoolCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_MaxTotalCoolCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_MaxTotalCoolCap_traits;

        const SimFlowCompEqmt_MaxTotalCoolCap_optional&
        SimFlowCompEqmt_MaxTotalCoolCap () const;

        SimFlowCompEqmt_MaxTotalCoolCap_optional&
        SimFlowCompEqmt_MaxTotalCoolCap ();

        void
        SimFlowCompEqmt_MaxTotalCoolCap (const SimFlowCompEqmt_MaxTotalCoolCap_type& x);

        void
        SimFlowCompEqmt_MaxTotalCoolCap (const SimFlowCompEqmt_MaxTotalCoolCap_optional& x);

        // SimFlowCompEqmt_HeatingAvailSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_HeatingAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatingAvailSchedName_type > SimFlowCompEqmt_HeatingAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatingAvailSchedName_type, char > SimFlowCompEqmt_HeatingAvailSchedName_traits;

        const SimFlowCompEqmt_HeatingAvailSchedName_optional&
        SimFlowCompEqmt_HeatingAvailSchedName () const;

        SimFlowCompEqmt_HeatingAvailSchedName_optional&
        SimFlowCompEqmt_HeatingAvailSchedName ();

        void
        SimFlowCompEqmt_HeatingAvailSchedName (const SimFlowCompEqmt_HeatingAvailSchedName_type& x);

        void
        SimFlowCompEqmt_HeatingAvailSchedName (const SimFlowCompEqmt_HeatingAvailSchedName_optional& x);

        void
        SimFlowCompEqmt_HeatingAvailSchedName (::std::auto_ptr< SimFlowCompEqmt_HeatingAvailSchedName_type > p);

        // SimFlowCompEqmt_CoolAvailSchedName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_CoolAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CoolAvailSchedName_type > SimFlowCompEqmt_CoolAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CoolAvailSchedName_type, char > SimFlowCompEqmt_CoolAvailSchedName_traits;

        const SimFlowCompEqmt_CoolAvailSchedName_optional&
        SimFlowCompEqmt_CoolAvailSchedName () const;

        SimFlowCompEqmt_CoolAvailSchedName_optional&
        SimFlowCompEqmt_CoolAvailSchedName ();

        void
        SimFlowCompEqmt_CoolAvailSchedName (const SimFlowCompEqmt_CoolAvailSchedName_type& x);

        void
        SimFlowCompEqmt_CoolAvailSchedName (const SimFlowCompEqmt_CoolAvailSchedName_optional& x);

        void
        SimFlowCompEqmt_CoolAvailSchedName (::std::auto_ptr< SimFlowCompEqmt_CoolAvailSchedName_type > p);

        // SimFlowCompEqmt_DehumidCntlType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_DehumidCntlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DehumidCntlType_type > SimFlowCompEqmt_DehumidCntlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DehumidCntlType_type, char > SimFlowCompEqmt_DehumidCntlType_traits;

        const SimFlowCompEqmt_DehumidCntlType_optional&
        SimFlowCompEqmt_DehumidCntlType () const;

        SimFlowCompEqmt_DehumidCntlType_optional&
        SimFlowCompEqmt_DehumidCntlType ();

        void
        SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_type& x);

        void
        SimFlowCompEqmt_DehumidCntlType (const SimFlowCompEqmt_DehumidCntlType_optional& x);

        void
        SimFlowCompEqmt_DehumidCntlType (::std::auto_ptr< SimFlowCompEqmt_DehumidCntlType_type > p);

        // SimFlowCompEqmt_CoolSensHeatRatio
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_CoolSensHeatRatio_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_CoolSensHeatRatio_type > SimFlowCompEqmt_CoolSensHeatRatio_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_CoolSensHeatRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_CoolSensHeatRatio_traits;

        const SimFlowCompEqmt_CoolSensHeatRatio_optional&
        SimFlowCompEqmt_CoolSensHeatRatio () const;

        SimFlowCompEqmt_CoolSensHeatRatio_optional&
        SimFlowCompEqmt_CoolSensHeatRatio ();

        void
        SimFlowCompEqmt_CoolSensHeatRatio (const SimFlowCompEqmt_CoolSensHeatRatio_type& x);

        void
        SimFlowCompEqmt_CoolSensHeatRatio (const SimFlowCompEqmt_CoolSensHeatRatio_optional& x);

        // SimFlowCompEqmt_HumdCtrlType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HumdCtrlType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HumdCtrlType_type > SimFlowCompEqmt_HumdCtrlType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HumdCtrlType_type, char > SimFlowCompEqmt_HumdCtrlType_traits;

        const SimFlowCompEqmt_HumdCtrlType_optional&
        SimFlowCompEqmt_HumdCtrlType () const;

        SimFlowCompEqmt_HumdCtrlType_optional&
        SimFlowCompEqmt_HumdCtrlType ();

        void
        SimFlowCompEqmt_HumdCtrlType (const SimFlowCompEqmt_HumdCtrlType_type& x);

        void
        SimFlowCompEqmt_HumdCtrlType (const SimFlowCompEqmt_HumdCtrlType_optional& x);

        void
        SimFlowCompEqmt_HumdCtrlType (::std::auto_ptr< SimFlowCompEqmt_HumdCtrlType_type > p);

        // SimFlowCompEqmt_DesignSpecOutdrAirObjName
        //
        typedef ::xml_schema::idref SimFlowCompEqmt_DesignSpecOutdrAirObjName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DesignSpecOutdrAirObjName_type > SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DesignSpecOutdrAirObjName_type, char > SimFlowCompEqmt_DesignSpecOutdrAirObjName_traits;

        const SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional&
        SimFlowCompEqmt_DesignSpecOutdrAirObjName () const;

        SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional&
        SimFlowCompEqmt_DesignSpecOutdrAirObjName ();

        void
        SimFlowCompEqmt_DesignSpecOutdrAirObjName (const SimFlowCompEqmt_DesignSpecOutdrAirObjName_type& x);

        void
        SimFlowCompEqmt_DesignSpecOutdrAirObjName (const SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional& x);

        void
        SimFlowCompEqmt_DesignSpecOutdrAirObjName (::std::auto_ptr< SimFlowCompEqmt_DesignSpecOutdrAirObjName_type > p);

        // SimFlowCompEqmt_OutdrAirInletNodeName
        //
        typedef ::xml_schema::string SimFlowCompEqmt_OutdrAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdrAirInletNodeName_type > SimFlowCompEqmt_OutdrAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdrAirInletNodeName_type, char > SimFlowCompEqmt_OutdrAirInletNodeName_traits;

        const SimFlowCompEqmt_OutdrAirInletNodeName_optional&
        SimFlowCompEqmt_OutdrAirInletNodeName () const;

        SimFlowCompEqmt_OutdrAirInletNodeName_optional&
        SimFlowCompEqmt_OutdrAirInletNodeName ();

        void
        SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_type& x);

        void
        SimFlowCompEqmt_OutdrAirInletNodeName (const SimFlowCompEqmt_OutdrAirInletNodeName_optional& x);

        void
        SimFlowCompEqmt_OutdrAirInletNodeName (::std::auto_ptr< SimFlowCompEqmt_OutdrAirInletNodeName_type > p);

        // SimFlowCompEqmt_DemandCtrlledVentilationType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_DemandCtrlledVentilationType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_DemandCtrlledVentilationType_type > SimFlowCompEqmt_DemandCtrlledVentilationType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_DemandCtrlledVentilationType_type, char > SimFlowCompEqmt_DemandCtrlledVentilationType_traits;

        const SimFlowCompEqmt_DemandCtrlledVentilationType_optional&
        SimFlowCompEqmt_DemandCtrlledVentilationType () const;

        SimFlowCompEqmt_DemandCtrlledVentilationType_optional&
        SimFlowCompEqmt_DemandCtrlledVentilationType ();

        void
        SimFlowCompEqmt_DemandCtrlledVentilationType (const SimFlowCompEqmt_DemandCtrlledVentilationType_type& x);

        void
        SimFlowCompEqmt_DemandCtrlledVentilationType (const SimFlowCompEqmt_DemandCtrlledVentilationType_optional& x);

        void
        SimFlowCompEqmt_DemandCtrlledVentilationType (::std::auto_ptr< SimFlowCompEqmt_DemandCtrlledVentilationType_type > p);

        // SimFlowCompEqmt_OutdoorAirEconomizerType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_OutdoorAirEconomizerType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_OutdoorAirEconomizerType_type > SimFlowCompEqmt_OutdoorAirEconomizerType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_OutdoorAirEconomizerType_type, char > SimFlowCompEqmt_OutdoorAirEconomizerType_traits;

        const SimFlowCompEqmt_OutdoorAirEconomizerType_optional&
        SimFlowCompEqmt_OutdoorAirEconomizerType () const;

        SimFlowCompEqmt_OutdoorAirEconomizerType_optional&
        SimFlowCompEqmt_OutdoorAirEconomizerType ();

        void
        SimFlowCompEqmt_OutdoorAirEconomizerType (const SimFlowCompEqmt_OutdoorAirEconomizerType_type& x);

        void
        SimFlowCompEqmt_OutdoorAirEconomizerType (const SimFlowCompEqmt_OutdoorAirEconomizerType_optional& x);

        void
        SimFlowCompEqmt_OutdoorAirEconomizerType (::std::auto_ptr< SimFlowCompEqmt_OutdoorAirEconomizerType_type > p);

        // SimFlowCompEqmt_HeatRecovType
        //
        typedef ::xml_schema::string SimFlowCompEqmt_HeatRecovType_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_HeatRecovType_type > SimFlowCompEqmt_HeatRecovType_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_HeatRecovType_type, char > SimFlowCompEqmt_HeatRecovType_traits;

        const SimFlowCompEqmt_HeatRecovType_optional&
        SimFlowCompEqmt_HeatRecovType () const;

        SimFlowCompEqmt_HeatRecovType_optional&
        SimFlowCompEqmt_HeatRecovType ();

        void
        SimFlowCompEqmt_HeatRecovType (const SimFlowCompEqmt_HeatRecovType_type& x);

        void
        SimFlowCompEqmt_HeatRecovType (const SimFlowCompEqmt_HeatRecovType_optional& x);

        void
        SimFlowCompEqmt_HeatRecovType (::std::auto_ptr< SimFlowCompEqmt_HeatRecovType_type > p);

        // SimFlowCompEqmt_SensHeatRecovEffect
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_SensHeatRecovEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_SensHeatRecovEffect_type > SimFlowCompEqmt_SensHeatRecovEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_SensHeatRecovEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_SensHeatRecovEffect_traits;

        const SimFlowCompEqmt_SensHeatRecovEffect_optional&
        SimFlowCompEqmt_SensHeatRecovEffect () const;

        SimFlowCompEqmt_SensHeatRecovEffect_optional&
        SimFlowCompEqmt_SensHeatRecovEffect ();

        void
        SimFlowCompEqmt_SensHeatRecovEffect (const SimFlowCompEqmt_SensHeatRecovEffect_type& x);

        void
        SimFlowCompEqmt_SensHeatRecovEffect (const SimFlowCompEqmt_SensHeatRecovEffect_optional& x);

        // SimFlowCompEqmt_LatentHeatRecovEffect
        //
        typedef ::xml_schema::double_ SimFlowCompEqmt_LatentHeatRecovEffect_type;
        typedef ::xsd::cxx::tree::optional< SimFlowCompEqmt_LatentHeatRecovEffect_type > SimFlowCompEqmt_LatentHeatRecovEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowCompEqmt_LatentHeatRecovEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowCompEqmt_LatentHeatRecovEffect_traits;

        const SimFlowCompEqmt_LatentHeatRecovEffect_optional&
        SimFlowCompEqmt_LatentHeatRecovEffect () const;

        SimFlowCompEqmt_LatentHeatRecovEffect_optional&
        SimFlowCompEqmt_LatentHeatRecovEffect ();

        void
        SimFlowCompEqmt_LatentHeatRecovEffect (const SimFlowCompEqmt_LatentHeatRecovEffect_type& x);

        void
        SimFlowCompEqmt_LatentHeatRecovEffect (const SimFlowCompEqmt_LatentHeatRecovEffect_optional& x);

        // Constructors.
        //
        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const RefId_type&);

        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const ::xercesc::DOMElement& e,
                                                                 ::xml_schema::flags f = 0,
                                                                 ::xml_schema::container* c = 0);

        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem (const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem& x,
                                                                 ::xml_schema::flags f = 0,
                                                                 ::xml_schema::container* c = 0);

        virtual SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem&
        operator= (const SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem& x);

        virtual 
        ~SimFlowCompoundEqmt_UnitaryZoneEqmt_IdealLoadsAirSystem ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowCompEqmt_AvailSchedName_optional SimFlowCompEqmt_AvailSchedName_;
        SimFlowCompEqmt_ZoneSupAirNodeName_optional SimFlowCompEqmt_ZoneSupAirNodeName_;
        SimFlowCompEqmt_ZoneExhaustAirNodeName_optional SimFlowCompEqmt_ZoneExhaustAirNodeName_;
        SimFlowCompEqmt_MaxHeatingSupplyAirTemp_optional SimFlowCompEqmt_MaxHeatingSupplyAirTemp_;
        SimFlowCompEqmt_MinCoolSupplyAirTemp_optional SimFlowCompEqmt_MinCoolSupplyAirTemp_;
        SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_optional SimFlowCompEqmt_MaxHeatingSupplyAirHumdRatio_;
        SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_optional SimFlowCompEqmt_MinCoolSupplyAirHumdRatio_;
        SimFlowCompEqmt_HeatingLimit_optional SimFlowCompEqmt_HeatingLimit_;
        SimFlowCompEqmt_MaxHeatingAirFlowRate_optional SimFlowCompEqmt_MaxHeatingAirFlowRate_;
        SimFlowCompEqmt_MaxSensHeatingCap_optional SimFlowCompEqmt_MaxSensHeatingCap_;
        SimFlowCompEqmt_CoolLimit_optional SimFlowCompEqmt_CoolLimit_;
        SimFlowCompEqmt_MaxCoolAirFlowRate_optional SimFlowCompEqmt_MaxCoolAirFlowRate_;
        SimFlowCompEqmt_MaxTotalCoolCap_optional SimFlowCompEqmt_MaxTotalCoolCap_;
        SimFlowCompEqmt_HeatingAvailSchedName_optional SimFlowCompEqmt_HeatingAvailSchedName_;
        SimFlowCompEqmt_CoolAvailSchedName_optional SimFlowCompEqmt_CoolAvailSchedName_;
        SimFlowCompEqmt_DehumidCntlType_optional SimFlowCompEqmt_DehumidCntlType_;
        SimFlowCompEqmt_CoolSensHeatRatio_optional SimFlowCompEqmt_CoolSensHeatRatio_;
        SimFlowCompEqmt_HumdCtrlType_optional SimFlowCompEqmt_HumdCtrlType_;
        SimFlowCompEqmt_DesignSpecOutdrAirObjName_optional SimFlowCompEqmt_DesignSpecOutdrAirObjName_;
        SimFlowCompEqmt_OutdrAirInletNodeName_optional SimFlowCompEqmt_OutdrAirInletNodeName_;
        SimFlowCompEqmt_DemandCtrlledVentilationType_optional SimFlowCompEqmt_DemandCtrlledVentilationType_;
        SimFlowCompEqmt_OutdoorAirEconomizerType_optional SimFlowCompEqmt_OutdoorAirEconomizerType_;
        SimFlowCompEqmt_HeatRecovType_optional SimFlowCompEqmt_HeatRecovType_;
        SimFlowCompEqmt_SensHeatRecovEffect_optional SimFlowCompEqmt_SensHeatRecovEffect_;
        SimFlowCompEqmt_LatentHeatRecovEffect_optional SimFlowCompEqmt_LatentHeatRecovEffect_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_COMPOUND_EQMT_UNITARY_ZONE_EQMT_IDEAL_LOADS_AIR_SYSTEM_HXX
