// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_ChillerHeater.hxx"

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_ChillerHeater
      // 

      const SimFlowPlant_ChillerHeater::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_MinPartLoadRatio () const
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_MinPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_MinPartLoadRatio ()
      {
        return this->SimFlowPlant_MinPartLoadRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_MinPartLoadRatio (const SimFlowPlant_MinPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MinPartLoadRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_MaxPartLoadRatio () const
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_MaxPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_MaxPartLoadRatio ()
      {
        return this->SimFlowPlant_MaxPartLoadRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_type& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_MaxPartLoadRatio (const SimFlowPlant_MaxPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_MaxPartLoadRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_OptimumPartLoadRatio () const
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_OptimumPartLoadRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_OptimumPartLoadRatio ()
      {
        return this->SimFlowPlant_OptimumPartLoadRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_type& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_OptimumPartLoadRatio (const SimFlowPlant_OptimumPartLoadRatio_optional& x)
      {
        this->SimFlowPlant_OptimumPartLoadRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_SizingFactor_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_SizingFactor () const
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_SizingFactor_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_SizingFactor ()
      {
        return this->SimFlowPlant_SizingFactor_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_type& x)
      {
        this->SimFlowPlant_SizingFactor_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_SizingFactor (const SimFlowPlant_SizingFactor_optional& x)
      {
        this->SimFlowPlant_SizingFactor_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_CoolingCapFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CoolingCapFuncTempCurveName () const
      {
        return this->SimFlowPlant_CoolingCapFuncTempCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_CoolingCapFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CoolingCapFuncTempCurveName ()
      {
        return this->SimFlowPlant_CoolingCapFuncTempCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CoolingCapFuncTempCurveName (const SimFlowPlant_CoolingCapFuncTempCurveName_type& x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CoolingCapFuncTempCurveName (const SimFlowPlant_CoolingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CoolingCapFuncTempCurveName (::std::auto_ptr< SimFlowPlant_CoolingCapFuncTempCurveName_type > x)
      {
        this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName () const
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName ()
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName (::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName () const
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName ()
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterInletNodeName () const
      {
        return this->SimFlowPlant_ChilledWaterInletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterInletNodeName ()
      {
        return this->SimFlowPlant_ChilledWaterInletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_type& x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterInletNodeName (const SimFlowPlant_ChilledWaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterInletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterInletNodeName_type > x)
      {
        this->SimFlowPlant_ChilledWaterInletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterOutletNodeName () const
      {
        return this->SimFlowPlant_ChilledWaterOutletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterOutletNodeName ()
      {
        return this->SimFlowPlant_ChilledWaterOutletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterOutletNodeName (const SimFlowPlant_ChilledWaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_ChilledWaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_ChilledWaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_CondInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondInletNodeName () const
      {
        return this->SimFlowPlant_CondInletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_CondInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondInletNodeName ()
      {
        return this->SimFlowPlant_CondInletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_type& x)
      {
        this->SimFlowPlant_CondInletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondInletNodeName (const SimFlowPlant_CondInletNodeName_optional& x)
      {
        this->SimFlowPlant_CondInletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondInletNodeName (::std::auto_ptr< SimFlowPlant_CondInletNodeName_type > x)
      {
        this->SimFlowPlant_CondInletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_CondOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondOutletNodeName () const
      {
        return this->SimFlowPlant_CondOutletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_CondOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondOutletNodeName ()
      {
        return this->SimFlowPlant_CondOutletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_type& x)
      {
        this->SimFlowPlant_CondOutletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondOutletNodeName (const SimFlowPlant_CondOutletNodeName_optional& x)
      {
        this->SimFlowPlant_CondOutletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondOutletNodeName (::std::auto_ptr< SimFlowPlant_CondOutletNodeName_type > x)
      {
        this->SimFlowPlant_CondOutletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_CondType_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondType () const
      {
        return this->SimFlowPlant_CondType_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_CondType_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondType ()
      {
        return this->SimFlowPlant_CondType_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondType (const SimFlowPlant_CondType_type& x)
      {
        this->SimFlowPlant_CondType_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondType (const SimFlowPlant_CondType_optional& x)
      {
        this->SimFlowPlant_CondType_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_CondType (::std::auto_ptr< SimFlowPlant_CondType_type > x)
      {
        this->SimFlowPlant_CondType_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_DesignChilledWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignChilledWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignChilledWaterFlowRate_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_DesignChilledWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignChilledWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignChilledWaterFlowRate_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignChilledWaterFlowRate (const SimFlowPlant_DesignChilledWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignChilledWaterFlowRate_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignChilledWaterFlowRate (const SimFlowPlant_DesignChilledWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignChilledWaterFlowRate_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_DesignCondWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignCondWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignCondWaterFlowRate_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_DesignCondWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignCondWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignCondWaterFlowRate_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignCondWaterFlowRate (const SimFlowPlant_DesignCondWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignCondWaterFlowRate_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignCondWaterFlowRate (const SimFlowPlant_DesignCondWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignCondWaterFlowRate_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_NomCoolingCap_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_NomCoolingCap () const
      {
        return this->SimFlowPlant_NomCoolingCap_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_NomCoolingCap_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_NomCoolingCap ()
      {
        return this->SimFlowPlant_NomCoolingCap_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_NomCoolingCap (const SimFlowPlant_NomCoolingCap_type& x)
      {
        this->SimFlowPlant_NomCoolingCap_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_NomCoolingCap (const SimFlowPlant_NomCoolingCap_optional& x)
      {
        this->SimFlowPlant_NomCoolingCap_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_HeatingToCoolingCapRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingToCoolingCapRatio () const
      {
        return this->SimFlowPlant_HeatingToCoolingCapRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_HeatingToCoolingCapRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingToCoolingCapRatio ()
      {
        return this->SimFlowPlant_HeatingToCoolingCapRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingToCoolingCapRatio (const SimFlowPlant_HeatingToCoolingCapRatio_type& x)
      {
        this->SimFlowPlant_HeatingToCoolingCapRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingToCoolingCapRatio (const SimFlowPlant_HeatingToCoolingCapRatio_optional& x)
      {
        this->SimFlowPlant_HeatingToCoolingCapRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatio () const
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToCoolingOutputRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatio ()
      {
        return this->SimFlowPlant_ElecInputToCoolingOutputRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatio (const SimFlowPlant_ElecInputToCoolingOutputRatio_type& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToCoolingOutputRatio (const SimFlowPlant_ElecInputToCoolingOutputRatio_optional& x)
      {
        this->SimFlowPlant_ElecInputToCoolingOutputRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToHeatingOutputRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToHeatingOutputRatio () const
      {
        return this->SimFlowPlant_ElecInputToHeatingOutputRatio_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ElecInputToHeatingOutputRatio_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToHeatingOutputRatio ()
      {
        return this->SimFlowPlant_ElecInputToHeatingOutputRatio_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToHeatingOutputRatio (const SimFlowPlant_ElecInputToHeatingOutputRatio_type& x)
      {
        this->SimFlowPlant_ElecInputToHeatingOutputRatio_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ElecInputToHeatingOutputRatio (const SimFlowPlant_ElecInputToHeatingOutputRatio_optional& x)
      {
        this->SimFlowPlant_ElecInputToHeatingOutputRatio_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_HotWaterInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterInletNodeName () const
      {
        return this->SimFlowPlant_HotWaterInletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_HotWaterInletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterInletNodeName ()
      {
        return this->SimFlowPlant_HotWaterInletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterInletNodeName (const SimFlowPlant_HotWaterInletNodeName_type& x)
      {
        this->SimFlowPlant_HotWaterInletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterInletNodeName (const SimFlowPlant_HotWaterInletNodeName_optional& x)
      {
        this->SimFlowPlant_HotWaterInletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterInletNodeName (::std::auto_ptr< SimFlowPlant_HotWaterInletNodeName_type > x)
      {
        this->SimFlowPlant_HotWaterInletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_HotWaterOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterOutletNodeName () const
      {
        return this->SimFlowPlant_HotWaterOutletNodeName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_HotWaterOutletNodeName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterOutletNodeName ()
      {
        return this->SimFlowPlant_HotWaterOutletNodeName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterOutletNodeName (const SimFlowPlant_HotWaterOutletNodeName_type& x)
      {
        this->SimFlowPlant_HotWaterOutletNodeName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterOutletNodeName (const SimFlowPlant_HotWaterOutletNodeName_optional& x)
      {
        this->SimFlowPlant_HotWaterOutletNodeName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HotWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_HotWaterOutletNodeName_type > x)
      {
        this->SimFlowPlant_HotWaterOutletNodeName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_DesignEnterCondWaterTemp_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignEnterCondWaterTemp () const
      {
        return this->SimFlowPlant_DesignEnterCondWaterTemp_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_DesignEnterCondWaterTemp_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignEnterCondWaterTemp ()
      {
        return this->SimFlowPlant_DesignEnterCondWaterTemp_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignEnterCondWaterTemp (const SimFlowPlant_DesignEnterCondWaterTemp_type& x)
      {
        this->SimFlowPlant_DesignEnterCondWaterTemp_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignEnterCondWaterTemp (const SimFlowPlant_DesignEnterCondWaterTemp_optional& x)
      {
        this->SimFlowPlant_DesignEnterCondWaterTemp_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_DesignLeavChilledWaterTemp_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignLeavChilledWaterTemp () const
      {
        return this->SimFlowPlant_DesignLeavChilledWaterTemp_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_DesignLeavChilledWaterTemp_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignLeavChilledWaterTemp ()
      {
        return this->SimFlowPlant_DesignLeavChilledWaterTemp_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignLeavChilledWaterTemp (const SimFlowPlant_DesignLeavChilledWaterTemp_type& x)
      {
        this->SimFlowPlant_DesignLeavChilledWaterTemp_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignLeavChilledWaterTemp (const SimFlowPlant_DesignLeavChilledWaterTemp_optional& x)
      {
        this->SimFlowPlant_DesignLeavChilledWaterTemp_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_DesignHotWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignHotWaterFlowRate () const
      {
        return this->SimFlowPlant_DesignHotWaterFlowRate_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_DesignHotWaterFlowRate_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignHotWaterFlowRate ()
      {
        return this->SimFlowPlant_DesignHotWaterFlowRate_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignHotWaterFlowRate (const SimFlowPlant_DesignHotWaterFlowRate_type& x)
      {
        this->SimFlowPlant_DesignHotWaterFlowRate_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_DesignHotWaterFlowRate (const SimFlowPlant_DesignHotWaterFlowRate_optional& x)
      {
        this->SimFlowPlant_DesignHotWaterFlowRate_ = x;
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName () const
      {
        return this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName ()
      {
        return this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName (const SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName (::std::auto_ptr< SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName () const
      {
        return this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName ()
      {
        return this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type& x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName (const SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_optional& x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName (::std::auto_ptr< SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > x)
      {
        this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_HeatingCapFuncCoolingCapCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingCapFuncCoolingCapCurveName () const
      {
        return this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_HeatingCapFuncCoolingCapCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingCapFuncCoolingCapCurveName ()
      {
        return this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingCapFuncCoolingCapCurveName (const SimFlowPlant_HeatingCapFuncCoolingCapCurveName_type& x)
      {
        this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingCapFuncCoolingCapCurveName (const SimFlowPlant_HeatingCapFuncCoolingCapCurveName_optional& x)
      {
        this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_HeatingCapFuncCoolingCapCurveName (::std::auto_ptr< SimFlowPlant_HeatingCapFuncCoolingCapCurveName_type > x)
      {
        this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName () const
      {
        return this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName ()
      {
        return this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName (const SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_type& x)
      {
        this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName (const SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_optional& x)
      {
        this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName (::std::auto_ptr< SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_type > x)
      {
        this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_TempCurveInputVar_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_TempCurveInputVar () const
      {
        return this->SimFlowPlant_TempCurveInputVar_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_TempCurveInputVar_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_TempCurveInputVar ()
      {
        return this->SimFlowPlant_TempCurveInputVar_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_TempCurveInputVar (const SimFlowPlant_TempCurveInputVar_type& x)
      {
        this->SimFlowPlant_TempCurveInputVar_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_TempCurveInputVar (const SimFlowPlant_TempCurveInputVar_optional& x)
      {
        this->SimFlowPlant_TempCurveInputVar_ = x;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_TempCurveInputVar (::std::auto_ptr< SimFlowPlant_TempCurveInputVar_type > x)
      {
        this->SimFlowPlant_TempCurveInputVar_.set (x);
      }

      const SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterTempLowLimit_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterTempLowLimit () const
      {
        return this->SimFlowPlant_ChilledWaterTempLowLimit_;
      }

      SimFlowPlant_ChillerHeater::SimFlowPlant_ChilledWaterTempLowLimit_optional& SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterTempLowLimit ()
      {
        return this->SimFlowPlant_ChilledWaterTempLowLimit_;
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterTempLowLimit (const SimFlowPlant_ChilledWaterTempLowLimit_type& x)
      {
        this->SimFlowPlant_ChilledWaterTempLowLimit_.set (x);
      }

      void SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChilledWaterTempLowLimit (const SimFlowPlant_ChilledWaterTempLowLimit_optional& x)
      {
        this->SimFlowPlant_ChilledWaterTempLowLimit_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
      // SimFlowPlant_ChillerHeater
      //

      SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChillerHeater (const RefId_type& RefId)
      : ::namespaces::Sim::MepModel::SimFlowPlant (RefId),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_ChilledWaterInletNodeName_ (this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (this),
        SimFlowPlant_CondInletNodeName_ (this),
        SimFlowPlant_CondOutletNodeName_ (this),
        SimFlowPlant_CondType_ (this),
        SimFlowPlant_DesignChilledWaterFlowRate_ (this),
        SimFlowPlant_DesignCondWaterFlowRate_ (this),
        SimFlowPlant_NomCoolingCap_ (this),
        SimFlowPlant_HeatingToCoolingCapRatio_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatio_ (this),
        SimFlowPlant_ElecInputToHeatingOutputRatio_ (this),
        SimFlowPlant_HotWaterInletNodeName_ (this),
        SimFlowPlant_HotWaterOutletNodeName_ (this),
        SimFlowPlant_DesignEnterCondWaterTemp_ (this),
        SimFlowPlant_DesignLeavChilledWaterTemp_ (this),
        SimFlowPlant_DesignHotWaterFlowRate_ (this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_HeatingCapFuncCoolingCapCurveName_ (this),
        SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_ (this),
        SimFlowPlant_TempCurveInputVar_ (this),
        SimFlowPlant_ChilledWaterTempLowLimit_ (this)
      {
      }

      SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChillerHeater (const SimFlowPlant_ChillerHeater& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant (x, f, c),
        SimFlowPlant_MinPartLoadRatio_ (x.SimFlowPlant_MinPartLoadRatio_, f, this),
        SimFlowPlant_MaxPartLoadRatio_ (x.SimFlowPlant_MaxPartLoadRatio_, f, this),
        SimFlowPlant_OptimumPartLoadRatio_ (x.SimFlowPlant_OptimumPartLoadRatio_, f, this),
        SimFlowPlant_SizingFactor_ (x.SimFlowPlant_SizingFactor_, f, this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (x.SimFlowPlant_CoolingCapFuncTempCurveName_, f, this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_, f, this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_, f, this),
        SimFlowPlant_ChilledWaterInletNodeName_ (x.SimFlowPlant_ChilledWaterInletNodeName_, f, this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (x.SimFlowPlant_ChilledWaterOutletNodeName_, f, this),
        SimFlowPlant_CondInletNodeName_ (x.SimFlowPlant_CondInletNodeName_, f, this),
        SimFlowPlant_CondOutletNodeName_ (x.SimFlowPlant_CondOutletNodeName_, f, this),
        SimFlowPlant_CondType_ (x.SimFlowPlant_CondType_, f, this),
        SimFlowPlant_DesignChilledWaterFlowRate_ (x.SimFlowPlant_DesignChilledWaterFlowRate_, f, this),
        SimFlowPlant_DesignCondWaterFlowRate_ (x.SimFlowPlant_DesignCondWaterFlowRate_, f, this),
        SimFlowPlant_NomCoolingCap_ (x.SimFlowPlant_NomCoolingCap_, f, this),
        SimFlowPlant_HeatingToCoolingCapRatio_ (x.SimFlowPlant_HeatingToCoolingCapRatio_, f, this),
        SimFlowPlant_ElecInputToCoolingOutputRatio_ (x.SimFlowPlant_ElecInputToCoolingOutputRatio_, f, this),
        SimFlowPlant_ElecInputToHeatingOutputRatio_ (x.SimFlowPlant_ElecInputToHeatingOutputRatio_, f, this),
        SimFlowPlant_HotWaterInletNodeName_ (x.SimFlowPlant_HotWaterInletNodeName_, f, this),
        SimFlowPlant_HotWaterOutletNodeName_ (x.SimFlowPlant_HotWaterOutletNodeName_, f, this),
        SimFlowPlant_DesignEnterCondWaterTemp_ (x.SimFlowPlant_DesignEnterCondWaterTemp_, f, this),
        SimFlowPlant_DesignLeavChilledWaterTemp_ (x.SimFlowPlant_DesignLeavChilledWaterTemp_, f, this),
        SimFlowPlant_DesignHotWaterFlowRate_ (x.SimFlowPlant_DesignHotWaterFlowRate_, f, this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_ (x.SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_, f, this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (x.SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_, f, this),
        SimFlowPlant_HeatingCapFuncCoolingCapCurveName_ (x.SimFlowPlant_HeatingCapFuncCoolingCapCurveName_, f, this),
        SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_ (x.SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_, f, this),
        SimFlowPlant_TempCurveInputVar_ (x.SimFlowPlant_TempCurveInputVar_, f, this),
        SimFlowPlant_ChilledWaterTempLowLimit_ (x.SimFlowPlant_ChilledWaterTempLowLimit_, f, this)
      {
      }

      SimFlowPlant_ChillerHeater::
      SimFlowPlant_ChillerHeater (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
      : ::namespaces::Sim::MepModel::SimFlowPlant (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_MinPartLoadRatio_ (this),
        SimFlowPlant_MaxPartLoadRatio_ (this),
        SimFlowPlant_OptimumPartLoadRatio_ (this),
        SimFlowPlant_SizingFactor_ (this),
        SimFlowPlant_CoolingCapFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_ChilledWaterInletNodeName_ (this),
        SimFlowPlant_ChilledWaterOutletNodeName_ (this),
        SimFlowPlant_CondInletNodeName_ (this),
        SimFlowPlant_CondOutletNodeName_ (this),
        SimFlowPlant_CondType_ (this),
        SimFlowPlant_DesignChilledWaterFlowRate_ (this),
        SimFlowPlant_DesignCondWaterFlowRate_ (this),
        SimFlowPlant_NomCoolingCap_ (this),
        SimFlowPlant_HeatingToCoolingCapRatio_ (this),
        SimFlowPlant_ElecInputToCoolingOutputRatio_ (this),
        SimFlowPlant_ElecInputToHeatingOutputRatio_ (this),
        SimFlowPlant_HotWaterInletNodeName_ (this),
        SimFlowPlant_HotWaterOutletNodeName_ (this),
        SimFlowPlant_DesignEnterCondWaterTemp_ (this),
        SimFlowPlant_DesignLeavChilledWaterTemp_ (this),
        SimFlowPlant_DesignHotWaterFlowRate_ (this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_ (this),
        SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ (this),
        SimFlowPlant_HeatingCapFuncCoolingCapCurveName_ (this),
        SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_ (this),
        SimFlowPlant_TempCurveInputVar_ (this),
        SimFlowPlant_ChilledWaterTempLowLimit_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_ChillerHeater::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::namespaces::Sim::MepModel::SimFlowPlant::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_MinPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MinPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MinPartLoadRatio_)
            {
              this->SimFlowPlant_MinPartLoadRatio_.set (SimFlowPlant_MinPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_MaxPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_MaxPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_MaxPartLoadRatio_)
            {
              this->SimFlowPlant_MaxPartLoadRatio_.set (SimFlowPlant_MaxPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_OptimumPartLoadRatio
          //
          if (n.name () == "SimFlowPlant_OptimumPartLoadRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_OptimumPartLoadRatio_)
            {
              this->SimFlowPlant_OptimumPartLoadRatio_.set (SimFlowPlant_OptimumPartLoadRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_SizingFactor
          //
          if (n.name () == "SimFlowPlant_SizingFactor" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_SizingFactor_)
            {
              this->SimFlowPlant_SizingFactor_.set (SimFlowPlant_SizingFactor_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_CoolingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowPlant_CoolingCapFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CoolingCapFuncTempCurveName_type > r (
              SimFlowPlant_CoolingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CoolingCapFuncTempCurveName_)
            {
              this->SimFlowPlant_CoolingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_type > r (
              SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_)
            {
              this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName
          //
          if (n.name () == "SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > r (
              SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_)
            {
              this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ChilledWaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_ChilledWaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChilledWaterInletNodeName_type > r (
              SimFlowPlant_ChilledWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChilledWaterInletNodeName_)
            {
              this->SimFlowPlant_ChilledWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ChilledWaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_ChilledWaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_ChilledWaterOutletNodeName_type > r (
              SimFlowPlant_ChilledWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_ChilledWaterOutletNodeName_)
            {
              this->SimFlowPlant_ChilledWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondInletNodeName
          //
          if (n.name () == "SimFlowPlant_CondInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondInletNodeName_type > r (
              SimFlowPlant_CondInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondInletNodeName_)
            {
              this->SimFlowPlant_CondInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondOutletNodeName
          //
          if (n.name () == "SimFlowPlant_CondOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondOutletNodeName_type > r (
              SimFlowPlant_CondOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondOutletNodeName_)
            {
              this->SimFlowPlant_CondOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_CondType
          //
          if (n.name () == "SimFlowPlant_CondType" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_CondType_type > r (
              SimFlowPlant_CondType_traits::create (i, f, this));

            if (!this->SimFlowPlant_CondType_)
            {
              this->SimFlowPlant_CondType_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignChilledWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignChilledWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignChilledWaterFlowRate_)
            {
              this->SimFlowPlant_DesignChilledWaterFlowRate_.set (SimFlowPlant_DesignChilledWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignCondWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignCondWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignCondWaterFlowRate_)
            {
              this->SimFlowPlant_DesignCondWaterFlowRate_.set (SimFlowPlant_DesignCondWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_NomCoolingCap
          //
          if (n.name () == "SimFlowPlant_NomCoolingCap" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_NomCoolingCap_)
            {
              this->SimFlowPlant_NomCoolingCap_.set (SimFlowPlant_NomCoolingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HeatingToCoolingCapRatio
          //
          if (n.name () == "SimFlowPlant_HeatingToCoolingCapRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_HeatingToCoolingCapRatio_)
            {
              this->SimFlowPlant_HeatingToCoolingCapRatio_.set (SimFlowPlant_HeatingToCoolingCapRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ElecInputToCoolingOutputRatio
          //
          if (n.name () == "SimFlowPlant_ElecInputToCoolingOutputRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ElecInputToCoolingOutputRatio_)
            {
              this->SimFlowPlant_ElecInputToCoolingOutputRatio_.set (SimFlowPlant_ElecInputToCoolingOutputRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_ElecInputToHeatingOutputRatio
          //
          if (n.name () == "SimFlowPlant_ElecInputToHeatingOutputRatio" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ElecInputToHeatingOutputRatio_)
            {
              this->SimFlowPlant_ElecInputToHeatingOutputRatio_.set (SimFlowPlant_ElecInputToHeatingOutputRatio_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HotWaterInletNodeName
          //
          if (n.name () == "SimFlowPlant_HotWaterInletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HotWaterInletNodeName_type > r (
              SimFlowPlant_HotWaterInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HotWaterInletNodeName_)
            {
              this->SimFlowPlant_HotWaterInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HotWaterOutletNodeName
          //
          if (n.name () == "SimFlowPlant_HotWaterOutletNodeName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HotWaterOutletNodeName_type > r (
              SimFlowPlant_HotWaterOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HotWaterOutletNodeName_)
            {
              this->SimFlowPlant_HotWaterOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_DesignEnterCondWaterTemp
          //
          if (n.name () == "SimFlowPlant_DesignEnterCondWaterTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignEnterCondWaterTemp_)
            {
              this->SimFlowPlant_DesignEnterCondWaterTemp_.set (SimFlowPlant_DesignEnterCondWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignLeavChilledWaterTemp
          //
          if (n.name () == "SimFlowPlant_DesignLeavChilledWaterTemp" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignLeavChilledWaterTemp_)
            {
              this->SimFlowPlant_DesignLeavChilledWaterTemp_.set (SimFlowPlant_DesignLeavChilledWaterTemp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_DesignHotWaterFlowRate
          //
          if (n.name () == "SimFlowPlant_DesignHotWaterFlowRate" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_DesignHotWaterFlowRate_)
            {
              this->SimFlowPlant_DesignHotWaterFlowRate_.set (SimFlowPlant_DesignHotWaterFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_type > r (
              SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_)
            {
              this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName
          //
          if (n.name () == "SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_type > r (
              SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_)
            {
              this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatingCapFuncCoolingCapCurveName
          //
          if (n.name () == "SimFlowPlant_HeatingCapFuncCoolingCapCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatingCapFuncCoolingCapCurveName_type > r (
              SimFlowPlant_HeatingCapFuncCoolingCapCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_)
            {
              this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName
          //
          if (n.name () == "SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_type > r (
              SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_traits::create (i, f, this));

            if (!this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_)
            {
              this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_TempCurveInputVar
          //
          if (n.name () == "SimFlowPlant_TempCurveInputVar" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_TempCurveInputVar_type > r (
              SimFlowPlant_TempCurveInputVar_traits::create (i, f, this));

            if (!this->SimFlowPlant_TempCurveInputVar_)
            {
              this->SimFlowPlant_TempCurveInputVar_.set (r);
              continue;
            }
          }

          // SimFlowPlant_ChilledWaterTempLowLimit
          //
          if (n.name () == "SimFlowPlant_ChilledWaterTempLowLimit" && n.namespace_ () == "http://www.lbl.gov/namespaces/Sim/MepModel")
          {
            if (!this->SimFlowPlant_ChilledWaterTempLowLimit_)
            {
              this->SimFlowPlant_ChilledWaterTempLowLimit_.set (SimFlowPlant_ChilledWaterTempLowLimit_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_ChillerHeater* SimFlowPlant_ChillerHeater::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_ChillerHeater (*this, f, c);
      }

      SimFlowPlant_ChillerHeater& SimFlowPlant_ChillerHeater::
      operator= (const SimFlowPlant_ChillerHeater& x)
      {
        if (this != &x)
        {
          static_cast< ::namespaces::Sim::MepModel::SimFlowPlant& > (*this) = x;
          this->SimFlowPlant_MinPartLoadRatio_ = x.SimFlowPlant_MinPartLoadRatio_;
          this->SimFlowPlant_MaxPartLoadRatio_ = x.SimFlowPlant_MaxPartLoadRatio_;
          this->SimFlowPlant_OptimumPartLoadRatio_ = x.SimFlowPlant_OptimumPartLoadRatio_;
          this->SimFlowPlant_SizingFactor_ = x.SimFlowPlant_SizingFactor_;
          this->SimFlowPlant_CoolingCapFuncTempCurveName_ = x.SimFlowPlant_CoolingCapFuncTempCurveName_;
          this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_ = x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncTempCurveName_;
          this->SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x.SimFlowPlant_ElecInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
          this->SimFlowPlant_ChilledWaterInletNodeName_ = x.SimFlowPlant_ChilledWaterInletNodeName_;
          this->SimFlowPlant_ChilledWaterOutletNodeName_ = x.SimFlowPlant_ChilledWaterOutletNodeName_;
          this->SimFlowPlant_CondInletNodeName_ = x.SimFlowPlant_CondInletNodeName_;
          this->SimFlowPlant_CondOutletNodeName_ = x.SimFlowPlant_CondOutletNodeName_;
          this->SimFlowPlant_CondType_ = x.SimFlowPlant_CondType_;
          this->SimFlowPlant_DesignChilledWaterFlowRate_ = x.SimFlowPlant_DesignChilledWaterFlowRate_;
          this->SimFlowPlant_DesignCondWaterFlowRate_ = x.SimFlowPlant_DesignCondWaterFlowRate_;
          this->SimFlowPlant_NomCoolingCap_ = x.SimFlowPlant_NomCoolingCap_;
          this->SimFlowPlant_HeatingToCoolingCapRatio_ = x.SimFlowPlant_HeatingToCoolingCapRatio_;
          this->SimFlowPlant_ElecInputToCoolingOutputRatio_ = x.SimFlowPlant_ElecInputToCoolingOutputRatio_;
          this->SimFlowPlant_ElecInputToHeatingOutputRatio_ = x.SimFlowPlant_ElecInputToHeatingOutputRatio_;
          this->SimFlowPlant_HotWaterInletNodeName_ = x.SimFlowPlant_HotWaterInletNodeName_;
          this->SimFlowPlant_HotWaterOutletNodeName_ = x.SimFlowPlant_HotWaterOutletNodeName_;
          this->SimFlowPlant_DesignEnterCondWaterTemp_ = x.SimFlowPlant_DesignEnterCondWaterTemp_;
          this->SimFlowPlant_DesignLeavChilledWaterTemp_ = x.SimFlowPlant_DesignLeavChilledWaterTemp_;
          this->SimFlowPlant_DesignHotWaterFlowRate_ = x.SimFlowPlant_DesignHotWaterFlowRate_;
          this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_ = x.SimFlowPlant_FuelInputToCoolingOutputRatioFuncTempCurveName_;
          this->SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_ = x.SimFlowPlant_FuelInputToCoolingOutputRatioFuncPartLoadRatioCurveName_;
          this->SimFlowPlant_HeatingCapFuncCoolingCapCurveName_ = x.SimFlowPlant_HeatingCapFuncCoolingCapCurveName_;
          this->SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_ = x.SimFlowPlant_FuelInputToHeatOutputRatioDuringHeatingOnlyOpCurveName_;
          this->SimFlowPlant_TempCurveInputVar_ = x.SimFlowPlant_TempCurveInputVar_;
          this->SimFlowPlant_ChilledWaterTempLowLimit_ = x.SimFlowPlant_ChilledWaterTempLowLimit_;
        }

        return *this;
      }

      SimFlowPlant_ChillerHeater::
      ~SimFlowPlant_ChillerHeater ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace namespaces
{
  namespace Sim
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

