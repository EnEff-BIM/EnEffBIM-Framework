# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SimModel_Mapping', [dirname(__file__)])
        except ImportError:
            import _SimModel_Mapping
            return _SimModel_Mapping
        if fp is not None:
            try:
                _mod = imp.load_module('_SimModel_Mapping', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SimModel_Mapping = swig_import_helper()
    del swig_import_helper
else:
    import _SimModel_Mapping
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimModel_Mapping.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SimModel_Mapping.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SimModel_Mapping.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SimModel_Mapping.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SimModel_Mapping.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SimModel_Mapping.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SimModel_Mapping.SwigPyIterator_copy(self)

    def next(self):
        return _SimModel_Mapping.SwigPyIterator_next(self)

    def __next__(self):
        return _SimModel_Mapping.SwigPyIterator___next__(self)

    def previous(self):
        return _SimModel_Mapping.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SimModel_Mapping.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SimModel_Mapping.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SimModel_Mapping.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SimModel_Mapping.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SimModel_Mapping.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SimModel_Mapping.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SimModel_Mapping.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SimModel_Mapping.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MappedProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MappedProperty, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SimModel_Mapping.new_MappedProperty()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SimModel_Mapping.delete_MappedProperty
    __del__ = lambda self: None
MappedProperty_swigregister = _SimModel_Mapping.MappedProperty_swigregister
MappedProperty_swigregister(MappedProperty)

class MappedComponent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedComponent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MappedComponent, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SimModel_Mapping.new_MappedComponent()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getUnmappedSimHierarchyNodes(self):
        return _SimModel_Mapping.MappedComponent_getUnmappedSimHierarchyNodes(self)

    def getMappedPropertyList(self):
        return _SimModel_Mapping.MappedComponent_getMappedPropertyList(self)

    def getMappingRuleName(self):
        return _SimModel_Mapping.MappedComponent_getMappingRuleName(self)

    def getTargetComponentName(self):
        return _SimModel_Mapping.MappedComponent_getTargetComponentName(self)

    def getTargetLocation(self):
        return _SimModel_Mapping.MappedComponent_getTargetLocation(self)
    __swig_destroy__ = _SimModel_Mapping.delete_MappedComponent
    __del__ = lambda self: None
MappedComponent_swigregister = _SimModel_Mapping.MappedComponent_swigregister
MappedComponent_swigregister(MappedComponent)

def setMappingRuleName(_mapCom, _mapName):
    return _SimModel_Mapping.setMappingRuleName(_mapCom, _mapName)
setMappingRuleName = _SimModel_Mapping.setMappingRuleName

def setTargetComponentName(_mapCom, _targetName):
    return _SimModel_Mapping.setTargetComponentName(_mapCom, _targetName)
setTargetComponentName = _SimModel_Mapping.setTargetComponentName

def setTargetLocation(_mapCom, _targetLocation):
    return _SimModel_Mapping.setTargetLocation(_mapCom, _targetLocation)
setTargetLocation = _SimModel_Mapping.setTargetLocation

class SimMappedData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimMappedData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimMappedData, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _SimModel_Mapping.new_SimMappedData()
        try:
            self.this.append(this)
        except:
            self.this = this

    def getMappedComponentList(self):
        return _SimModel_Mapping.SimMappedData_getMappedComponentList(self)
    __swig_destroy__ = _SimModel_Mapping.delete_SimMappedData
    __del__ = lambda self: None
SimMappedData_swigregister = _SimModel_Mapping.SimMappedData_swigregister
SimMappedData_swigregister(SimMappedData)

class MappedComponentList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedComponentList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MappedComponentList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SimModel_Mapping.MappedComponentList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SimModel_Mapping.MappedComponentList___nonzero__(self)

    def __bool__(self):
        return _SimModel_Mapping.MappedComponentList___bool__(self)

    def __len__(self):
        return _SimModel_Mapping.MappedComponentList___len__(self)

    def pop(self):
        return _SimModel_Mapping.MappedComponentList_pop(self)

    def __getslice__(self, i, j):
        return _SimModel_Mapping.MappedComponentList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SimModel_Mapping.MappedComponentList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SimModel_Mapping.MappedComponentList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SimModel_Mapping.MappedComponentList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SimModel_Mapping.MappedComponentList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SimModel_Mapping.MappedComponentList___setitem__(self, *args)

    def append(self, x):
        return _SimModel_Mapping.MappedComponentList_append(self, x)

    def empty(self):
        return _SimModel_Mapping.MappedComponentList_empty(self)

    def size(self):
        return _SimModel_Mapping.MappedComponentList_size(self)

    def clear(self):
        return _SimModel_Mapping.MappedComponentList_clear(self)

    def swap(self, v):
        return _SimModel_Mapping.MappedComponentList_swap(self, v)

    def get_allocator(self):
        return _SimModel_Mapping.MappedComponentList_get_allocator(self)

    def begin(self):
        return _SimModel_Mapping.MappedComponentList_begin(self)

    def end(self):
        return _SimModel_Mapping.MappedComponentList_end(self)

    def rbegin(self):
        return _SimModel_Mapping.MappedComponentList_rbegin(self)

    def rend(self):
        return _SimModel_Mapping.MappedComponentList_rend(self)

    def pop_back(self):
        return _SimModel_Mapping.MappedComponentList_pop_back(self)

    def erase(self, *args):
        return _SimModel_Mapping.MappedComponentList_erase(self, *args)

    def __init__(self, *args):
        this = _SimModel_Mapping.new_MappedComponentList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SimModel_Mapping.MappedComponentList_push_back(self, x)

    def front(self):
        return _SimModel_Mapping.MappedComponentList_front(self)

    def back(self):
        return _SimModel_Mapping.MappedComponentList_back(self)

    def assign(self, n, x):
        return _SimModel_Mapping.MappedComponentList_assign(self, n, x)

    def resize(self, *args):
        return _SimModel_Mapping.MappedComponentList_resize(self, *args)

    def insert(self, *args):
        return _SimModel_Mapping.MappedComponentList_insert(self, *args)

    def reserve(self, n):
        return _SimModel_Mapping.MappedComponentList_reserve(self, n)

    def capacity(self):
        return _SimModel_Mapping.MappedComponentList_capacity(self)
    __swig_destroy__ = _SimModel_Mapping.delete_MappedComponentList
    __del__ = lambda self: None
MappedComponentList_swigregister = _SimModel_Mapping.MappedComponentList_swigregister
MappedComponentList_swigregister(MappedComponentList)

class MappedComponentRefList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedComponentRefList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MappedComponentRefList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SimModel_Mapping.MappedComponentRefList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SimModel_Mapping.MappedComponentRefList___nonzero__(self)

    def __bool__(self):
        return _SimModel_Mapping.MappedComponentRefList___bool__(self)

    def __len__(self):
        return _SimModel_Mapping.MappedComponentRefList___len__(self)

    def pop(self):
        return _SimModel_Mapping.MappedComponentRefList_pop(self)

    def __getslice__(self, i, j):
        return _SimModel_Mapping.MappedComponentRefList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SimModel_Mapping.MappedComponentRefList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SimModel_Mapping.MappedComponentRefList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SimModel_Mapping.MappedComponentRefList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SimModel_Mapping.MappedComponentRefList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SimModel_Mapping.MappedComponentRefList___setitem__(self, *args)

    def append(self, x):
        return _SimModel_Mapping.MappedComponentRefList_append(self, x)

    def empty(self):
        return _SimModel_Mapping.MappedComponentRefList_empty(self)

    def size(self):
        return _SimModel_Mapping.MappedComponentRefList_size(self)

    def clear(self):
        return _SimModel_Mapping.MappedComponentRefList_clear(self)

    def swap(self, v):
        return _SimModel_Mapping.MappedComponentRefList_swap(self, v)

    def get_allocator(self):
        return _SimModel_Mapping.MappedComponentRefList_get_allocator(self)

    def begin(self):
        return _SimModel_Mapping.MappedComponentRefList_begin(self)

    def end(self):
        return _SimModel_Mapping.MappedComponentRefList_end(self)

    def rbegin(self):
        return _SimModel_Mapping.MappedComponentRefList_rbegin(self)

    def rend(self):
        return _SimModel_Mapping.MappedComponentRefList_rend(self)

    def pop_back(self):
        return _SimModel_Mapping.MappedComponentRefList_pop_back(self)

    def erase(self, *args):
        return _SimModel_Mapping.MappedComponentRefList_erase(self, *args)

    def __init__(self, *args):
        this = _SimModel_Mapping.new_MappedComponentRefList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SimModel_Mapping.MappedComponentRefList_push_back(self, x)

    def front(self):
        return _SimModel_Mapping.MappedComponentRefList_front(self)

    def back(self):
        return _SimModel_Mapping.MappedComponentRefList_back(self)

    def assign(self, n, x):
        return _SimModel_Mapping.MappedComponentRefList_assign(self, n, x)

    def resize(self, *args):
        return _SimModel_Mapping.MappedComponentRefList_resize(self, *args)

    def insert(self, *args):
        return _SimModel_Mapping.MappedComponentRefList_insert(self, *args)

    def reserve(self, n):
        return _SimModel_Mapping.MappedComponentRefList_reserve(self, n)

    def capacity(self):
        return _SimModel_Mapping.MappedComponentRefList_capacity(self)
    __swig_destroy__ = _SimModel_Mapping.delete_MappedComponentRefList
    __del__ = lambda self: None
MappedComponentRefList_swigregister = _SimModel_Mapping.MappedComponentRefList_swigregister
MappedComponentRefList_swigregister(MappedComponentRefList)

class MappedPropertyList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MappedPropertyList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MappedPropertyList, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _SimModel_Mapping.MappedPropertyList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _SimModel_Mapping.MappedPropertyList___nonzero__(self)

    def __bool__(self):
        return _SimModel_Mapping.MappedPropertyList___bool__(self)

    def __len__(self):
        return _SimModel_Mapping.MappedPropertyList___len__(self)

    def pop(self):
        return _SimModel_Mapping.MappedPropertyList_pop(self)

    def __getslice__(self, i, j):
        return _SimModel_Mapping.MappedPropertyList___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _SimModel_Mapping.MappedPropertyList___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _SimModel_Mapping.MappedPropertyList___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _SimModel_Mapping.MappedPropertyList___delitem__(self, *args)

    def __getitem__(self, *args):
        return _SimModel_Mapping.MappedPropertyList___getitem__(self, *args)

    def __setitem__(self, *args):
        return _SimModel_Mapping.MappedPropertyList___setitem__(self, *args)

    def append(self, x):
        return _SimModel_Mapping.MappedPropertyList_append(self, x)

    def empty(self):
        return _SimModel_Mapping.MappedPropertyList_empty(self)

    def size(self):
        return _SimModel_Mapping.MappedPropertyList_size(self)

    def clear(self):
        return _SimModel_Mapping.MappedPropertyList_clear(self)

    def swap(self, v):
        return _SimModel_Mapping.MappedPropertyList_swap(self, v)

    def get_allocator(self):
        return _SimModel_Mapping.MappedPropertyList_get_allocator(self)

    def begin(self):
        return _SimModel_Mapping.MappedPropertyList_begin(self)

    def end(self):
        return _SimModel_Mapping.MappedPropertyList_end(self)

    def rbegin(self):
        return _SimModel_Mapping.MappedPropertyList_rbegin(self)

    def rend(self):
        return _SimModel_Mapping.MappedPropertyList_rend(self)

    def pop_back(self):
        return _SimModel_Mapping.MappedPropertyList_pop_back(self)

    def erase(self, *args):
        return _SimModel_Mapping.MappedPropertyList_erase(self, *args)

    def __init__(self, *args):
        this = _SimModel_Mapping.new_MappedPropertyList(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def push_back(self, x):
        return _SimModel_Mapping.MappedPropertyList_push_back(self, x)

    def front(self):
        return _SimModel_Mapping.MappedPropertyList_front(self)

    def back(self):
        return _SimModel_Mapping.MappedPropertyList_back(self)

    def assign(self, n, x):
        return _SimModel_Mapping.MappedPropertyList_assign(self, n, x)

    def resize(self, *args):
        return _SimModel_Mapping.MappedPropertyList_resize(self, *args)

    def insert(self, *args):
        return _SimModel_Mapping.MappedPropertyList_insert(self, *args)

    def reserve(self, n):
        return _SimModel_Mapping.MappedPropertyList_reserve(self, n)

    def capacity(self):
        return _SimModel_Mapping.MappedPropertyList_capacity(self)
    __swig_destroy__ = _SimModel_Mapping.delete_MappedPropertyList
    __del__ = lambda self: None
MappedPropertyList_swigregister = _SimModel_Mapping.MappedPropertyList_swigregister
MappedPropertyList_swigregister(MappedPropertyList)

# This file is compatible with both classic and new-style classes.


