# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SimModel_PyCallBack', [dirname(__file__)])
        except ImportError:
            import _SimModel_PyCallBack
            return _SimModel_PyCallBack
        if fp is not None:
            try:
                _mod = imp.load_module('_SimModel_PyCallBack', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SimModel_PyCallBack = swig_import_helper()
    del swig_import_helper
else:
    import _SimModel_PyCallBack
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _SimModel_PyCallBack.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _SimModel_PyCallBack.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _SimModel_PyCallBack.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _SimModel_PyCallBack.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _SimModel_PyCallBack.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _SimModel_PyCallBack.SwigPyIterator_equal(self, x)

    def copy(self):
        return _SimModel_PyCallBack.SwigPyIterator_copy(self)

    def next(self):
        return _SimModel_PyCallBack.SwigPyIterator_next(self)

    def __next__(self):
        return _SimModel_PyCallBack.SwigPyIterator___next__(self)

    def previous(self):
        return _SimModel_PyCallBack.SwigPyIterator_previous(self)

    def advance(self, n):
        return _SimModel_PyCallBack.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _SimModel_PyCallBack.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _SimModel_PyCallBack.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _SimModel_PyCallBack.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _SimModel_PyCallBack.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _SimModel_PyCallBack.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _SimModel_PyCallBack.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _SimModel_PyCallBack.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import SimModel
import base
class SimPyCallBack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimPyCallBack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimPyCallBack, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == SimPyCallBack:
            _self = None
        else:
            _self = self
        this = _SimModel_PyCallBack.new_SimPyCallBack(_self, )
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _SimModel_PyCallBack.delete_SimPyCallBack
    __del__ = lambda self: None

    def loadSimClassObj(self, _dataName, _simClassList):
        return _SimModel_PyCallBack.SimPyCallBack_loadSimClassObj(self, _dataName, _simClassList)

    def loadSimGeomClassObj(self, _geomDataName, _simGeomClassList):
        return _SimModel_PyCallBack.SimPyCallBack_loadSimGeomClassObj(self, _geomDataName, _simGeomClassList)

    def loadSimSysClassObj(self, _sysDataName, _simSysClassList):
        return _SimModel_PyCallBack.SimPyCallBack_loadSimSysClassObj(self, _sysDataName, _simSysClassList)

    def getSimClassObj(self, _id):
        return _SimModel_PyCallBack.SimPyCallBack_getSimClassObj(self, _id)

    def getReferenceId(self, _classId, _propertyName):
        return _SimModel_PyCallBack.SimPyCallBack_getReferenceId(self, _classId, _propertyName)

    def getIO(self, _name):
        return _SimModel_PyCallBack.SimPyCallBack_getIO(self, _name)

    def getRefValueType(self, _classId, _propertyName):
        return _SimModel_PyCallBack.SimPyCallBack_getRefValueType(self, _classId, _propertyName)

    def getRefNumberValue(self, _classId, _propertyName):
        return _SimModel_PyCallBack.SimPyCallBack_getRefNumberValue(self, _classId, _propertyName)

    def getRefStringValue(self, _classId, _propertyName):
        return _SimModel_PyCallBack.SimPyCallBack_getRefStringValue(self, _classId, _propertyName)
    def __disown__(self):
        self.this.disown()
        _SimModel_PyCallBack.disown_SimPyCallBack(self)
        return weakref_proxy(self)
SimPyCallBack_swigregister = _SimModel_PyCallBack.SimPyCallBack_swigregister
SimPyCallBack_swigregister(SimPyCallBack)

class CallBack(SimPyCallBack):
    def __init__(self):
        super(CallBack, self).__init__()
        self._sim = None
        self._simGeom = None
        self._simSys = None
        self._dict = {}
    def loadSimClassObj(self, _dataName, _simClassList):
        if self._sim == None:
            self._sim = SimModel.SimModel_(_dataName)
        for id in range(0, _simClassList.size()):
            _objList = getattr(self._sim, _simClassList[id])()
            for subId in range(0, _objList.sizeInt()):
                self._dict[_objList.at(subId).RefId()] = _objList.at(subId)
    def loadSimGeomClassObj(self, _geomDataName, _simGeomClassList):
        if self._simGeom == None:
            self._simGeom = SimModel.SimModel_(_geomDataName)
        for id in range(0, _simGeomClassList.size()):
            _objList = getattr(self._simGeom, _simGeomClassList[id])()
            for subId in range(0, _objList.sizeInt()):
                self._dict[_objList.at(subId).RefId()] = _objList.at(subId)
    def loadSimSysClassObj(self, _sysDataName, _simSysClassList):
        if self._simSys == None:
            self._simSys = SimModel.SimModel_(_sysDataName)
        for id in range(0, _simSysClassList.size()):
            _objList = getattr(self._simSys, _simSysClassList[id])()
            for subId in range(0, _objList.sizeInt()):
                self._dict[_objList.at(subId).RefId()] = _objList.at(subId)
    def getSimClassObj(self, _id):
        if _id in self._dict:
            return self._dict[_id]
        else:
            return None
    def getReferenceId(self, _classId, _propertyName):
        _classObj = self.getSimClassObj(_classId)
        if _classObj is not None and getattr(_classObj, _propertyName)().present():
            return getattr(_classObj, _propertyName)().getValue()
    def getIO(self, _name):
        print(_name)
    def getRefValueType(self, _classId, _propertyName):
        _classObj = self.getSimClassObj(_classId)
        if _classObj is not None and getattr(_classObj, _propertyName)().present():
            if type(getattr(_classObj, _propertyName)().getValue()) is str:
                return "String"
            else:
                return "Number"
    def getRefNumberValue(self, _classId, _propertyName):
        _classObj = self.getSimClassObj(_classId)
        if _classObj is not None and getattr(_classObj, _propertyName)().present():
            return getattr(_classObj, _propertyName)().getValue()
    def getRefStringValue(self, _classId, _propertyName):
        _classObj = self.getSimClassObj(_classId)
        if _classObj is not None and getattr(_classObj, _propertyName)().present():
            return getattr(_classObj, _propertyName)().getValue()    

# This file is compatible with both classic and new-style classes.


