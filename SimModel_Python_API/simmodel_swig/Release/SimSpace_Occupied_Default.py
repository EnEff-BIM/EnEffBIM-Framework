# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SimSpace_Occupied_Default', [dirname(__file__)])
        except ImportError:
            import _SimSpace_Occupied_Default
            return _SimSpace_Occupied_Default
        if fp is not None:
            try:
                _mod = imp.load_module('_SimSpace_Occupied_Default', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SimSpace_Occupied_Default = swig_import_helper()
    del swig_import_helper
else:
    import _SimSpace_Occupied_Default
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import base
class SimSpace(base.SimSpatialStructureElement):
    __swig_setmethods__ = {}
    for _s in [base.SimSpatialStructureElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpace, name, value)
    __swig_getmethods__ = {}
    for _s in [base.SimSpatialStructureElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpace, name)
    __repr__ = _swig_repr

    def SpaceZoneAssignments(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceZoneAssignments(self, *args)

    def SpaceNumber(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceNumber(self, *args)

    def SpaceName(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceName(self, *args)

    def SpaceInteriorOrExterior(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceInteriorOrExterior(self, *args)

    def SpaceDatumElevation(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceDatumElevation(self, *args)

    def SpaceThermalSimulationType(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceThermalSimulationType(self, *args)

    def SpaceConditioningRequirement(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceConditioningRequirement(self, *args)

    def SpaceOccupantDensity(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceOccupantDensity(self, *args)

    def SpaceOccupantHeatRateLatent(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceOccupantHeatRateLatent(self, *args)

    def SpaceOccupantHeatRateSensible(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceOccupantHeatRateSensible(self, *args)

    def SpaceOccupantLoad(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceOccupantLoad(self, *args)

    def SpaceEquipmentLoad(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceEquipmentLoad(self, *args)

    def SpaceLightingLoad(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceLightingLoad(self, *args)

    def InsideDryBulbTempHeating(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_InsideDryBulbTempHeating(self, *args)

    def InsideRelHumidityHeating(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_InsideRelHumidityHeating(self, *args)

    def InsideDryBulbTempCooling(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_InsideDryBulbTempCooling(self, *args)

    def InsideRelHumidityCooling(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_InsideRelHumidityCooling(self, *args)

    def IncludesReturnAirPlenum(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_IncludesReturnAirPlenum(self, *args)

    def PeakAirFlowCooling(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_PeakAirFlowCooling(self, *args)

    def PeakAirFlowHeating(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_PeakAirFlowHeating(self, *args)

    def ExhaustAirFlowRate(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_ExhaustAirFlowRate(self, *args)

    def NaturalAirChangeRate(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_NaturalAirChangeRate(self, *args)

    def MechanicalAirChangeRate(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_MechanicalAirChangeRate(self, *args)

    def VentilationType(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_VentilationType(self, *args)

    def OutsideAirPerPerson(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_OutsideAirPerPerson(self, *args)

    def SpaceHeight(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceHeight(self, *args)

    def SpaceGrossPerimeter(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceGrossPerimeter(self, *args)

    def SpaceGrossFloorArea(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceGrossFloorArea(self, *args)

    def SpaceNetFloorArea(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceNetFloorArea(self, *args)

    def SpaceGrossVolume(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceGrossVolume(self, *args)

    def SpaceNetVolume(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceNetVolume(self, *args)

    def SpaceNetFloorAreaBOMA(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceNetFloorAreaBOMA(self, *args)

    def SpaceUsableFloorAreaBOMA(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceUsableFloorAreaBOMA(self, *args)

    def ClassRef_SpaceByFunction(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_ClassRef_SpaceByFunction(self, *args)

    def ClassRef_SpaceTypeOwner(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_ClassRef_SpaceTypeOwner(self, *args)

    def ClassRef_SpaceCategoryOwner(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_ClassRef_SpaceCategoryOwner(self, *args)

    def ClassRef_SpaceCategoryBOMA(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_ClassRef_SpaceCategoryBOMA(self, *args)

    def SpaceOccupants(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceOccupants(self, *args)

    def OccupancyScheduleAssignment(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_OccupancyScheduleAssignment(self, *args)

    def LightingScheduleAssignment(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_LightingScheduleAssignment(self, *args)

    def EquipmentScheduleAssignment(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_EquipmentScheduleAssignment(self, *args)

    def GeometricRepresentations(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_GeometricRepresentations(self, *args)

    def SpaceInSpatialContainer(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_SpaceInSpatialContainer(self, *args)

    def AssociatedPlena(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_AssociatedPlena(self, *args)

    def AssociatedElements(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_AssociatedElements(self, *args)

    def __init__(self, *args):
        this = _SimSpace_Occupied_Default.new_SimSpace(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimSpace_Occupied_Default.SimSpace__clone(self, f, c)
    __swig_destroy__ = _SimSpace_Occupied_Default.delete_SimSpace
    __del__ = lambda self: None
SimSpace_swigregister = _SimSpace_Occupied_Default.SimSpace_swigregister
SimSpace_swigregister(SimSpace)

class SimSpace_Occupied(SimSpace):
    __swig_setmethods__ = {}
    for _s in [SimSpace]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpace_Occupied, name, value)
    __swig_getmethods__ = {}
    for _s in [SimSpace]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpace_Occupied, name)
    __repr__ = _swig_repr

    def T24CommRefrigEPD(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24CommRefrigEPD(self, *args)

    def T24CommRefrigEqmtSchedRef(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24CommRefrigEqmtSchedRef(self, *args)

    def T24CommRefrigLatentFraction(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24CommRefrigLatentFraction(self, *args)

    def T24CommRefrigLostFraction(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24CommRefrigLostFraction(self, *args)

    def T24CommRefrigRadFraction(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24CommRefrigRadFraction(self, *args)

    def T24EnvelopeStatus(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24EnvelopeStatus(self, *args)

    def T24ExhaustAirChangesPerHour(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24ExhaustAirChangesPerHour(self, *args)

    def T24ExhaustPerArea(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24ExhaustPerArea(self, *args)

    def T24ExhaustPerSpace(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24ExhaustPerSpace(self, *args)

    def T24HasProcessExhaust(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24HasProcessExhaust(self, *args)

    def T24IntLightingSpecMethod(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24IntLightingSpecMethod(self, *args)

    def T24KitchExhHoodDutyList(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24KitchExhHoodDutyList(self, *args)

    def T24KitchExhHoodFlowList(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24KitchExhHoodFlowList(self, *args)

    def T24KitchExhHoodLengthList(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24KitchExhHoodLengthList(self, *args)

    def T24KitchExhHoodStyleList(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24KitchExhHoodStyleList(self, *args)

    def T24LabExhRateType(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24LabExhRateType(self, *args)

    def T24LightingStatus(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24LightingStatus(self, *args)

    def T24MandLightCntrlCntRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlCntRpt(self, *args)

    def T24MandLightCntrlDescRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlDescRpt(self, *args)

    def T24MandLightCntrlAccepReqRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlAccepReqRpt(self, *args)

    def T24MandLightCntrlIsAutoShOffCntrlRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlIsAutoShOffCntrlRpt(self, *args)

    def T24MandLightCntrlIsDayltngCntrlRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlIsDayltngCntrlRpt(self, *args)

    def T24MandLightCntrlIsDmndRespCntrlRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlIsDmndRespCntrlRpt(self, *args)

    def T24MandLightCntrlIsManAreaCntrlRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlIsManAreaCntrlRpt(self, *args)

    def T24MandLightCntrlIsMultLvlCntrlRpt(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24MandLightCntrlIsMultLvlCntrlRpt(self, *args)

    def T24SkylightRqmtExcep(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24SkylightRqmtExcep(self, *args)

    def T24SpaceFunction(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24SpaceFunction(self, *args)

    def T24ConstructStatus3(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_T24ConstructStatus3(self, *args)

    def __init__(self, *args):
        this = _SimSpace_Occupied_Default.new_SimSpace_Occupied(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimSpace_Occupied_Default.SimSpace_Occupied__clone(self, f, c)
    __swig_destroy__ = _SimSpace_Occupied_Default.delete_SimSpace_Occupied
    __del__ = lambda self: None
SimSpace_Occupied_swigregister = _SimSpace_Occupied_Default.SimSpace_Occupied_swigregister
SimSpace_Occupied_swigregister(SimSpace_Occupied)

class SimSpace_Occupied_Default(SimSpace_Occupied):
    __swig_setmethods__ = {}
    for _s in [SimSpace_Occupied]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpace_Occupied_Default, name, value)
    __swig_getmethods__ = {}
    for _s in [SimSpace_Occupied]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpace_Occupied_Default, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimSpace_Occupied_Default.new_SimSpace_Occupied_Default(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def _clone(self, f=0, c=None):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default__clone(self, f, c)
    __swig_destroy__ = _SimSpace_Occupied_Default.delete_SimSpace_Occupied_Default
    __del__ = lambda self: None
SimSpace_Occupied_Default_swigregister = _SimSpace_Occupied_Default.SimSpace_Occupied_Default_swigregister
SimSpace_Occupied_Default_swigregister(SimSpace_Occupied_Default)

class SimSpace_Occupied_Default_sequence(base.sequence_common):
    __swig_setmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimSpace_Occupied_Default_sequence, name, value)
    __swig_getmethods__ = {}
    for _s in [base.sequence_common]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimSpace_Occupied_Default_sequence, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _SimSpace_Occupied_Default.new_SimSpace_Occupied_Default_sequence(*args)
        try:
            self.this.append(this)
        except:
            self.this = this

    def assign(self, n, x):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_assign(self, n, x)

    def begin(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_begin(self, *args)

    def end(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_end(self, *args)

    def rbegin(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_rbegin(self, *args)

    def rend(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_rend(self, *args)

    def at(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_at(self, *args)

    def front(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_front(self, *args)

    def back(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_back(self, *args)

    def push_back(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_push_back(self, *args)

    def pop_back(self):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_pop_back(self)

    def detach_back(self, pop=True):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_detach_back(self, pop)

    def insert(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_insert(self, *args)

    def erase(self, *args):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_erase(self, *args)

    def detach(self, position, r, erase=True):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_detach(self, position, r, erase)

    def swap(self, x):
        return _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_swap(self, x)
    __swig_destroy__ = _SimSpace_Occupied_Default.delete_SimSpace_Occupied_Default_sequence
    __del__ = lambda self: None
SimSpace_Occupied_Default_sequence_swigregister = _SimSpace_Occupied_Default.SimSpace_Occupied_Default_sequence_swigregister
SimSpace_Occupied_Default_sequence_swigregister(SimSpace_Occupied_Default_sequence)

# This file is compatible with both classic and new-style classes.


