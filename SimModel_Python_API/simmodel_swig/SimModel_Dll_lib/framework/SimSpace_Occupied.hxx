// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_SPACE_OCCUPIED_HXX
#define SIM_SPACE_OCCUPIED_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class SimSpace_Occupied;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simspace.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24KitchExhHoodDutyList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24KitchExhHoodStyleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class integerList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlDescRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlAccepReqRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlIsAutoShOffCntrlRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlIsDayltngCntrlRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlIsDmndRespCntrlRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class T24MandLightCntrlIsManAreaCntrlRpt;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      class __declspec(dllexport) SimSpace_Occupied: public ::schema::simxml::BuildingModel::SimSpace
      {
        public:
        // T24CommRefrigEPD
        //
        typedef ::xml_schema::double_ T24CommRefrigEPD_type;
        typedef ::xsd::cxx::tree::optional< T24CommRefrigEPD_type, true > T24CommRefrigEPD_optional;
        typedef ::xsd::cxx::tree::traits< T24CommRefrigEPD_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CommRefrigEPD_traits;

        const T24CommRefrigEPD_optional&
        T24CommRefrigEPD () const;

        T24CommRefrigEPD_optional&
        T24CommRefrigEPD ();

        void
        T24CommRefrigEPD (const T24CommRefrigEPD_type& x);

        void
        T24CommRefrigEPD (const T24CommRefrigEPD_optional& x);

        // T24CommRefrigEqmtSchedRef
        //
        typedef ::xml_schema::idref T24CommRefrigEqmtSchedRef_type;
        typedef ::xsd::cxx::tree::optional< T24CommRefrigEqmtSchedRef_type, false > T24CommRefrigEqmtSchedRef_optional;
        typedef ::xsd::cxx::tree::traits< T24CommRefrigEqmtSchedRef_type, char > T24CommRefrigEqmtSchedRef_traits;

        const T24CommRefrigEqmtSchedRef_optional&
        T24CommRefrigEqmtSchedRef () const;

        T24CommRefrigEqmtSchedRef_optional&
        T24CommRefrigEqmtSchedRef ();

        void
        T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_type& x);

        void
        T24CommRefrigEqmtSchedRef (const T24CommRefrigEqmtSchedRef_optional& x);

        void
        T24CommRefrigEqmtSchedRef (::std::auto_ptr< T24CommRefrigEqmtSchedRef_type > p);

        // T24CommRefrigLatentFraction
        //
        typedef ::xml_schema::double_ T24CommRefrigLatentFraction_type;
        typedef ::xsd::cxx::tree::optional< T24CommRefrigLatentFraction_type, true > T24CommRefrigLatentFraction_optional;
        typedef ::xsd::cxx::tree::traits< T24CommRefrigLatentFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CommRefrigLatentFraction_traits;

        const T24CommRefrigLatentFraction_optional&
        T24CommRefrigLatentFraction () const;

        T24CommRefrigLatentFraction_optional&
        T24CommRefrigLatentFraction ();

        void
        T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_type& x);

        void
        T24CommRefrigLatentFraction (const T24CommRefrigLatentFraction_optional& x);

        // T24CommRefrigLostFraction
        //
        typedef ::xml_schema::double_ T24CommRefrigLostFraction_type;
        typedef ::xsd::cxx::tree::optional< T24CommRefrigLostFraction_type, true > T24CommRefrigLostFraction_optional;
        typedef ::xsd::cxx::tree::traits< T24CommRefrigLostFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CommRefrigLostFraction_traits;

        const T24CommRefrigLostFraction_optional&
        T24CommRefrigLostFraction () const;

        T24CommRefrigLostFraction_optional&
        T24CommRefrigLostFraction ();

        void
        T24CommRefrigLostFraction (const T24CommRefrigLostFraction_type& x);

        void
        T24CommRefrigLostFraction (const T24CommRefrigLostFraction_optional& x);

        // T24CommRefrigRadFraction
        //
        typedef ::xml_schema::double_ T24CommRefrigRadFraction_type;
        typedef ::xsd::cxx::tree::optional< T24CommRefrigRadFraction_type, true > T24CommRefrigRadFraction_optional;
        typedef ::xsd::cxx::tree::traits< T24CommRefrigRadFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > T24CommRefrigRadFraction_traits;

        const T24CommRefrigRadFraction_optional&
        T24CommRefrigRadFraction () const;

        T24CommRefrigRadFraction_optional&
        T24CommRefrigRadFraction ();

        void
        T24CommRefrigRadFraction (const T24CommRefrigRadFraction_type& x);

        void
        T24CommRefrigRadFraction (const T24CommRefrigRadFraction_optional& x);

        // T24EnvelopeStatus
        //
        typedef ::xml_schema::string T24EnvelopeStatus_type;
        typedef ::xsd::cxx::tree::optional< T24EnvelopeStatus_type, false > T24EnvelopeStatus_optional;
        typedef ::xsd::cxx::tree::traits< T24EnvelopeStatus_type, char > T24EnvelopeStatus_traits;

        const T24EnvelopeStatus_optional&
        T24EnvelopeStatus () const;

        T24EnvelopeStatus_optional&
        T24EnvelopeStatus ();

        void
        T24EnvelopeStatus (const T24EnvelopeStatus_type& x);

        void
        T24EnvelopeStatus (const T24EnvelopeStatus_optional& x);

        void
        T24EnvelopeStatus (::std::auto_ptr< T24EnvelopeStatus_type > p);

        // T24ExhaustAirChangesPerHour
        //
        typedef ::xml_schema::double_ T24ExhaustAirChangesPerHour_type;
        typedef ::xsd::cxx::tree::optional< T24ExhaustAirChangesPerHour_type, true > T24ExhaustAirChangesPerHour_optional;
        typedef ::xsd::cxx::tree::traits< T24ExhaustAirChangesPerHour_type, char, ::xsd::cxx::tree::schema_type::double_ > T24ExhaustAirChangesPerHour_traits;

        const T24ExhaustAirChangesPerHour_optional&
        T24ExhaustAirChangesPerHour () const;

        T24ExhaustAirChangesPerHour_optional&
        T24ExhaustAirChangesPerHour ();

        void
        T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_type& x);

        void
        T24ExhaustAirChangesPerHour (const T24ExhaustAirChangesPerHour_optional& x);

        // T24ExhaustPerArea
        //
        typedef ::xml_schema::double_ T24ExhaustPerArea_type;
        typedef ::xsd::cxx::tree::optional< T24ExhaustPerArea_type, true > T24ExhaustPerArea_optional;
        typedef ::xsd::cxx::tree::traits< T24ExhaustPerArea_type, char, ::xsd::cxx::tree::schema_type::double_ > T24ExhaustPerArea_traits;

        const T24ExhaustPerArea_optional&
        T24ExhaustPerArea () const;

        T24ExhaustPerArea_optional&
        T24ExhaustPerArea ();

        void
        T24ExhaustPerArea (const T24ExhaustPerArea_type& x);

        void
        T24ExhaustPerArea (const T24ExhaustPerArea_optional& x);

        // T24ExhaustPerSpace
        //
        typedef ::xml_schema::double_ T24ExhaustPerSpace_type;
        typedef ::xsd::cxx::tree::optional< T24ExhaustPerSpace_type, true > T24ExhaustPerSpace_optional;
        typedef ::xsd::cxx::tree::traits< T24ExhaustPerSpace_type, char, ::xsd::cxx::tree::schema_type::double_ > T24ExhaustPerSpace_traits;

        const T24ExhaustPerSpace_optional&
        T24ExhaustPerSpace () const;

        T24ExhaustPerSpace_optional&
        T24ExhaustPerSpace ();

        void
        T24ExhaustPerSpace (const T24ExhaustPerSpace_type& x);

        void
        T24ExhaustPerSpace (const T24ExhaustPerSpace_optional& x);

        // T24HasProcessExhaust
        //
        typedef ::xml_schema::int_ T24HasProcessExhaust_type;
        typedef ::xsd::cxx::tree::optional< T24HasProcessExhaust_type, true > T24HasProcessExhaust_optional;
        typedef ::xsd::cxx::tree::traits< T24HasProcessExhaust_type, char > T24HasProcessExhaust_traits;

        const T24HasProcessExhaust_optional&
        T24HasProcessExhaust () const;

        T24HasProcessExhaust_optional&
        T24HasProcessExhaust ();

        void
        T24HasProcessExhaust (const T24HasProcessExhaust_type& x);

        void
        T24HasProcessExhaust (const T24HasProcessExhaust_optional& x);

        // T24IntLightingSpecMethod
        //
        typedef ::xml_schema::string T24IntLightingSpecMethod_type;
        typedef ::xsd::cxx::tree::optional< T24IntLightingSpecMethod_type, false > T24IntLightingSpecMethod_optional;
        typedef ::xsd::cxx::tree::traits< T24IntLightingSpecMethod_type, char > T24IntLightingSpecMethod_traits;

        const T24IntLightingSpecMethod_optional&
        T24IntLightingSpecMethod () const;

        T24IntLightingSpecMethod_optional&
        T24IntLightingSpecMethod ();

        void
        T24IntLightingSpecMethod (const T24IntLightingSpecMethod_type& x);

        void
        T24IntLightingSpecMethod (const T24IntLightingSpecMethod_optional& x);

        void
        T24IntLightingSpecMethod (::std::auto_ptr< T24IntLightingSpecMethod_type > p);

        // T24KitchExhHoodDutyList
        //
        typedef ::schema::simxml::BuildingModel::T24KitchExhHoodDutyList T24KitchExhHoodDutyList_type;
        typedef ::xsd::cxx::tree::optional< T24KitchExhHoodDutyList_type > T24KitchExhHoodDutyList_optional;
        typedef ::xsd::cxx::tree::traits< T24KitchExhHoodDutyList_type, char > T24KitchExhHoodDutyList_traits;

        const T24KitchExhHoodDutyList_optional&
        T24KitchExhHoodDutyList () const;

        T24KitchExhHoodDutyList_optional&
        T24KitchExhHoodDutyList ();

        void
        T24KitchExhHoodDutyList (const T24KitchExhHoodDutyList_type& x);

        void
        T24KitchExhHoodDutyList (const T24KitchExhHoodDutyList_optional& x);

        void
        T24KitchExhHoodDutyList (::std::auto_ptr< T24KitchExhHoodDutyList_type > p);

        // T24KitchExhHoodFlowList
        //
        typedef ::schema::simxml::SimModelCore::doubleList T24KitchExhHoodFlowList_type;
        typedef ::xsd::cxx::tree::optional< T24KitchExhHoodFlowList_type, false > T24KitchExhHoodFlowList_optional;
        typedef ::xsd::cxx::tree::traits< T24KitchExhHoodFlowList_type, char > T24KitchExhHoodFlowList_traits;

        const T24KitchExhHoodFlowList_optional&
        T24KitchExhHoodFlowList () const;

        T24KitchExhHoodFlowList_optional&
        T24KitchExhHoodFlowList ();

        void
        T24KitchExhHoodFlowList (const T24KitchExhHoodFlowList_type& x);

        void
        T24KitchExhHoodFlowList (const T24KitchExhHoodFlowList_optional& x);

        void
        T24KitchExhHoodFlowList (::std::auto_ptr< T24KitchExhHoodFlowList_type > p);

        // T24KitchExhHoodLengthList
        //
        typedef ::schema::simxml::SimModelCore::doubleList T24KitchExhHoodLengthList_type;
        typedef ::xsd::cxx::tree::optional< T24KitchExhHoodLengthList_type, false > T24KitchExhHoodLengthList_optional;
        typedef ::xsd::cxx::tree::traits< T24KitchExhHoodLengthList_type, char > T24KitchExhHoodLengthList_traits;

        const T24KitchExhHoodLengthList_optional&
        T24KitchExhHoodLengthList () const;

        T24KitchExhHoodLengthList_optional&
        T24KitchExhHoodLengthList ();

        void
        T24KitchExhHoodLengthList (const T24KitchExhHoodLengthList_type& x);

        void
        T24KitchExhHoodLengthList (const T24KitchExhHoodLengthList_optional& x);

        void
        T24KitchExhHoodLengthList (::std::auto_ptr< T24KitchExhHoodLengthList_type > p);

        // T24KitchExhHoodStyleList
        //
        typedef ::schema::simxml::BuildingModel::T24KitchExhHoodStyleList T24KitchExhHoodStyleList_type;
        typedef ::xsd::cxx::tree::optional< T24KitchExhHoodStyleList_type > T24KitchExhHoodStyleList_optional;
        typedef ::xsd::cxx::tree::traits< T24KitchExhHoodStyleList_type, char > T24KitchExhHoodStyleList_traits;

        const T24KitchExhHoodStyleList_optional&
        T24KitchExhHoodStyleList () const;

        T24KitchExhHoodStyleList_optional&
        T24KitchExhHoodStyleList ();

        void
        T24KitchExhHoodStyleList (const T24KitchExhHoodStyleList_type& x);

        void
        T24KitchExhHoodStyleList (const T24KitchExhHoodStyleList_optional& x);

        void
        T24KitchExhHoodStyleList (::std::auto_ptr< T24KitchExhHoodStyleList_type > p);

        // T24LabExhRateType
        //
        typedef ::xml_schema::string T24LabExhRateType_type;
        typedef ::xsd::cxx::tree::optional< T24LabExhRateType_type, false > T24LabExhRateType_optional;
        typedef ::xsd::cxx::tree::traits< T24LabExhRateType_type, char > T24LabExhRateType_traits;

        const T24LabExhRateType_optional&
        T24LabExhRateType () const;

        T24LabExhRateType_optional&
        T24LabExhRateType ();

        void
        T24LabExhRateType (const T24LabExhRateType_type& x);

        void
        T24LabExhRateType (const T24LabExhRateType_optional& x);

        void
        T24LabExhRateType (::std::auto_ptr< T24LabExhRateType_type > p);

        // T24LightingStatus
        //
        typedef ::xml_schema::string T24LightingStatus_type;
        typedef ::xsd::cxx::tree::optional< T24LightingStatus_type, false > T24LightingStatus_optional;
        typedef ::xsd::cxx::tree::traits< T24LightingStatus_type, char > T24LightingStatus_traits;

        const T24LightingStatus_optional&
        T24LightingStatus () const;

        T24LightingStatus_optional&
        T24LightingStatus ();

        void
        T24LightingStatus (const T24LightingStatus_type& x);

        void
        T24LightingStatus (const T24LightingStatus_optional& x);

        void
        T24LightingStatus (::std::auto_ptr< T24LightingStatus_type > p);

        // T24MandLightCntrlCntRpt
        //
        typedef ::schema::simxml::SimModelCore::integerList T24MandLightCntrlCntRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlCntRpt_type > T24MandLightCntrlCntRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlCntRpt_type, char > T24MandLightCntrlCntRpt_traits;

        const T24MandLightCntrlCntRpt_optional&
        T24MandLightCntrlCntRpt () const;

        T24MandLightCntrlCntRpt_optional&
        T24MandLightCntrlCntRpt ();

        void
        T24MandLightCntrlCntRpt (const T24MandLightCntrlCntRpt_type& x);

        void
        T24MandLightCntrlCntRpt (const T24MandLightCntrlCntRpt_optional& x);

        void
        T24MandLightCntrlCntRpt (::std::auto_ptr< T24MandLightCntrlCntRpt_type > p);

        // T24MandLightCntrlDescRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlDescRpt T24MandLightCntrlDescRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlDescRpt_type > T24MandLightCntrlDescRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlDescRpt_type, char > T24MandLightCntrlDescRpt_traits;

        const T24MandLightCntrlDescRpt_optional&
        T24MandLightCntrlDescRpt () const;

        T24MandLightCntrlDescRpt_optional&
        T24MandLightCntrlDescRpt ();

        void
        T24MandLightCntrlDescRpt (const T24MandLightCntrlDescRpt_type& x);

        void
        T24MandLightCntrlDescRpt (const T24MandLightCntrlDescRpt_optional& x);

        void
        T24MandLightCntrlDescRpt (::std::auto_ptr< T24MandLightCntrlDescRpt_type > p);

        // T24MandLightCntrlAccepReqRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlAccepReqRpt T24MandLightCntrlAccepReqRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlAccepReqRpt_type > T24MandLightCntrlAccepReqRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlAccepReqRpt_type, char > T24MandLightCntrlAccepReqRpt_traits;

        const T24MandLightCntrlAccepReqRpt_optional&
        T24MandLightCntrlAccepReqRpt () const;

        T24MandLightCntrlAccepReqRpt_optional&
        T24MandLightCntrlAccepReqRpt ();

        void
        T24MandLightCntrlAccepReqRpt (const T24MandLightCntrlAccepReqRpt_type& x);

        void
        T24MandLightCntrlAccepReqRpt (const T24MandLightCntrlAccepReqRpt_optional& x);

        void
        T24MandLightCntrlAccepReqRpt (::std::auto_ptr< T24MandLightCntrlAccepReqRpt_type > p);

        // T24MandLightCntrlIsAutoShOffCntrlRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlIsAutoShOffCntrlRpt T24MandLightCntrlIsAutoShOffCntrlRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlIsAutoShOffCntrlRpt_type > T24MandLightCntrlIsAutoShOffCntrlRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlIsAutoShOffCntrlRpt_type, char > T24MandLightCntrlIsAutoShOffCntrlRpt_traits;

        const T24MandLightCntrlIsAutoShOffCntrlRpt_optional&
        T24MandLightCntrlIsAutoShOffCntrlRpt () const;

        T24MandLightCntrlIsAutoShOffCntrlRpt_optional&
        T24MandLightCntrlIsAutoShOffCntrlRpt ();

        void
        T24MandLightCntrlIsAutoShOffCntrlRpt (const T24MandLightCntrlIsAutoShOffCntrlRpt_type& x);

        void
        T24MandLightCntrlIsAutoShOffCntrlRpt (const T24MandLightCntrlIsAutoShOffCntrlRpt_optional& x);

        void
        T24MandLightCntrlIsAutoShOffCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsAutoShOffCntrlRpt_type > p);

        // T24MandLightCntrlIsDayltngCntrlRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlIsDayltngCntrlRpt T24MandLightCntrlIsDayltngCntrlRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlIsDayltngCntrlRpt_type > T24MandLightCntrlIsDayltngCntrlRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlIsDayltngCntrlRpt_type, char > T24MandLightCntrlIsDayltngCntrlRpt_traits;

        const T24MandLightCntrlIsDayltngCntrlRpt_optional&
        T24MandLightCntrlIsDayltngCntrlRpt () const;

        T24MandLightCntrlIsDayltngCntrlRpt_optional&
        T24MandLightCntrlIsDayltngCntrlRpt ();

        void
        T24MandLightCntrlIsDayltngCntrlRpt (const T24MandLightCntrlIsDayltngCntrlRpt_type& x);

        void
        T24MandLightCntrlIsDayltngCntrlRpt (const T24MandLightCntrlIsDayltngCntrlRpt_optional& x);

        void
        T24MandLightCntrlIsDayltngCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsDayltngCntrlRpt_type > p);

        // T24MandLightCntrlIsDmndRespCntrlRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlIsDmndRespCntrlRpt T24MandLightCntrlIsDmndRespCntrlRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlIsDmndRespCntrlRpt_type > T24MandLightCntrlIsDmndRespCntrlRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlIsDmndRespCntrlRpt_type, char > T24MandLightCntrlIsDmndRespCntrlRpt_traits;

        const T24MandLightCntrlIsDmndRespCntrlRpt_optional&
        T24MandLightCntrlIsDmndRespCntrlRpt () const;

        T24MandLightCntrlIsDmndRespCntrlRpt_optional&
        T24MandLightCntrlIsDmndRespCntrlRpt ();

        void
        T24MandLightCntrlIsDmndRespCntrlRpt (const T24MandLightCntrlIsDmndRespCntrlRpt_type& x);

        void
        T24MandLightCntrlIsDmndRespCntrlRpt (const T24MandLightCntrlIsDmndRespCntrlRpt_optional& x);

        void
        T24MandLightCntrlIsDmndRespCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsDmndRespCntrlRpt_type > p);

        // T24MandLightCntrlIsManAreaCntrlRpt
        //
        typedef ::schema::simxml::BuildingModel::T24MandLightCntrlIsManAreaCntrlRpt T24MandLightCntrlIsManAreaCntrlRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlIsManAreaCntrlRpt_type > T24MandLightCntrlIsManAreaCntrlRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlIsManAreaCntrlRpt_type, char > T24MandLightCntrlIsManAreaCntrlRpt_traits;

        const T24MandLightCntrlIsManAreaCntrlRpt_optional&
        T24MandLightCntrlIsManAreaCntrlRpt () const;

        T24MandLightCntrlIsManAreaCntrlRpt_optional&
        T24MandLightCntrlIsManAreaCntrlRpt ();

        void
        T24MandLightCntrlIsManAreaCntrlRpt (const T24MandLightCntrlIsManAreaCntrlRpt_type& x);

        void
        T24MandLightCntrlIsManAreaCntrlRpt (const T24MandLightCntrlIsManAreaCntrlRpt_optional& x);

        void
        T24MandLightCntrlIsManAreaCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsManAreaCntrlRpt_type > p);

        // T24MandLightCntrlIsMultLvlCntrlRpt
        //
        typedef ::schema::simxml::SimModelCore::integerList T24MandLightCntrlIsMultLvlCntrlRpt_type;
        typedef ::xsd::cxx::tree::optional< T24MandLightCntrlIsMultLvlCntrlRpt_type > T24MandLightCntrlIsMultLvlCntrlRpt_optional;
        typedef ::xsd::cxx::tree::traits< T24MandLightCntrlIsMultLvlCntrlRpt_type, char > T24MandLightCntrlIsMultLvlCntrlRpt_traits;

        const T24MandLightCntrlIsMultLvlCntrlRpt_optional&
        T24MandLightCntrlIsMultLvlCntrlRpt () const;

        T24MandLightCntrlIsMultLvlCntrlRpt_optional&
        T24MandLightCntrlIsMultLvlCntrlRpt ();

        void
        T24MandLightCntrlIsMultLvlCntrlRpt (const T24MandLightCntrlIsMultLvlCntrlRpt_type& x);

        void
        T24MandLightCntrlIsMultLvlCntrlRpt (const T24MandLightCntrlIsMultLvlCntrlRpt_optional& x);

        void
        T24MandLightCntrlIsMultLvlCntrlRpt (::std::auto_ptr< T24MandLightCntrlIsMultLvlCntrlRpt_type > p);

        // T24SkylightRqmtExcep
        //
        typedef ::xml_schema::string T24SkylightRqmtExcep_type;
        typedef ::xsd::cxx::tree::optional< T24SkylightRqmtExcep_type, false > T24SkylightRqmtExcep_optional;
        typedef ::xsd::cxx::tree::traits< T24SkylightRqmtExcep_type, char > T24SkylightRqmtExcep_traits;

        const T24SkylightRqmtExcep_optional&
        T24SkylightRqmtExcep () const;

        T24SkylightRqmtExcep_optional&
        T24SkylightRqmtExcep ();

        void
        T24SkylightRqmtExcep (const T24SkylightRqmtExcep_type& x);

        void
        T24SkylightRqmtExcep (const T24SkylightRqmtExcep_optional& x);

        void
        T24SkylightRqmtExcep (::std::auto_ptr< T24SkylightRqmtExcep_type > p);

        // T24SpaceFunction
        //
        typedef ::xml_schema::string T24SpaceFunction_type;
        typedef ::xsd::cxx::tree::optional< T24SpaceFunction_type, false > T24SpaceFunction_optional;
        typedef ::xsd::cxx::tree::traits< T24SpaceFunction_type, char > T24SpaceFunction_traits;

        const T24SpaceFunction_optional&
        T24SpaceFunction () const;

        T24SpaceFunction_optional&
        T24SpaceFunction ();

        void
        T24SpaceFunction (const T24SpaceFunction_type& x);

        void
        T24SpaceFunction (const T24SpaceFunction_optional& x);

        void
        T24SpaceFunction (::std::auto_ptr< T24SpaceFunction_type > p);

        // T24ConstructStatus3
        //
        typedef ::xml_schema::string T24ConstructStatus3_type;
        typedef ::xsd::cxx::tree::optional< T24ConstructStatus3_type, false > T24ConstructStatus3_optional;
        typedef ::xsd::cxx::tree::traits< T24ConstructStatus3_type, char > T24ConstructStatus3_traits;

        const T24ConstructStatus3_optional&
        T24ConstructStatus3 () const;

        T24ConstructStatus3_optional&
        T24ConstructStatus3 ();

        void
        T24ConstructStatus3 (const T24ConstructStatus3_type& x);

        void
        T24ConstructStatus3 (const T24ConstructStatus3_optional& x);

        void
        T24ConstructStatus3 (::std::auto_ptr< T24ConstructStatus3_type > p);

        // Constructors.
        //
        SimSpace_Occupied ();

        SimSpace_Occupied (const RefId_type&);

        SimSpace_Occupied (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        SimSpace_Occupied (const SimSpace_Occupied& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

        virtual SimSpace_Occupied*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimSpace_Occupied&
        operator= (const SimSpace_Occupied& x);

        virtual 
        ~SimSpace_Occupied ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        T24CommRefrigEPD_optional T24CommRefrigEPD_;
        T24CommRefrigEqmtSchedRef_optional T24CommRefrigEqmtSchedRef_;
        T24CommRefrigLatentFraction_optional T24CommRefrigLatentFraction_;
        T24CommRefrigLostFraction_optional T24CommRefrigLostFraction_;
        T24CommRefrigRadFraction_optional T24CommRefrigRadFraction_;
        T24EnvelopeStatus_optional T24EnvelopeStatus_;
        T24ExhaustAirChangesPerHour_optional T24ExhaustAirChangesPerHour_;
        T24ExhaustPerArea_optional T24ExhaustPerArea_;
        T24ExhaustPerSpace_optional T24ExhaustPerSpace_;
        T24HasProcessExhaust_optional T24HasProcessExhaust_;
        T24IntLightingSpecMethod_optional T24IntLightingSpecMethod_;
        T24KitchExhHoodDutyList_optional T24KitchExhHoodDutyList_;
        T24KitchExhHoodFlowList_optional T24KitchExhHoodFlowList_;
        T24KitchExhHoodLengthList_optional T24KitchExhHoodLengthList_;
        T24KitchExhHoodStyleList_optional T24KitchExhHoodStyleList_;
        T24LabExhRateType_optional T24LabExhRateType_;
        T24LightingStatus_optional T24LightingStatus_;
        T24MandLightCntrlCntRpt_optional T24MandLightCntrlCntRpt_;
        T24MandLightCntrlDescRpt_optional T24MandLightCntrlDescRpt_;
        T24MandLightCntrlAccepReqRpt_optional T24MandLightCntrlAccepReqRpt_;
        T24MandLightCntrlIsAutoShOffCntrlRpt_optional T24MandLightCntrlIsAutoShOffCntrlRpt_;
        T24MandLightCntrlIsDayltngCntrlRpt_optional T24MandLightCntrlIsDayltngCntrlRpt_;
        T24MandLightCntrlIsDmndRespCntrlRpt_optional T24MandLightCntrlIsDmndRespCntrlRpt_;
        T24MandLightCntrlIsManAreaCntrlRpt_optional T24MandLightCntrlIsManAreaCntrlRpt_;
        T24MandLightCntrlIsMultLvlCntrlRpt_optional T24MandLightCntrlIsMultLvlCntrlRpt_;
        T24SkylightRqmtExcep_optional T24SkylightRqmtExcep_;
        T24SpaceFunction_optional T24SpaceFunction_;
        T24ConstructStatus3_optional T24ConstructStatus3_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_SPACE_OCCUPIED_HXX
