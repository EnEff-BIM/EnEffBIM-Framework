// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSite.hxx"

#include "integerlist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSite
      // 

      const SimSite::Name_optional& SimSite::
      Name () const
      {
        return this->Name_;
      }

      SimSite::Name_optional& SimSite::
      Name ()
      {
        return this->Name_;
      }

      void SimSite::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimSite::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimSite::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimSite::Longitude_optional& SimSite::
      Longitude () const
      {
        return this->Longitude_;
      }

      SimSite::Longitude_optional& SimSite::
      Longitude ()
      {
        return this->Longitude_;
      }

      void SimSite::
      Longitude (const Longitude_type& x)
      {
        this->Longitude_.set (x);
      }

      void SimSite::
      Longitude (const Longitude_optional& x)
      {
        this->Longitude_ = x;
      }

      void SimSite::
      Longitude (::std::auto_ptr< Longitude_type > x)
      {
        this->Longitude_.set (x);
      }

      const SimSite::Latitude_optional& SimSite::
      Latitude () const
      {
        return this->Latitude_;
      }

      SimSite::Latitude_optional& SimSite::
      Latitude ()
      {
        return this->Latitude_;
      }

      void SimSite::
      Latitude (const Latitude_type& x)
      {
        this->Latitude_.set (x);
      }

      void SimSite::
      Latitude (const Latitude_optional& x)
      {
        this->Latitude_ = x;
      }

      void SimSite::
      Latitude (::std::auto_ptr< Latitude_type > x)
      {
        this->Latitude_.set (x);
      }

      const SimSite::SiteReferenceElevation_optional& SimSite::
      SiteReferenceElevation () const
      {
        return this->SiteReferenceElevation_;
      }

      SimSite::SiteReferenceElevation_optional& SimSite::
      SiteReferenceElevation ()
      {
        return this->SiteReferenceElevation_;
      }

      void SimSite::
      SiteReferenceElevation (const SiteReferenceElevation_type& x)
      {
        this->SiteReferenceElevation_.set (x);
      }

      void SimSite::
      SiteReferenceElevation (const SiteReferenceElevation_optional& x)
      {
        this->SiteReferenceElevation_ = x;
      }

      const SimSite::BuildableArea_optional& SimSite::
      BuildableArea () const
      {
        return this->BuildableArea_;
      }

      SimSite::BuildableArea_optional& SimSite::
      BuildableArea ()
      {
        return this->BuildableArea_;
      }

      void SimSite::
      BuildableArea (const BuildableArea_type& x)
      {
        this->BuildableArea_.set (x);
      }

      void SimSite::
      BuildableArea (const BuildableArea_optional& x)
      {
        this->BuildableArea_ = x;
      }

      const SimSite::BuildingHeightLimit_optional& SimSite::
      BuildingHeightLimit () const
      {
        return this->BuildingHeightLimit_;
      }

      SimSite::BuildingHeightLimit_optional& SimSite::
      BuildingHeightLimit ()
      {
        return this->BuildingHeightLimit_;
      }

      void SimSite::
      BuildingHeightLimit (const BuildingHeightLimit_type& x)
      {
        this->BuildingHeightLimit_.set (x);
      }

      void SimSite::
      BuildingHeightLimit (const BuildingHeightLimit_optional& x)
      {
        this->BuildingHeightLimit_ = x;
      }

      const SimSite::SitePerimeter_optional& SimSite::
      SitePerimeter () const
      {
        return this->SitePerimeter_;
      }

      SimSite::SitePerimeter_optional& SimSite::
      SitePerimeter ()
      {
        return this->SitePerimeter_;
      }

      void SimSite::
      SitePerimeter (const SitePerimeter_type& x)
      {
        this->SitePerimeter_.set (x);
      }

      void SimSite::
      SitePerimeter (const SitePerimeter_optional& x)
      {
        this->SitePerimeter_ = x;
      }

      const SimSite::SiteGrossLandArea_optional& SimSite::
      SiteGrossLandArea () const
      {
        return this->SiteGrossLandArea_;
      }

      SimSite::SiteGrossLandArea_optional& SimSite::
      SiteGrossLandArea ()
      {
        return this->SiteGrossLandArea_;
      }

      void SimSite::
      SiteGrossLandArea (const SiteGrossLandArea_type& x)
      {
        this->SiteGrossLandArea_.set (x);
      }

      void SimSite::
      SiteGrossLandArea (const SiteGrossLandArea_optional& x)
      {
        this->SiteGrossLandArea_ = x;
      }

      const SimSite::SiteExcavationCutVolume_optional& SimSite::
      SiteExcavationCutVolume () const
      {
        return this->SiteExcavationCutVolume_;
      }

      SimSite::SiteExcavationCutVolume_optional& SimSite::
      SiteExcavationCutVolume ()
      {
        return this->SiteExcavationCutVolume_;
      }

      void SimSite::
      SiteExcavationCutVolume (const SiteExcavationCutVolume_type& x)
      {
        this->SiteExcavationCutVolume_.set (x);
      }

      void SimSite::
      SiteExcavationCutVolume (const SiteExcavationCutVolume_optional& x)
      {
        this->SiteExcavationCutVolume_ = x;
      }

      const SimSite::SiteExcavationBackfillVolume_optional& SimSite::
      SiteExcavationBackfillVolume () const
      {
        return this->SiteExcavationBackfillVolume_;
      }

      SimSite::SiteExcavationBackfillVolume_optional& SimSite::
      SiteExcavationBackfillVolume ()
      {
        return this->SiteExcavationBackfillVolume_;
      }

      void SimSite::
      SiteExcavationBackfillVolume (const SiteExcavationBackfillVolume_type& x)
      {
        this->SiteExcavationBackfillVolume_.set (x);
      }

      void SimSite::
      SiteExcavationBackfillVolume (const SiteExcavationBackfillVolume_optional& x)
      {
        this->SiteExcavationBackfillVolume_ = x;
      }

      const SimSite::GeometricRepresentations_optional& SimSite::
      GeometricRepresentations () const
      {
        return this->GeometricRepresentations_;
      }

      SimSite::GeometricRepresentations_optional& SimSite::
      GeometricRepresentations ()
      {
        return this->GeometricRepresentations_;
      }

      void SimSite::
      GeometricRepresentations (const GeometricRepresentations_type& x)
      {
        this->GeometricRepresentations_.set (x);
      }

      void SimSite::
      GeometricRepresentations (const GeometricRepresentations_optional& x)
      {
        this->GeometricRepresentations_ = x;
      }

      void SimSite::
      GeometricRepresentations (::std::auto_ptr< GeometricRepresentations_type > x)
      {
        this->GeometricRepresentations_.set (x);
      }

      const SimSite::SiteInSpatialContainer_optional& SimSite::
      SiteInSpatialContainer () const
      {
        return this->SiteInSpatialContainer_;
      }

      SimSite::SiteInSpatialContainer_optional& SimSite::
      SiteInSpatialContainer ()
      {
        return this->SiteInSpatialContainer_;
      }

      void SimSite::
      SiteInSpatialContainer (const SiteInSpatialContainer_type& x)
      {
        this->SiteInSpatialContainer_.set (x);
      }

      void SimSite::
      SiteInSpatialContainer (const SiteInSpatialContainer_optional& x)
      {
        this->SiteInSpatialContainer_ = x;
      }

      void SimSite::
      SiteInSpatialContainer (::std::auto_ptr< SiteInSpatialContainer_type > x)
      {
        this->SiteInSpatialContainer_.set (x);
      }

      const SimSite::LandTitleNumber_optional& SimSite::
      LandTitleNumber () const
      {
        return this->LandTitleNumber_;
      }

      SimSite::LandTitleNumber_optional& SimSite::
      LandTitleNumber ()
      {
        return this->LandTitleNumber_;
      }

      void SimSite::
      LandTitleNumber (const LandTitleNumber_type& x)
      {
        this->LandTitleNumber_.set (x);
      }

      void SimSite::
      LandTitleNumber (const LandTitleNumber_optional& x)
      {
        this->LandTitleNumber_ = x;
      }

      void SimSite::
      LandTitleNumber (::std::auto_ptr< LandTitleNumber_type > x)
      {
        this->LandTitleNumber_.set (x);
      }

      const SimSite::SiteAddress_optional& SimSite::
      SiteAddress () const
      {
        return this->SiteAddress_;
      }

      SimSite::SiteAddress_optional& SimSite::
      SiteAddress ()
      {
        return this->SiteAddress_;
      }

      void SimSite::
      SiteAddress (const SiteAddress_type& x)
      {
        this->SiteAddress_.set (x);
      }

      void SimSite::
      SiteAddress (const SiteAddress_optional& x)
      {
        this->SiteAddress_ = x;
      }

      void SimSite::
      SiteAddress (::std::auto_ptr< SiteAddress_type > x)
      {
        this->SiteAddress_.set (x);
      }

      const SimSite::WeatherLocationRegion_optional& SimSite::
      WeatherLocationRegion () const
      {
        return this->WeatherLocationRegion_;
      }

      SimSite::WeatherLocationRegion_optional& SimSite::
      WeatherLocationRegion ()
      {
        return this->WeatherLocationRegion_;
      }

      void SimSite::
      WeatherLocationRegion (const WeatherLocationRegion_type& x)
      {
        this->WeatherLocationRegion_.set (x);
      }

      void SimSite::
      WeatherLocationRegion (const WeatherLocationRegion_optional& x)
      {
        this->WeatherLocationRegion_ = x;
      }

      void SimSite::
      WeatherLocationRegion (::std::auto_ptr< WeatherLocationRegion_type > x)
      {
        this->WeatherLocationRegion_.set (x);
      }

      const SimSite::WeatherLocationCity_optional& SimSite::
      WeatherLocationCity () const
      {
        return this->WeatherLocationCity_;
      }

      SimSite::WeatherLocationCity_optional& SimSite::
      WeatherLocationCity ()
      {
        return this->WeatherLocationCity_;
      }

      void SimSite::
      WeatherLocationCity (const WeatherLocationCity_type& x)
      {
        this->WeatherLocationCity_.set (x);
      }

      void SimSite::
      WeatherLocationCity (const WeatherLocationCity_optional& x)
      {
        this->WeatherLocationCity_ = x;
      }

      void SimSite::
      WeatherLocationCity (::std::auto_ptr< WeatherLocationCity_type > x)
      {
        this->WeatherLocationCity_.set (x);
      }

      const SimSite::WeatherLocationID_optional& SimSite::
      WeatherLocationID () const
      {
        return this->WeatherLocationID_;
      }

      SimSite::WeatherLocationID_optional& SimSite::
      WeatherLocationID ()
      {
        return this->WeatherLocationID_;
      }

      void SimSite::
      WeatherLocationID (const WeatherLocationID_type& x)
      {
        this->WeatherLocationID_.set (x);
      }

      void SimSite::
      WeatherLocationID (const WeatherLocationID_optional& x)
      {
        this->WeatherLocationID_ = x;
      }

      void SimSite::
      WeatherLocationID (::std::auto_ptr< WeatherLocationID_type > x)
      {
        this->WeatherLocationID_.set (x);
      }

      const SimSite::WeatherLocationIDType_optional& SimSite::
      WeatherLocationIDType () const
      {
        return this->WeatherLocationIDType_;
      }

      SimSite::WeatherLocationIDType_optional& SimSite::
      WeatherLocationIDType ()
      {
        return this->WeatherLocationIDType_;
      }

      void SimSite::
      WeatherLocationIDType (const WeatherLocationIDType_type& x)
      {
        this->WeatherLocationIDType_.set (x);
      }

      void SimSite::
      WeatherLocationIDType (const WeatherLocationIDType_optional& x)
      {
        this->WeatherLocationIDType_ = x;
      }

      void SimSite::
      WeatherLocationIDType (::std::auto_ptr< WeatherLocationIDType_type > x)
      {
        this->WeatherLocationIDType_.set (x);
      }

      const SimSite::DesignDays_optional& SimSite::
      DesignDays () const
      {
        return this->DesignDays_;
      }

      SimSite::DesignDays_optional& SimSite::
      DesignDays ()
      {
        return this->DesignDays_;
      }

      void SimSite::
      DesignDays (const DesignDays_type& x)
      {
        this->DesignDays_.set (x);
      }

      void SimSite::
      DesignDays (const DesignDays_optional& x)
      {
        this->DesignDays_ = x;
      }

      void SimSite::
      DesignDays (::std::auto_ptr< DesignDays_type > x)
      {
        this->DesignDays_.set (x);
      }

      const SimSite::TimeZone_optional& SimSite::
      TimeZone () const
      {
        return this->TimeZone_;
      }

      SimSite::TimeZone_optional& SimSite::
      TimeZone ()
      {
        return this->TimeZone_;
      }

      void SimSite::
      TimeZone (const TimeZone_type& x)
      {
        this->TimeZone_.set (x);
      }

      void SimSite::
      TimeZone (const TimeZone_optional& x)
      {
        this->TimeZone_ = x;
      }

      const SimSite::LocationsTemplate_optional& SimSite::
      LocationsTemplate () const
      {
        return this->LocationsTemplate_;
      }

      SimSite::LocationsTemplate_optional& SimSite::
      LocationsTemplate ()
      {
        return this->LocationsTemplate_;
      }

      void SimSite::
      LocationsTemplate (const LocationsTemplate_type& x)
      {
        this->LocationsTemplate_.set (x);
      }

      void SimSite::
      LocationsTemplate (const LocationsTemplate_optional& x)
      {
        this->LocationsTemplate_ = x;
      }

      void SimSite::
      LocationsTemplate (::std::auto_ptr< LocationsTemplate_type > x)
      {
        this->LocationsTemplate_.set (x);
      }

      const SimSite::TemplateOverrideValues_optional& SimSite::
      TemplateOverrideValues () const
      {
        return this->TemplateOverrideValues_;
      }

      SimSite::TemplateOverrideValues_optional& SimSite::
      TemplateOverrideValues ()
      {
        return this->TemplateOverrideValues_;
      }

      void SimSite::
      TemplateOverrideValues (const TemplateOverrideValues_type& x)
      {
        this->TemplateOverrideValues_.set (x);
      }

      void SimSite::
      TemplateOverrideValues (const TemplateOverrideValues_optional& x)
      {
        this->TemplateOverrideValues_ = x;
      }

      void SimSite::
      TemplateOverrideValues (::std::auto_ptr< TemplateOverrideValues_type > x)
      {
        this->TemplateOverrideValues_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSite
      //

      SimSite::
      SimSite ()
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_ (this),
        BuildableArea_ (this),
        BuildingHeightLimit_ (this),
        SitePerimeter_ (this),
        SiteGrossLandArea_ (this),
        SiteExcavationCutVolume_ (this),
        SiteExcavationBackfillVolume_ (this),
        GeometricRepresentations_ (this),
        SiteInSpatialContainer_ (this),
        LandTitleNumber_ (this),
        SiteAddress_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        DesignDays_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this),
        TemplateOverrideValues_ (this)
      {
      }

      SimSite::
      SimSite (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (RefId),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_ (this),
        BuildableArea_ (this),
        BuildingHeightLimit_ (this),
        SitePerimeter_ (this),
        SiteGrossLandArea_ (this),
        SiteExcavationCutVolume_ (this),
        SiteExcavationBackfillVolume_ (this),
        GeometricRepresentations_ (this),
        SiteInSpatialContainer_ (this),
        LandTitleNumber_ (this),
        SiteAddress_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        DesignDays_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this),
        TemplateOverrideValues_ (this)
      {
      }

      SimSite::
      SimSite (const SimSite& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (x, f, c),
        Name_ (x.Name_, f, this),
        Longitude_ (x.Longitude_, f, this),
        Latitude_ (x.Latitude_, f, this),
        SiteReferenceElevation_ (x.SiteReferenceElevation_, f, this),
        BuildableArea_ (x.BuildableArea_, f, this),
        BuildingHeightLimit_ (x.BuildingHeightLimit_, f, this),
        SitePerimeter_ (x.SitePerimeter_, f, this),
        SiteGrossLandArea_ (x.SiteGrossLandArea_, f, this),
        SiteExcavationCutVolume_ (x.SiteExcavationCutVolume_, f, this),
        SiteExcavationBackfillVolume_ (x.SiteExcavationBackfillVolume_, f, this),
        GeometricRepresentations_ (x.GeometricRepresentations_, f, this),
        SiteInSpatialContainer_ (x.SiteInSpatialContainer_, f, this),
        LandTitleNumber_ (x.LandTitleNumber_, f, this),
        SiteAddress_ (x.SiteAddress_, f, this),
        WeatherLocationRegion_ (x.WeatherLocationRegion_, f, this),
        WeatherLocationCity_ (x.WeatherLocationCity_, f, this),
        WeatherLocationID_ (x.WeatherLocationID_, f, this),
        WeatherLocationIDType_ (x.WeatherLocationIDType_, f, this),
        DesignDays_ (x.DesignDays_, f, this),
        TimeZone_ (x.TimeZone_, f, this),
        LocationsTemplate_ (x.LocationsTemplate_, f, this),
        TemplateOverrideValues_ (x.TemplateOverrideValues_, f, this)
      {
      }

      SimSite::
      SimSite (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_ (this),
        BuildableArea_ (this),
        BuildingHeightLimit_ (this),
        SitePerimeter_ (this),
        SiteGrossLandArea_ (this),
        SiteExcavationCutVolume_ (this),
        SiteExcavationBackfillVolume_ (this),
        GeometricRepresentations_ (this),
        SiteInSpatialContainer_ (this),
        LandTitleNumber_ (this),
        SiteAddress_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        DesignDays_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this),
        TemplateOverrideValues_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSite::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimSpatialStructureElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Longitude
          //
          if (n.name () == "Longitude" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Longitude_type > r (
              Longitude_traits::create (i, f, this));

            if (!this->Longitude_)
            {
              this->Longitude_.set (r);
              continue;
            }
          }

          // Latitude
          //
          if (n.name () == "Latitude" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Latitude_type > r (
              Latitude_traits::create (i, f, this));

            if (!this->Latitude_)
            {
              this->Latitude_.set (r);
              continue;
            }
          }

          // SiteReferenceElevation
          //
          if (n.name () == "SiteReferenceElevation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SiteReferenceElevation_)
            {
              this->SiteReferenceElevation_.set (SiteReferenceElevation_traits::create (i, f, this));
              continue;
            }
          }

          // BuildableArea
          //
          if (n.name () == "BuildableArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->BuildableArea_)
            {
              this->BuildableArea_.set (BuildableArea_traits::create (i, f, this));
              continue;
            }
          }

          // BuildingHeightLimit
          //
          if (n.name () == "BuildingHeightLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->BuildingHeightLimit_)
            {
              this->BuildingHeightLimit_.set (BuildingHeightLimit_traits::create (i, f, this));
              continue;
            }
          }

          // SitePerimeter
          //
          if (n.name () == "SitePerimeter" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SitePerimeter_)
            {
              this->SitePerimeter_.set (SitePerimeter_traits::create (i, f, this));
              continue;
            }
          }

          // SiteGrossLandArea
          //
          if (n.name () == "SiteGrossLandArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SiteGrossLandArea_)
            {
              this->SiteGrossLandArea_.set (SiteGrossLandArea_traits::create (i, f, this));
              continue;
            }
          }

          // SiteExcavationCutVolume
          //
          if (n.name () == "SiteExcavationCutVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SiteExcavationCutVolume_)
            {
              this->SiteExcavationCutVolume_.set (SiteExcavationCutVolume_traits::create (i, f, this));
              continue;
            }
          }

          // SiteExcavationBackfillVolume
          //
          if (n.name () == "SiteExcavationBackfillVolume" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SiteExcavationBackfillVolume_)
            {
              this->SiteExcavationBackfillVolume_.set (SiteExcavationBackfillVolume_traits::create (i, f, this));
              continue;
            }
          }

          // GeometricRepresentations
          //
          if (n.name () == "GeometricRepresentations" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< GeometricRepresentations_type > r (
              GeometricRepresentations_traits::create (i, f, this));

            if (!this->GeometricRepresentations_)
            {
              this->GeometricRepresentations_.set (r);
              continue;
            }
          }

          // SiteInSpatialContainer
          //
          if (n.name () == "SiteInSpatialContainer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SiteInSpatialContainer_type > r (
              SiteInSpatialContainer_traits::create (i, f, this));

            if (!this->SiteInSpatialContainer_)
            {
              this->SiteInSpatialContainer_.set (r);
              continue;
            }
          }

          // LandTitleNumber
          //
          if (n.name () == "LandTitleNumber" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< LandTitleNumber_type > r (
              LandTitleNumber_traits::create (i, f, this));

            if (!this->LandTitleNumber_)
            {
              this->LandTitleNumber_.set (r);
              continue;
            }
          }

          // SiteAddress
          //
          if (n.name () == "SiteAddress" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< SiteAddress_type > r (
              SiteAddress_traits::create (i, f, this));

            if (!this->SiteAddress_)
            {
              this->SiteAddress_.set (r);
              continue;
            }
          }

          // WeatherLocationRegion
          //
          if (n.name () == "WeatherLocationRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationRegion_type > r (
              WeatherLocationRegion_traits::create (i, f, this));

            if (!this->WeatherLocationRegion_)
            {
              this->WeatherLocationRegion_.set (r);
              continue;
            }
          }

          // WeatherLocationCity
          //
          if (n.name () == "WeatherLocationCity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationCity_type > r (
              WeatherLocationCity_traits::create (i, f, this));

            if (!this->WeatherLocationCity_)
            {
              this->WeatherLocationCity_.set (r);
              continue;
            }
          }

          // WeatherLocationID
          //
          if (n.name () == "WeatherLocationID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationID_type > r (
              WeatherLocationID_traits::create (i, f, this));

            if (!this->WeatherLocationID_)
            {
              this->WeatherLocationID_.set (r);
              continue;
            }
          }

          // WeatherLocationIDType
          //
          if (n.name () == "WeatherLocationIDType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationIDType_type > r (
              WeatherLocationIDType_traits::create (i, f, this));

            if (!this->WeatherLocationIDType_)
            {
              this->WeatherLocationIDType_.set (r);
              continue;
            }
          }

          // DesignDays
          //
          if (n.name () == "DesignDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< DesignDays_type > r (
              DesignDays_traits::create (i, f, this));

            if (!this->DesignDays_)
            {
              this->DesignDays_.set (r);
              continue;
            }
          }

          // TimeZone
          //
          if (n.name () == "TimeZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TimeZone_)
            {
              this->TimeZone_.set (TimeZone_traits::create (i, f, this));
              continue;
            }
          }

          // LocationsTemplate
          //
          if (n.name () == "LocationsTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< LocationsTemplate_type > r (
              LocationsTemplate_traits::create (i, f, this));

            if (!this->LocationsTemplate_)
            {
              this->LocationsTemplate_.set (r);
              continue;
            }
          }

          // TemplateOverrideValues
          //
          if (n.name () == "TemplateOverrideValues" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< TemplateOverrideValues_type > r (
              TemplateOverrideValues_traits::create (i, f, this));

            if (!this->TemplateOverrideValues_)
            {
              this->TemplateOverrideValues_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSite* SimSite::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSite (*this, f, c);
      }

      SimSite& SimSite::
      operator= (const SimSite& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimSpatialStructureElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->Longitude_ = x.Longitude_;
          this->Latitude_ = x.Latitude_;
          this->SiteReferenceElevation_ = x.SiteReferenceElevation_;
          this->BuildableArea_ = x.BuildableArea_;
          this->BuildingHeightLimit_ = x.BuildingHeightLimit_;
          this->SitePerimeter_ = x.SitePerimeter_;
          this->SiteGrossLandArea_ = x.SiteGrossLandArea_;
          this->SiteExcavationCutVolume_ = x.SiteExcavationCutVolume_;
          this->SiteExcavationBackfillVolume_ = x.SiteExcavationBackfillVolume_;
          this->GeometricRepresentations_ = x.GeometricRepresentations_;
          this->SiteInSpatialContainer_ = x.SiteInSpatialContainer_;
          this->LandTitleNumber_ = x.LandTitleNumber_;
          this->SiteAddress_ = x.SiteAddress_;
          this->WeatherLocationRegion_ = x.WeatherLocationRegion_;
          this->WeatherLocationCity_ = x.WeatherLocationCity_;
          this->WeatherLocationID_ = x.WeatherLocationID_;
          this->WeatherLocationIDType_ = x.WeatherLocationIDType_;
          this->DesignDays_ = x.DesignDays_;
          this->TimeZone_ = x.TimeZone_;
          this->LocationsTemplate_ = x.LocationsTemplate_;
          this->TemplateOverrideValues_ = x.TemplateOverrideValues_;
        }

        return *this;
      }

      SimSite::
      ~SimSite ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

