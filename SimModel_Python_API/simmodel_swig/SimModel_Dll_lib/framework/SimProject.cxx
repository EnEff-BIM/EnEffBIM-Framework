// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimProject.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProject
      // 

      const SimProject::Name_optional& SimProject::
      Name () const
      {
        return this->Name_;
      }

      SimProject::Name_optional& SimProject::
      Name ()
      {
        return this->Name_;
      }

      void SimProject::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimProject::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimProject::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimProject::Representation_optional& SimProject::
      Representation () const
      {
        return this->Representation_;
      }

      SimProject::Representation_optional& SimProject::
      Representation ()
      {
        return this->Representation_;
      }

      void SimProject::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimProject::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimProject::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }

      const SimProject::UnitsInContext_optional& SimProject::
      UnitsInContext () const
      {
        return this->UnitsInContext_;
      }

      SimProject::UnitsInContext_optional& SimProject::
      UnitsInContext ()
      {
        return this->UnitsInContext_;
      }

      void SimProject::
      UnitsInContext (const UnitsInContext_type& x)
      {
        this->UnitsInContext_.set (x);
      }

      void SimProject::
      UnitsInContext (const UnitsInContext_optional& x)
      {
        this->UnitsInContext_ = x;
      }

      void SimProject::
      UnitsInContext (::std::auto_ptr< UnitsInContext_type > x)
      {
        this->UnitsInContext_.set (x);
      }

      const SimProject::T24ProjectTeam_optional& SimProject::
      T24ProjectTeam () const
      {
        return this->T24ProjectTeam_;
      }

      SimProject::T24ProjectTeam_optional& SimProject::
      T24ProjectTeam ()
      {
        return this->T24ProjectTeam_;
      }

      void SimProject::
      T24ProjectTeam (const T24ProjectTeam_type& x)
      {
        this->T24ProjectTeam_.set (x);
      }

      void SimProject::
      T24ProjectTeam (const T24ProjectTeam_optional& x)
      {
        this->T24ProjectTeam_ = x;
      }

      void SimProject::
      T24ProjectTeam (::std::auto_ptr< T24ProjectTeam_type > x)
      {
        this->T24ProjectTeam_.set (x);
      }

      const SimProject::ProjectTypeDefinitions_optional& SimProject::
      ProjectTypeDefinitions () const
      {
        return this->ProjectTypeDefinitions_;
      }

      SimProject::ProjectTypeDefinitions_optional& SimProject::
      ProjectTypeDefinitions ()
      {
        return this->ProjectTypeDefinitions_;
      }

      void SimProject::
      ProjectTypeDefinitions (const ProjectTypeDefinitions_type& x)
      {
        this->ProjectTypeDefinitions_.set (x);
      }

      void SimProject::
      ProjectTypeDefinitions (const ProjectTypeDefinitions_optional& x)
      {
        this->ProjectTypeDefinitions_ = x;
      }

      void SimProject::
      ProjectTypeDefinitions (::std::auto_ptr< ProjectTypeDefinitions_type > x)
      {
        this->ProjectTypeDefinitions_.set (x);
      }

      const SimProject::ParentDesignAltForViews_optional& SimProject::
      ParentDesignAltForViews () const
      {
        return this->ParentDesignAltForViews_;
      }

      SimProject::ParentDesignAltForViews_optional& SimProject::
      ParentDesignAltForViews ()
      {
        return this->ParentDesignAltForViews_;
      }

      void SimProject::
      ParentDesignAltForViews (const ParentDesignAltForViews_type& x)
      {
        this->ParentDesignAltForViews_.set (x);
      }

      void SimProject::
      ParentDesignAltForViews (const ParentDesignAltForViews_optional& x)
      {
        this->ParentDesignAltForViews_ = x;
      }

      void SimProject::
      ParentDesignAltForViews (::std::auto_ptr< ParentDesignAltForViews_type > x)
      {
        this->ParentDesignAltForViews_.set (x);
      }

      const SimProject::DesAltViewDateTime_optional& SimProject::
      DesAltViewDateTime () const
      {
        return this->DesAltViewDateTime_;
      }

      SimProject::DesAltViewDateTime_optional& SimProject::
      DesAltViewDateTime ()
      {
        return this->DesAltViewDateTime_;
      }

      void SimProject::
      DesAltViewDateTime (const DesAltViewDateTime_type& x)
      {
        this->DesAltViewDateTime_.set (x);
      }

      void SimProject::
      DesAltViewDateTime (const DesAltViewDateTime_optional& x)
      {
        this->DesAltViewDateTime_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimProject
      //

      SimProject::
      SimProject ()
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (),
        Name_ (this),
        Representation_ (this),
        UnitsInContext_ (this),
        T24ProjectTeam_ (this),
        ProjectTypeDefinitions_ (this),
        ParentDesignAltForViews_ (this),
        DesAltViewDateTime_ (this)
      {
      }

      SimProject::
      SimProject (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (RefId),
        Name_ (this),
        Representation_ (this),
        UnitsInContext_ (this),
        T24ProjectTeam_ (this),
        ProjectTypeDefinitions_ (this),
        ParentDesignAltForViews_ (this),
        DesAltViewDateTime_ (this)
      {
      }

      SimProject::
      SimProject (const SimProject& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (x, f, c),
        Name_ (x.Name_, f, this),
        Representation_ (x.Representation_, f, this),
        UnitsInContext_ (x.UnitsInContext_, f, this),
        T24ProjectTeam_ (x.T24ProjectTeam_, f, this),
        ProjectTypeDefinitions_ (x.ProjectTypeDefinitions_, f, this),
        ParentDesignAltForViews_ (x.ParentDesignAltForViews_, f, this),
        DesAltViewDateTime_ (x.DesAltViewDateTime_, f, this)
      {
      }

      SimProject::
      SimProject (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimSpatialStructureElement (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        Representation_ (this),
        UnitsInContext_ (this),
        T24ProjectTeam_ (this),
        ProjectTypeDefinitions_ (this),
        ParentDesignAltForViews_ (this),
        DesAltViewDateTime_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimProject::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimSpatialStructureElement::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          // UnitsInContext
          //
          if (n.name () == "UnitsInContext" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< UnitsInContext_type > r (
              UnitsInContext_traits::create (i, f, this));

            if (!this->UnitsInContext_)
            {
              this->UnitsInContext_.set (r);
              continue;
            }
          }

          // T24ProjectTeam
          //
          if (n.name () == "T24ProjectTeam" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< T24ProjectTeam_type > r (
              T24ProjectTeam_traits::create (i, f, this));

            if (!this->T24ProjectTeam_)
            {
              this->T24ProjectTeam_.set (r);
              continue;
            }
          }

          // ProjectTypeDefinitions
          //
          if (n.name () == "ProjectTypeDefinitions" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ProjectTypeDefinitions_type > r (
              ProjectTypeDefinitions_traits::create (i, f, this));

            if (!this->ProjectTypeDefinitions_)
            {
              this->ProjectTypeDefinitions_.set (r);
              continue;
            }
          }

          // ParentDesignAltForViews
          //
          if (n.name () == "ParentDesignAltForViews" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ParentDesignAltForViews_type > r (
              ParentDesignAltForViews_traits::create (i, f, this));

            if (!this->ParentDesignAltForViews_)
            {
              this->ParentDesignAltForViews_.set (r);
              continue;
            }
          }

          // DesAltViewDateTime
          //
          if (n.name () == "DesAltViewDateTime" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->DesAltViewDateTime_)
            {
              this->DesAltViewDateTime_.set (DesAltViewDateTime_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimProject* SimProject::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimProject (*this, f, c);
      }

      SimProject& SimProject::
      operator= (const SimProject& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimSpatialStructureElement& > (*this) = x;
          this->Name_ = x.Name_;
          this->Representation_ = x.Representation_;
          this->UnitsInContext_ = x.UnitsInContext_;
          this->T24ProjectTeam_ = x.T24ProjectTeam_;
          this->ProjectTypeDefinitions_ = x.ProjectTypeDefinitions_;
          this->ParentDesignAltForViews_ = x.ParentDesignAltForViews_;
          this->DesAltViewDateTime_ = x.DesAltViewDateTime_;
        }

        return *this;
      }

      SimProject::
      ~SimProject ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

