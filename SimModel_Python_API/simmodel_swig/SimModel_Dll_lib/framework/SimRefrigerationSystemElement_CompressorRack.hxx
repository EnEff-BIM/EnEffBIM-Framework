// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_REFRIGERATION_SYSTEM_ELEMENT_COMPRESSOR_RACK_HXX
#define SIM_REFRIGERATION_SYSTEM_ELEMENT_COMPRESSOR_RACK_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_CompressorRack;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simrefrigerationsystemelement.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimRefrigerationSystemElement_CompressorRack: public ::schema::simxml::MepModel::SimRefrigerationSystemElement
      {
        public:
        // SimRefrigSysElem_Name
        //
        typedef ::xml_schema::string SimRefrigSysElem_Name_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_Name_type > SimRefrigSysElem_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_Name_type, char > SimRefrigSysElem_Name_traits;

        const SimRefrigSysElem_Name_optional&
        SimRefrigSysElem_Name () const;

        SimRefrigSysElem_Name_optional&
        SimRefrigSysElem_Name ();

        void
        SimRefrigSysElem_Name (const SimRefrigSysElem_Name_type& x);

        void
        SimRefrigSysElem_Name (const SimRefrigSysElem_Name_optional& x);

        void
        SimRefrigSysElem_Name (::std::auto_ptr< SimRefrigSysElem_Name_type > p);

        // SimRefrigSysElem_HeatRejectionLocation
        //
        typedef ::xml_schema::string SimRefrigSysElem_HeatRejectionLocation_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_HeatRejectionLocation_type > SimRefrigSysElem_HeatRejectionLocation_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_HeatRejectionLocation_type, char > SimRefrigSysElem_HeatRejectionLocation_traits;

        const SimRefrigSysElem_HeatRejectionLocation_optional&
        SimRefrigSysElem_HeatRejectionLocation () const;

        SimRefrigSysElem_HeatRejectionLocation_optional&
        SimRefrigSysElem_HeatRejectionLocation ();

        void
        SimRefrigSysElem_HeatRejectionLocation (const SimRefrigSysElem_HeatRejectionLocation_type& x);

        void
        SimRefrigSysElem_HeatRejectionLocation (const SimRefrigSysElem_HeatRejectionLocation_optional& x);

        void
        SimRefrigSysElem_HeatRejectionLocation (::std::auto_ptr< SimRefrigSysElem_HeatRejectionLocation_type > p);

        // SimRefrigSysElem_DesignCompRackCOP
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_DesignCompRackCOP_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DesignCompRackCOP_type > SimRefrigSysElem_DesignCompRackCOP_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DesignCompRackCOP_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_DesignCompRackCOP_traits;

        const SimRefrigSysElem_DesignCompRackCOP_optional&
        SimRefrigSysElem_DesignCompRackCOP () const;

        SimRefrigSysElem_DesignCompRackCOP_optional&
        SimRefrigSysElem_DesignCompRackCOP ();

        void
        SimRefrigSysElem_DesignCompRackCOP (const SimRefrigSysElem_DesignCompRackCOP_type& x);

        void
        SimRefrigSysElem_DesignCompRackCOP (const SimRefrigSysElem_DesignCompRackCOP_optional& x);

        // SimRefrigSysElem_CompRackCOPFuncTempCurveName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CompRackCOPFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CompRackCOPFuncTempCurveName_type > SimRefrigSysElem_CompRackCOPFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CompRackCOPFuncTempCurveName_type, char > SimRefrigSysElem_CompRackCOPFuncTempCurveName_traits;

        const SimRefrigSysElem_CompRackCOPFuncTempCurveName_optional&
        SimRefrigSysElem_CompRackCOPFuncTempCurveName () const;

        SimRefrigSysElem_CompRackCOPFuncTempCurveName_optional&
        SimRefrigSysElem_CompRackCOPFuncTempCurveName ();

        void
        SimRefrigSysElem_CompRackCOPFuncTempCurveName (const SimRefrigSysElem_CompRackCOPFuncTempCurveName_type& x);

        void
        SimRefrigSysElem_CompRackCOPFuncTempCurveName (const SimRefrigSysElem_CompRackCOPFuncTempCurveName_optional& x);

        void
        SimRefrigSysElem_CompRackCOPFuncTempCurveName (::std::auto_ptr< SimRefrigSysElem_CompRackCOPFuncTempCurveName_type > p);

        // SimRefrigSysElem_DesignCondFanPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_DesignCondFanPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DesignCondFanPwr_type > SimRefrigSysElem_DesignCondFanPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DesignCondFanPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_DesignCondFanPwr_traits;

        const SimRefrigSysElem_DesignCondFanPwr_optional&
        SimRefrigSysElem_DesignCondFanPwr () const;

        SimRefrigSysElem_DesignCondFanPwr_optional&
        SimRefrigSysElem_DesignCondFanPwr ();

        void
        SimRefrigSysElem_DesignCondFanPwr (const SimRefrigSysElem_DesignCondFanPwr_type& x);

        void
        SimRefrigSysElem_DesignCondFanPwr (const SimRefrigSysElem_DesignCondFanPwr_optional& x);

        // SimRefrigSysElem_CondFanPwrFuncTempCurveName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_CondFanPwrFuncTempCurveName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CondFanPwrFuncTempCurveName_type > SimRefrigSysElem_CondFanPwrFuncTempCurveName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CondFanPwrFuncTempCurveName_type, char > SimRefrigSysElem_CondFanPwrFuncTempCurveName_traits;

        const SimRefrigSysElem_CondFanPwrFuncTempCurveName_optional&
        SimRefrigSysElem_CondFanPwrFuncTempCurveName () const;

        SimRefrigSysElem_CondFanPwrFuncTempCurveName_optional&
        SimRefrigSysElem_CondFanPwrFuncTempCurveName ();

        void
        SimRefrigSysElem_CondFanPwrFuncTempCurveName (const SimRefrigSysElem_CondFanPwrFuncTempCurveName_type& x);

        void
        SimRefrigSysElem_CondFanPwrFuncTempCurveName (const SimRefrigSysElem_CondFanPwrFuncTempCurveName_optional& x);

        void
        SimRefrigSysElem_CondFanPwrFuncTempCurveName (::std::auto_ptr< SimRefrigSysElem_CondFanPwrFuncTempCurveName_type > p);

        // SimRefrigSysElem_CondType
        //
        typedef ::xml_schema::string SimRefrigSysElem_CondType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CondType_type > SimRefrigSysElem_CondType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CondType_type, char > SimRefrigSysElem_CondType_traits;

        const SimRefrigSysElem_CondType_optional&
        SimRefrigSysElem_CondType () const;

        SimRefrigSysElem_CondType_optional&
        SimRefrigSysElem_CondType ();

        void
        SimRefrigSysElem_CondType (const SimRefrigSysElem_CondType_type& x);

        void
        SimRefrigSysElem_CondType (const SimRefrigSysElem_CondType_optional& x);

        void
        SimRefrigSysElem_CondType (::std::auto_ptr< SimRefrigSysElem_CondType_type > p);

        // SimRefrigSysElem_WaterCoolCondInletNodeName
        //
        typedef ::xml_schema::string SimRefrigSysElem_WaterCoolCondInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondInletNodeName_type > SimRefrigSysElem_WaterCoolCondInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondInletNodeName_type, char > SimRefrigSysElem_WaterCoolCondInletNodeName_traits;

        const SimRefrigSysElem_WaterCoolCondInletNodeName_optional&
        SimRefrigSysElem_WaterCoolCondInletNodeName () const;

        SimRefrigSysElem_WaterCoolCondInletNodeName_optional&
        SimRefrigSysElem_WaterCoolCondInletNodeName ();

        void
        SimRefrigSysElem_WaterCoolCondInletNodeName (const SimRefrigSysElem_WaterCoolCondInletNodeName_type& x);

        void
        SimRefrigSysElem_WaterCoolCondInletNodeName (const SimRefrigSysElem_WaterCoolCondInletNodeName_optional& x);

        void
        SimRefrigSysElem_WaterCoolCondInletNodeName (::std::auto_ptr< SimRefrigSysElem_WaterCoolCondInletNodeName_type > p);

        // SimRefrigSysElem_WaterCoolCondOutletNodeName
        //
        typedef ::xml_schema::string SimRefrigSysElem_WaterCoolCondOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondOutletNodeName_type > SimRefrigSysElem_WaterCoolCondOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondOutletNodeName_type, char > SimRefrigSysElem_WaterCoolCondOutletNodeName_traits;

        const SimRefrigSysElem_WaterCoolCondOutletNodeName_optional&
        SimRefrigSysElem_WaterCoolCondOutletNodeName () const;

        SimRefrigSysElem_WaterCoolCondOutletNodeName_optional&
        SimRefrigSysElem_WaterCoolCondOutletNodeName ();

        void
        SimRefrigSysElem_WaterCoolCondOutletNodeName (const SimRefrigSysElem_WaterCoolCondOutletNodeName_type& x);

        void
        SimRefrigSysElem_WaterCoolCondOutletNodeName (const SimRefrigSysElem_WaterCoolCondOutletNodeName_optional& x);

        void
        SimRefrigSysElem_WaterCoolCondOutletNodeName (::std::auto_ptr< SimRefrigSysElem_WaterCoolCondOutletNodeName_type > p);

        // SimRefrigSysElem_WaterCoolLoopFlowType
        //
        typedef ::xml_schema::string SimRefrigSysElem_WaterCoolLoopFlowType_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolLoopFlowType_type > SimRefrigSysElem_WaterCoolLoopFlowType_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolLoopFlowType_type, char > SimRefrigSysElem_WaterCoolLoopFlowType_traits;

        const SimRefrigSysElem_WaterCoolLoopFlowType_optional&
        SimRefrigSysElem_WaterCoolLoopFlowType () const;

        SimRefrigSysElem_WaterCoolLoopFlowType_optional&
        SimRefrigSysElem_WaterCoolLoopFlowType ();

        void
        SimRefrigSysElem_WaterCoolLoopFlowType (const SimRefrigSysElem_WaterCoolLoopFlowType_type& x);

        void
        SimRefrigSysElem_WaterCoolLoopFlowType (const SimRefrigSysElem_WaterCoolLoopFlowType_optional& x);

        void
        SimRefrigSysElem_WaterCoolLoopFlowType (::std::auto_ptr< SimRefrigSysElem_WaterCoolLoopFlowType_type > p);

        // SimRefrigSysElem_WaterCoolCondOutletTempSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_WaterCoolCondOutletTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondOutletTempSchedName_type > SimRefrigSysElem_WaterCoolCondOutletTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondOutletTempSchedName_type, char > SimRefrigSysElem_WaterCoolCondOutletTempSchedName_traits;

        const SimRefrigSysElem_WaterCoolCondOutletTempSchedName_optional&
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName () const;

        SimRefrigSysElem_WaterCoolCondOutletTempSchedName_optional&
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName ();

        void
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName (const SimRefrigSysElem_WaterCoolCondOutletTempSchedName_type& x);

        void
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName (const SimRefrigSysElem_WaterCoolCondOutletTempSchedName_optional& x);

        void
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName (::std::auto_ptr< SimRefrigSysElem_WaterCoolCondOutletTempSchedName_type > p);

        // SimRefrigSysElem_WaterCoolCondDesignFlowRate
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_WaterCoolCondDesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondDesignFlowRate_type > SimRefrigSysElem_WaterCoolCondDesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondDesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_WaterCoolCondDesignFlowRate_traits;

        const SimRefrigSysElem_WaterCoolCondDesignFlowRate_optional&
        SimRefrigSysElem_WaterCoolCondDesignFlowRate () const;

        SimRefrigSysElem_WaterCoolCondDesignFlowRate_optional&
        SimRefrigSysElem_WaterCoolCondDesignFlowRate ();

        void
        SimRefrigSysElem_WaterCoolCondDesignFlowRate (const SimRefrigSysElem_WaterCoolCondDesignFlowRate_type& x);

        void
        SimRefrigSysElem_WaterCoolCondDesignFlowRate (const SimRefrigSysElem_WaterCoolCondDesignFlowRate_optional& x);

        // SimRefrigSysElem_WaterCoolCondMaxFlowRate
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_WaterCoolCondMaxFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondMaxFlowRate_type > SimRefrigSysElem_WaterCoolCondMaxFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondMaxFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_WaterCoolCondMaxFlowRate_traits;

        const SimRefrigSysElem_WaterCoolCondMaxFlowRate_optional&
        SimRefrigSysElem_WaterCoolCondMaxFlowRate () const;

        SimRefrigSysElem_WaterCoolCondMaxFlowRate_optional&
        SimRefrigSysElem_WaterCoolCondMaxFlowRate ();

        void
        SimRefrigSysElem_WaterCoolCondMaxFlowRate (const SimRefrigSysElem_WaterCoolCondMaxFlowRate_type& x);

        void
        SimRefrigSysElem_WaterCoolCondMaxFlowRate (const SimRefrigSysElem_WaterCoolCondMaxFlowRate_optional& x);

        // SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_type > SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_traits;

        const SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_optional&
        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp () const;

        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_optional&
        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp ();

        void
        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp (const SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_type& x);

        void
        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp (const SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_optional& x);

        // SimRefrigSysElem_WaterCoolCondMinWaterInletTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_type > SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_traits;

        const SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_optional&
        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp () const;

        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_optional&
        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp ();

        void
        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp (const SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_type& x);

        void
        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp (const SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_optional& x);

        // SimRefrigSysElem_EvapCondAvailSchedName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_EvapCondAvailSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapCondAvailSchedName_type > SimRefrigSysElem_EvapCondAvailSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapCondAvailSchedName_type, char > SimRefrigSysElem_EvapCondAvailSchedName_traits;

        const SimRefrigSysElem_EvapCondAvailSchedName_optional&
        SimRefrigSysElem_EvapCondAvailSchedName () const;

        SimRefrigSysElem_EvapCondAvailSchedName_optional&
        SimRefrigSysElem_EvapCondAvailSchedName ();

        void
        SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_type& x);

        void
        SimRefrigSysElem_EvapCondAvailSchedName (const SimRefrigSysElem_EvapCondAvailSchedName_optional& x);

        void
        SimRefrigSysElem_EvapCondAvailSchedName (::std::auto_ptr< SimRefrigSysElem_EvapCondAvailSchedName_type > p);

        // SimRefrigSysElem_EvapCondEffect
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_EvapCondEffect_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapCondEffect_type > SimRefrigSysElem_EvapCondEffect_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapCondEffect_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_EvapCondEffect_traits;

        const SimRefrigSysElem_EvapCondEffect_optional&
        SimRefrigSysElem_EvapCondEffect () const;

        SimRefrigSysElem_EvapCondEffect_optional&
        SimRefrigSysElem_EvapCondEffect ();

        void
        SimRefrigSysElem_EvapCondEffect (const SimRefrigSysElem_EvapCondEffect_type& x);

        void
        SimRefrigSysElem_EvapCondEffect (const SimRefrigSysElem_EvapCondEffect_optional& x);

        // SimRefrigSysElem_EvapCondAirFlowRate
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_EvapCondAirFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapCondAirFlowRate_type > SimRefrigSysElem_EvapCondAirFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapCondAirFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_EvapCondAirFlowRate_traits;

        const SimRefrigSysElem_EvapCondAirFlowRate_optional&
        SimRefrigSysElem_EvapCondAirFlowRate () const;

        SimRefrigSysElem_EvapCondAirFlowRate_optional&
        SimRefrigSysElem_EvapCondAirFlowRate ();

        void
        SimRefrigSysElem_EvapCondAirFlowRate (const SimRefrigSysElem_EvapCondAirFlowRate_type& x);

        void
        SimRefrigSysElem_EvapCondAirFlowRate (const SimRefrigSysElem_EvapCondAirFlowRate_optional& x);

        // SimRefrigSysElem_BasinHeatCap
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_BasinHeatCap_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_BasinHeatCap_type > SimRefrigSysElem_BasinHeatCap_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_BasinHeatCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_BasinHeatCap_traits;

        const SimRefrigSysElem_BasinHeatCap_optional&
        SimRefrigSysElem_BasinHeatCap () const;

        SimRefrigSysElem_BasinHeatCap_optional&
        SimRefrigSysElem_BasinHeatCap ();

        void
        SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_type& x);

        void
        SimRefrigSysElem_BasinHeatCap (const SimRefrigSysElem_BasinHeatCap_optional& x);

        // SimRefrigSysElem_BasinHeatSetpointTemp
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_BasinHeatSetpointTemp_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_BasinHeatSetpointTemp_type > SimRefrigSysElem_BasinHeatSetpointTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_BasinHeatSetpointTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_BasinHeatSetpointTemp_traits;

        const SimRefrigSysElem_BasinHeatSetpointTemp_optional&
        SimRefrigSysElem_BasinHeatSetpointTemp () const;

        SimRefrigSysElem_BasinHeatSetpointTemp_optional&
        SimRefrigSysElem_BasinHeatSetpointTemp ();

        void
        SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_type& x);

        void
        SimRefrigSysElem_BasinHeatSetpointTemp (const SimRefrigSysElem_BasinHeatSetpointTemp_optional& x);

        // SimRefrigSysElem_DesignEvapCondWaterPumpPwr
        //
        typedef ::xml_schema::double_ SimRefrigSysElem_DesignEvapCondWaterPumpPwr_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_DesignEvapCondWaterPumpPwr_type > SimRefrigSysElem_DesignEvapCondWaterPumpPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_DesignEvapCondWaterPumpPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimRefrigSysElem_DesignEvapCondWaterPumpPwr_traits;

        const SimRefrigSysElem_DesignEvapCondWaterPumpPwr_optional&
        SimRefrigSysElem_DesignEvapCondWaterPumpPwr () const;

        SimRefrigSysElem_DesignEvapCondWaterPumpPwr_optional&
        SimRefrigSysElem_DesignEvapCondWaterPumpPwr ();

        void
        SimRefrigSysElem_DesignEvapCondWaterPumpPwr (const SimRefrigSysElem_DesignEvapCondWaterPumpPwr_type& x);

        void
        SimRefrigSysElem_DesignEvapCondWaterPumpPwr (const SimRefrigSysElem_DesignEvapCondWaterPumpPwr_optional& x);

        // SimRefrigSysElem_EvapWaterSupplyTankName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_EvapWaterSupplyTankName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EvapWaterSupplyTankName_type > SimRefrigSysElem_EvapWaterSupplyTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EvapWaterSupplyTankName_type, char > SimRefrigSysElem_EvapWaterSupplyTankName_traits;

        const SimRefrigSysElem_EvapWaterSupplyTankName_optional&
        SimRefrigSysElem_EvapWaterSupplyTankName () const;

        SimRefrigSysElem_EvapWaterSupplyTankName_optional&
        SimRefrigSysElem_EvapWaterSupplyTankName ();

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_type& x);

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (const SimRefrigSysElem_EvapWaterSupplyTankName_optional& x);

        void
        SimRefrigSysElem_EvapWaterSupplyTankName (::std::auto_ptr< SimRefrigSysElem_EvapWaterSupplyTankName_type > p);

        // SimRefrigSysElem_CondAirInletNodeName
        //
        typedef ::xml_schema::string SimRefrigSysElem_CondAirInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_CondAirInletNodeName_type > SimRefrigSysElem_CondAirInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_CondAirInletNodeName_type, char > SimRefrigSysElem_CondAirInletNodeName_traits;

        const SimRefrigSysElem_CondAirInletNodeName_optional&
        SimRefrigSysElem_CondAirInletNodeName () const;

        SimRefrigSysElem_CondAirInletNodeName_optional&
        SimRefrigSysElem_CondAirInletNodeName ();

        void
        SimRefrigSysElem_CondAirInletNodeName (const SimRefrigSysElem_CondAirInletNodeName_type& x);

        void
        SimRefrigSysElem_CondAirInletNodeName (const SimRefrigSysElem_CondAirInletNodeName_optional& x);

        void
        SimRefrigSysElem_CondAirInletNodeName (::std::auto_ptr< SimRefrigSysElem_CondAirInletNodeName_type > p);

        // SimRefrigSysElem_EndUseSubCat
        //
        typedef ::xml_schema::string SimRefrigSysElem_EndUseSubCat_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_EndUseSubCat_type > SimRefrigSysElem_EndUseSubCat_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_EndUseSubCat_type, char > SimRefrigSysElem_EndUseSubCat_traits;

        const SimRefrigSysElem_EndUseSubCat_optional&
        SimRefrigSysElem_EndUseSubCat () const;

        SimRefrigSysElem_EndUseSubCat_optional&
        SimRefrigSysElem_EndUseSubCat ();

        void
        SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_type& x);

        void
        SimRefrigSysElem_EndUseSubCat (const SimRefrigSysElem_EndUseSubCat_optional& x);

        void
        SimRefrigSysElem_EndUseSubCat (::std::auto_ptr< SimRefrigSysElem_EndUseSubCat_type > p);

        // SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_type > SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_type, char > SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_traits;

        const SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_optional&
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName () const;

        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_optional&
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName ();

        void
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName (const SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_type& x);

        void
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName (const SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_optional& x);

        void
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName (::std::auto_ptr< SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_type > p);

        // SimRefrigSysElem_HeatRejectionZoneName
        //
        typedef ::xml_schema::idref SimRefrigSysElem_HeatRejectionZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimRefrigSysElem_HeatRejectionZoneName_type > SimRefrigSysElem_HeatRejectionZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimRefrigSysElem_HeatRejectionZoneName_type, char > SimRefrigSysElem_HeatRejectionZoneName_traits;

        const SimRefrigSysElem_HeatRejectionZoneName_optional&
        SimRefrigSysElem_HeatRejectionZoneName () const;

        SimRefrigSysElem_HeatRejectionZoneName_optional&
        SimRefrigSysElem_HeatRejectionZoneName ();

        void
        SimRefrigSysElem_HeatRejectionZoneName (const SimRefrigSysElem_HeatRejectionZoneName_type& x);

        void
        SimRefrigSysElem_HeatRejectionZoneName (const SimRefrigSysElem_HeatRejectionZoneName_optional& x);

        void
        SimRefrigSysElem_HeatRejectionZoneName (::std::auto_ptr< SimRefrigSysElem_HeatRejectionZoneName_type > p);

        // Constructors.
        //
        SimRefrigerationSystemElement_CompressorRack ();

        SimRefrigerationSystemElement_CompressorRack (const RefId_type&);

        SimRefrigerationSystemElement_CompressorRack (const ::xercesc::DOMElement& e,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        SimRefrigerationSystemElement_CompressorRack (const SimRefrigerationSystemElement_CompressorRack& x,
                                                      ::xml_schema::flags f = 0,
                                                      ::xml_schema::container* c = 0);

        virtual SimRefrigerationSystemElement_CompressorRack*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimRefrigerationSystemElement_CompressorRack&
        operator= (const SimRefrigerationSystemElement_CompressorRack& x);

        virtual 
        ~SimRefrigerationSystemElement_CompressorRack ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimRefrigSysElem_Name_optional SimRefrigSysElem_Name_;
        SimRefrigSysElem_HeatRejectionLocation_optional SimRefrigSysElem_HeatRejectionLocation_;
        SimRefrigSysElem_DesignCompRackCOP_optional SimRefrigSysElem_DesignCompRackCOP_;
        SimRefrigSysElem_CompRackCOPFuncTempCurveName_optional SimRefrigSysElem_CompRackCOPFuncTempCurveName_;
        SimRefrigSysElem_DesignCondFanPwr_optional SimRefrigSysElem_DesignCondFanPwr_;
        SimRefrigSysElem_CondFanPwrFuncTempCurveName_optional SimRefrigSysElem_CondFanPwrFuncTempCurveName_;
        SimRefrigSysElem_CondType_optional SimRefrigSysElem_CondType_;
        SimRefrigSysElem_WaterCoolCondInletNodeName_optional SimRefrigSysElem_WaterCoolCondInletNodeName_;
        SimRefrigSysElem_WaterCoolCondOutletNodeName_optional SimRefrigSysElem_WaterCoolCondOutletNodeName_;
        SimRefrigSysElem_WaterCoolLoopFlowType_optional SimRefrigSysElem_WaterCoolLoopFlowType_;
        SimRefrigSysElem_WaterCoolCondOutletTempSchedName_optional SimRefrigSysElem_WaterCoolCondOutletTempSchedName_;
        SimRefrigSysElem_WaterCoolCondDesignFlowRate_optional SimRefrigSysElem_WaterCoolCondDesignFlowRate_;
        SimRefrigSysElem_WaterCoolCondMaxFlowRate_optional SimRefrigSysElem_WaterCoolCondMaxFlowRate_;
        SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_optional SimRefrigSysElem_WaterCoolCondMaxWaterOutletTemp_;
        SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_optional SimRefrigSysElem_WaterCoolCondMinWaterInletTemp_;
        SimRefrigSysElem_EvapCondAvailSchedName_optional SimRefrigSysElem_EvapCondAvailSchedName_;
        SimRefrigSysElem_EvapCondEffect_optional SimRefrigSysElem_EvapCondEffect_;
        SimRefrigSysElem_EvapCondAirFlowRate_optional SimRefrigSysElem_EvapCondAirFlowRate_;
        SimRefrigSysElem_BasinHeatCap_optional SimRefrigSysElem_BasinHeatCap_;
        SimRefrigSysElem_BasinHeatSetpointTemp_optional SimRefrigSysElem_BasinHeatSetpointTemp_;
        SimRefrigSysElem_DesignEvapCondWaterPumpPwr_optional SimRefrigSysElem_DesignEvapCondWaterPumpPwr_;
        SimRefrigSysElem_EvapWaterSupplyTankName_optional SimRefrigSysElem_EvapWaterSupplyTankName_;
        SimRefrigSysElem_CondAirInletNodeName_optional SimRefrigSysElem_CondAirInletNodeName_;
        SimRefrigSysElem_EndUseSubCat_optional SimRefrigSysElem_EndUseSubCat_;
        SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_optional SimRefrigSysElem_RefrigCaseNameOrWalkNameOrCase_WalkListName_;
        SimRefrigSysElem_HeatRejectionZoneName_optional SimRefrigSysElem_HeatRejectionZoneName_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_REFRIGERATION_SYSTEM_ELEMENT_COMPRESSOR_RACK_HXX
