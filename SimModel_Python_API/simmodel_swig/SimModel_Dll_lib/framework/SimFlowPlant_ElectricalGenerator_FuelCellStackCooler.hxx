// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_STACK_COOLER_HXX
#define SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_STACK_COOLER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_FuelCellStackCooler;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowplant_electricalgenerator.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowPlant_ElectricalGenerator_FuelCellStackCooler: public ::schema::simxml::MepModel::SimFlowPlant_ElectricalGenerator
      {
        public:
        // SimFlowPlant_Name
        //
        typedef ::xml_schema::string SimFlowPlant_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Name_type > SimFlowPlant_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Name_type, char > SimFlowPlant_Name_traits;

        const SimFlowPlant_Name_optional&
        SimFlowPlant_Name () const;

        SimFlowPlant_Name_optional&
        SimFlowPlant_Name ();

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_type& x);

        void
        SimFlowPlant_Name (const SimFlowPlant_Name_optional& x);

        void
        SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > p);

        // SimFlowPlant_HeatRecovWaterInletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterInletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterInletNodeName_type > SimFlowPlant_HeatRecovWaterInletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterInletNodeName_type, char > SimFlowPlant_HeatRecovWaterInletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName () const;

        SimFlowPlant_HeatRecovWaterInletNodeName_optional&
        SimFlowPlant_HeatRecovWaterInletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (const SimFlowPlant_HeatRecovWaterInletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterInletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterInletNodeName_type > p);

        // SimFlowPlant_HeatRecovWaterOutletNodeName
        //
        typedef ::xml_schema::string SimFlowPlant_HeatRecovWaterOutletNodeName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_HeatRecovWaterOutletNodeName_type > SimFlowPlant_HeatRecovWaterOutletNodeName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_HeatRecovWaterOutletNodeName_type, char > SimFlowPlant_HeatRecovWaterOutletNodeName_traits;

        const SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName () const;

        SimFlowPlant_HeatRecovWaterOutletNodeName_optional&
        SimFlowPlant_HeatRecovWaterOutletNodeName ();

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_type& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (const SimFlowPlant_HeatRecovWaterOutletNodeName_optional& x);

        void
        SimFlowPlant_HeatRecovWaterOutletNodeName (::std::auto_ptr< SimFlowPlant_HeatRecovWaterOutletNodeName_type > p);

        // SimFlowPlant_NomStackTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_NomStackTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_NomStackTemp_type > SimFlowPlant_NomStackTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_NomStackTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_NomStackTemp_traits;

        const SimFlowPlant_NomStackTemp_optional&
        SimFlowPlant_NomStackTemp () const;

        SimFlowPlant_NomStackTemp_optional&
        SimFlowPlant_NomStackTemp ();

        void
        SimFlowPlant_NomStackTemp (const SimFlowPlant_NomStackTemp_type& x);

        void
        SimFlowPlant_NomStackTemp (const SimFlowPlant_NomStackTemp_optional& x);

        // SimFlowPlant_ActStackTemp
        //
        typedef ::xml_schema::double_ SimFlowPlant_ActStackTemp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_ActStackTemp_type > SimFlowPlant_ActStackTemp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_ActStackTemp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_ActStackTemp_traits;

        const SimFlowPlant_ActStackTemp_optional&
        SimFlowPlant_ActStackTemp () const;

        SimFlowPlant_ActStackTemp_optional&
        SimFlowPlant_ActStackTemp ();

        void
        SimFlowPlant_ActStackTemp (const SimFlowPlant_ActStackTemp_type& x);

        void
        SimFlowPlant_ActStackTemp (const SimFlowPlant_ActStackTemp_optional& x);

        // SimFlowPlant_Coeff_r_1_4
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowPlant_Coeff_r_1_4_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_Coeff_r_1_4_type > SimFlowPlant_Coeff_r_1_4_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_Coeff_r_1_4_type, char > SimFlowPlant_Coeff_r_1_4_traits;

        const SimFlowPlant_Coeff_r_1_4_optional&
        SimFlowPlant_Coeff_r_1_4 () const;

        SimFlowPlant_Coeff_r_1_4_optional&
        SimFlowPlant_Coeff_r_1_4 ();

        void
        SimFlowPlant_Coeff_r_1_4 (const SimFlowPlant_Coeff_r_1_4_type& x);

        void
        SimFlowPlant_Coeff_r_1_4 (const SimFlowPlant_Coeff_r_1_4_optional& x);

        void
        SimFlowPlant_Coeff_r_1_4 (::std::auto_ptr< SimFlowPlant_Coeff_r_1_4_type > p);

        // SimFlowPlant_StackCoolantFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCoolantFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCoolantFlowRate_type > SimFlowPlant_StackCoolantFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCoolantFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCoolantFlowRate_traits;

        const SimFlowPlant_StackCoolantFlowRate_optional&
        SimFlowPlant_StackCoolantFlowRate () const;

        SimFlowPlant_StackCoolantFlowRate_optional&
        SimFlowPlant_StackCoolantFlowRate ();

        void
        SimFlowPlant_StackCoolantFlowRate (const SimFlowPlant_StackCoolantFlowRate_type& x);

        void
        SimFlowPlant_StackCoolantFlowRate (const SimFlowPlant_StackCoolantFlowRate_optional& x);

        // SimFlowPlant_StackCoolerUFactorTimesAreaVal
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCoolerUFactorTimesAreaVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCoolerUFactorTimesAreaVal_type > SimFlowPlant_StackCoolerUFactorTimesAreaVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCoolerUFactorTimesAreaVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCoolerUFactorTimesAreaVal_traits;

        const SimFlowPlant_StackCoolerUFactorTimesAreaVal_optional&
        SimFlowPlant_StackCoolerUFactorTimesAreaVal () const;

        SimFlowPlant_StackCoolerUFactorTimesAreaVal_optional&
        SimFlowPlant_StackCoolerUFactorTimesAreaVal ();

        void
        SimFlowPlant_StackCoolerUFactorTimesAreaVal (const SimFlowPlant_StackCoolerUFactorTimesAreaVal_type& x);

        void
        SimFlowPlant_StackCoolerUFactorTimesAreaVal (const SimFlowPlant_StackCoolerUFactorTimesAreaVal_optional& x);

        // SimFlowPlant_FscogenAdjFactor
        //
        typedef ::xml_schema::double_ SimFlowPlant_FscogenAdjFactor_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_FscogenAdjFactor_type > SimFlowPlant_FscogenAdjFactor_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_FscogenAdjFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_FscogenAdjFactor_traits;

        const SimFlowPlant_FscogenAdjFactor_optional&
        SimFlowPlant_FscogenAdjFactor () const;

        SimFlowPlant_FscogenAdjFactor_optional&
        SimFlowPlant_FscogenAdjFactor ();

        void
        SimFlowPlant_FscogenAdjFactor (const SimFlowPlant_FscogenAdjFactor_type& x);

        void
        SimFlowPlant_FscogenAdjFactor (const SimFlowPlant_FscogenAdjFactor_optional& x);

        // SimFlowPlant_StackCogenerationExchngArea
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCogenerationExchngArea_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCogenerationExchngArea_type > SimFlowPlant_StackCogenerationExchngArea_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCogenerationExchngArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCogenerationExchngArea_traits;

        const SimFlowPlant_StackCogenerationExchngArea_optional&
        SimFlowPlant_StackCogenerationExchngArea () const;

        SimFlowPlant_StackCogenerationExchngArea_optional&
        SimFlowPlant_StackCogenerationExchngArea ();

        void
        SimFlowPlant_StackCogenerationExchngArea (const SimFlowPlant_StackCogenerationExchngArea_type& x);

        void
        SimFlowPlant_StackCogenerationExchngArea (const SimFlowPlant_StackCogenerationExchngArea_optional& x);

        // SimFlowPlant_StackCogenerationExchngNomFlowRate
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCogenerationExchngNomFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCogenerationExchngNomFlowRate_type > SimFlowPlant_StackCogenerationExchngNomFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCogenerationExchngNomFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCogenerationExchngNomFlowRate_traits;

        const SimFlowPlant_StackCogenerationExchngNomFlowRate_optional&
        SimFlowPlant_StackCogenerationExchngNomFlowRate () const;

        SimFlowPlant_StackCogenerationExchngNomFlowRate_optional&
        SimFlowPlant_StackCogenerationExchngNomFlowRate ();

        void
        SimFlowPlant_StackCogenerationExchngNomFlowRate (const SimFlowPlant_StackCogenerationExchngNomFlowRate_type& x);

        void
        SimFlowPlant_StackCogenerationExchngNomFlowRate (const SimFlowPlant_StackCogenerationExchngNomFlowRate_optional& x);

        // SimFlowPlant_StackCogenerationExchngNomHeatTransCoef
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_type > SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_traits;

        const SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_optional&
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef () const;

        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_optional&
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef ();

        void
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef (const SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_type& x);

        void
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef (const SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_optional& x);

        // SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_type > SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_traits;

        const SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_optional&
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp () const;

        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_optional&
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp ();

        void
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp (const SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_type& x);

        void
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp (const SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_optional& x);

        // SimFlowPlant_StackCoolerPumpPwr
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCoolerPumpPwr_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCoolerPumpPwr_type > SimFlowPlant_StackCoolerPumpPwr_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCoolerPumpPwr_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCoolerPumpPwr_traits;

        const SimFlowPlant_StackCoolerPumpPwr_optional&
        SimFlowPlant_StackCoolerPumpPwr () const;

        SimFlowPlant_StackCoolerPumpPwr_optional&
        SimFlowPlant_StackCoolerPumpPwr ();

        void
        SimFlowPlant_StackCoolerPumpPwr (const SimFlowPlant_StackCoolerPumpPwr_type& x);

        void
        SimFlowPlant_StackCoolerPumpPwr (const SimFlowPlant_StackCoolerPumpPwr_optional& x);

        // SimFlowPlant_StackCoolerPumpHeatLossFraction
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackCoolerPumpHeatLossFraction_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackCoolerPumpHeatLossFraction_type > SimFlowPlant_StackCoolerPumpHeatLossFraction_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackCoolerPumpHeatLossFraction_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackCoolerPumpHeatLossFraction_traits;

        const SimFlowPlant_StackCoolerPumpHeatLossFraction_optional&
        SimFlowPlant_StackCoolerPumpHeatLossFraction () const;

        SimFlowPlant_StackCoolerPumpHeatLossFraction_optional&
        SimFlowPlant_StackCoolerPumpHeatLossFraction ();

        void
        SimFlowPlant_StackCoolerPumpHeatLossFraction (const SimFlowPlant_StackCoolerPumpHeatLossFraction_type& x);

        void
        SimFlowPlant_StackCoolerPumpHeatLossFraction (const SimFlowPlant_StackCoolerPumpHeatLossFraction_optional& x);

        // SimFlowPlant_StackAirCoolerFanCoefff_0_0
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowPlant_StackAirCoolerFanCoefff_0_0_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackAirCoolerFanCoefff_0_0_type > SimFlowPlant_StackAirCoolerFanCoefff_0_0_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackAirCoolerFanCoefff_0_0_type, char > SimFlowPlant_StackAirCoolerFanCoefff_0_0_traits;

        const SimFlowPlant_StackAirCoolerFanCoefff_0_0_optional&
        SimFlowPlant_StackAirCoolerFanCoefff_0_0 () const;

        SimFlowPlant_StackAirCoolerFanCoefff_0_0_optional&
        SimFlowPlant_StackAirCoolerFanCoefff_0_0 ();

        void
        SimFlowPlant_StackAirCoolerFanCoefff_0_0 (const SimFlowPlant_StackAirCoolerFanCoefff_0_0_type& x);

        void
        SimFlowPlant_StackAirCoolerFanCoefff_0_0 (const SimFlowPlant_StackAirCoolerFanCoefff_0_0_optional& x);

        void
        SimFlowPlant_StackAirCoolerFanCoefff_0_0 (::std::auto_ptr< SimFlowPlant_StackAirCoolerFanCoefff_0_0_type > p);

        // SimFlowPlant_StackAirCoolerFanCoefff_1_1
        //
        typedef ::schema::simxml::SimModelCore::doubleList SimFlowPlant_StackAirCoolerFanCoefff_1_1_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackAirCoolerFanCoefff_1_1_type > SimFlowPlant_StackAirCoolerFanCoefff_1_1_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackAirCoolerFanCoefff_1_1_type, char > SimFlowPlant_StackAirCoolerFanCoefff_1_1_traits;

        const SimFlowPlant_StackAirCoolerFanCoefff_1_1_optional&
        SimFlowPlant_StackAirCoolerFanCoefff_1_1 () const;

        SimFlowPlant_StackAirCoolerFanCoefff_1_1_optional&
        SimFlowPlant_StackAirCoolerFanCoefff_1_1 ();

        void
        SimFlowPlant_StackAirCoolerFanCoefff_1_1 (const SimFlowPlant_StackAirCoolerFanCoefff_1_1_type& x);

        void
        SimFlowPlant_StackAirCoolerFanCoefff_1_1 (const SimFlowPlant_StackAirCoolerFanCoefff_1_1_optional& x);

        void
        SimFlowPlant_StackAirCoolerFanCoefff_1_1 (::std::auto_ptr< SimFlowPlant_StackAirCoolerFanCoefff_1_1_type > p);

        // SimFlowPlant_StackAirCoolerFanCoeff2
        //
        typedef ::xml_schema::double_ SimFlowPlant_StackAirCoolerFanCoeff2_type;
        typedef ::xsd::cxx::tree::optional< SimFlowPlant_StackAirCoolerFanCoeff2_type > SimFlowPlant_StackAirCoolerFanCoeff2_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowPlant_StackAirCoolerFanCoeff2_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowPlant_StackAirCoolerFanCoeff2_traits;

        const SimFlowPlant_StackAirCoolerFanCoeff2_optional&
        SimFlowPlant_StackAirCoolerFanCoeff2 () const;

        SimFlowPlant_StackAirCoolerFanCoeff2_optional&
        SimFlowPlant_StackAirCoolerFanCoeff2 ();

        void
        SimFlowPlant_StackAirCoolerFanCoeff2 (const SimFlowPlant_StackAirCoolerFanCoeff2_type& x);

        void
        SimFlowPlant_StackAirCoolerFanCoeff2 (const SimFlowPlant_StackAirCoolerFanCoeff2_optional& x);

        // Constructors.
        //
        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler ();

        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler (const RefId_type&);

        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler (const SimFlowPlant_ElectricalGenerator_FuelCellStackCooler& x,
                                                              ::xml_schema::flags f = 0,
                                                              ::xml_schema::container* c = 0);

        virtual SimFlowPlant_ElectricalGenerator_FuelCellStackCooler*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowPlant_ElectricalGenerator_FuelCellStackCooler&
        operator= (const SimFlowPlant_ElectricalGenerator_FuelCellStackCooler& x);

        virtual 
        ~SimFlowPlant_ElectricalGenerator_FuelCellStackCooler ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowPlant_Name_optional SimFlowPlant_Name_;
        SimFlowPlant_HeatRecovWaterInletNodeName_optional SimFlowPlant_HeatRecovWaterInletNodeName_;
        SimFlowPlant_HeatRecovWaterOutletNodeName_optional SimFlowPlant_HeatRecovWaterOutletNodeName_;
        SimFlowPlant_NomStackTemp_optional SimFlowPlant_NomStackTemp_;
        SimFlowPlant_ActStackTemp_optional SimFlowPlant_ActStackTemp_;
        SimFlowPlant_Coeff_r_1_4_optional SimFlowPlant_Coeff_r_1_4_;
        SimFlowPlant_StackCoolantFlowRate_optional SimFlowPlant_StackCoolantFlowRate_;
        SimFlowPlant_StackCoolerUFactorTimesAreaVal_optional SimFlowPlant_StackCoolerUFactorTimesAreaVal_;
        SimFlowPlant_FscogenAdjFactor_optional SimFlowPlant_FscogenAdjFactor_;
        SimFlowPlant_StackCogenerationExchngArea_optional SimFlowPlant_StackCogenerationExchngArea_;
        SimFlowPlant_StackCogenerationExchngNomFlowRate_optional SimFlowPlant_StackCogenerationExchngNomFlowRate_;
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_optional SimFlowPlant_StackCogenerationExchngNomHeatTransCoef_;
        SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_optional SimFlowPlant_StackCogenerationExchngNomHeatTransCoefExp_;
        SimFlowPlant_StackCoolerPumpPwr_optional SimFlowPlant_StackCoolerPumpPwr_;
        SimFlowPlant_StackCoolerPumpHeatLossFraction_optional SimFlowPlant_StackCoolerPumpHeatLossFraction_;
        SimFlowPlant_StackAirCoolerFanCoefff_0_0_optional SimFlowPlant_StackAirCoolerFanCoefff_0_0_;
        SimFlowPlant_StackAirCoolerFanCoefff_1_1_optional SimFlowPlant_StackAirCoolerFanCoefff_1_1_;
        SimFlowPlant_StackAirCoolerFanCoeff2_optional SimFlowPlant_StackAirCoolerFanCoeff2_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_PLANT_ELECTRICAL_GENERATOR_FUEL_CELL_STACK_COOLER_HXX
