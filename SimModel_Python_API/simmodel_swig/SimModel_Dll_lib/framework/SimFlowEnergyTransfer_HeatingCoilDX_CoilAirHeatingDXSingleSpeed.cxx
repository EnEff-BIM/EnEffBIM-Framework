// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed
      // 

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName () const
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName ()
      {
        return this->SimFlowEnergyTrans_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_type& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (const SimFlowEnergyTrans_AvailSchedName_optional& x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AvailSchedName (::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > x)
      {
        this->SimFlowEnergyTrans_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName () const
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AirInNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName ()
      {
        return this->SimFlowEnergyTrans_AirInNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (const SimFlowEnergyTrans_AirInNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirInNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirInNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName () const
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_AirOutNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName ()
      {
        return this->SimFlowEnergyTrans_AirOutNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_type& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (const SimFlowEnergyTrans_AirOutNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_AirOutNodeName (::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > x)
      {
        this->SimFlowEnergyTrans_AirOutNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RatedAirFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedAirFlowRate_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedAirFlowRate (const SimFlowEnergyTrans_RatedAirFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedAirFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName () const
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName ()
      {
        return this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (const SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName (::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName () const
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName ()
      {
        return this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (const SimFlowEnergyTrans_PartLoadFractCorrelCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_PartLoadFractCorrelCurveName (::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > x)
      {
        this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap () const
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_CrankcaseHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap ()
      {
        return this->SimFlowEnergyTrans_CrankcaseHeatCap_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_CrankcaseHeatCap (const SimFlowEnergyTrans_CrankcaseHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp () const
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp ()
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_type& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_optional& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EvapAirInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EvapAirInletNodeName () const
      {
        return this->SimFlowEnergyTrans_EvapAirInletNodeName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_EvapAirInletNodeName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EvapAirInletNodeName ()
      {
        return this->SimFlowEnergyTrans_EvapAirInletNodeName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EvapAirInletNodeName (const SimFlowEnergyTrans_EvapAirInletNodeName_type& x)
      {
        this->SimFlowEnergyTrans_EvapAirInletNodeName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EvapAirInletNodeName (const SimFlowEnergyTrans_EvapAirInletNodeName_optional& x)
      {
        this->SimFlowEnergyTrans_EvapAirInletNodeName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_EvapAirInletNodeName (::std::auto_ptr< SimFlowEnergyTrans_EvapAirInletNodeName_type > x)
      {
        this->SimFlowEnergyTrans_EvapAirInletNodeName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_GrossRatedHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCap () const
      {
        return this->SimFlowEnergyTrans_GrossRatedHeatCap_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_GrossRatedHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCap ()
      {
        return this->SimFlowEnergyTrans_GrossRatedHeatCap_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCap (const SimFlowEnergyTrans_GrossRatedHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_GrossRatedHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCap (const SimFlowEnergyTrans_GrossRatedHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_GrossRatedHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_GrossRatedHeatCOP_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCOP () const
      {
        return this->SimFlowEnergyTrans_GrossRatedHeatCOP_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_GrossRatedHeatCOP_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCOP ()
      {
        return this->SimFlowEnergyTrans_GrossRatedHeatCOP_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCOP (const SimFlowEnergyTrans_GrossRatedHeatCOP_type& x)
      {
        this->SimFlowEnergyTrans_GrossRatedHeatCOP_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_GrossRatedHeatCOP (const SimFlowEnergyTrans_GrossRatedHeatCOP_optional& x)
      {
        this->SimFlowEnergyTrans_GrossRatedHeatCOP_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate () const
      {
        return this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate ()
      {
        return this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate (const SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_type& x)
      {
        this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate (const SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_optional& x)
      {
        this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatingCapFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatingCapFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatingCapFuncTempCurveName (const SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatingCapFuncTempCurveName (const SimFlowEnergyTrans_HeatingCapFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatingCapFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName () const
      {
        return this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName ()
      {
        return this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName (const SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_type& x)
      {
        this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName (const SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName (::std::auto_ptr< SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_type > x)
      {
        this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName () const
      {
        return this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName ()
      {
        return this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_type& x)
      {
        this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName (const SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName (::std::auto_ptr< SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_type > x)
      {
        this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp () const
      {
        return this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp ()
      {
        return this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp (const SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_type& x)
      {
        this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp (const SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_optional& x)
      {
        this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress () const
      {
        return this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress ()
      {
        return this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress (const SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_type& x)
      {
        this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress (const SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_optional& x)
      {
        this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp () const
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp ()
      {
        return this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_type& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp (const SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_optional& x)
      {
        this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostStrategy_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostStrategy () const
      {
        return this->SimFlowEnergyTrans_DefrostStrategy_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostStrategy_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostStrategy ()
      {
        return this->SimFlowEnergyTrans_DefrostStrategy_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostStrategy (const SimFlowEnergyTrans_DefrostStrategy_type& x)
      {
        this->SimFlowEnergyTrans_DefrostStrategy_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostStrategy (const SimFlowEnergyTrans_DefrostStrategy_optional& x)
      {
        this->SimFlowEnergyTrans_DefrostStrategy_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostStrategy (::std::auto_ptr< SimFlowEnergyTrans_DefrostStrategy_type > x)
      {
        this->SimFlowEnergyTrans_DefrostStrategy_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostCntl_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostCntl () const
      {
        return this->SimFlowEnergyTrans_DefrostCntl_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostCntl_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostCntl ()
      {
        return this->SimFlowEnergyTrans_DefrostCntl_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostCntl (const SimFlowEnergyTrans_DefrostCntl_type& x)
      {
        this->SimFlowEnergyTrans_DefrostCntl_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostCntl (const SimFlowEnergyTrans_DefrostCntl_optional& x)
      {
        this->SimFlowEnergyTrans_DefrostCntl_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostCntl (::std::auto_ptr< SimFlowEnergyTrans_DefrostCntl_type > x)
      {
        this->SimFlowEnergyTrans_DefrostCntl_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostTimePeriodFract_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostTimePeriodFract () const
      {
        return this->SimFlowEnergyTrans_DefrostTimePeriodFract_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_DefrostTimePeriodFract_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostTimePeriodFract ()
      {
        return this->SimFlowEnergyTrans_DefrostTimePeriodFract_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostTimePeriodFract (const SimFlowEnergyTrans_DefrostTimePeriodFract_type& x)
      {
        this->SimFlowEnergyTrans_DefrostTimePeriodFract_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_DefrostTimePeriodFract (const SimFlowEnergyTrans_DefrostTimePeriodFract_optional& x)
      {
        this->SimFlowEnergyTrans_DefrostTimePeriodFract_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_ResistDefrostHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_ResistDefrostHeatCap () const
      {
        return this->SimFlowEnergyTrans_ResistDefrostHeatCap_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_ResistDefrostHeatCap_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_ResistDefrostHeatCap ()
      {
        return this->SimFlowEnergyTrans_ResistDefrostHeatCap_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_ResistDefrostHeatCap (const SimFlowEnergyTrans_ResistDefrostHeatCap_type& x)
      {
        this->SimFlowEnergyTrans_ResistDefrostHeatCap_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_ResistDefrostHeatCap (const SimFlowEnergyTrans_ResistDefrostHeatCap_optional& x)
      {
        this->SimFlowEnergyTrans_ResistDefrostHeatCap_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RegionnumberforcalculatingHSPF () const
      {
        return this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RegionnumberforcalculatingHSPF ()
      {
        return this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RegionnumberforcalculatingHSPF (const SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_type& x)
      {
        this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTrans_RegionnumberforcalculatingHSPF (const SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_optional& x)
      {
        this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_Name_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_Name () const
      {
        return this->CoilSys_Heat_DX_Name_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_Name_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_Name ()
      {
        return this->CoilSys_Heat_DX_Name_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_Name (const CoilSys_Heat_DX_Name_type& x)
      {
        this->CoilSys_Heat_DX_Name_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_Name (const CoilSys_Heat_DX_Name_optional& x)
      {
        this->CoilSys_Heat_DX_Name_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_Name (::std::auto_ptr< CoilSys_Heat_DX_Name_type > x)
      {
        this->CoilSys_Heat_DX_Name_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_AvailSchedName () const
      {
        return this->CoilSys_Heat_DX_AvailSchedName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_AvailSchedName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_AvailSchedName ()
      {
        return this->CoilSys_Heat_DX_AvailSchedName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_AvailSchedName (const CoilSys_Heat_DX_AvailSchedName_type& x)
      {
        this->CoilSys_Heat_DX_AvailSchedName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_AvailSchedName (const CoilSys_Heat_DX_AvailSchedName_optional& x)
      {
        this->CoilSys_Heat_DX_AvailSchedName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_AvailSchedName (::std::auto_ptr< CoilSys_Heat_DX_AvailSchedName_type > x)
      {
        this->CoilSys_Heat_DX_AvailSchedName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_HeatingCoilObjType_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilObjType () const
      {
        return this->CoilSys_Heat_DX_HeatingCoilObjType_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_HeatingCoilObjType_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilObjType ()
      {
        return this->CoilSys_Heat_DX_HeatingCoilObjType_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilObjType (const CoilSys_Heat_DX_HeatingCoilObjType_type& x)
      {
        this->CoilSys_Heat_DX_HeatingCoilObjType_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilObjType (const CoilSys_Heat_DX_HeatingCoilObjType_optional& x)
      {
        this->CoilSys_Heat_DX_HeatingCoilObjType_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilObjType (::std::auto_ptr< CoilSys_Heat_DX_HeatingCoilObjType_type > x)
      {
        this->CoilSys_Heat_DX_HeatingCoilObjType_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_HeatingCoilName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilName () const
      {
        return this->CoilSys_Heat_DX_HeatingCoilName_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::CoilSys_Heat_DX_HeatingCoilName_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilName ()
      {
        return this->CoilSys_Heat_DX_HeatingCoilName_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilName (const CoilSys_Heat_DX_HeatingCoilName_type& x)
      {
        this->CoilSys_Heat_DX_HeatingCoilName_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilName (const CoilSys_Heat_DX_HeatingCoilName_optional& x)
      {
        this->CoilSys_Heat_DX_HeatingCoilName_ = x;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      CoilSys_Heat_DX_HeatingCoilName (::std::auto_ptr< CoilSys_Heat_DX_HeatingCoilName_type > x)
      {
        this->CoilSys_Heat_DX_HeatingCoilName_.set (x);
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::T24BypassMinimumEfficiencyCheck_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24BypassMinimumEfficiencyCheck () const
      {
        return this->T24BypassMinimumEfficiencyCheck_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::T24BypassMinimumEfficiencyCheck_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24BypassMinimumEfficiencyCheck ()
      {
        return this->T24BypassMinimumEfficiencyCheck_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24BypassMinimumEfficiencyCheck (const T24BypassMinimumEfficiencyCheck_type& x)
      {
        this->T24BypassMinimumEfficiencyCheck_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24BypassMinimumEfficiencyCheck (const T24BypassMinimumEfficiencyCheck_optional& x)
      {
        this->T24BypassMinimumEfficiencyCheck_ = x;
      }

      const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::T24CoilPressureDrop_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24CoilPressureDrop () const
      {
        return this->T24CoilPressureDrop_;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::T24CoilPressureDrop_optional& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24CoilPressureDrop ()
      {
        return this->T24CoilPressureDrop_;
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24CoilPressureDrop (const T24CoilPressureDrop_type& x)
      {
        this->T24CoilPressureDrop_.set (x);
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      T24CoilPressureDrop (const T24CoilPressureDrop_optional& x)
      {
        this->T24CoilPressureDrop_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed
      //

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX (),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_EvapAirInletNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCap_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCOP_ (this),
        SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ (this),
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ (this),
        SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ (this),
        SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ (this),
        SimFlowEnergyTrans_DefrostStrategy_ (this),
        SimFlowEnergyTrans_DefrostCntl_ (this),
        SimFlowEnergyTrans_DefrostTimePeriodFract_ (this),
        SimFlowEnergyTrans_ResistDefrostHeatCap_ (this),
        SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ (this),
        CoilSys_Heat_DX_Name_ (this),
        CoilSys_Heat_DX_AvailSchedName_ (this),
        CoilSys_Heat_DX_HeatingCoilObjType_ (this),
        CoilSys_Heat_DX_HeatingCoilName_ (this),
        T24BypassMinimumEfficiencyCheck_ (this),
        T24CoilPressureDrop_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX (RefId),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_EvapAirInletNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCap_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCOP_ (this),
        SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ (this),
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ (this),
        SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ (this),
        SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ (this),
        SimFlowEnergyTrans_DefrostStrategy_ (this),
        SimFlowEnergyTrans_DefrostCntl_ (this),
        SimFlowEnergyTrans_DefrostTimePeriodFract_ (this),
        SimFlowEnergyTrans_ResistDefrostHeatCap_ (this),
        SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ (this),
        CoilSys_Heat_DX_Name_ (this),
        CoilSys_Heat_DX_AvailSchedName_ (this),
        CoilSys_Heat_DX_HeatingCoilObjType_ (this),
        CoilSys_Heat_DX_HeatingCoilName_ (this),
        T24BypassMinimumEfficiencyCheck_ (this),
        T24CoilPressureDrop_ (this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed& x,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX (x, f, c),
        SimFlowEnergyTrans_AvailSchedName_ (x.SimFlowEnergyTrans_AvailSchedName_, f, this),
        SimFlowEnergyTrans_AirInNodeName_ (x.SimFlowEnergyTrans_AirInNodeName_, f, this),
        SimFlowEnergyTrans_AirOutNodeName_ (x.SimFlowEnergyTrans_AirOutNodeName_, f, this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (x.SimFlowEnergyTrans_RatedAirFlowRate_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_, f, this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_, f, this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (x.SimFlowEnergyTrans_CrankcaseHeatCap_, f, this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_, f, this),
        SimFlowEnergyTrans_EvapAirInletNodeName_ (x.SimFlowEnergyTrans_EvapAirInletNodeName_, f, this),
        SimFlowEnergyTrans_GrossRatedHeatCap_ (x.SimFlowEnergyTrans_GrossRatedHeatCap_, f, this),
        SimFlowEnergyTrans_GrossRatedHeatCOP_ (x.SimFlowEnergyTrans_GrossRatedHeatCOP_, f, this),
        SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ (x.SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_, f, this),
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ (x.SimFlowEnergyTrans_HeatingCapFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ (x.SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_, f, this),
        SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ (x.SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_, f, this),
        SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ (x.SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_, f, this),
        SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ (x.SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_, f, this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ (x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_, f, this),
        SimFlowEnergyTrans_DefrostStrategy_ (x.SimFlowEnergyTrans_DefrostStrategy_, f, this),
        SimFlowEnergyTrans_DefrostCntl_ (x.SimFlowEnergyTrans_DefrostCntl_, f, this),
        SimFlowEnergyTrans_DefrostTimePeriodFract_ (x.SimFlowEnergyTrans_DefrostTimePeriodFract_, f, this),
        SimFlowEnergyTrans_ResistDefrostHeatCap_ (x.SimFlowEnergyTrans_ResistDefrostHeatCap_, f, this),
        SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ (x.SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_, f, this),
        CoilSys_Heat_DX_Name_ (x.CoilSys_Heat_DX_Name_, f, this),
        CoilSys_Heat_DX_AvailSchedName_ (x.CoilSys_Heat_DX_AvailSchedName_, f, this),
        CoilSys_Heat_DX_HeatingCoilObjType_ (x.CoilSys_Heat_DX_HeatingCoilObjType_, f, this),
        CoilSys_Heat_DX_HeatingCoilName_ (x.CoilSys_Heat_DX_HeatingCoilName_, f, this),
        T24BypassMinimumEfficiencyCheck_ (x.T24BypassMinimumEfficiencyCheck_, f, this),
        T24CoilPressureDrop_ (x.T24CoilPressureDrop_, f, this)
      {
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed (const ::xercesc::DOMElement& e,
                                                                       ::xml_schema::flags f,
                                                                       ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_AvailSchedName_ (this),
        SimFlowEnergyTrans_AirInNodeName_ (this),
        SimFlowEnergyTrans_AirOutNodeName_ (this),
        SimFlowEnergyTrans_RatedAirFlowRate_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ (this),
        SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ (this),
        SimFlowEnergyTrans_CrankcaseHeatCap_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ (this),
        SimFlowEnergyTrans_EvapAirInletNodeName_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCap_ (this),
        SimFlowEnergyTrans_GrossRatedHeatCOP_ (this),
        SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ (this),
        SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ (this),
        SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ (this),
        SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ (this),
        SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ (this),
        SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ (this),
        SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ (this),
        SimFlowEnergyTrans_DefrostStrategy_ (this),
        SimFlowEnergyTrans_DefrostCntl_ (this),
        SimFlowEnergyTrans_DefrostTimePeriodFract_ (this),
        SimFlowEnergyTrans_ResistDefrostHeatCap_ (this),
        SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ (this),
        CoilSys_Heat_DX_Name_ (this),
        CoilSys_Heat_DX_AvailSchedName_ (this),
        CoilSys_Heat_DX_HeatingCoilObjType_ (this),
        CoilSys_Heat_DX_HeatingCoilName_ (this),
        T24BypassMinimumEfficiencyCheck_ (this),
        T24CoilPressureDrop_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_AvailSchedName
          //
          if (n.name () == "SimFlowEnergyTrans_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AvailSchedName_type > r (
              SimFlowEnergyTrans_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AvailSchedName_)
            {
              this->SimFlowEnergyTrans_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirInNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirInNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirInNodeName_type > r (
              SimFlowEnergyTrans_AirInNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirInNodeName_)
            {
              this->SimFlowEnergyTrans_AirInNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_AirOutNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_AirOutNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_AirOutNodeName_type > r (
              SimFlowEnergyTrans_AirOutNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_AirOutNodeName_)
            {
              this->SimFlowEnergyTrans_AirOutNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedAirFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedAirFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedAirFlowRate_.set (SimFlowEnergyTrans_RatedAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_type > r (
              SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_)
            {
              this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_PartLoadFractCorrelCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_PartLoadFractCorrelCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_PartLoadFractCorrelCurveName_type > r (
              SimFlowEnergyTrans_PartLoadFractCorrelCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_)
            {
              this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_CrankcaseHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_CrankcaseHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_CrankcaseHeatCap_)
            {
              this->SimFlowEnergyTrans_CrankcaseHeatCap_.set (SimFlowEnergyTrans_CrankcaseHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp
          //
          if (n.name () == "SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_)
            {
              this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_.set (SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_EvapAirInletNodeName
          //
          if (n.name () == "SimFlowEnergyTrans_EvapAirInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EvapAirInletNodeName_type > r (
              SimFlowEnergyTrans_EvapAirInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EvapAirInletNodeName_)
            {
              this->SimFlowEnergyTrans_EvapAirInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_GrossRatedHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_GrossRatedHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_GrossRatedHeatCap_)
            {
              this->SimFlowEnergyTrans_GrossRatedHeatCap_.set (SimFlowEnergyTrans_GrossRatedHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_GrossRatedHeatCOP
          //
          if (n.name () == "SimFlowEnergyTrans_GrossRatedHeatCOP" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_GrossRatedHeatCOP_)
            {
              this->SimFlowEnergyTrans_GrossRatedHeatCOP_.set (SimFlowEnergyTrans_GrossRatedHeatCOP_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate
          //
          if (n.name () == "SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_)
            {
              this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_.set (SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatingCapFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_HeatingCapFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatingCapFuncTempCurveName_type > r (
              SimFlowEnergyTrans_HeatingCapFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_type > r (
              SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_)
            {
              this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_type > r (
              SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_)
            {
              this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp
          //
          if (n.name () == "SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_)
            {
              this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_.set (SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress
          //
          if (n.name () == "SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_)
            {
              this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_.set (SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp
          //
          if (n.name () == "SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_)
            {
              this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_.set (SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_DefrostStrategy
          //
          if (n.name () == "SimFlowEnergyTrans_DefrostStrategy" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DefrostStrategy_type > r (
              SimFlowEnergyTrans_DefrostStrategy_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DefrostStrategy_)
            {
              this->SimFlowEnergyTrans_DefrostStrategy_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DefrostCntl
          //
          if (n.name () == "SimFlowEnergyTrans_DefrostCntl" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_DefrostCntl_type > r (
              SimFlowEnergyTrans_DefrostCntl_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_DefrostCntl_)
            {
              this->SimFlowEnergyTrans_DefrostCntl_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_DefrostTimePeriodFract
          //
          if (n.name () == "SimFlowEnergyTrans_DefrostTimePeriodFract" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_DefrostTimePeriodFract_)
            {
              this->SimFlowEnergyTrans_DefrostTimePeriodFract_.set (SimFlowEnergyTrans_DefrostTimePeriodFract_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_ResistDefrostHeatCap
          //
          if (n.name () == "SimFlowEnergyTrans_ResistDefrostHeatCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_ResistDefrostHeatCap_)
            {
              this->SimFlowEnergyTrans_ResistDefrostHeatCap_.set (SimFlowEnergyTrans_ResistDefrostHeatCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_RegionnumberforcalculatingHSPF
          //
          if (n.name () == "SimFlowEnergyTrans_RegionnumberforcalculatingHSPF" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_)
            {
              this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_.set (SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_traits::create (i, f, this));
              continue;
            }
          }

          // CoilSys_Heat_DX_Name
          //
          if (n.name () == "CoilSys_Heat_DX_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< CoilSys_Heat_DX_Name_type > r (
              CoilSys_Heat_DX_Name_traits::create (i, f, this));

            if (!this->CoilSys_Heat_DX_Name_)
            {
              this->CoilSys_Heat_DX_Name_.set (r);
              continue;
            }
          }

          // CoilSys_Heat_DX_AvailSchedName
          //
          if (n.name () == "CoilSys_Heat_DX_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< CoilSys_Heat_DX_AvailSchedName_type > r (
              CoilSys_Heat_DX_AvailSchedName_traits::create (i, f, this));

            if (!this->CoilSys_Heat_DX_AvailSchedName_)
            {
              this->CoilSys_Heat_DX_AvailSchedName_.set (r);
              continue;
            }
          }

          // CoilSys_Heat_DX_HeatingCoilObjType
          //
          if (n.name () == "CoilSys_Heat_DX_HeatingCoilObjType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< CoilSys_Heat_DX_HeatingCoilObjType_type > r (
              CoilSys_Heat_DX_HeatingCoilObjType_traits::create (i, f, this));

            if (!this->CoilSys_Heat_DX_HeatingCoilObjType_)
            {
              this->CoilSys_Heat_DX_HeatingCoilObjType_.set (r);
              continue;
            }
          }

          // CoilSys_Heat_DX_HeatingCoilName
          //
          if (n.name () == "CoilSys_Heat_DX_HeatingCoilName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< CoilSys_Heat_DX_HeatingCoilName_type > r (
              CoilSys_Heat_DX_HeatingCoilName_traits::create (i, f, this));

            if (!this->CoilSys_Heat_DX_HeatingCoilName_)
            {
              this->CoilSys_Heat_DX_HeatingCoilName_.set (r);
              continue;
            }
          }

          // T24BypassMinimumEfficiencyCheck
          //
          if (n.name () == "T24BypassMinimumEfficiencyCheck" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24BypassMinimumEfficiencyCheck_)
            {
              this->T24BypassMinimumEfficiencyCheck_.set (T24BypassMinimumEfficiencyCheck_traits::create (i, f, this));
              continue;
            }
          }

          // T24CoilPressureDrop
          //
          if (n.name () == "T24CoilPressureDrop" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->T24CoilPressureDrop_)
            {
              this->T24CoilPressureDrop_.set (T24CoilPressureDrop_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed* SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed (*this, f, c);
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed& SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      operator= (const SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_HeatingCoilDX& > (*this) = x;
          this->SimFlowEnergyTrans_AvailSchedName_ = x.SimFlowEnergyTrans_AvailSchedName_;
          this->SimFlowEnergyTrans_AirInNodeName_ = x.SimFlowEnergyTrans_AirInNodeName_;
          this->SimFlowEnergyTrans_AirOutNodeName_ = x.SimFlowEnergyTrans_AirOutNodeName_;
          this->SimFlowEnergyTrans_RatedAirFlowRate_ = x.SimFlowEnergyTrans_RatedAirFlowRate_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncTempCurveName_;
          this->SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_ = x.SimFlowEnergyTrans_EnergyInputRatioFuncFlowFractCurveName_;
          this->SimFlowEnergyTrans_PartLoadFractCorrelCurveName_ = x.SimFlowEnergyTrans_PartLoadFractCorrelCurveName_;
          this->SimFlowEnergyTrans_CrankcaseHeatCap_ = x.SimFlowEnergyTrans_CrankcaseHeatCap_;
          this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_ = x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForCrankcaseHeatOp_;
          this->SimFlowEnergyTrans_EvapAirInletNodeName_ = x.SimFlowEnergyTrans_EvapAirInletNodeName_;
          this->SimFlowEnergyTrans_GrossRatedHeatCap_ = x.SimFlowEnergyTrans_GrossRatedHeatCap_;
          this->SimFlowEnergyTrans_GrossRatedHeatCOP_ = x.SimFlowEnergyTrans_GrossRatedHeatCOP_;
          this->SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_ = x.SimFlowEnergyTrans_RatedSupplyFanPowerPerVolumeFlowRate_;
          this->SimFlowEnergyTrans_HeatingCapFuncTempCurveName_ = x.SimFlowEnergyTrans_HeatingCapFuncTempCurveName_;
          this->SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_ = x.SimFlowEnergyTrans_HeatCapFuncOfFlowFracCurveName_;
          this->SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_ = x.SimFlowEnergyTrans_DefrostEnergyInputRatioFuncTempCurveName_;
          this->SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_ = x.SimFlowEnergyTrans_MinOutdrDryBulbTempForCompOp_;
          this->SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_ = x.SimFlowEnergyTrans_OutdoorDry_BulbTemptoTurnOnCompress_;
          this->SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_ = x.SimFlowEnergyTrans_MaxOutdrDryBulbTempForDefrostOp_;
          this->SimFlowEnergyTrans_DefrostStrategy_ = x.SimFlowEnergyTrans_DefrostStrategy_;
          this->SimFlowEnergyTrans_DefrostCntl_ = x.SimFlowEnergyTrans_DefrostCntl_;
          this->SimFlowEnergyTrans_DefrostTimePeriodFract_ = x.SimFlowEnergyTrans_DefrostTimePeriodFract_;
          this->SimFlowEnergyTrans_ResistDefrostHeatCap_ = x.SimFlowEnergyTrans_ResistDefrostHeatCap_;
          this->SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_ = x.SimFlowEnergyTrans_RegionnumberforcalculatingHSPF_;
          this->CoilSys_Heat_DX_Name_ = x.CoilSys_Heat_DX_Name_;
          this->CoilSys_Heat_DX_AvailSchedName_ = x.CoilSys_Heat_DX_AvailSchedName_;
          this->CoilSys_Heat_DX_HeatingCoilObjType_ = x.CoilSys_Heat_DX_HeatingCoilObjType_;
          this->CoilSys_Heat_DX_HeatingCoilName_ = x.CoilSys_Heat_DX_HeatingCoilName_;
          this->T24BypassMinimumEfficiencyCheck_ = x.T24BypassMinimumEfficiencyCheck_;
          this->T24CoilPressureDrop_ = x.T24CoilPressureDrop_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed::
      ~SimFlowEnergyTransfer_HeatingCoilDX_CoilAirHeatingDXSingleSpeed ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

