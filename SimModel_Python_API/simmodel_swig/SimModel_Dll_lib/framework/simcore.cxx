// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "simcore.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::logicalItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
          ::schema::simxml::SimModelCore::logicalItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > (
            ::schema::simxml::SimModelCore::logicalItem (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "logicalItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::logical, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "logicalItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::logical >
      logicalItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "logicalItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::logical > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::logical, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "logicalItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::booleanItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::booleanItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::SimModelCore::booleanItem (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "booleanItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "booleanItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      booleanItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "booleanItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "booleanItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::integerItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::integerItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::integerItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::integerItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::integerItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::integerItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::integer > (
          ::schema::simxml::SimModelCore::integerItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::integer > (
            ::schema::simxml::SimModelCore::integerItem (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "integerItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::integer > r (
            new ::xml_schema::integer (
              ::xsd::cxx::tree::traits< ::xml_schema::integer, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "integerItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::integer >
      integerItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "integerItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::integer > r (
            new ::xml_schema::integer (
              ::xsd::cxx::tree::traits< ::xml_schema::integer, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "integerItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::doubleItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::doubleItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::doubleItem (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "doubleItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "doubleItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      doubleItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "doubleItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "doubleItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::stringItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::stringItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::stringItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::stringItem (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::stringItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::stringItem (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::stringItem (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::stringItem (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "stringItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "stringItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      stringItem (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "stringItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "stringItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::mixedItem_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
          ::schema::simxml::SimModelCore::mixedItem_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > (
            ::schema::simxml::SimModelCore::mixedItem_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "mixedItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::mixedItem, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "mixedItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem >
      mixedItem_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "mixedItem" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::mixedItem > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::mixedItem, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "mixedItem",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectIndex (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ObjectIndex (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::int_ > (
            ::schema::simxml::SimModelCore::ObjectIndex (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectIndex" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectIndex",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ObjectIndex (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectIndex" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectIndex",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ObjectName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsAutoGenerated (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsAutoGenerated (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::SimModelCore::IsAutoGenerated (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IsAutoGenerated" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsAutoGenerated",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsAutoGenerated (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IsAutoGenerated" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsAutoGenerated",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::LocalPlacementX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalPlacementX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementX",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalPlacementX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementX",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::LocalPlacementY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalPlacementY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementY",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalPlacementY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementY",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::LocalPlacementZ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalPlacementZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementZ",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementZ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalPlacementZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementZ",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (const ::std::string& u,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (const ::std::string& u,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (const ::std::string& u,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::std::istream& is,
                                 const ::std::string& sid,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementCoordinates (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::xercesc::InputSource& i,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::xercesc::InputSource& i,
                                 ::xml_schema::error_handler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::xercesc::InputSource& i,
                                 ::xercesc::DOMErrorHandler& h,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (const ::xercesc::DOMDocument& doc,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::SimModelCore::LocalPlacementCoordinates (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalPlacementCoordinates" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementCoordinates",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      LocalPlacementCoordinates (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                 ::xml_schema::flags f,
                                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalPlacementCoordinates" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementCoordinates",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LocalPlacementRotation (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::LocalPlacementRotation (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::LocalPlacementRotation (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LocalPlacementRotation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementRotation",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      LocalPlacementRotation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LocalPlacementRotation" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LocalPlacementRotation",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionX (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionX (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::XDirectionX (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "XDirectionX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionX",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionX (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "XDirectionX" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionX",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionY (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionY (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::XDirectionY (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "XDirectionY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionY",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionY (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "XDirectionY" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionY",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::XDirectionZ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::XDirectionZ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::XDirectionZ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "XDirectionZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionZ",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      XDirectionZ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "XDirectionZ" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "XDirectionZ",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToFlowElement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToFlowElement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::AssignedToFlowElement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AssignedToFlowElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AssignedToFlowElement",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToFlowElement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "AssignedToFlowElement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AssignedToFlowElement",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlElementID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ControlElementID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ControlElementID (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ControlElementID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ControlElementID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ControlElementID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ControlElementID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ControlElementID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::DockedToPort (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::DockedToPort (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::DockedToPort (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "DockedToPort" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DockedToPort",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      DockedToPort (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "DockedToPort" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "DockedToPort",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ControlledBy (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ControlledBy (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::ControlledBy (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ControlledBy" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ControlledBy",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ControlledBy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ControlledBy" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ControlledBy",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dLength (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dLength (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::_3dLength (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "_3dLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dLength",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dLength (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "_3dLength" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dLength",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dWidth (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dWidth (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::_3dWidth (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "_3dWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dWidth",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dWidth (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "_3dWidth" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dWidth",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::_3dHeight (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::double_ > (
          ::schema::simxml::SimModelCore::_3dHeight (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::double_ > (
            ::schema::simxml::SimModelCore::_3dHeight (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "_3dHeight" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dHeight",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::double_ >
      _3dHeight (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "_3dHeight" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::double_ > r (
            new ::xml_schema::double_ (
              ::xsd::cxx::tree::traits< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "_3dHeight",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::GeometricRepresentations (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::GeometricRepresentations (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::GeometricRepresentations (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "GeometricRepresentations" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GeometricRepresentations",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      GeometricRepresentations (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "GeometricRepresentations" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "GeometricRepresentations",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingSpatialStructure (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingSpatialStructure (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::ContainingSpatialStructure (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContainingSpatialStructure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingSpatialStructure",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingSpatialStructure (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContainingSpatialStructure" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingSpatialStructure",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::AssignedToGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::AssignedToGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::AssignedToGroups (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "AssignedToGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AssignedToGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      AssignedToGroups (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "AssignedToGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "AssignedToGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::std::string& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Placement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Placement (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::std::istream& is,
                 const ::std::string& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Placement (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Placement (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (const ::xercesc::DOMDocument& doc,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::Placement (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Placement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Placement",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Placement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Placement" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Placement",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Tag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Tag (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Tag (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Tag (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (const ::xercesc::DOMDocument& doc,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::Tag (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Tag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Tag",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Tag (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Tag" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Tag",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ParentGroups (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ParentGroups (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::ParentGroups (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ParentGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ParentGroups (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ParentGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ParentGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingBuildings (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::ContainingBuildings (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::ContainingBuildings (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContainingBuildings" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingBuildings",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      ContainingBuildings (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContainingBuildings" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingBuildings",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::NevronSchematicLayout (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::NevronSchematicLayout (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::NevronSchematicLayout (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "NevronSchematicLayout" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NevronSchematicLayout",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      NevronSchematicLayout (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "NevronSchematicLayout" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "NevronSchematicLayout",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TemplatesForMembers (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::TemplatesForMembers (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::TemplatesForMembers (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TemplatesForMembers" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TemplatesForMembers",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      TemplatesForMembers (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TemplatesForMembers" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TemplatesForMembers",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasTemplateChanged (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::HasTemplateChanged (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::SimModelCore::HasTemplateChanged (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HasTemplateChanged" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HasTemplateChanged",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      HasTemplateChanged (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "HasTemplateChanged" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HasTemplateChanged",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ChangeFromTemplate (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ChangeFromTemplate (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ChangeFromTemplate (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ChangeFromTemplate" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ChangeFromTemplate",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ChangeFromTemplate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ChangeFromTemplate" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ChangeFromTemplate",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::MemberUsedForDiagrams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::MemberUsedForDiagrams (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "MemberUsedForDiagrams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MemberUsedForDiagrams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      MemberUsedForDiagrams (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "MemberUsedForDiagrams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "MemberUsedForDiagrams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimGroup_ZoneListName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_ZoneListName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_ZoneListName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_ZoneListName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_ZoneListName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_ZoneListName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::SimGroup_Zone_1_500_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_Zone_1_500_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Zone_1_500_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_500_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_Zone_1_500_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Zone_1_500_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ZoneGroup_ZoneGrpName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ZoneGroup_ZoneGrpName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneGrpName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ZoneGroup_ZoneGrpName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ZoneGroup_ZoneGrpName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneGrpName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::ZoneGroup_ZoneListName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ZoneGroup_ZoneListName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneListName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ZoneGroup_ZoneListName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ZoneGroup_ZoneListName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneListName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::int_ > (
          ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::int_ > (
            ::schema::simxml::SimModelCore::ZoneGroup_ZoneListMult (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ZoneGroup_ZoneListMult" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneListMult",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::int_ >
      ZoneGroup_ZoneListMult (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ZoneGroup_ZoneListMult" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::int_ > r (
            new ::xml_schema::int_ (
              ::xsd::cxx::tree::traits< ::xml_schema::int_, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ZoneGroup_ZoneListMult",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (const ::std::string& u,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (const ::std::string& u,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (const ::std::string& u,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     const ::std::string& sid,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::std::istream& is,
                     const ::std::string& sid,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::xercesc::InputSource& i,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::xercesc::InputSource& i,
                     ::xml_schema::error_handler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::xercesc::InputSource& i,
                     ::xercesc::DOMErrorHandler& h,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimGroup_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (const ::xercesc::DOMDocument& doc,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimGroup_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimGroup_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f,
                     const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::SimGroup_SurfName_1_100 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_SurfName_1_100" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SurfName_1_100",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_100 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_SurfName_1_100" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SurfName_1_100",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (const ::std::string& u,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (const ::std::string& u,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (const ::std::string& u,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::std::istream& is,
                                             const ::std::string& sid,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::xercesc::InputSource& i,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::xercesc::InputSource& i,
                                             ::xml_schema::error_handler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::xercesc::InputSource& i,
                                             ::xercesc::DOMErrorHandler& h,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (const ::xercesc::DOMDocument& doc,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::SimModelCore::SimGroup_FlowFractionForSurface_1_100 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_FlowFractionForSurface_1_100" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_FlowFractionForSurface_1_100",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_FlowFractionForSurface_1_100 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                             ::xml_schema::flags f,
                                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_FlowFractionForSurface_1_100" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_FlowFractionForSurface_1_100",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::SimGroup_Zone_1_10_Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_Zone_1_10_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Zone_1_10_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_Zone_1_10_Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_Zone_1_10_Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_Zone_1_10_Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (const ::std::string& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (const ::std::string& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (const ::std::string& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              const ::std::string& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::std::istream& is,
                              const ::std::string& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (const ::xercesc::DOMDocument& doc,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::SimGroup_SurfName_1_10 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_SurfName_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SurfName_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      SimGroup_SurfName_1_10 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_SurfName_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SurfName_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (const ::std::string& u,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (const ::std::string& u,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (const ::std::string& u,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::std::istream& is,
                                  const ::std::string& sid,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::xercesc::InputSource& i,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::xercesc::InputSource& i,
                                  ::xml_schema::error_handler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::xercesc::InputSource& i,
                                  ::xercesc::DOMErrorHandler& h,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (const ::xercesc::DOMDocument& doc,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::SimModelCore::SimGroup_CoreDiamSurf_1_10 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_CoreDiamSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreDiamSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreDiamSurf_1_10 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                  ::xml_schema::flags f,
                                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_CoreDiamSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreDiamSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (const ::std::string& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (const ::std::string& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (const ::std::string& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::std::istream& is,
                                    const ::std::string& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (const ::xercesc::DOMDocument& doc,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::SimModelCore::SimGroup_CoreLengthSurf_1_10 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_CoreLengthSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreLengthSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreLengthSurf_1_10 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_CoreLengthSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreLengthSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (const ::std::string& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (const ::std::string& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (const ::std::string& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::std::istream& is,
                                   const ::std::string& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
          ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (const ::xercesc::DOMDocument& doc,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > (
            ::schema::simxml::SimModelCore::SimGroup_CoreNumbsSurf_1_10 (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_CoreNumbsSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreNumbsSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList >
      SimGroup_CoreNumbsSurf_1_10 (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_CoreNumbsSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::doubleList > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::doubleList, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_CoreNumbsSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (const ::std::string& u,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (const ::std::string& u,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (const ::std::string& u,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::std::istream& is,
                                            const ::std::string& sid,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::xercesc::InputSource& i,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::xercesc::InputSource& i,
                                            ::xml_schema::error_handler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::xercesc::InputSource& i,
                                            ::xercesc::DOMErrorHandler& h,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (const ::xercesc::DOMDocument& doc,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > (
            ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_SlabInNodeNameForSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SlabInNodeNameForSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 >
      SimGroup_SlabInNodeNameForSurf_1_10_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                            ::xml_schema::flags f,
                                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_SlabInNodeNameForSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SimGroup_SlabInNodeNameForSurf_1_10, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SlabInNodeNameForSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (const ::std::string& u,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (const ::std::string& u,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (const ::std::string& u,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::std::istream& is,
                                          const ::std::string& sid,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::xercesc::InputSource& i,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::xercesc::InputSource& i,
                                          ::xml_schema::error_handler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::xercesc::InputSource& i,
                                          ::xercesc::DOMErrorHandler& h,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
          ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (const ::xercesc::DOMDocument& doc,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > (
            ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimGroup_SlabOutNodeNameSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SlabOutNodeNameSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 >
      SimGroup_SlabOutNodeNameSurf_1_10_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                          ::xml_schema::flags f,
                                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimGroup_SlabOutNodeNameSurf_1_10" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10 > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SimGroup_SlabOutNodeNameSurf_1_10, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimGroup_SlabOutNodeNameSurf_1_10",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefinition (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefinition (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::TypeDefinition (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TypeDefinition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefinition",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefinition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TypeDefinition" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefinition",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ObjectType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ObjectType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::ObjectCreationParams (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectCreationParams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectCreationParams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectCreationParams (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectCreationParams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectCreationParams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (const ::std::string& u,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (const ::std::string& u,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (const ::std::string& u,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  const ::std::string& sid,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::std::istream& is,
                  const ::std::string& sid,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Decomposes (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::xercesc::InputSource& i,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::xercesc::InputSource& i,
                  ::xml_schema::error_handler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::xercesc::InputSource& i,
                  ::xercesc::DOMErrorHandler& h,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::Decomposes (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (const ::xercesc::DOMDocument& doc,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::Decomposes (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Decomposes" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Decomposes",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      Decomposes (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f,
                  const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Decomposes" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Decomposes",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (const ::std::string& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (const ::std::string& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (const ::std::string& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::std::istream& is,
                               const ::std::string& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
          ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (const ::xercesc::DOMDocument& doc,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > (
            ::schema::simxml::SimModelCore::SelectedPropertyGroups_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SelectedPropertyGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SelectedPropertyGroups, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SelectedPropertyGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups >
      SelectedPropertyGroups_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SelectedPropertyGroups" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::SelectedPropertyGroups > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::SelectedPropertyGroups, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SelectedPropertyGroups",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (const ::std::string& u,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (const ::std::string& u,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (const ::std::string& u,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        const ::std::string& sid,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::std::istream& is,
                        const ::std::string& sid,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IsTemplateObject (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::xercesc::InputSource& i,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::xercesc::InputSource& i,
                        ::xml_schema::error_handler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::xercesc::InputSource& i,
                        ::xercesc::DOMErrorHandler& h,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::boolean > (
          ::schema::simxml::SimModelCore::IsTemplateObject (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (const ::xercesc::DOMDocument& doc,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::boolean > (
            ::schema::simxml::SimModelCore::IsTemplateObject (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IsTemplateObject" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsTemplateObject",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::boolean >
      IsTemplateObject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f,
                        const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IsTemplateObject" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::boolean > r (
            new ::xml_schema::boolean (
              ::xsd::cxx::tree::traits< ::xml_schema::boolean, char >::create (
                e, f, 0)));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IsTemplateObject",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ApplicableOccurrence (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::ApplicableOccurrence (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::ApplicableOccurrence (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ApplicableOccurrence" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ApplicableOccurrence",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      ApplicableOccurrence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ApplicableOccurrence" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ApplicableOccurrence",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::HasPropertySets (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::HasPropertySets (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::HasPropertySets (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "HasPropertySets" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HasPropertySets",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      HasPropertySets (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "HasPropertySets" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "HasPropertySets",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::TypeDefCreationParams (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::TypeDefCreationParams (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::TypeDefCreationParams (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "TypeDefCreationParams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefCreationParams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      TypeDefCreationParams (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "TypeDefCreationParams" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "TypeDefCreationParams",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (const ::std::string& u,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (const ::std::string& u,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (const ::std::string& u,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::std::istream& is,
                                       const ::std::string& sid,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::xercesc::InputSource& i,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::xercesc::InputSource& i,
                                       ::xml_schema::error_handler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::xercesc::InputSource& i,
                                       ::xercesc::DOMErrorHandler& h,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (const ::xercesc::DOMDocument& doc,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::PlacementRelToContainingTypeDef (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "PlacementRelToContainingTypeDef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRelToContainingTypeDef",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      PlacementRelToContainingTypeDef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                       ::xml_schema::flags f,
                                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "PlacementRelToContainingTypeDef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "PlacementRelToContainingTypeDef",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Name (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Name (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Name (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::Name (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Name (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Name" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Name",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Value_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Value_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Value_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Value_ (isrc, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Value_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Value_ (isrc, h, f, p);
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
          ::schema::simxml::SimModelCore::Value_ (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > (
            ::schema::simxml::SimModelCore::Value_ (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Value" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::Value, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Value",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::schema::simxml::SimModelCore::Value >
      Value_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Value" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::schema::simxml::SimModelCore::Value > r (
            ::xsd::cxx::tree::traits< ::schema::simxml::SimModelCore::Value, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Value",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (const ::std::string& u,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (const ::std::string& u,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (const ::std::string& u,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      const ::std::string& sid,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::std::istream& is,
                      const ::std::string& sid,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ContainingPset (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::xercesc::InputSource& i,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::xercesc::InputSource& i,
                      ::xml_schema::error_handler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::xercesc::InputSource& i,
                      ::xercesc::DOMErrorHandler& h,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ContainingPset (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (const ::xercesc::DOMDocument& doc,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::ContainingPset (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ContainingPset" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingPset",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ContainingPset (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f,
                      const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ContainingPset" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ContainingPset",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::UnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::UnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::UnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::UnitType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::UnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::UnitType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::UnitType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::UnitType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "UnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "UnitType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      UnitType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "UnitType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "UnitType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationContext (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::RepresentationContext (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::RepresentationContext (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RepresentationContext" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationContext",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      RepresentationContext (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RepresentationContext" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationContext",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (const ::std::string& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (const ::std::string& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (const ::std::string& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                const ::std::string& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::std::istream& is,
                                const ::std::string& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationIdentifier (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationIdentifier (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (const ::xercesc::DOMDocument& doc,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::RepresentationIdentifier (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RepresentationIdentifier" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationIdentifier",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationIdentifier (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RepresentationIdentifier" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationIdentifier",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::RepresentationType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::RepresentationType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RepresentationType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      RepresentationType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RepresentationType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (const ::std::string& u,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (const ::std::string& u,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (const ::std::string& u,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           const ::std::string& sid,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::std::istream& is,
                           const ::std::string& sid,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::RepresentationItems (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::xercesc::InputSource& i,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::xercesc::InputSource& i,
                           ::xml_schema::error_handler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::xercesc::InputSource& i,
                           ::xercesc::DOMErrorHandler& h,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idrefs > (
          ::schema::simxml::SimModelCore::RepresentationItems (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (const ::xercesc::DOMDocument& doc,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idrefs > (
            ::schema::simxml::SimModelCore::RepresentationItems (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "RepresentationItems" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationItems",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idrefs >
      RepresentationItems (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                           ::xml_schema::flags f,
                           const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "RepresentationItems" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idrefs > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idrefs, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "RepresentationItems",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Description (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Description (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::Description (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::Description (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::Description (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "Description" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Description",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "Description" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "Description",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (const ::std::string& u,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (const ::std::string& u,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (const ::std::string& u,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          const ::std::string& sid,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::std::istream& is,
                          const ::std::string& sid,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::ObjectOwnerHistory (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::xercesc::InputSource& i,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::xercesc::InputSource& i,
                          ::xml_schema::error_handler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::xercesc::InputSource& i,
                          ::xercesc::DOMErrorHandler& h,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::ObjectOwnerHistory (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (const ::xercesc::DOMDocument& doc,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::ObjectOwnerHistory (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "ObjectOwnerHistory" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectOwnerHistory",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      ObjectOwnerHistory (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                          ::xml_schema::flags f,
                          const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "ObjectOwnerHistory" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "ObjectOwnerHistory",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcGlobalID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcGlobalID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::IfcGlobalID (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IfcGlobalID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IfcGlobalID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcGlobalID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IfcGlobalID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IfcGlobalID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::IfcName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::IfcName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::IfcName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (const ::xercesc::DOMDocument& doc,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::IfcName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "IfcName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IfcName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      IfcName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "IfcName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "IfcName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (const ::std::string& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (const ::std::string& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (const ::std::string& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   const ::std::string& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::std::istream& is,
                   const ::std::string& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimUniqueID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimUniqueID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (const ::xercesc::DOMDocument& doc,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimUniqueID (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimUniqueID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimUniqueID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimUniqueID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimUniqueID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimUniqueID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimModelType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimModelType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimModelType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelSubtype (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelSubtype (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimModelSubtype (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimModelSubtype" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelSubtype",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelSubtype (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimModelSubtype" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelSubtype",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (const ::std::string& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (const ::std::string& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SimModelName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SimModelName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SimModelName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SimModelName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SimModelName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SimModelName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SimModelName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (const ::std::string& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (const ::std::string& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (const ::std::string& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         const ::std::string& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::std::istream& is,
                         const ::std::string& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelSchema (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelSchema (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (const ::xercesc::DOMDocument& doc,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SourceModelSchema (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceModelSchema" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceModelSchema",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelSchema (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceModelSchema" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceModelSchema",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceModelObjectType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceModelObjectType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SourceModelObjectType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceModelObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceModelObjectType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceModelObjectType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceModelObjectType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceModelObjectType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (const ::std::string& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (const ::std::string& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (const ::std::string& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            const ::std::string& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::std::istream& is,
                            const ::std::string& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryID (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryID (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (const ::xercesc::DOMDocument& doc,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::SourceLibraryEntryID (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceLibraryEntryID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceLibraryEntryID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      SourceLibraryEntryID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceLibraryEntryID" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceLibraryEntryID",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (const ::std::string& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (const ::std::string& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (const ::std::string& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             const ::std::string& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::std::istream& is,
                             const ::std::string& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::SourceLibraryEntryRef (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::idref > (
          ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (const ::xercesc::DOMDocument& doc,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::idref > (
            ::schema::simxml::SimModelCore::SourceLibraryEntryRef (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "SourceLibraryEntryRef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceLibraryEntryRef",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::idref >
      SourceLibraryEntryRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "SourceLibraryEntryRef" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::idref > r (
            ::xsd::cxx::tree::traits< ::xml_schema::idref, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "SourceLibraryEntryRef",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (const ::std::string& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (const ::std::string& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LongName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LongName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::LongName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LongName (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LongName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::LongName (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::LongName (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (const ::xercesc::DOMDocument& doc,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::LongName (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "LongName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LongName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      LongName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "LongName" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "LongName",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (const ::std::string& u,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (const ::std::string& u,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (const ::std::string& u,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            u, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       const ::std::string& sid,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::auto_initializer i (
          (f & ::xml_schema::flags::dont_initialize) == 0,
          (f & ::xml_schema::flags::keep_dom) == 0);

        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::std::istream& is,
                       const ::std::string& sid,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
        return ::schema::simxml::SimModelCore::CompositionType (isrc, h, f, p);
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::xercesc::InputSource& i,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xsd::cxx::tree::error_handler< char > h;

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::xercesc::InputSource& i,
                       ::xml_schema::error_handler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::xercesc::InputSource& i,
                       ::xercesc::DOMErrorHandler& h,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
          ::xsd::cxx::xml::dom::parse< char > (
            i, h, p, f));

        if (!d.get ())
          throw ::xsd::cxx::tree::parsing< char > ();

        return ::std::auto_ptr< ::xml_schema::string > (
          ::schema::simxml::SimModelCore::CompositionType (
            d, f | ::xml_schema::flags::own_dom, p));
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (const ::xercesc::DOMDocument& doc,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties& p)
      {
        if (f & ::xml_schema::flags::keep_dom)
        {
          ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
            static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

          return ::std::auto_ptr< ::xml_schema::string > (
            ::schema::simxml::SimModelCore::CompositionType (
              d, f | ::xml_schema::flags::own_dom, p));
        }

        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (n.name () == "CompositionType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CompositionType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }

      ::std::auto_ptr< ::xml_schema::string >
      CompositionType (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f,
                       const ::xml_schema::properties&)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          ((f & ::xml_schema::flags::keep_dom) &&
           !(f & ::xml_schema::flags::own_dom))
          ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
          : 0);

        ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
        const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (e));

        if (f & ::xml_schema::flags::keep_dom)
          doc.setUserData (::xml_schema::dom::tree_node_key,
                           (c.get () ? &c : &d),
                           0);

        if (n.name () == "CompositionType" &&
            n.namespace_ () == "http://d-alchemy.com/schema/simxml/SimModelCore")
        {
          ::std::auto_ptr< ::xml_schema::string > r (
            ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
              e, f, 0));
          return r;
        }

        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "CompositionType",
          "http://d-alchemy.com/schema/simxml/SimModelCore");
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

