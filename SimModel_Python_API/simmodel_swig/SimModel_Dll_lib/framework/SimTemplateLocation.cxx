// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimTemplateLocation.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateLocation
      // 

      const SimTemplateLocation::TemplateLocationProperties_optional& SimTemplateLocation::
      TemplateLocationProperties () const
      {
        return this->TemplateLocationProperties_;
      }

      SimTemplateLocation::TemplateLocationProperties_optional& SimTemplateLocation::
      TemplateLocationProperties ()
      {
        return this->TemplateLocationProperties_;
      }

      void SimTemplateLocation::
      TemplateLocationProperties (const TemplateLocationProperties_type& x)
      {
        this->TemplateLocationProperties_.set (x);
      }

      void SimTemplateLocation::
      TemplateLocationProperties (const TemplateLocationProperties_optional& x)
      {
        this->TemplateLocationProperties_ = x;
      }

      void SimTemplateLocation::
      TemplateLocationProperties (::std::auto_ptr< TemplateLocationProperties_type > x)
      {
        this->TemplateLocationProperties_.set (x);
      }

      const SimTemplateLocation::Terrain_optional& SimTemplateLocation::
      Terrain () const
      {
        return this->Terrain_;
      }

      SimTemplateLocation::Terrain_optional& SimTemplateLocation::
      Terrain ()
      {
        return this->Terrain_;
      }

      void SimTemplateLocation::
      Terrain (const Terrain_type& x)
      {
        this->Terrain_.set (x);
      }

      void SimTemplateLocation::
      Terrain (const Terrain_optional& x)
      {
        this->Terrain_ = x;
      }

      void SimTemplateLocation::
      Terrain (::std::auto_ptr< Terrain_type > x)
      {
        this->Terrain_.set (x);
      }

      const SimTemplateLocation::SolarDistribution_optional& SimTemplateLocation::
      SolarDistribution () const
      {
        return this->SolarDistribution_;
      }

      SimTemplateLocation::SolarDistribution_optional& SimTemplateLocation::
      SolarDistribution ()
      {
        return this->SolarDistribution_;
      }

      void SimTemplateLocation::
      SolarDistribution (const SolarDistribution_type& x)
      {
        this->SolarDistribution_.set (x);
      }

      void SimTemplateLocation::
      SolarDistribution (const SolarDistribution_optional& x)
      {
        this->SolarDistribution_ = x;
      }

      void SimTemplateLocation::
      SolarDistribution (::std::auto_ptr< SolarDistribution_type > x)
      {
        this->SolarDistribution_.set (x);
      }

      const SimTemplateLocation::TemplateSkyTemperature_optional& SimTemplateLocation::
      TemplateSkyTemperature () const
      {
        return this->TemplateSkyTemperature_;
      }

      SimTemplateLocation::TemplateSkyTemperature_optional& SimTemplateLocation::
      TemplateSkyTemperature ()
      {
        return this->TemplateSkyTemperature_;
      }

      void SimTemplateLocation::
      TemplateSkyTemperature (const TemplateSkyTemperature_type& x)
      {
        this->TemplateSkyTemperature_.set (x);
      }

      void SimTemplateLocation::
      TemplateSkyTemperature (const TemplateSkyTemperature_optional& x)
      {
        this->TemplateSkyTemperature_ = x;
      }

      void SimTemplateLocation::
      TemplateSkyTemperature (::std::auto_ptr< TemplateSkyTemperature_type > x)
      {
        this->TemplateSkyTemperature_.set (x);
      }

      const SimTemplateLocation::TemplateIDDWeatherStation_optional& SimTemplateLocation::
      TemplateIDDWeatherStation () const
      {
        return this->TemplateIDDWeatherStation_;
      }

      SimTemplateLocation::TemplateIDDWeatherStation_optional& SimTemplateLocation::
      TemplateIDDWeatherStation ()
      {
        return this->TemplateIDDWeatherStation_;
      }

      void SimTemplateLocation::
      TemplateIDDWeatherStation (const TemplateIDDWeatherStation_type& x)
      {
        this->TemplateIDDWeatherStation_.set (x);
      }

      void SimTemplateLocation::
      TemplateIDDWeatherStation (const TemplateIDDWeatherStation_optional& x)
      {
        this->TemplateIDDWeatherStation_ = x;
      }

      void SimTemplateLocation::
      TemplateIDDWeatherStation (::std::auto_ptr< TemplateIDDWeatherStation_type > x)
      {
        this->TemplateIDDWeatherStation_.set (x);
      }

      const SimTemplateLocation::WeatherFilename_optional& SimTemplateLocation::
      WeatherFilename () const
      {
        return this->WeatherFilename_;
      }

      SimTemplateLocation::WeatherFilename_optional& SimTemplateLocation::
      WeatherFilename ()
      {
        return this->WeatherFilename_;
      }

      void SimTemplateLocation::
      WeatherFilename (const WeatherFilename_type& x)
      {
        this->WeatherFilename_.set (x);
      }

      void SimTemplateLocation::
      WeatherFilename (const WeatherFilename_optional& x)
      {
        this->WeatherFilename_ = x;
      }

      void SimTemplateLocation::
      WeatherFilename (::std::auto_ptr< WeatherFilename_type > x)
      {
        this->WeatherFilename_.set (x);
      }

      const SimTemplateLocation::TemplateSummerDesignDays_optional& SimTemplateLocation::
      TemplateSummerDesignDays () const
      {
        return this->TemplateSummerDesignDays_;
      }

      SimTemplateLocation::TemplateSummerDesignDays_optional& SimTemplateLocation::
      TemplateSummerDesignDays ()
      {
        return this->TemplateSummerDesignDays_;
      }

      void SimTemplateLocation::
      TemplateSummerDesignDays (const TemplateSummerDesignDays_type& x)
      {
        this->TemplateSummerDesignDays_.set (x);
      }

      void SimTemplateLocation::
      TemplateSummerDesignDays (const TemplateSummerDesignDays_optional& x)
      {
        this->TemplateSummerDesignDays_ = x;
      }

      void SimTemplateLocation::
      TemplateSummerDesignDays (::std::auto_ptr< TemplateSummerDesignDays_type > x)
      {
        this->TemplateSummerDesignDays_.set (x);
      }

      const SimTemplateLocation::TemplateWinterDesignDays_optional& SimTemplateLocation::
      TemplateWinterDesignDays () const
      {
        return this->TemplateWinterDesignDays_;
      }

      SimTemplateLocation::TemplateWinterDesignDays_optional& SimTemplateLocation::
      TemplateWinterDesignDays ()
      {
        return this->TemplateWinterDesignDays_;
      }

      void SimTemplateLocation::
      TemplateWinterDesignDays (const TemplateWinterDesignDays_type& x)
      {
        this->TemplateWinterDesignDays_.set (x);
      }

      void SimTemplateLocation::
      TemplateWinterDesignDays (const TemplateWinterDesignDays_optional& x)
      {
        this->TemplateWinterDesignDays_ = x;
      }

      void SimTemplateLocation::
      TemplateWinterDesignDays (::std::auto_ptr< TemplateWinterDesignDays_type > x)
      {
        this->TemplateWinterDesignDays_.set (x);
      }

      const SimTemplateLocation::TemplateUtilityCosts_optional& SimTemplateLocation::
      TemplateUtilityCosts () const
      {
        return this->TemplateUtilityCosts_;
      }

      SimTemplateLocation::TemplateUtilityCosts_optional& SimTemplateLocation::
      TemplateUtilityCosts ()
      {
        return this->TemplateUtilityCosts_;
      }

      void SimTemplateLocation::
      TemplateUtilityCosts (const TemplateUtilityCosts_type& x)
      {
        this->TemplateUtilityCosts_.set (x);
      }

      void SimTemplateLocation::
      TemplateUtilityCosts (const TemplateUtilityCosts_optional& x)
      {
        this->TemplateUtilityCosts_ = x;
      }

      void SimTemplateLocation::
      TemplateUtilityCosts (::std::auto_ptr< TemplateUtilityCosts_type > x)
      {
        this->TemplateUtilityCosts_.set (x);
      }

      const SimTemplateLocation::TemplateLifeCycleCosts_optional& SimTemplateLocation::
      TemplateLifeCycleCosts () const
      {
        return this->TemplateLifeCycleCosts_;
      }

      SimTemplateLocation::TemplateLifeCycleCosts_optional& SimTemplateLocation::
      TemplateLifeCycleCosts ()
      {
        return this->TemplateLifeCycleCosts_;
      }

      void SimTemplateLocation::
      TemplateLifeCycleCosts (const TemplateLifeCycleCosts_type& x)
      {
        this->TemplateLifeCycleCosts_.set (x);
      }

      void SimTemplateLocation::
      TemplateLifeCycleCosts (const TemplateLifeCycleCosts_optional& x)
      {
        this->TemplateLifeCycleCosts_ = x;
      }

      void SimTemplateLocation::
      TemplateLifeCycleCosts (::std::auto_ptr< TemplateLifeCycleCosts_type > x)
      {
        this->TemplateLifeCycleCosts_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimTemplateLocation
      //

      SimTemplateLocation::
      SimTemplateLocation ()
      : ::schema::simxml::SimModelCore::SimTemplate (),
        TemplateLocationProperties_ (this),
        Terrain_ (this),
        SolarDistribution_ (this),
        TemplateSkyTemperature_ (this),
        TemplateIDDWeatherStation_ (this),
        WeatherFilename_ (this),
        TemplateSummerDesignDays_ (this),
        TemplateWinterDesignDays_ (this),
        TemplateUtilityCosts_ (this),
        TemplateLifeCycleCosts_ (this)
      {
      }

      SimTemplateLocation::
      SimTemplateLocation (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimTemplate (RefId),
        TemplateLocationProperties_ (this),
        Terrain_ (this),
        SolarDistribution_ (this),
        TemplateSkyTemperature_ (this),
        TemplateIDDWeatherStation_ (this),
        WeatherFilename_ (this),
        TemplateSummerDesignDays_ (this),
        TemplateWinterDesignDays_ (this),
        TemplateUtilityCosts_ (this),
        TemplateLifeCycleCosts_ (this)
      {
      }

      SimTemplateLocation::
      SimTemplateLocation (const SimTemplateLocation& x,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (x, f, c),
        TemplateLocationProperties_ (x.TemplateLocationProperties_, f, this),
        Terrain_ (x.Terrain_, f, this),
        SolarDistribution_ (x.SolarDistribution_, f, this),
        TemplateSkyTemperature_ (x.TemplateSkyTemperature_, f, this),
        TemplateIDDWeatherStation_ (x.TemplateIDDWeatherStation_, f, this),
        WeatherFilename_ (x.WeatherFilename_, f, this),
        TemplateSummerDesignDays_ (x.TemplateSummerDesignDays_, f, this),
        TemplateWinterDesignDays_ (x.TemplateWinterDesignDays_, f, this),
        TemplateUtilityCosts_ (x.TemplateUtilityCosts_, f, this),
        TemplateLifeCycleCosts_ (x.TemplateLifeCycleCosts_, f, this)
      {
      }

      SimTemplateLocation::
      SimTemplateLocation (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f,
                           ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimTemplate (e, f | ::xml_schema::flags::base, c),
        TemplateLocationProperties_ (this),
        Terrain_ (this),
        SolarDistribution_ (this),
        TemplateSkyTemperature_ (this),
        TemplateIDDWeatherStation_ (this),
        WeatherFilename_ (this),
        TemplateSummerDesignDays_ (this),
        TemplateWinterDesignDays_ (this),
        TemplateUtilityCosts_ (this),
        TemplateLifeCycleCosts_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimTemplateLocation::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimTemplate::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // TemplateLocationProperties
          //
          if (n.name () == "TemplateLocationProperties" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateLocationProperties_type > r (
              TemplateLocationProperties_traits::create (i, f, this));

            if (!this->TemplateLocationProperties_)
            {
              this->TemplateLocationProperties_.set (r);
              continue;
            }
          }

          // Terrain
          //
          if (n.name () == "Terrain" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Terrain_type > r (
              Terrain_traits::create (i, f, this));

            if (!this->Terrain_)
            {
              this->Terrain_.set (r);
              continue;
            }
          }

          // SolarDistribution
          //
          if (n.name () == "SolarDistribution" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SolarDistribution_type > r (
              SolarDistribution_traits::create (i, f, this));

            if (!this->SolarDistribution_)
            {
              this->SolarDistribution_.set (r);
              continue;
            }
          }

          // TemplateSkyTemperature
          //
          if (n.name () == "TemplateSkyTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSkyTemperature_type > r (
              TemplateSkyTemperature_traits::create (i, f, this));

            if (!this->TemplateSkyTemperature_)
            {
              this->TemplateSkyTemperature_.set (r);
              continue;
            }
          }

          // TemplateIDDWeatherStation
          //
          if (n.name () == "TemplateIDDWeatherStation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateIDDWeatherStation_type > r (
              TemplateIDDWeatherStation_traits::create (i, f, this));

            if (!this->TemplateIDDWeatherStation_)
            {
              this->TemplateIDDWeatherStation_.set (r);
              continue;
            }
          }

          // WeatherFilename
          //
          if (n.name () == "WeatherFilename" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WeatherFilename_type > r (
              WeatherFilename_traits::create (i, f, this));

            if (!this->WeatherFilename_)
            {
              this->WeatherFilename_.set (r);
              continue;
            }
          }

          // TemplateSummerDesignDays
          //
          if (n.name () == "TemplateSummerDesignDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateSummerDesignDays_type > r (
              TemplateSummerDesignDays_traits::create (i, f, this));

            if (!this->TemplateSummerDesignDays_)
            {
              this->TemplateSummerDesignDays_.set (r);
              continue;
            }
          }

          // TemplateWinterDesignDays
          //
          if (n.name () == "TemplateWinterDesignDays" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateWinterDesignDays_type > r (
              TemplateWinterDesignDays_traits::create (i, f, this));

            if (!this->TemplateWinterDesignDays_)
            {
              this->TemplateWinterDesignDays_.set (r);
              continue;
            }
          }

          // TemplateUtilityCosts
          //
          if (n.name () == "TemplateUtilityCosts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateUtilityCosts_type > r (
              TemplateUtilityCosts_traits::create (i, f, this));

            if (!this->TemplateUtilityCosts_)
            {
              this->TemplateUtilityCosts_.set (r);
              continue;
            }
          }

          // TemplateLifeCycleCosts
          //
          if (n.name () == "TemplateLifeCycleCosts" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< TemplateLifeCycleCosts_type > r (
              TemplateLifeCycleCosts_traits::create (i, f, this));

            if (!this->TemplateLifeCycleCosts_)
            {
              this->TemplateLifeCycleCosts_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimTemplateLocation* SimTemplateLocation::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimTemplateLocation (*this, f, c);
      }

      SimTemplateLocation& SimTemplateLocation::
      operator= (const SimTemplateLocation& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimTemplate& > (*this) = x;
          this->TemplateLocationProperties_ = x.TemplateLocationProperties_;
          this->Terrain_ = x.Terrain_;
          this->SolarDistribution_ = x.SolarDistribution_;
          this->TemplateSkyTemperature_ = x.TemplateSkyTemperature_;
          this->TemplateIDDWeatherStation_ = x.TemplateIDDWeatherStation_;
          this->WeatherFilename_ = x.WeatherFilename_;
          this->TemplateSummerDesignDays_ = x.TemplateSummerDesignDays_;
          this->TemplateWinterDesignDays_ = x.TemplateWinterDesignDays_;
          this->TemplateUtilityCosts_ = x.TemplateUtilityCosts_;
          this->TemplateLifeCycleCosts_ = x.TemplateLifeCycleCosts_;
        }

        return *this;
      }

      SimTemplateLocation::
      ~SimTemplateLocation ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

