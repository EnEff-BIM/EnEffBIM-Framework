// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_MATERIAL_GLAZING_MATERIAL_HXX
#define SIM_MATERIAL_GLAZING_MATERIAL_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
//#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class SimMaterial_GlazingMaterial;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simmaterial.hxx"

namespace schema
{
  namespace simxml
  {
    namespace SimModelCore
    {
      class doubleList;
    }
  }
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      class __declspec(dllexport) SimMaterial_GlazingMaterial: public ::schema::simxml::ResourcesGeneral::SimMaterial
      {
        public:
        // MatProp_MoistPeneDepth_Settings_Name
        //
        typedef ::xml_schema::idref MatProp_MoistPeneDepth_Settings_Name_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_Name_type, false > MatProp_MoistPeneDepth_Settings_Name_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_Name_type, char > MatProp_MoistPeneDepth_Settings_Name_traits;

        const MatProp_MoistPeneDepth_Settings_Name_optional&
        MatProp_MoistPeneDepth_Settings_Name () const;

        MatProp_MoistPeneDepth_Settings_Name_optional&
        MatProp_MoistPeneDepth_Settings_Name ();

        void
        MatProp_MoistPeneDepth_Settings_Name (const MatProp_MoistPeneDepth_Settings_Name_type& x);

        void
        MatProp_MoistPeneDepth_Settings_Name (const MatProp_MoistPeneDepth_Settings_Name_optional& x);

        void
        MatProp_MoistPeneDepth_Settings_Name (::std::auto_ptr< MatProp_MoistPeneDepth_Settings_Name_type > p);

        // MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth
        //
        typedef ::xml_schema::double_ MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_type, true > MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_traits;

        const MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_optional&
        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth () const;

        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_optional&
        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth ();

        void
        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth (const MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_type& x);

        void
        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth (const MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_optional& x);

        // MatProp_MoistPeneDepth_Settings_MoistEquaCoefA
        //
        typedef ::xml_schema::double_ MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_type, true > MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_traits;

        const MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA () const;

        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA ();

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_type& x);

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_optional& x);

        // MatProp_MoistPeneDepth_Settings_MoistEquaCoefB
        //
        typedef ::xml_schema::double_ MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_type, true > MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_traits;

        const MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB () const;

        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB ();

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_type& x);

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_optional& x);

        // MatProp_MoistPeneDepth_Settings_MoistEquaCoefC
        //
        typedef ::xml_schema::double_ MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_type, true > MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_traits;

        const MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC () const;

        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC ();

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_type& x);

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_optional& x);

        // MatProp_MoistPeneDepth_Settings_MoistEquaCoefD
        //
        typedef ::xml_schema::double_ MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_type;
        typedef ::xsd::cxx::tree::optional< MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_type, true > MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_traits;

        const MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD () const;

        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_optional&
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD ();

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_type& x);

        void
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD (const MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_optional& x);

        // MatProp_PhaseChange_Name
        //
        typedef ::xml_schema::idref MatProp_PhaseChange_Name_type;
        typedef ::xsd::cxx::tree::optional< MatProp_PhaseChange_Name_type, false > MatProp_PhaseChange_Name_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_PhaseChange_Name_type, char > MatProp_PhaseChange_Name_traits;

        const MatProp_PhaseChange_Name_optional&
        MatProp_PhaseChange_Name () const;

        MatProp_PhaseChange_Name_optional&
        MatProp_PhaseChange_Name ();

        void
        MatProp_PhaseChange_Name (const MatProp_PhaseChange_Name_type& x);

        void
        MatProp_PhaseChange_Name (const MatProp_PhaseChange_Name_optional& x);

        void
        MatProp_PhaseChange_Name (::std::auto_ptr< MatProp_PhaseChange_Name_type > p);

        // MatProp_PhaseChange_TempCoefForThermalCond
        //
        typedef ::xml_schema::double_ MatProp_PhaseChange_TempCoefForThermalCond_type;
        typedef ::xsd::cxx::tree::optional< MatProp_PhaseChange_TempCoefForThermalCond_type, true > MatProp_PhaseChange_TempCoefForThermalCond_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_PhaseChange_TempCoefForThermalCond_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_PhaseChange_TempCoefForThermalCond_traits;

        const MatProp_PhaseChange_TempCoefForThermalCond_optional&
        MatProp_PhaseChange_TempCoefForThermalCond () const;

        MatProp_PhaseChange_TempCoefForThermalCond_optional&
        MatProp_PhaseChange_TempCoefForThermalCond ();

        void
        MatProp_PhaseChange_TempCoefForThermalCond (const MatProp_PhaseChange_TempCoefForThermalCond_type& x);

        void
        MatProp_PhaseChange_TempCoefForThermalCond (const MatProp_PhaseChange_TempCoefForThermalCond_optional& x);

        // MatProp_PhaseChange_Temp_1_16
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_PhaseChange_Temp_1_16_type;
        typedef ::xsd::cxx::tree::optional< MatProp_PhaseChange_Temp_1_16_type > MatProp_PhaseChange_Temp_1_16_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_PhaseChange_Temp_1_16_type, char > MatProp_PhaseChange_Temp_1_16_traits;

        const MatProp_PhaseChange_Temp_1_16_optional&
        MatProp_PhaseChange_Temp_1_16 () const;

        MatProp_PhaseChange_Temp_1_16_optional&
        MatProp_PhaseChange_Temp_1_16 ();

        void
        MatProp_PhaseChange_Temp_1_16 (const MatProp_PhaseChange_Temp_1_16_type& x);

        void
        MatProp_PhaseChange_Temp_1_16 (const MatProp_PhaseChange_Temp_1_16_optional& x);

        void
        MatProp_PhaseChange_Temp_1_16 (::std::auto_ptr< MatProp_PhaseChange_Temp_1_16_type > p);

        // MatProp_PhaseChange_Enthalpy_1_16
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_PhaseChange_Enthalpy_1_16_type;
        typedef ::xsd::cxx::tree::optional< MatProp_PhaseChange_Enthalpy_1_16_type > MatProp_PhaseChange_Enthalpy_1_16_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_PhaseChange_Enthalpy_1_16_type, char > MatProp_PhaseChange_Enthalpy_1_16_traits;

        const MatProp_PhaseChange_Enthalpy_1_16_optional&
        MatProp_PhaseChange_Enthalpy_1_16 () const;

        MatProp_PhaseChange_Enthalpy_1_16_optional&
        MatProp_PhaseChange_Enthalpy_1_16 ();

        void
        MatProp_PhaseChange_Enthalpy_1_16 (const MatProp_PhaseChange_Enthalpy_1_16_type& x);

        void
        MatProp_PhaseChange_Enthalpy_1_16 (const MatProp_PhaseChange_Enthalpy_1_16_optional& x);

        void
        MatProp_PhaseChange_Enthalpy_1_16 (::std::auto_ptr< MatProp_PhaseChange_Enthalpy_1_16_type > p);

        // MatProp_VarThermCond_Name
        //
        typedef ::xml_schema::idref MatProp_VarThermCond_Name_type;
        typedef ::xsd::cxx::tree::optional< MatProp_VarThermCond_Name_type, false > MatProp_VarThermCond_Name_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_VarThermCond_Name_type, char > MatProp_VarThermCond_Name_traits;

        const MatProp_VarThermCond_Name_optional&
        MatProp_VarThermCond_Name () const;

        MatProp_VarThermCond_Name_optional&
        MatProp_VarThermCond_Name ();

        void
        MatProp_VarThermCond_Name (const MatProp_VarThermCond_Name_type& x);

        void
        MatProp_VarThermCond_Name (const MatProp_VarThermCond_Name_optional& x);

        void
        MatProp_VarThermCond_Name (::std::auto_ptr< MatProp_VarThermCond_Name_type > p);

        // MatProp_VarThermCond_Temp_1_10
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_VarThermCond_Temp_1_10_type;
        typedef ::xsd::cxx::tree::optional< MatProp_VarThermCond_Temp_1_10_type > MatProp_VarThermCond_Temp_1_10_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_VarThermCond_Temp_1_10_type, char > MatProp_VarThermCond_Temp_1_10_traits;

        const MatProp_VarThermCond_Temp_1_10_optional&
        MatProp_VarThermCond_Temp_1_10 () const;

        MatProp_VarThermCond_Temp_1_10_optional&
        MatProp_VarThermCond_Temp_1_10 ();

        void
        MatProp_VarThermCond_Temp_1_10 (const MatProp_VarThermCond_Temp_1_10_type& x);

        void
        MatProp_VarThermCond_Temp_1_10 (const MatProp_VarThermCond_Temp_1_10_optional& x);

        void
        MatProp_VarThermCond_Temp_1_10 (::std::auto_ptr< MatProp_VarThermCond_Temp_1_10_type > p);

        // MatProp_VarThermCond_ThermalCond_1_10
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_VarThermCond_ThermalCond_1_10_type;
        typedef ::xsd::cxx::tree::optional< MatProp_VarThermCond_ThermalCond_1_10_type > MatProp_VarThermCond_ThermalCond_1_10_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_VarThermCond_ThermalCond_1_10_type, char > MatProp_VarThermCond_ThermalCond_1_10_traits;

        const MatProp_VarThermCond_ThermalCond_1_10_optional&
        MatProp_VarThermCond_ThermalCond_1_10 () const;

        MatProp_VarThermCond_ThermalCond_1_10_optional&
        MatProp_VarThermCond_ThermalCond_1_10 ();

        void
        MatProp_VarThermCond_ThermalCond_1_10 (const MatProp_VarThermCond_ThermalCond_1_10_type& x);

        void
        MatProp_VarThermCond_ThermalCond_1_10 (const MatProp_VarThermCond_ThermalCond_1_10_optional& x);

        void
        MatProp_VarThermCond_ThermalCond_1_10 (::std::auto_ptr< MatProp_VarThermCond_ThermalCond_1_10_type > p);

        // MatProp_Heat_MoistTrans_Settings_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_Settings_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Settings_MaterialName_type, false > MatProp_Heat_MoistTrans_Settings_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Settings_MaterialName_type, char > MatProp_Heat_MoistTrans_Settings_MaterialName_traits;

        const MatProp_Heat_MoistTrans_Settings_MaterialName_optional&
        MatProp_Heat_MoistTrans_Settings_MaterialName () const;

        MatProp_Heat_MoistTrans_Settings_MaterialName_optional&
        MatProp_Heat_MoistTrans_Settings_MaterialName ();

        void
        MatProp_Heat_MoistTrans_Settings_MaterialName (const MatProp_Heat_MoistTrans_Settings_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_Settings_MaterialName (const MatProp_Heat_MoistTrans_Settings_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_Settings_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_Settings_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_Settings_Porosity
        //
        typedef ::xml_schema::double_ MatProp_Heat_MoistTrans_Settings_Porosity_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Settings_Porosity_type, true > MatProp_Heat_MoistTrans_Settings_Porosity_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Settings_Porosity_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_Heat_MoistTrans_Settings_Porosity_traits;

        const MatProp_Heat_MoistTrans_Settings_Porosity_optional&
        MatProp_Heat_MoistTrans_Settings_Porosity () const;

        MatProp_Heat_MoistTrans_Settings_Porosity_optional&
        MatProp_Heat_MoistTrans_Settings_Porosity ();

        void
        MatProp_Heat_MoistTrans_Settings_Porosity (const MatProp_Heat_MoistTrans_Settings_Porosity_type& x);

        void
        MatProp_Heat_MoistTrans_Settings_Porosity (const MatProp_Heat_MoistTrans_Settings_Porosity_optional& x);

        // MatProp_Heat_MoistTrans_Settings_InitWaterContRatio
        //
        typedef ::xml_schema::double_ MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_type, true > MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_type, char, ::xsd::cxx::tree::schema_type::double_ > MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_traits;

        const MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_optional&
        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio () const;

        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_optional&
        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio ();

        void
        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio (const MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_type& x);

        void
        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio (const MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_optional& x);

        // MatProp_Heat_MoistTrans_SorpIsothm_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_type, false > MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_type, char > MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_traits;

        const MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName () const;

        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName ();

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName (const MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName (const MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords
        //
        typedef ::xml_schema::int_ MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_type, true > MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_type, char > MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_traits;

        const MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords () const;

        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords ();

        void
        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords (const MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_type& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords (const MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_optional& x);

        // MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_type > MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_type, char > MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_traits;

        const MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25 () const;

        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25 ();

        void
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25 (const MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25 (const MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_type > p);

        // MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_type > MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_type, char > MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_traits;

        const MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25 () const;

        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25 ();

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25 (const MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25 (const MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_type > p);

        // MatProp_Heat_MoistTrans_Suction_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_Suction_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Suction_MaterialName_type, false > MatProp_Heat_MoistTrans_Suction_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Suction_MaterialName_type, char > MatProp_Heat_MoistTrans_Suction_MaterialName_traits;

        const MatProp_Heat_MoistTrans_Suction_MaterialName_optional&
        MatProp_Heat_MoistTrans_Suction_MaterialName () const;

        MatProp_Heat_MoistTrans_Suction_MaterialName_optional&
        MatProp_Heat_MoistTrans_Suction_MaterialName ();

        void
        MatProp_Heat_MoistTrans_Suction_MaterialName (const MatProp_Heat_MoistTrans_Suction_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_Suction_MaterialName (const MatProp_Heat_MoistTrans_Suction_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_Suction_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_Suction_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_Suction_NumSuctionPoints
        //
        typedef ::xml_schema::int_ MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_type, true > MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_type, char > MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_traits;

        const MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_optional&
        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints () const;

        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_optional&
        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints ();

        void
        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints (const MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_type& x);

        void
        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints (const MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_optional& x);

        // MatProp_Heat_MoistTrans_Suction_MoistCont_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_type > MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_type, char > MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_traits;

        const MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25 () const;

        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25 ();

        void
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25 (const MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25 (const MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_type > p);

        // MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_type > MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_type, char > MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_traits;

        const MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_optional&
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25 () const;

        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_optional&
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25 ();

        void
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25 (const MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25 (const MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_type > p);

        // MatProp_Heat_MoistTrans_ReDistrib_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_ReDistrib_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ReDistrib_MaterialName_type, false > MatProp_Heat_MoistTrans_ReDistrib_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ReDistrib_MaterialName_type, char > MatProp_Heat_MoistTrans_ReDistrib_MaterialName_traits;

        const MatProp_Heat_MoistTrans_ReDistrib_MaterialName_optional&
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName () const;

        MatProp_Heat_MoistTrans_ReDistrib_MaterialName_optional&
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName ();

        void
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName (const MatProp_Heat_MoistTrans_ReDistrib_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName (const MatProp_Heat_MoistTrans_ReDistrib_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_ReDistrib_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints
        //
        typedef ::xml_schema::int_ MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_type, true > MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_type, char > MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_traits;

        const MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_optional&
        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints () const;

        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_optional&
        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints ();

        void
        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints (const MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_type& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints (const MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_optional& x);

        // MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_type > MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_type, char > MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_traits;

        const MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25 () const;

        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25 ();

        void
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25 (const MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25 (const MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_type > p);

        // MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_type > MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_type, char > MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_traits;

        const MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_optional&
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25 () const;

        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_optional&
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25 ();

        void
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25 (const MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25 (const MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_type > p);

        // MatProp_Heat_MoistTrans_Diffusion_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_Diffusion_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Diffusion_MaterialName_type, false > MatProp_Heat_MoistTrans_Diffusion_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Diffusion_MaterialName_type, char > MatProp_Heat_MoistTrans_Diffusion_MaterialName_traits;

        const MatProp_Heat_MoistTrans_Diffusion_MaterialName_optional&
        MatProp_Heat_MoistTrans_Diffusion_MaterialName () const;

        MatProp_Heat_MoistTrans_Diffusion_MaterialName_optional&
        MatProp_Heat_MoistTrans_Diffusion_MaterialName ();

        void
        MatProp_Heat_MoistTrans_Diffusion_MaterialName (const MatProp_Heat_MoistTrans_Diffusion_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_MaterialName (const MatProp_Heat_MoistTrans_Diffusion_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_Diffusion_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_Diffusion_NumDataPairs
        //
        typedef ::xml_schema::int_ MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_type, true > MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_type, char > MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_traits;

        const MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_optional&
        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs () const;

        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_optional&
        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs ();

        void
        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs (const MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_type& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs (const MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_optional& x);

        // MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_type > MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_type, char > MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_traits;

        const MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_optional&
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25 () const;

        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_optional&
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25 ();

        void
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25 (const MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25 (const MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_type > p);

        // MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_type > MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_type, char > MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_traits;

        const MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_optional&
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25 () const;

        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_optional&
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25 ();

        void
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25 (const MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25 (const MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_type > p);

        // MatProp_Heat_MoistTrans_ThermCond_MaterialName
        //
        typedef ::xml_schema::idref MatProp_Heat_MoistTrans_ThermCond_MaterialName_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ThermCond_MaterialName_type, false > MatProp_Heat_MoistTrans_ThermCond_MaterialName_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ThermCond_MaterialName_type, char > MatProp_Heat_MoistTrans_ThermCond_MaterialName_traits;

        const MatProp_Heat_MoistTrans_ThermCond_MaterialName_optional&
        MatProp_Heat_MoistTrans_ThermCond_MaterialName () const;

        MatProp_Heat_MoistTrans_ThermCond_MaterialName_optional&
        MatProp_Heat_MoistTrans_ThermCond_MaterialName ();

        void
        MatProp_Heat_MoistTrans_ThermCond_MaterialName (const MatProp_Heat_MoistTrans_ThermCond_MaterialName_type& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_MaterialName (const MatProp_Heat_MoistTrans_ThermCond_MaterialName_optional& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_MaterialName (::std::auto_ptr< MatProp_Heat_MoistTrans_ThermCond_MaterialName_type > p);

        // MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords
        //
        typedef ::xml_schema::int_ MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_type, true > MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_type, char > MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_traits;

        const MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_optional&
        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords () const;

        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_optional&
        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords ();

        void
        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords (const MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_type& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords (const MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_optional& x);

        // MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_type > MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_type, char > MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_traits;

        const MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25 () const;

        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_optional&
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25 ();

        void
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25 (const MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25 (const MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_type > p);

        // MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25
        //
        typedef ::schema::simxml::SimModelCore::doubleList MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_type;
        typedef ::xsd::cxx::tree::optional< MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_type > MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_optional;
        typedef ::xsd::cxx::tree::traits< MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_type, char > MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_traits;

        const MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_optional&
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25 () const;

        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_optional&
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25 ();

        void
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25 (const MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_type& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25 (const MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_optional& x);

        void
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25 (::std::auto_ptr< MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_type > p);

        // Constructors.
        //
        SimMaterial_GlazingMaterial ();

        SimMaterial_GlazingMaterial (const RefId_type&);

        SimMaterial_GlazingMaterial (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        SimMaterial_GlazingMaterial (const SimMaterial_GlazingMaterial& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

        virtual SimMaterial_GlazingMaterial*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimMaterial_GlazingMaterial&
        operator= (const SimMaterial_GlazingMaterial& x);

        virtual 
        ~SimMaterial_GlazingMaterial ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        MatProp_MoistPeneDepth_Settings_Name_optional MatProp_MoistPeneDepth_Settings_Name_;
        MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_optional MatProp_MoistPeneDepth_Settings_MoistPenetrationDepth_;
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_optional MatProp_MoistPeneDepth_Settings_MoistEquaCoefA_;
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_optional MatProp_MoistPeneDepth_Settings_MoistEquaCoefB_;
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_optional MatProp_MoistPeneDepth_Settings_MoistEquaCoefC_;
        MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_optional MatProp_MoistPeneDepth_Settings_MoistEquaCoefD_;
        MatProp_PhaseChange_Name_optional MatProp_PhaseChange_Name_;
        MatProp_PhaseChange_TempCoefForThermalCond_optional MatProp_PhaseChange_TempCoefForThermalCond_;
        MatProp_PhaseChange_Temp_1_16_optional MatProp_PhaseChange_Temp_1_16_;
        MatProp_PhaseChange_Enthalpy_1_16_optional MatProp_PhaseChange_Enthalpy_1_16_;
        MatProp_VarThermCond_Name_optional MatProp_VarThermCond_Name_;
        MatProp_VarThermCond_Temp_1_10_optional MatProp_VarThermCond_Temp_1_10_;
        MatProp_VarThermCond_ThermalCond_1_10_optional MatProp_VarThermCond_ThermalCond_1_10_;
        MatProp_Heat_MoistTrans_Settings_MaterialName_optional MatProp_Heat_MoistTrans_Settings_MaterialName_;
        MatProp_Heat_MoistTrans_Settings_Porosity_optional MatProp_Heat_MoistTrans_Settings_Porosity_;
        MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_optional MatProp_Heat_MoistTrans_Settings_InitWaterContRatio_;
        MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_optional MatProp_Heat_MoistTrans_SorpIsothm_MaterialName_;
        MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_optional MatProp_Heat_MoistTrans_SorpIsothm_NumothermCoords_;
        MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_optional MatProp_Heat_MoistTrans_SorpIsothm_RelHumidFract_1_25_;
        MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_optional MatProp_Heat_MoistTrans_SorpIsothm_MoistCont_1_25_;
        MatProp_Heat_MoistTrans_Suction_MaterialName_optional MatProp_Heat_MoistTrans_Suction_MaterialName_;
        MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_optional MatProp_Heat_MoistTrans_Suction_NumSuctionPoints_;
        MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_optional MatProp_Heat_MoistTrans_Suction_MoistCont_1_25_;
        MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_optional MatProp_Heat_MoistTrans_Suction_LiqTransportCoef_1_25_;
        MatProp_Heat_MoistTrans_ReDistrib_MaterialName_optional MatProp_Heat_MoistTrans_ReDistrib_MaterialName_;
        MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_optional MatProp_Heat_MoistTrans_ReDistrib_NumReDistPoints_;
        MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_optional MatProp_Heat_MoistTrans_ReDistrib_MoistCont_1_25_;
        MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_optional MatProp_Heat_MoistTrans_ReDistrib_LiqTransportCoef_1_25_;
        MatProp_Heat_MoistTrans_Diffusion_MaterialName_optional MatProp_Heat_MoistTrans_Diffusion_MaterialName_;
        MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_optional MatProp_Heat_MoistTrans_Diffusion_NumDataPairs_;
        MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_optional MatProp_Heat_MoistTrans_Diffusion_RelHumidFract_1_25_;
        MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_optional MatProp_Heat_MoistTrans_Diffusion_WaterVaporDiffusResistFactor_1_25_;
        MatProp_Heat_MoistTrans_ThermCond_MaterialName_optional MatProp_Heat_MoistTrans_ThermCond_MaterialName_;
        MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_optional MatProp_Heat_MoistTrans_ThermCond_NumThermalCoords_;
        MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_optional MatProp_Heat_MoistTrans_ThermCond_MoistCont_1_25_;
        MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_optional MatProp_Heat_MoistTrans_ThermCond_ThermalCond_1_25_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_MATERIAL_GLAZING_MATERIAL_HXX
