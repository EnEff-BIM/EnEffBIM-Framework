// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowTerminal_AirTerminal_Uncontrolled.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_Uncontrolled
      // 

      const SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_Name () const
      {
        return this->SimFlowTerm_Name_;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_Name_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_Name ()
      {
        return this->SimFlowTerm_Name_;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_Name (const SimFlowTerm_Name_type& x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_Name (const SimFlowTerm_Name_optional& x)
      {
        this->SimFlowTerm_Name_ = x;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_Name (::std::auto_ptr< SimFlowTerm_Name_type > x)
      {
        this->SimFlowTerm_Name_.set (x);
      }

      const SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_AvailSchedName () const
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_AvailSchedName_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_AvailSchedName ()
      {
        return this->SimFlowTerm_AvailSchedName_;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_type& x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_AvailSchedName (const SimFlowTerm_AvailSchedName_optional& x)
      {
        this->SimFlowTerm_AvailSchedName_ = x;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_AvailSchedName (::std::auto_ptr< SimFlowTerm_AvailSchedName_type > x)
      {
        this->SimFlowTerm_AvailSchedName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_ZoneSupAirNodeName_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_ZoneSupAirNodeName () const
      {
        return this->SimFlowTerm_ZoneSupAirNodeName_;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_ZoneSupAirNodeName_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_ZoneSupAirNodeName ()
      {
        return this->SimFlowTerm_ZoneSupAirNodeName_;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_ZoneSupAirNodeName (const SimFlowTerm_ZoneSupAirNodeName_type& x)
      {
        this->SimFlowTerm_ZoneSupAirNodeName_.set (x);
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_ZoneSupAirNodeName (const SimFlowTerm_ZoneSupAirNodeName_optional& x)
      {
        this->SimFlowTerm_ZoneSupAirNodeName_ = x;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_ZoneSupAirNodeName (::std::auto_ptr< SimFlowTerm_ZoneSupAirNodeName_type > x)
      {
        this->SimFlowTerm_ZoneSupAirNodeName_.set (x);
      }

      const SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_MaxAirFlowRate_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_MaxAirFlowRate () const
      {
        return this->SimFlowTerm_MaxAirFlowRate_;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::SimFlowTerm_MaxAirFlowRate_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_MaxAirFlowRate ()
      {
        return this->SimFlowTerm_MaxAirFlowRate_;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_MaxAirFlowRate (const SimFlowTerm_MaxAirFlowRate_type& x)
      {
        this->SimFlowTerm_MaxAirFlowRate_.set (x);
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerm_MaxAirFlowRate (const SimFlowTerm_MaxAirFlowRate_optional& x)
      {
        this->SimFlowTerm_MaxAirFlowRate_ = x;
      }

      const SimFlowTerminal_AirTerminal_Uncontrolled::T24ConstructStatus2_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      T24ConstructStatus2 () const
      {
        return this->T24ConstructStatus2_;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::T24ConstructStatus2_optional& SimFlowTerminal_AirTerminal_Uncontrolled::
      T24ConstructStatus2 ()
      {
        return this->T24ConstructStatus2_;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      T24ConstructStatus2 (const T24ConstructStatus2_type& x)
      {
        this->T24ConstructStatus2_.set (x);
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      T24ConstructStatus2 (const T24ConstructStatus2_optional& x)
      {
        this->T24ConstructStatus2_ = x;
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      T24ConstructStatus2 (::std::auto_ptr< T24ConstructStatus2_type > x)
      {
        this->T24ConstructStatus2_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowTerminal_AirTerminal_Uncontrolled
      //

      SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerminal_AirTerminal_Uncontrolled ()
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_ZoneSupAirNodeName_ (this),
        SimFlowTerm_MaxAirFlowRate_ (this),
        T24ConstructStatus2_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerminal_AirTerminal_Uncontrolled (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (RefId),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_ZoneSupAirNodeName_ (this),
        SimFlowTerm_MaxAirFlowRate_ (this),
        T24ConstructStatus2_ (this)
      {
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerminal_AirTerminal_Uncontrolled (const SimFlowTerminal_AirTerminal_Uncontrolled& x,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (x, f, c),
        SimFlowTerm_Name_ (x.SimFlowTerm_Name_, f, this),
        SimFlowTerm_AvailSchedName_ (x.SimFlowTerm_AvailSchedName_, f, this),
        SimFlowTerm_ZoneSupAirNodeName_ (x.SimFlowTerm_ZoneSupAirNodeName_, f, this),
        SimFlowTerm_MaxAirFlowRate_ (x.SimFlowTerm_MaxAirFlowRate_, f, this),
        T24ConstructStatus2_ (x.T24ConstructStatus2_, f, this)
      {
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::
      SimFlowTerminal_AirTerminal_Uncontrolled (const ::xercesc::DOMElement& e,
                                                ::xml_schema::flags f,
                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal (e, f | ::xml_schema::flags::base, c),
        SimFlowTerm_Name_ (this),
        SimFlowTerm_AvailSchedName_ (this),
        SimFlowTerm_ZoneSupAirNodeName_ (this),
        SimFlowTerm_MaxAirFlowRate_ (this),
        T24ConstructStatus2_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowTerminal_AirTerminal_Uncontrolled::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowTerminal_AirTerminal::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowTerm_Name
          //
          if (n.name () == "SimFlowTerm_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_Name_type > r (
              SimFlowTerm_Name_traits::create (i, f, this));

            if (!this->SimFlowTerm_Name_)
            {
              this->SimFlowTerm_Name_.set (r);
              continue;
            }
          }

          // SimFlowTerm_AvailSchedName
          //
          if (n.name () == "SimFlowTerm_AvailSchedName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_AvailSchedName_type > r (
              SimFlowTerm_AvailSchedName_traits::create (i, f, this));

            if (!this->SimFlowTerm_AvailSchedName_)
            {
              this->SimFlowTerm_AvailSchedName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_ZoneSupAirNodeName
          //
          if (n.name () == "SimFlowTerm_ZoneSupAirNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowTerm_ZoneSupAirNodeName_type > r (
              SimFlowTerm_ZoneSupAirNodeName_traits::create (i, f, this));

            if (!this->SimFlowTerm_ZoneSupAirNodeName_)
            {
              this->SimFlowTerm_ZoneSupAirNodeName_.set (r);
              continue;
            }
          }

          // SimFlowTerm_MaxAirFlowRate
          //
          if (n.name () == "SimFlowTerm_MaxAirFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowTerm_MaxAirFlowRate_)
            {
              this->SimFlowTerm_MaxAirFlowRate_.set (SimFlowTerm_MaxAirFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // T24ConstructStatus2
          //
          if (n.name () == "T24ConstructStatus2" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< T24ConstructStatus2_type > r (
              T24ConstructStatus2_traits::create (i, f, this));

            if (!this->T24ConstructStatus2_)
            {
              this->T24ConstructStatus2_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowTerminal_AirTerminal_Uncontrolled* SimFlowTerminal_AirTerminal_Uncontrolled::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowTerminal_AirTerminal_Uncontrolled (*this, f, c);
      }

      SimFlowTerminal_AirTerminal_Uncontrolled& SimFlowTerminal_AirTerminal_Uncontrolled::
      operator= (const SimFlowTerminal_AirTerminal_Uncontrolled& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowTerminal_AirTerminal& > (*this) = x;
          this->SimFlowTerm_Name_ = x.SimFlowTerm_Name_;
          this->SimFlowTerm_AvailSchedName_ = x.SimFlowTerm_AvailSchedName_;
          this->SimFlowTerm_ZoneSupAirNodeName_ = x.SimFlowTerm_ZoneSupAirNodeName_;
          this->SimFlowTerm_MaxAirFlowRate_ = x.SimFlowTerm_MaxAirFlowRate_;
          this->T24ConstructStatus2_ = x.T24ConstructStatus2_;
        }

        return *this;
      }

      SimFlowTerminal_AirTerminal_Uncontrolled::
      ~SimFlowTerminal_AirTerminal_Uncontrolled ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

