// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower
      // 

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_EffFuncPwrCurveName_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_EffFuncPwrCurveName () const
      {
        return this->SimFlowEnergyTrans_EffFuncPwrCurveName_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_EffFuncPwrCurveName_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_EffFuncPwrCurveName ()
      {
        return this->SimFlowEnergyTrans_EffFuncPwrCurveName_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_EffFuncPwrCurveName (const SimFlowEnergyTrans_EffFuncPwrCurveName_type& x)
      {
        this->SimFlowEnergyTrans_EffFuncPwrCurveName_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_EffFuncPwrCurveName (const SimFlowEnergyTrans_EffFuncPwrCurveName_optional& x)
      {
        this->SimFlowEnergyTrans_EffFuncPwrCurveName_ = x;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_EffFuncPwrCurveName (::std::auto_ptr< SimFlowEnergyTrans_EffFuncPwrCurveName_type > x)
      {
        this->SimFlowEnergyTrans_EffFuncPwrCurveName_.set (x);
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_RatedMaxContInputPwr_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_RatedMaxContInputPwr () const
      {
        return this->SimFlowEnergyTrans_RatedMaxContInputPwr_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_RatedMaxContInputPwr_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_RatedMaxContInputPwr ()
      {
        return this->SimFlowEnergyTrans_RatedMaxContInputPwr_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_RatedMaxContInputPwr (const SimFlowEnergyTrans_RatedMaxContInputPwr_type& x)
      {
        this->SimFlowEnergyTrans_RatedMaxContInputPwr_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_RatedMaxContInputPwr (const SimFlowEnergyTrans_RatedMaxContInputPwr_optional& x)
      {
        this->SimFlowEnergyTrans_RatedMaxContInputPwr_ = x;
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MinEff_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinEff () const
      {
        return this->SimFlowEnergyTrans_MinEff_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MinEff_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinEff ()
      {
        return this->SimFlowEnergyTrans_MinEff_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinEff (const SimFlowEnergyTrans_MinEff_type& x)
      {
        this->SimFlowEnergyTrans_MinEff_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinEff (const SimFlowEnergyTrans_MinEff_optional& x)
      {
        this->SimFlowEnergyTrans_MinEff_ = x;
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MaxEff_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxEff () const
      {
        return this->SimFlowEnergyTrans_MaxEff_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MaxEff_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxEff ()
      {
        return this->SimFlowEnergyTrans_MaxEff_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxEff (const SimFlowEnergyTrans_MaxEff_type& x)
      {
        this->SimFlowEnergyTrans_MaxEff_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxEff (const SimFlowEnergyTrans_MaxEff_optional& x)
      {
        this->SimFlowEnergyTrans_MaxEff_ = x;
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MinPwrOutput_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinPwrOutput () const
      {
        return this->SimFlowEnergyTrans_MinPwrOutput_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MinPwrOutput_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinPwrOutput ()
      {
        return this->SimFlowEnergyTrans_MinPwrOutput_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinPwrOutput (const SimFlowEnergyTrans_MinPwrOutput_type& x)
      {
        this->SimFlowEnergyTrans_MinPwrOutput_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MinPwrOutput (const SimFlowEnergyTrans_MinPwrOutput_optional& x)
      {
        this->SimFlowEnergyTrans_MinPwrOutput_ = x;
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MaxPwrOutput_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxPwrOutput () const
      {
        return this->SimFlowEnergyTrans_MaxPwrOutput_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_MaxPwrOutput_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxPwrOutput ()
      {
        return this->SimFlowEnergyTrans_MaxPwrOutput_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxPwrOutput (const SimFlowEnergyTrans_MaxPwrOutput_type& x)
      {
        this->SimFlowEnergyTrans_MaxPwrOutput_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_MaxPwrOutput (const SimFlowEnergyTrans_MaxPwrOutput_optional& x)
      {
        this->SimFlowEnergyTrans_MaxPwrOutput_ = x;
      }

      const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_AncilPwrConsumedStandby_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_AncilPwrConsumedStandby () const
      {
        return this->SimFlowEnergyTrans_AncilPwrConsumedStandby_;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::SimFlowEnergyTrans_AncilPwrConsumedStandby_optional& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_AncilPwrConsumedStandby ()
      {
        return this->SimFlowEnergyTrans_AncilPwrConsumedStandby_;
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_AncilPwrConsumedStandby (const SimFlowEnergyTrans_AncilPwrConsumedStandby_type& x)
      {
        this->SimFlowEnergyTrans_AncilPwrConsumedStandby_.set (x);
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTrans_AncilPwrConsumedStandby (const SimFlowEnergyTrans_AncilPwrConsumedStandby_optional& x)
      {
        this->SimFlowEnergyTrans_AncilPwrConsumedStandby_ = x;
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower
      //

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower ()
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter (),
        SimFlowEnergyTrans_EffFuncPwrCurveName_ (this),
        SimFlowEnergyTrans_RatedMaxContInputPwr_ (this),
        SimFlowEnergyTrans_MinEff_ (this),
        SimFlowEnergyTrans_MaxEff_ (this),
        SimFlowEnergyTrans_MinPwrOutput_ (this),
        SimFlowEnergyTrans_MaxPwrOutput_ (this),
        SimFlowEnergyTrans_AncilPwrConsumedStandby_ (this)
      {
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter (RefId),
        SimFlowEnergyTrans_EffFuncPwrCurveName_ (this),
        SimFlowEnergyTrans_RatedMaxContInputPwr_ (this),
        SimFlowEnergyTrans_MinEff_ (this),
        SimFlowEnergyTrans_MaxEff_ (this),
        SimFlowEnergyTrans_MinPwrOutput_ (this),
        SimFlowEnergyTrans_MaxPwrOutput_ (this),
        SimFlowEnergyTrans_AncilPwrConsumedStandby_ (this)
      {
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower (const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower& x,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter (x, f, c),
        SimFlowEnergyTrans_EffFuncPwrCurveName_ (x.SimFlowEnergyTrans_EffFuncPwrCurveName_, f, this),
        SimFlowEnergyTrans_RatedMaxContInputPwr_ (x.SimFlowEnergyTrans_RatedMaxContInputPwr_, f, this),
        SimFlowEnergyTrans_MinEff_ (x.SimFlowEnergyTrans_MinEff_, f, this),
        SimFlowEnergyTrans_MaxEff_ (x.SimFlowEnergyTrans_MaxEff_, f, this),
        SimFlowEnergyTrans_MinPwrOutput_ (x.SimFlowEnergyTrans_MinPwrOutput_, f, this),
        SimFlowEnergyTrans_MaxPwrOutput_ (x.SimFlowEnergyTrans_MaxPwrOutput_, f, this),
        SimFlowEnergyTrans_AncilPwrConsumedStandby_ (x.SimFlowEnergyTrans_AncilPwrConsumedStandby_, f, this)
      {
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower (const ::xercesc::DOMElement& e,
                                                                ::xml_schema::flags f,
                                                                ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter (e, f | ::xml_schema::flags::base, c),
        SimFlowEnergyTrans_EffFuncPwrCurveName_ (this),
        SimFlowEnergyTrans_RatedMaxContInputPwr_ (this),
        SimFlowEnergyTrans_MinEff_ (this),
        SimFlowEnergyTrans_MaxEff_ (this),
        SimFlowEnergyTrans_MinPwrOutput_ (this),
        SimFlowEnergyTrans_MaxPwrOutput_ (this),
        SimFlowEnergyTrans_AncilPwrConsumedStandby_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowEnergyTrans_EffFuncPwrCurveName
          //
          if (n.name () == "SimFlowEnergyTrans_EffFuncPwrCurveName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowEnergyTrans_EffFuncPwrCurveName_type > r (
              SimFlowEnergyTrans_EffFuncPwrCurveName_traits::create (i, f, this));

            if (!this->SimFlowEnergyTrans_EffFuncPwrCurveName_)
            {
              this->SimFlowEnergyTrans_EffFuncPwrCurveName_.set (r);
              continue;
            }
          }

          // SimFlowEnergyTrans_RatedMaxContInputPwr
          //
          if (n.name () == "SimFlowEnergyTrans_RatedMaxContInputPwr" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_RatedMaxContInputPwr_)
            {
              this->SimFlowEnergyTrans_RatedMaxContInputPwr_.set (SimFlowEnergyTrans_RatedMaxContInputPwr_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MinEff
          //
          if (n.name () == "SimFlowEnergyTrans_MinEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MinEff_)
            {
              this->SimFlowEnergyTrans_MinEff_.set (SimFlowEnergyTrans_MinEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxEff
          //
          if (n.name () == "SimFlowEnergyTrans_MaxEff" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxEff_)
            {
              this->SimFlowEnergyTrans_MaxEff_.set (SimFlowEnergyTrans_MaxEff_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MinPwrOutput
          //
          if (n.name () == "SimFlowEnergyTrans_MinPwrOutput" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MinPwrOutput_)
            {
              this->SimFlowEnergyTrans_MinPwrOutput_.set (SimFlowEnergyTrans_MinPwrOutput_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_MaxPwrOutput
          //
          if (n.name () == "SimFlowEnergyTrans_MaxPwrOutput" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_MaxPwrOutput_)
            {
              this->SimFlowEnergyTrans_MaxPwrOutput_.set (SimFlowEnergyTrans_MaxPwrOutput_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowEnergyTrans_AncilPwrConsumedStandby
          //
          if (n.name () == "SimFlowEnergyTrans_AncilPwrConsumedStandby" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowEnergyTrans_AncilPwrConsumedStandby_)
            {
              this->SimFlowEnergyTrans_AncilPwrConsumedStandby_.set (SimFlowEnergyTrans_AncilPwrConsumedStandby_traits::create (i, f, this));
              continue;
            }
          }

          break;
        }
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower* SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower (*this, f, c);
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower& SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      operator= (const SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowEnergyTransfer_ElectricalInverter& > (*this) = x;
          this->SimFlowEnergyTrans_EffFuncPwrCurveName_ = x.SimFlowEnergyTrans_EffFuncPwrCurveName_;
          this->SimFlowEnergyTrans_RatedMaxContInputPwr_ = x.SimFlowEnergyTrans_RatedMaxContInputPwr_;
          this->SimFlowEnergyTrans_MinEff_ = x.SimFlowEnergyTrans_MinEff_;
          this->SimFlowEnergyTrans_MaxEff_ = x.SimFlowEnergyTrans_MaxEff_;
          this->SimFlowEnergyTrans_MinPwrOutput_ = x.SimFlowEnergyTrans_MinPwrOutput_;
          this->SimFlowEnergyTrans_MaxPwrOutput_ = x.SimFlowEnergyTrans_MaxPwrOutput_;
          this->SimFlowEnergyTrans_AncilPwrConsumedStandby_ = x.SimFlowEnergyTrans_AncilPwrConsumedStandby_;
        }

        return *this;
      }

      SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower::
      ~SimFlowEnergyTransfer_ElectricalInverter_FunctionOfPower ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

