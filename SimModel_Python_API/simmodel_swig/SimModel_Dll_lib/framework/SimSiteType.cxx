// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimSiteType.hxx"

#include "integerlist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSiteType
      // 

      const SimSiteType::RepresentationMaps_optional& SimSiteType::
      RepresentationMaps () const
      {
        return this->RepresentationMaps_;
      }

      SimSiteType::RepresentationMaps_optional& SimSiteType::
      RepresentationMaps ()
      {
        return this->RepresentationMaps_;
      }

      void SimSiteType::
      RepresentationMaps (const RepresentationMaps_type& x)
      {
        this->RepresentationMaps_.set (x);
      }

      void SimSiteType::
      RepresentationMaps (const RepresentationMaps_optional& x)
      {
        this->RepresentationMaps_ = x;
      }

      void SimSiteType::
      RepresentationMaps (::std::auto_ptr< RepresentationMaps_type > x)
      {
        this->RepresentationMaps_.set (x);
      }

      const SimSiteType::Tag_optional& SimSiteType::
      Tag () const
      {
        return this->Tag_;
      }

      SimSiteType::Tag_optional& SimSiteType::
      Tag ()
      {
        return this->Tag_;
      }

      void SimSiteType::
      Tag (const Tag_type& x)
      {
        this->Tag_.set (x);
      }

      void SimSiteType::
      Tag (const Tag_optional& x)
      {
        this->Tag_ = x;
      }

      void SimSiteType::
      Tag (::std::auto_ptr< Tag_type > x)
      {
        this->Tag_.set (x);
      }

      const SimSiteType::Name_optional& SimSiteType::
      Name () const
      {
        return this->Name_;
      }

      SimSiteType::Name_optional& SimSiteType::
      Name ()
      {
        return this->Name_;
      }

      void SimSiteType::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimSiteType::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimSiteType::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimSiteType::Longitude_optional& SimSiteType::
      Longitude () const
      {
        return this->Longitude_;
      }

      SimSiteType::Longitude_optional& SimSiteType::
      Longitude ()
      {
        return this->Longitude_;
      }

      void SimSiteType::
      Longitude (const Longitude_type& x)
      {
        this->Longitude_.set (x);
      }

      void SimSiteType::
      Longitude (const Longitude_optional& x)
      {
        this->Longitude_ = x;
      }

      void SimSiteType::
      Longitude (::std::auto_ptr< Longitude_type > x)
      {
        this->Longitude_.set (x);
      }

      const SimSiteType::Latitude_optional& SimSiteType::
      Latitude () const
      {
        return this->Latitude_;
      }

      SimSiteType::Latitude_optional& SimSiteType::
      Latitude ()
      {
        return this->Latitude_;
      }

      void SimSiteType::
      Latitude (const Latitude_type& x)
      {
        this->Latitude_.set (x);
      }

      void SimSiteType::
      Latitude (const Latitude_optional& x)
      {
        this->Latitude_ = x;
      }

      void SimSiteType::
      Latitude (::std::auto_ptr< Latitude_type > x)
      {
        this->Latitude_.set (x);
      }

      const SimSiteType::SiteReferenceElevation_Double_optional& SimSiteType::
      SiteReferenceElevation_Double () const
      {
        return this->SiteReferenceElevation_Double_;
      }

      SimSiteType::SiteReferenceElevation_Double_optional& SimSiteType::
      SiteReferenceElevation_Double ()
      {
        return this->SiteReferenceElevation_Double_;
      }

      void SimSiteType::
      SiteReferenceElevation_Double (const SiteReferenceElevation_Double_type& x)
      {
        this->SiteReferenceElevation_Double_.set (x);
      }

      void SimSiteType::
      SiteReferenceElevation_Double (const SiteReferenceElevation_Double_optional& x)
      {
        this->SiteReferenceElevation_Double_ = x;
      }

      const SimSiteType::WeatherLocationRegion_optional& SimSiteType::
      WeatherLocationRegion () const
      {
        return this->WeatherLocationRegion_;
      }

      SimSiteType::WeatherLocationRegion_optional& SimSiteType::
      WeatherLocationRegion ()
      {
        return this->WeatherLocationRegion_;
      }

      void SimSiteType::
      WeatherLocationRegion (const WeatherLocationRegion_type& x)
      {
        this->WeatherLocationRegion_.set (x);
      }

      void SimSiteType::
      WeatherLocationRegion (const WeatherLocationRegion_optional& x)
      {
        this->WeatherLocationRegion_ = x;
      }

      void SimSiteType::
      WeatherLocationRegion (::std::auto_ptr< WeatherLocationRegion_type > x)
      {
        this->WeatherLocationRegion_.set (x);
      }

      const SimSiteType::WeatherLocationCity_optional& SimSiteType::
      WeatherLocationCity () const
      {
        return this->WeatherLocationCity_;
      }

      SimSiteType::WeatherLocationCity_optional& SimSiteType::
      WeatherLocationCity ()
      {
        return this->WeatherLocationCity_;
      }

      void SimSiteType::
      WeatherLocationCity (const WeatherLocationCity_type& x)
      {
        this->WeatherLocationCity_.set (x);
      }

      void SimSiteType::
      WeatherLocationCity (const WeatherLocationCity_optional& x)
      {
        this->WeatherLocationCity_ = x;
      }

      void SimSiteType::
      WeatherLocationCity (::std::auto_ptr< WeatherLocationCity_type > x)
      {
        this->WeatherLocationCity_.set (x);
      }

      const SimSiteType::WeatherLocationID_optional& SimSiteType::
      WeatherLocationID () const
      {
        return this->WeatherLocationID_;
      }

      SimSiteType::WeatherLocationID_optional& SimSiteType::
      WeatherLocationID ()
      {
        return this->WeatherLocationID_;
      }

      void SimSiteType::
      WeatherLocationID (const WeatherLocationID_type& x)
      {
        this->WeatherLocationID_.set (x);
      }

      void SimSiteType::
      WeatherLocationID (const WeatherLocationID_optional& x)
      {
        this->WeatherLocationID_ = x;
      }

      void SimSiteType::
      WeatherLocationID (::std::auto_ptr< WeatherLocationID_type > x)
      {
        this->WeatherLocationID_.set (x);
      }

      const SimSiteType::WeatherLocationIDType_optional& SimSiteType::
      WeatherLocationIDType () const
      {
        return this->WeatherLocationIDType_;
      }

      SimSiteType::WeatherLocationIDType_optional& SimSiteType::
      WeatherLocationIDType ()
      {
        return this->WeatherLocationIDType_;
      }

      void SimSiteType::
      WeatherLocationIDType (const WeatherLocationIDType_type& x)
      {
        this->WeatherLocationIDType_.set (x);
      }

      void SimSiteType::
      WeatherLocationIDType (const WeatherLocationIDType_optional& x)
      {
        this->WeatherLocationIDType_ = x;
      }

      void SimSiteType::
      WeatherLocationIDType (::std::auto_ptr< WeatherLocationIDType_type > x)
      {
        this->WeatherLocationIDType_.set (x);
      }

      const SimSiteType::TimeZone_optional& SimSiteType::
      TimeZone () const
      {
        return this->TimeZone_;
      }

      SimSiteType::TimeZone_optional& SimSiteType::
      TimeZone ()
      {
        return this->TimeZone_;
      }

      void SimSiteType::
      TimeZone (const TimeZone_type& x)
      {
        this->TimeZone_.set (x);
      }

      void SimSiteType::
      TimeZone (const TimeZone_optional& x)
      {
        this->TimeZone_ = x;
      }

      const SimSiteType::LocationsTemplate_optional& SimSiteType::
      LocationsTemplate () const
      {
        return this->LocationsTemplate_;
      }

      SimSiteType::LocationsTemplate_optional& SimSiteType::
      LocationsTemplate ()
      {
        return this->LocationsTemplate_;
      }

      void SimSiteType::
      LocationsTemplate (const LocationsTemplate_type& x)
      {
        this->LocationsTemplate_.set (x);
      }

      void SimSiteType::
      LocationsTemplate (const LocationsTemplate_optional& x)
      {
        this->LocationsTemplate_ = x;
      }

      void SimSiteType::
      LocationsTemplate (::std::auto_ptr< LocationsTemplate_type > x)
      {
        this->LocationsTemplate_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimSiteType
      //

      SimSiteType::
      SimSiteType ()
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (),
        RepresentationMaps_ (this),
        Tag_ (this),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_Double_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this)
      {
      }

      SimSiteType::
      SimSiteType (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (RefId),
        RepresentationMaps_ (this),
        Tag_ (this),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_Double_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this)
      {
      }

      SimSiteType::
      SimSiteType (const SimSiteType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (x, f, c),
        RepresentationMaps_ (x.RepresentationMaps_, f, this),
        Tag_ (x.Tag_, f, this),
        Name_ (x.Name_, f, this),
        Longitude_ (x.Longitude_, f, this),
        Latitude_ (x.Latitude_, f, this),
        SiteReferenceElevation_Double_ (x.SiteReferenceElevation_Double_, f, this),
        WeatherLocationRegion_ (x.WeatherLocationRegion_, f, this),
        WeatherLocationCity_ (x.WeatherLocationCity_, f, this),
        WeatherLocationID_ (x.WeatherLocationID_, f, this),
        WeatherLocationIDType_ (x.WeatherLocationIDType_, f, this),
        TimeZone_ (x.TimeZone_, f, this),
        LocationsTemplate_ (x.LocationsTemplate_, f, this)
      {
      }

      SimSiteType::
      SimSiteType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimObjectTypeDefinition (e, f | ::xml_schema::flags::base, c),
        RepresentationMaps_ (this),
        Tag_ (this),
        Name_ (this),
        Longitude_ (this),
        Latitude_ (this),
        SiteReferenceElevation_Double_ (this),
        WeatherLocationRegion_ (this),
        WeatherLocationCity_ (this),
        WeatherLocationID_ (this),
        WeatherLocationIDType_ (this),
        TimeZone_ (this),
        LocationsTemplate_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimSiteType::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimObjectTypeDefinition::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // RepresentationMaps
          //
          if (n.name () == "RepresentationMaps" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< RepresentationMaps_type > r (
              RepresentationMaps_traits::create (i, f, this));

            if (!this->RepresentationMaps_)
            {
              this->RepresentationMaps_.set (r);
              continue;
            }
          }

          // Tag
          //
          if (n.name () == "Tag" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Tag_type > r (
              Tag_traits::create (i, f, this));

            if (!this->Tag_)
            {
              this->Tag_.set (r);
              continue;
            }
          }

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // Longitude
          //
          if (n.name () == "Longitude" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Longitude_type > r (
              Longitude_traits::create (i, f, this));

            if (!this->Longitude_)
            {
              this->Longitude_.set (r);
              continue;
            }
          }

          // Latitude
          //
          if (n.name () == "Latitude" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Latitude_type > r (
              Latitude_traits::create (i, f, this));

            if (!this->Latitude_)
            {
              this->Latitude_.set (r);
              continue;
            }
          }

          // SiteReferenceElevation_Double
          //
          if (n.name () == "SiteReferenceElevation_Double" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SiteReferenceElevation_Double_)
            {
              this->SiteReferenceElevation_Double_.set (SiteReferenceElevation_Double_traits::create (i, f, this));
              continue;
            }
          }

          // WeatherLocationRegion
          //
          if (n.name () == "WeatherLocationRegion" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationRegion_type > r (
              WeatherLocationRegion_traits::create (i, f, this));

            if (!this->WeatherLocationRegion_)
            {
              this->WeatherLocationRegion_.set (r);
              continue;
            }
          }

          // WeatherLocationCity
          //
          if (n.name () == "WeatherLocationCity" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationCity_type > r (
              WeatherLocationCity_traits::create (i, f, this));

            if (!this->WeatherLocationCity_)
            {
              this->WeatherLocationCity_.set (r);
              continue;
            }
          }

          // WeatherLocationID
          //
          if (n.name () == "WeatherLocationID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationID_type > r (
              WeatherLocationID_traits::create (i, f, this));

            if (!this->WeatherLocationID_)
            {
              this->WeatherLocationID_.set (r);
              continue;
            }
          }

          // WeatherLocationIDType
          //
          if (n.name () == "WeatherLocationIDType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< WeatherLocationIDType_type > r (
              WeatherLocationIDType_traits::create (i, f, this));

            if (!this->WeatherLocationIDType_)
            {
              this->WeatherLocationIDType_.set (r);
              continue;
            }
          }

          // TimeZone
          //
          if (n.name () == "TimeZone" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->TimeZone_)
            {
              this->TimeZone_.set (TimeZone_traits::create (i, f, this));
              continue;
            }
          }

          // LocationsTemplate
          //
          if (n.name () == "LocationsTemplate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< LocationsTemplate_type > r (
              LocationsTemplate_traits::create (i, f, this));

            if (!this->LocationsTemplate_)
            {
              this->LocationsTemplate_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimSiteType* SimSiteType::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimSiteType (*this, f, c);
      }

      SimSiteType& SimSiteType::
      operator= (const SimSiteType& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimObjectTypeDefinition& > (*this) = x;
          this->RepresentationMaps_ = x.RepresentationMaps_;
          this->Tag_ = x.Tag_;
          this->Name_ = x.Name_;
          this->Longitude_ = x.Longitude_;
          this->Latitude_ = x.Latitude_;
          this->SiteReferenceElevation_Double_ = x.SiteReferenceElevation_Double_;
          this->WeatherLocationRegion_ = x.WeatherLocationRegion_;
          this->WeatherLocationCity_ = x.WeatherLocationCity_;
          this->WeatherLocationID_ = x.WeatherLocationID_;
          this->WeatherLocationIDType_ = x.WeatherLocationIDType_;
          this->TimeZone_ = x.TimeZone_;
          this->LocationsTemplate_ = x.LocationsTemplate_;
        }

        return *this;
      }

      SimSiteType::
      ~SimSiteType ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

