// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SIM_FLOW_STORAGE_WATER_STORAGE_GRAY_WATER_HXX
#define SIM_FLOW_STORAGE_WATER_STORAGE_GRAY_WATER_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::no_type_info< char > no_type_info;
  typedef ::xsd::cxx::tree::not_derived< char > not_derived;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowStorage_WaterStorage_GrayWater;
    }
  }
}


#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "simflowstorage_waterstorage.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      class SimFlowStorage_WaterStorage_GrayWater: public ::schema::simxml::MepModel::SimFlowStorage_WaterStorage
      {
        public:
        // SimFlowSto_Name
        //
        typedef ::xml_schema::string SimFlowSto_Name_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_Name_type > SimFlowSto_Name_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_Name_type, char > SimFlowSto_Name_traits;

        const SimFlowSto_Name_optional&
        SimFlowSto_Name () const;

        SimFlowSto_Name_optional&
        SimFlowSto_Name ();

        void
        SimFlowSto_Name (const SimFlowSto_Name_type& x);

        void
        SimFlowSto_Name (const SimFlowSto_Name_optional& x);

        void
        SimFlowSto_Name (::std::auto_ptr< SimFlowSto_Name_type > p);

        // SimFlowSto_AmbTempdic
        //
        typedef ::xml_schema::string SimFlowSto_AmbTempdic_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempdic_type > SimFlowSto_AmbTempdic_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempdic_type, char > SimFlowSto_AmbTempdic_traits;

        const SimFlowSto_AmbTempdic_optional&
        SimFlowSto_AmbTempdic () const;

        SimFlowSto_AmbTempdic_optional&
        SimFlowSto_AmbTempdic ();

        void
        SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_type& x);

        void
        SimFlowSto_AmbTempdic (const SimFlowSto_AmbTempdic_optional& x);

        void
        SimFlowSto_AmbTempdic (::std::auto_ptr< SimFlowSto_AmbTempdic_type > p);

        // SimFlowSto_AmbTempSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_AmbTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_AmbTempSchedName_type > SimFlowSto_AmbTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_AmbTempSchedName_type, char > SimFlowSto_AmbTempSchedName_traits;

        const SimFlowSto_AmbTempSchedName_optional&
        SimFlowSto_AmbTempSchedName () const;

        SimFlowSto_AmbTempSchedName_optional&
        SimFlowSto_AmbTempSchedName ();

        void
        SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_type& x);

        void
        SimFlowSto_AmbTempSchedName (const SimFlowSto_AmbTempSchedName_optional& x);

        void
        SimFlowSto_AmbTempSchedName (::std::auto_ptr< SimFlowSto_AmbTempSchedName_type > p);

        // SimFlowSto_ZoneName
        //
        typedef ::xml_schema::idref SimFlowSto_ZoneName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_ZoneName_type > SimFlowSto_ZoneName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_ZoneName_type, char > SimFlowSto_ZoneName_traits;

        const SimFlowSto_ZoneName_optional&
        SimFlowSto_ZoneName () const;

        SimFlowSto_ZoneName_optional&
        SimFlowSto_ZoneName ();

        void
        SimFlowSto_ZoneName (const SimFlowSto_ZoneName_type& x);

        void
        SimFlowSto_ZoneName (const SimFlowSto_ZoneName_optional& x);

        void
        SimFlowSto_ZoneName (::std::auto_ptr< SimFlowSto_ZoneName_type > p);

        // SimFlowSto_WaterQualitySubcategory
        //
        typedef ::xml_schema::string SimFlowSto_WaterQualitySubcategory_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_WaterQualitySubcategory_type > SimFlowSto_WaterQualitySubcategory_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_WaterQualitySubcategory_type, char > SimFlowSto_WaterQualitySubcategory_traits;

        const SimFlowSto_WaterQualitySubcategory_optional&
        SimFlowSto_WaterQualitySubcategory () const;

        SimFlowSto_WaterQualitySubcategory_optional&
        SimFlowSto_WaterQualitySubcategory ();

        void
        SimFlowSto_WaterQualitySubcategory (const SimFlowSto_WaterQualitySubcategory_type& x);

        void
        SimFlowSto_WaterQualitySubcategory (const SimFlowSto_WaterQualitySubcategory_optional& x);

        void
        SimFlowSto_WaterQualitySubcategory (::std::auto_ptr< SimFlowSto_WaterQualitySubcategory_type > p);

        // SimFlowSto_MaxCap
        //
        typedef ::xml_schema::double_ SimFlowSto_MaxCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_MaxCap_type > SimFlowSto_MaxCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_MaxCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_MaxCap_traits;

        const SimFlowSto_MaxCap_optional&
        SimFlowSto_MaxCap () const;

        SimFlowSto_MaxCap_optional&
        SimFlowSto_MaxCap ();

        void
        SimFlowSto_MaxCap (const SimFlowSto_MaxCap_type& x);

        void
        SimFlowSto_MaxCap (const SimFlowSto_MaxCap_optional& x);

        // SimFlowSto_InitVol
        //
        typedef ::xml_schema::double_ SimFlowSto_InitVol_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_InitVol_type > SimFlowSto_InitVol_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_InitVol_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_InitVol_traits;

        const SimFlowSto_InitVol_optional&
        SimFlowSto_InitVol () const;

        SimFlowSto_InitVol_optional&
        SimFlowSto_InitVol ();

        void
        SimFlowSto_InitVol (const SimFlowSto_InitVol_type& x);

        void
        SimFlowSto_InitVol (const SimFlowSto_InitVol_optional& x);

        // SimFlowSto_DesignFlowRate
        //
        typedef ::xml_schema::double_ SimFlowSto_DesignFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_DesignFlowRate_type > SimFlowSto_DesignFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_DesignFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_DesignFlowRate_traits;

        const SimFlowSto_DesignFlowRate_optional&
        SimFlowSto_DesignFlowRate () const;

        SimFlowSto_DesignFlowRate_optional&
        SimFlowSto_DesignFlowRate ();

        void
        SimFlowSto_DesignFlowRate (const SimFlowSto_DesignFlowRate_type& x);

        void
        SimFlowSto_DesignFlowRate (const SimFlowSto_DesignFlowRate_optional& x);

        // SimFlowSto_DesignOutFlowRate
        //
        typedef ::xml_schema::double_ SimFlowSto_DesignOutFlowRate_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_DesignOutFlowRate_type > SimFlowSto_DesignOutFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_DesignOutFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_DesignOutFlowRate_traits;

        const SimFlowSto_DesignOutFlowRate_optional&
        SimFlowSto_DesignOutFlowRate () const;

        SimFlowSto_DesignOutFlowRate_optional&
        SimFlowSto_DesignOutFlowRate ();

        void
        SimFlowSto_DesignOutFlowRate (const SimFlowSto_DesignOutFlowRate_type& x);

        void
        SimFlowSto_DesignOutFlowRate (const SimFlowSto_DesignOutFlowRate_optional& x);

        // SimFlowSto_OverflowDestination
        //
        typedef ::xml_schema::idref SimFlowSto_OverflowDestination_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_OverflowDestination_type > SimFlowSto_OverflowDestination_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_OverflowDestination_type, char > SimFlowSto_OverflowDestination_traits;

        const SimFlowSto_OverflowDestination_optional&
        SimFlowSto_OverflowDestination () const;

        SimFlowSto_OverflowDestination_optional&
        SimFlowSto_OverflowDestination ();

        void
        SimFlowSto_OverflowDestination (const SimFlowSto_OverflowDestination_type& x);

        void
        SimFlowSto_OverflowDestination (const SimFlowSto_OverflowDestination_optional& x);

        void
        SimFlowSto_OverflowDestination (::std::auto_ptr< SimFlowSto_OverflowDestination_type > p);

        // SimFlowSto_TypeSupplyCntlledByFloatValve
        //
        typedef ::xml_schema::string SimFlowSto_TypeSupplyCntlledByFloatValve_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TypeSupplyCntlledByFloatValve_type > SimFlowSto_TypeSupplyCntlledByFloatValve_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TypeSupplyCntlledByFloatValve_type, char > SimFlowSto_TypeSupplyCntlledByFloatValve_traits;

        const SimFlowSto_TypeSupplyCntlledByFloatValve_optional&
        SimFlowSto_TypeSupplyCntlledByFloatValve () const;

        SimFlowSto_TypeSupplyCntlledByFloatValve_optional&
        SimFlowSto_TypeSupplyCntlledByFloatValve ();

        void
        SimFlowSto_TypeSupplyCntlledByFloatValve (const SimFlowSto_TypeSupplyCntlledByFloatValve_type& x);

        void
        SimFlowSto_TypeSupplyCntlledByFloatValve (const SimFlowSto_TypeSupplyCntlledByFloatValve_optional& x);

        void
        SimFlowSto_TypeSupplyCntlledByFloatValve (::std::auto_ptr< SimFlowSto_TypeSupplyCntlledByFloatValve_type > p);

        // SimFlowSto_FloatValveOnCap
        //
        typedef ::xml_schema::double_ SimFlowSto_FloatValveOnCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_FloatValveOnCap_type > SimFlowSto_FloatValveOnCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_FloatValveOnCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_FloatValveOnCap_traits;

        const SimFlowSto_FloatValveOnCap_optional&
        SimFlowSto_FloatValveOnCap () const;

        SimFlowSto_FloatValveOnCap_optional&
        SimFlowSto_FloatValveOnCap ();

        void
        SimFlowSto_FloatValveOnCap (const SimFlowSto_FloatValveOnCap_type& x);

        void
        SimFlowSto_FloatValveOnCap (const SimFlowSto_FloatValveOnCap_optional& x);

        // SimFlowSto_FloatValvefCap
        //
        typedef ::xml_schema::double_ SimFlowSto_FloatValvefCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_FloatValvefCap_type > SimFlowSto_FloatValvefCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_FloatValvefCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_FloatValvefCap_traits;

        const SimFlowSto_FloatValvefCap_optional&
        SimFlowSto_FloatValvefCap () const;

        SimFlowSto_FloatValvefCap_optional&
        SimFlowSto_FloatValvefCap ();

        void
        SimFlowSto_FloatValvefCap (const SimFlowSto_FloatValvefCap_type& x);

        void
        SimFlowSto_FloatValvefCap (const SimFlowSto_FloatValvefCap_optional& x);

        // SimFlowSto_BackupMainsCap
        //
        typedef ::xml_schema::double_ SimFlowSto_BackupMainsCap_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_BackupMainsCap_type > SimFlowSto_BackupMainsCap_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_BackupMainsCap_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_BackupMainsCap_traits;

        const SimFlowSto_BackupMainsCap_optional&
        SimFlowSto_BackupMainsCap () const;

        SimFlowSto_BackupMainsCap_optional&
        SimFlowSto_BackupMainsCap ();

        void
        SimFlowSto_BackupMainsCap (const SimFlowSto_BackupMainsCap_type& x);

        void
        SimFlowSto_BackupMainsCap (const SimFlowSto_BackupMainsCap_optional& x);

        // SimFlowSto_OtherTankName
        //
        typedef ::xml_schema::idref SimFlowSto_OtherTankName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_OtherTankName_type > SimFlowSto_OtherTankName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_OtherTankName_type, char > SimFlowSto_OtherTankName_traits;

        const SimFlowSto_OtherTankName_optional&
        SimFlowSto_OtherTankName () const;

        SimFlowSto_OtherTankName_optional&
        SimFlowSto_OtherTankName ();

        void
        SimFlowSto_OtherTankName (const SimFlowSto_OtherTankName_type& x);

        void
        SimFlowSto_OtherTankName (const SimFlowSto_OtherTankName_optional& x);

        void
        SimFlowSto_OtherTankName (::std::auto_ptr< SimFlowSto_OtherTankName_type > p);

        // SimFlowSto_WaterThermalMode
        //
        typedef ::xml_schema::string SimFlowSto_WaterThermalMode_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_WaterThermalMode_type > SimFlowSto_WaterThermalMode_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_WaterThermalMode_type, char > SimFlowSto_WaterThermalMode_traits;

        const SimFlowSto_WaterThermalMode_optional&
        SimFlowSto_WaterThermalMode () const;

        SimFlowSto_WaterThermalMode_optional&
        SimFlowSto_WaterThermalMode ();

        void
        SimFlowSto_WaterThermalMode (const SimFlowSto_WaterThermalMode_type& x);

        void
        SimFlowSto_WaterThermalMode (const SimFlowSto_WaterThermalMode_optional& x);

        void
        SimFlowSto_WaterThermalMode (::std::auto_ptr< SimFlowSto_WaterThermalMode_type > p);

        // SimFlowSto_WaterTempSchedName
        //
        typedef ::xml_schema::idref SimFlowSto_WaterTempSchedName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_WaterTempSchedName_type > SimFlowSto_WaterTempSchedName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_WaterTempSchedName_type, char > SimFlowSto_WaterTempSchedName_traits;

        const SimFlowSto_WaterTempSchedName_optional&
        SimFlowSto_WaterTempSchedName () const;

        SimFlowSto_WaterTempSchedName_optional&
        SimFlowSto_WaterTempSchedName ();

        void
        SimFlowSto_WaterTempSchedName (const SimFlowSto_WaterTempSchedName_type& x);

        void
        SimFlowSto_WaterTempSchedName (const SimFlowSto_WaterTempSchedName_optional& x);

        void
        SimFlowSto_WaterTempSchedName (::std::auto_ptr< SimFlowSto_WaterTempSchedName_type > p);

        // SimFlowSto_TankSurfArea
        //
        typedef ::xml_schema::double_ SimFlowSto_TankSurfArea_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TankSurfArea_type > SimFlowSto_TankSurfArea_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TankSurfArea_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_TankSurfArea_traits;

        const SimFlowSto_TankSurfArea_optional&
        SimFlowSto_TankSurfArea () const;

        SimFlowSto_TankSurfArea_optional&
        SimFlowSto_TankSurfArea ();

        void
        SimFlowSto_TankSurfArea (const SimFlowSto_TankSurfArea_type& x);

        void
        SimFlowSto_TankSurfArea (const SimFlowSto_TankSurfArea_optional& x);

        // SimFlowSto_TankUVal
        //
        typedef ::xml_schema::double_ SimFlowSto_TankUVal_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TankUVal_type > SimFlowSto_TankUVal_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TankUVal_type, char, ::xsd::cxx::tree::schema_type::double_ > SimFlowSto_TankUVal_traits;

        const SimFlowSto_TankUVal_optional&
        SimFlowSto_TankUVal () const;

        SimFlowSto_TankUVal_optional&
        SimFlowSto_TankUVal ();

        void
        SimFlowSto_TankUVal (const SimFlowSto_TankUVal_type& x);

        void
        SimFlowSto_TankUVal (const SimFlowSto_TankUVal_optional& x);

        // SimFlowSto_TankOutsideSurfMatlName
        //
        typedef ::xml_schema::idref SimFlowSto_TankOutsideSurfMatlName_type;
        typedef ::xsd::cxx::tree::optional< SimFlowSto_TankOutsideSurfMatlName_type > SimFlowSto_TankOutsideSurfMatlName_optional;
        typedef ::xsd::cxx::tree::traits< SimFlowSto_TankOutsideSurfMatlName_type, char > SimFlowSto_TankOutsideSurfMatlName_traits;

        const SimFlowSto_TankOutsideSurfMatlName_optional&
        SimFlowSto_TankOutsideSurfMatlName () const;

        SimFlowSto_TankOutsideSurfMatlName_optional&
        SimFlowSto_TankOutsideSurfMatlName ();

        void
        SimFlowSto_TankOutsideSurfMatlName (const SimFlowSto_TankOutsideSurfMatlName_type& x);

        void
        SimFlowSto_TankOutsideSurfMatlName (const SimFlowSto_TankOutsideSurfMatlName_optional& x);

        void
        SimFlowSto_TankOutsideSurfMatlName (::std::auto_ptr< SimFlowSto_TankOutsideSurfMatlName_type > p);

        // WaterUse_Well_Name
        //
        typedef ::xml_schema::string WaterUse_Well_Name_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_Name_type > WaterUse_Well_Name_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_Name_type, char > WaterUse_Well_Name_traits;

        const WaterUse_Well_Name_optional&
        WaterUse_Well_Name () const;

        WaterUse_Well_Name_optional&
        WaterUse_Well_Name ();

        void
        WaterUse_Well_Name (const WaterUse_Well_Name_type& x);

        void
        WaterUse_Well_Name (const WaterUse_Well_Name_optional& x);

        void
        WaterUse_Well_Name (::std::auto_ptr< WaterUse_Well_Name_type > p);

        // WaterUse_Well_StoTankName
        //
        typedef ::xml_schema::idref WaterUse_Well_StoTankName_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_StoTankName_type > WaterUse_Well_StoTankName_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_StoTankName_type, char > WaterUse_Well_StoTankName_traits;

        const WaterUse_Well_StoTankName_optional&
        WaterUse_Well_StoTankName () const;

        WaterUse_Well_StoTankName_optional&
        WaterUse_Well_StoTankName ();

        void
        WaterUse_Well_StoTankName (const WaterUse_Well_StoTankName_type& x);

        void
        WaterUse_Well_StoTankName (const WaterUse_Well_StoTankName_optional& x);

        void
        WaterUse_Well_StoTankName (::std::auto_ptr< WaterUse_Well_StoTankName_type > p);

        // WaterUse_Well_PumpDepth
        //
        typedef ::xml_schema::double_ WaterUse_Well_PumpDepth_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_PumpDepth_type > WaterUse_Well_PumpDepth_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_PumpDepth_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_PumpDepth_traits;

        const WaterUse_Well_PumpDepth_optional&
        WaterUse_Well_PumpDepth () const;

        WaterUse_Well_PumpDepth_optional&
        WaterUse_Well_PumpDepth ();

        void
        WaterUse_Well_PumpDepth (const WaterUse_Well_PumpDepth_type& x);

        void
        WaterUse_Well_PumpDepth (const WaterUse_Well_PumpDepth_optional& x);

        // WaterUse_Well_PumpRatedFlowRate
        //
        typedef ::xml_schema::double_ WaterUse_Well_PumpRatedFlowRate_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_PumpRatedFlowRate_type > WaterUse_Well_PumpRatedFlowRate_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_PumpRatedFlowRate_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_PumpRatedFlowRate_traits;

        const WaterUse_Well_PumpRatedFlowRate_optional&
        WaterUse_Well_PumpRatedFlowRate () const;

        WaterUse_Well_PumpRatedFlowRate_optional&
        WaterUse_Well_PumpRatedFlowRate ();

        void
        WaterUse_Well_PumpRatedFlowRate (const WaterUse_Well_PumpRatedFlowRate_type& x);

        void
        WaterUse_Well_PumpRatedFlowRate (const WaterUse_Well_PumpRatedFlowRate_optional& x);

        // WaterUse_Well_PumpRatedHead
        //
        typedef ::xml_schema::double_ WaterUse_Well_PumpRatedHead_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_PumpRatedHead_type > WaterUse_Well_PumpRatedHead_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_PumpRatedHead_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_PumpRatedHead_traits;

        const WaterUse_Well_PumpRatedHead_optional&
        WaterUse_Well_PumpRatedHead () const;

        WaterUse_Well_PumpRatedHead_optional&
        WaterUse_Well_PumpRatedHead ();

        void
        WaterUse_Well_PumpRatedHead (const WaterUse_Well_PumpRatedHead_type& x);

        void
        WaterUse_Well_PumpRatedHead (const WaterUse_Well_PumpRatedHead_optional& x);

        // WaterUse_Well_PumpRatedPowerConsump
        //
        typedef ::xml_schema::double_ WaterUse_Well_PumpRatedPowerConsump_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_PumpRatedPowerConsump_type > WaterUse_Well_PumpRatedPowerConsump_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_PumpRatedPowerConsump_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_PumpRatedPowerConsump_traits;

        const WaterUse_Well_PumpRatedPowerConsump_optional&
        WaterUse_Well_PumpRatedPowerConsump () const;

        WaterUse_Well_PumpRatedPowerConsump_optional&
        WaterUse_Well_PumpRatedPowerConsump ();

        void
        WaterUse_Well_PumpRatedPowerConsump (const WaterUse_Well_PumpRatedPowerConsump_type& x);

        void
        WaterUse_Well_PumpRatedPowerConsump (const WaterUse_Well_PumpRatedPowerConsump_optional& x);

        // WaterUse_Well_PumpEff
        //
        typedef ::xml_schema::double_ WaterUse_Well_PumpEff_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_PumpEff_type > WaterUse_Well_PumpEff_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_PumpEff_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_PumpEff_traits;

        const WaterUse_Well_PumpEff_optional&
        WaterUse_Well_PumpEff () const;

        WaterUse_Well_PumpEff_optional&
        WaterUse_Well_PumpEff ();

        void
        WaterUse_Well_PumpEff (const WaterUse_Well_PumpEff_type& x);

        void
        WaterUse_Well_PumpEff (const WaterUse_Well_PumpEff_optional& x);

        // WaterUse_Well_WellRecoveryRate
        //
        typedef ::xml_schema::double_ WaterUse_Well_WellRecoveryRate_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_WellRecoveryRate_type > WaterUse_Well_WellRecoveryRate_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_WellRecoveryRate_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_WellRecoveryRate_traits;

        const WaterUse_Well_WellRecoveryRate_optional&
        WaterUse_Well_WellRecoveryRate () const;

        WaterUse_Well_WellRecoveryRate_optional&
        WaterUse_Well_WellRecoveryRate ();

        void
        WaterUse_Well_WellRecoveryRate (const WaterUse_Well_WellRecoveryRate_type& x);

        void
        WaterUse_Well_WellRecoveryRate (const WaterUse_Well_WellRecoveryRate_optional& x);

        // WaterUse_Well_NomWellStoVolume
        //
        typedef ::xml_schema::double_ WaterUse_Well_NomWellStoVolume_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_NomWellStoVolume_type > WaterUse_Well_NomWellStoVolume_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_NomWellStoVolume_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_NomWellStoVolume_traits;

        const WaterUse_Well_NomWellStoVolume_optional&
        WaterUse_Well_NomWellStoVolume () const;

        WaterUse_Well_NomWellStoVolume_optional&
        WaterUse_Well_NomWellStoVolume ();

        void
        WaterUse_Well_NomWellStoVolume (const WaterUse_Well_NomWellStoVolume_type& x);

        void
        WaterUse_Well_NomWellStoVolume (const WaterUse_Well_NomWellStoVolume_optional& x);

        // WaterUse_Well_WaterTableDepthMode
        //
        typedef ::xml_schema::string WaterUse_Well_WaterTableDepthMode_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_WaterTableDepthMode_type > WaterUse_Well_WaterTableDepthMode_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_WaterTableDepthMode_type, char > WaterUse_Well_WaterTableDepthMode_traits;

        const WaterUse_Well_WaterTableDepthMode_optional&
        WaterUse_Well_WaterTableDepthMode () const;

        WaterUse_Well_WaterTableDepthMode_optional&
        WaterUse_Well_WaterTableDepthMode ();

        void
        WaterUse_Well_WaterTableDepthMode (const WaterUse_Well_WaterTableDepthMode_type& x);

        void
        WaterUse_Well_WaterTableDepthMode (const WaterUse_Well_WaterTableDepthMode_optional& x);

        void
        WaterUse_Well_WaterTableDepthMode (::std::auto_ptr< WaterUse_Well_WaterTableDepthMode_type > p);

        // WaterUse_Well_WaterTableDepth
        //
        typedef ::xml_schema::double_ WaterUse_Well_WaterTableDepth_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_WaterTableDepth_type > WaterUse_Well_WaterTableDepth_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_WaterTableDepth_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_Well_WaterTableDepth_traits;

        const WaterUse_Well_WaterTableDepth_optional&
        WaterUse_Well_WaterTableDepth () const;

        WaterUse_Well_WaterTableDepth_optional&
        WaterUse_Well_WaterTableDepth ();

        void
        WaterUse_Well_WaterTableDepth (const WaterUse_Well_WaterTableDepth_type& x);

        void
        WaterUse_Well_WaterTableDepth (const WaterUse_Well_WaterTableDepth_optional& x);

        // WaterUse_Well_WaterTableDepthSchedName
        //
        typedef ::xml_schema::idref WaterUse_Well_WaterTableDepthSchedName_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_Well_WaterTableDepthSchedName_type > WaterUse_Well_WaterTableDepthSchedName_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_Well_WaterTableDepthSchedName_type, char > WaterUse_Well_WaterTableDepthSchedName_traits;

        const WaterUse_Well_WaterTableDepthSchedName_optional&
        WaterUse_Well_WaterTableDepthSchedName () const;

        WaterUse_Well_WaterTableDepthSchedName_optional&
        WaterUse_Well_WaterTableDepthSchedName ();

        void
        WaterUse_Well_WaterTableDepthSchedName (const WaterUse_Well_WaterTableDepthSchedName_type& x);

        void
        WaterUse_Well_WaterTableDepthSchedName (const WaterUse_Well_WaterTableDepthSchedName_optional& x);

        void
        WaterUse_Well_WaterTableDepthSchedName (::std::auto_ptr< WaterUse_Well_WaterTableDepthSchedName_type > p);

        // WaterUse_RainColl_Name
        //
        typedef ::xml_schema::string WaterUse_RainColl_Name_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_Name_type > WaterUse_RainColl_Name_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_Name_type, char > WaterUse_RainColl_Name_traits;

        const WaterUse_RainColl_Name_optional&
        WaterUse_RainColl_Name () const;

        WaterUse_RainColl_Name_optional&
        WaterUse_RainColl_Name ();

        void
        WaterUse_RainColl_Name (const WaterUse_RainColl_Name_type& x);

        void
        WaterUse_RainColl_Name (const WaterUse_RainColl_Name_optional& x);

        void
        WaterUse_RainColl_Name (::std::auto_ptr< WaterUse_RainColl_Name_type > p);

        // WaterUse_RainColl_StoTankName
        //
        typedef ::xml_schema::idref WaterUse_RainColl_StoTankName_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_StoTankName_type > WaterUse_RainColl_StoTankName_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_StoTankName_type, char > WaterUse_RainColl_StoTankName_traits;

        const WaterUse_RainColl_StoTankName_optional&
        WaterUse_RainColl_StoTankName () const;

        WaterUse_RainColl_StoTankName_optional&
        WaterUse_RainColl_StoTankName ();

        void
        WaterUse_RainColl_StoTankName (const WaterUse_RainColl_StoTankName_type& x);

        void
        WaterUse_RainColl_StoTankName (const WaterUse_RainColl_StoTankName_optional& x);

        void
        WaterUse_RainColl_StoTankName (::std::auto_ptr< WaterUse_RainColl_StoTankName_type > p);

        // WaterUse_RainColl_LossFactorMode
        //
        typedef ::xml_schema::string WaterUse_RainColl_LossFactorMode_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_LossFactorMode_type > WaterUse_RainColl_LossFactorMode_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_LossFactorMode_type, char > WaterUse_RainColl_LossFactorMode_traits;

        const WaterUse_RainColl_LossFactorMode_optional&
        WaterUse_RainColl_LossFactorMode () const;

        WaterUse_RainColl_LossFactorMode_optional&
        WaterUse_RainColl_LossFactorMode ();

        void
        WaterUse_RainColl_LossFactorMode (const WaterUse_RainColl_LossFactorMode_type& x);

        void
        WaterUse_RainColl_LossFactorMode (const WaterUse_RainColl_LossFactorMode_optional& x);

        void
        WaterUse_RainColl_LossFactorMode (::std::auto_ptr< WaterUse_RainColl_LossFactorMode_type > p);

        // WaterUse_RainColl_CollectionLossFactor
        //
        typedef ::xml_schema::double_ WaterUse_RainColl_CollectionLossFactor_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_CollectionLossFactor_type > WaterUse_RainColl_CollectionLossFactor_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_CollectionLossFactor_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_RainColl_CollectionLossFactor_traits;

        const WaterUse_RainColl_CollectionLossFactor_optional&
        WaterUse_RainColl_CollectionLossFactor () const;

        WaterUse_RainColl_CollectionLossFactor_optional&
        WaterUse_RainColl_CollectionLossFactor ();

        void
        WaterUse_RainColl_CollectionLossFactor (const WaterUse_RainColl_CollectionLossFactor_type& x);

        void
        WaterUse_RainColl_CollectionLossFactor (const WaterUse_RainColl_CollectionLossFactor_optional& x);

        // WaterUse_RainColl_CollectionLossFactorSchedName
        //
        typedef ::xml_schema::idref WaterUse_RainColl_CollectionLossFactorSchedName_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_CollectionLossFactorSchedName_type > WaterUse_RainColl_CollectionLossFactorSchedName_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_CollectionLossFactorSchedName_type, char > WaterUse_RainColl_CollectionLossFactorSchedName_traits;

        const WaterUse_RainColl_CollectionLossFactorSchedName_optional&
        WaterUse_RainColl_CollectionLossFactorSchedName () const;

        WaterUse_RainColl_CollectionLossFactorSchedName_optional&
        WaterUse_RainColl_CollectionLossFactorSchedName ();

        void
        WaterUse_RainColl_CollectionLossFactorSchedName (const WaterUse_RainColl_CollectionLossFactorSchedName_type& x);

        void
        WaterUse_RainColl_CollectionLossFactorSchedName (const WaterUse_RainColl_CollectionLossFactorSchedName_optional& x);

        void
        WaterUse_RainColl_CollectionLossFactorSchedName (::std::auto_ptr< WaterUse_RainColl_CollectionLossFactorSchedName_type > p);

        // WaterUse_RainColl_MaxCollectionRate
        //
        typedef ::xml_schema::double_ WaterUse_RainColl_MaxCollectionRate_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_MaxCollectionRate_type > WaterUse_RainColl_MaxCollectionRate_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_MaxCollectionRate_type, char, ::xsd::cxx::tree::schema_type::double_ > WaterUse_RainColl_MaxCollectionRate_traits;

        const WaterUse_RainColl_MaxCollectionRate_optional&
        WaterUse_RainColl_MaxCollectionRate () const;

        WaterUse_RainColl_MaxCollectionRate_optional&
        WaterUse_RainColl_MaxCollectionRate ();

        void
        WaterUse_RainColl_MaxCollectionRate (const WaterUse_RainColl_MaxCollectionRate_type& x);

        void
        WaterUse_RainColl_MaxCollectionRate (const WaterUse_RainColl_MaxCollectionRate_optional& x);

        // WaterUse_RainColl_CollectionSurfName_1_10
        //
        typedef ::xml_schema::idrefs WaterUse_RainColl_CollectionSurfName_1_10_type;
        typedef ::xsd::cxx::tree::optional< WaterUse_RainColl_CollectionSurfName_1_10_type > WaterUse_RainColl_CollectionSurfName_1_10_optional;
        typedef ::xsd::cxx::tree::traits< WaterUse_RainColl_CollectionSurfName_1_10_type, char > WaterUse_RainColl_CollectionSurfName_1_10_traits;

        const WaterUse_RainColl_CollectionSurfName_1_10_optional&
        WaterUse_RainColl_CollectionSurfName_1_10 () const;

        WaterUse_RainColl_CollectionSurfName_1_10_optional&
        WaterUse_RainColl_CollectionSurfName_1_10 ();

        void
        WaterUse_RainColl_CollectionSurfName_1_10 (const WaterUse_RainColl_CollectionSurfName_1_10_type& x);

        void
        WaterUse_RainColl_CollectionSurfName_1_10 (const WaterUse_RainColl_CollectionSurfName_1_10_optional& x);

        void
        WaterUse_RainColl_CollectionSurfName_1_10 (::std::auto_ptr< WaterUse_RainColl_CollectionSurfName_1_10_type > p);

        // Constructors.
        //
        SimFlowStorage_WaterStorage_GrayWater ();

        SimFlowStorage_WaterStorage_GrayWater (const RefId_type&);

        SimFlowStorage_WaterStorage_GrayWater (const ::xercesc::DOMElement& e,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        SimFlowStorage_WaterStorage_GrayWater (const SimFlowStorage_WaterStorage_GrayWater& x,
                                               ::xml_schema::flags f = 0,
                                               ::xml_schema::container* c = 0);

        virtual SimFlowStorage_WaterStorage_GrayWater*
        _clone (::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0) const;

        SimFlowStorage_WaterStorage_GrayWater&
        operator= (const SimFlowStorage_WaterStorage_GrayWater& x);

        virtual 
        ~SimFlowStorage_WaterStorage_GrayWater ();

        // Implementation.
        //
        protected:
        void
        parse (::xsd::cxx::xml::dom::parser< char >&,
               ::xml_schema::flags);

        protected:
        SimFlowSto_Name_optional SimFlowSto_Name_;
        SimFlowSto_AmbTempdic_optional SimFlowSto_AmbTempdic_;
        SimFlowSto_AmbTempSchedName_optional SimFlowSto_AmbTempSchedName_;
        SimFlowSto_ZoneName_optional SimFlowSto_ZoneName_;
        SimFlowSto_WaterQualitySubcategory_optional SimFlowSto_WaterQualitySubcategory_;
        SimFlowSto_MaxCap_optional SimFlowSto_MaxCap_;
        SimFlowSto_InitVol_optional SimFlowSto_InitVol_;
        SimFlowSto_DesignFlowRate_optional SimFlowSto_DesignFlowRate_;
        SimFlowSto_DesignOutFlowRate_optional SimFlowSto_DesignOutFlowRate_;
        SimFlowSto_OverflowDestination_optional SimFlowSto_OverflowDestination_;
        SimFlowSto_TypeSupplyCntlledByFloatValve_optional SimFlowSto_TypeSupplyCntlledByFloatValve_;
        SimFlowSto_FloatValveOnCap_optional SimFlowSto_FloatValveOnCap_;
        SimFlowSto_FloatValvefCap_optional SimFlowSto_FloatValvefCap_;
        SimFlowSto_BackupMainsCap_optional SimFlowSto_BackupMainsCap_;
        SimFlowSto_OtherTankName_optional SimFlowSto_OtherTankName_;
        SimFlowSto_WaterThermalMode_optional SimFlowSto_WaterThermalMode_;
        SimFlowSto_WaterTempSchedName_optional SimFlowSto_WaterTempSchedName_;
        SimFlowSto_TankSurfArea_optional SimFlowSto_TankSurfArea_;
        SimFlowSto_TankUVal_optional SimFlowSto_TankUVal_;
        SimFlowSto_TankOutsideSurfMatlName_optional SimFlowSto_TankOutsideSurfMatlName_;
        WaterUse_Well_Name_optional WaterUse_Well_Name_;
        WaterUse_Well_StoTankName_optional WaterUse_Well_StoTankName_;
        WaterUse_Well_PumpDepth_optional WaterUse_Well_PumpDepth_;
        WaterUse_Well_PumpRatedFlowRate_optional WaterUse_Well_PumpRatedFlowRate_;
        WaterUse_Well_PumpRatedHead_optional WaterUse_Well_PumpRatedHead_;
        WaterUse_Well_PumpRatedPowerConsump_optional WaterUse_Well_PumpRatedPowerConsump_;
        WaterUse_Well_PumpEff_optional WaterUse_Well_PumpEff_;
        WaterUse_Well_WellRecoveryRate_optional WaterUse_Well_WellRecoveryRate_;
        WaterUse_Well_NomWellStoVolume_optional WaterUse_Well_NomWellStoVolume_;
        WaterUse_Well_WaterTableDepthMode_optional WaterUse_Well_WaterTableDepthMode_;
        WaterUse_Well_WaterTableDepth_optional WaterUse_Well_WaterTableDepth_;
        WaterUse_Well_WaterTableDepthSchedName_optional WaterUse_Well_WaterTableDepthSchedName_;
        WaterUse_RainColl_Name_optional WaterUse_RainColl_Name_;
        WaterUse_RainColl_StoTankName_optional WaterUse_RainColl_StoTankName_;
        WaterUse_RainColl_LossFactorMode_optional WaterUse_RainColl_LossFactorMode_;
        WaterUse_RainColl_CollectionLossFactor_optional WaterUse_RainColl_CollectionLossFactor_;
        WaterUse_RainColl_CollectionLossFactorSchedName_optional WaterUse_RainColl_CollectionLossFactorSchedName_;
        WaterUse_RainColl_MaxCollectionRate_optional WaterUse_RainColl_MaxCollectionRate_;
        WaterUse_RainColl_CollectionSurfName_1_10_optional WaterUse_RainColl_CollectionSurfName_1_10_;
      };
    }
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SIM_FLOW_STORAGE_WATER_STORAGE_GRAY_WATER_HXX
