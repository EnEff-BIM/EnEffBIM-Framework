// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating
      // 

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_Name_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_Name () const
      {
        return this->SimFlowPlant_Name_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_Name_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_Name ()
      {
        return this->SimFlowPlant_Name_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_Name (const SimFlowPlant_Name_type& x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_Name (const SimFlowPlant_Name_optional& x)
      {
        this->SimFlowPlant_Name_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_Name (::std::auto_ptr< SimFlowPlant_Name_type > x)
      {
        this->SimFlowPlant_Name_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_SrcSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideInletNodeName () const
      {
        return this->SimFlowPlant_SrcSideInletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_SrcSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideInletNodeName ()
      {
        return this->SimFlowPlant_SrcSideInletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideInletNodeName (const SimFlowPlant_SrcSideInletNodeName_type& x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideInletNodeName (const SimFlowPlant_SrcSideInletNodeName_optional& x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideInletNodeName (::std::auto_ptr< SimFlowPlant_SrcSideInletNodeName_type > x)
      {
        this->SimFlowPlant_SrcSideInletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_SrcSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideOutletNodeName () const
      {
        return this->SimFlowPlant_SrcSideOutletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_SrcSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideOutletNodeName ()
      {
        return this->SimFlowPlant_SrcSideOutletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideOutletNodeName (const SimFlowPlant_SrcSideOutletNodeName_type& x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideOutletNodeName (const SimFlowPlant_SrcSideOutletNodeName_optional& x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_SrcSideOutletNodeName (::std::auto_ptr< SimFlowPlant_SrcSideOutletNodeName_type > x)
      {
        this->SimFlowPlant_SrcSideOutletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_LoadSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideInletNodeName () const
      {
        return this->SimFlowPlant_LoadSideInletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_LoadSideInletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideInletNodeName ()
      {
        return this->SimFlowPlant_LoadSideInletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideInletNodeName (const SimFlowPlant_LoadSideInletNodeName_type& x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideInletNodeName (const SimFlowPlant_LoadSideInletNodeName_optional& x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideInletNodeName (::std::auto_ptr< SimFlowPlant_LoadSideInletNodeName_type > x)
      {
        this->SimFlowPlant_LoadSideInletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_LoadSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideOutletNodeName () const
      {
        return this->SimFlowPlant_LoadSideOutletNodeName_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_LoadSideOutletNodeName_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideOutletNodeName ()
      {
        return this->SimFlowPlant_LoadSideOutletNodeName_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideOutletNodeName (const SimFlowPlant_LoadSideOutletNodeName_type& x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideOutletNodeName (const SimFlowPlant_LoadSideOutletNodeName_optional& x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_LoadSideOutletNodeName (::std::auto_ptr< SimFlowPlant_LoadSideOutletNodeName_type > x)
      {
        this->SimFlowPlant_LoadSideOutletNodeName_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedLoadSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedLoadSideFlowRate () const
      {
        return this->SimFlowPlant_RatedLoadSideFlowRate_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedLoadSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedLoadSideFlowRate ()
      {
        return this->SimFlowPlant_RatedLoadSideFlowRate_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedLoadSideFlowRate (const SimFlowPlant_RatedLoadSideFlowRate_type& x)
      {
        this->SimFlowPlant_RatedLoadSideFlowRate_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedLoadSideFlowRate (const SimFlowPlant_RatedLoadSideFlowRate_optional& x)
      {
        this->SimFlowPlant_RatedLoadSideFlowRate_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedSrcSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedSrcSideFlowRate () const
      {
        return this->SimFlowPlant_RatedSrcSideFlowRate_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedSrcSideFlowRate_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedSrcSideFlowRate ()
      {
        return this->SimFlowPlant_RatedSrcSideFlowRate_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedSrcSideFlowRate (const SimFlowPlant_RatedSrcSideFlowRate_type& x)
      {
        this->SimFlowPlant_RatedSrcSideFlowRate_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedSrcSideFlowRate (const SimFlowPlant_RatedSrcSideFlowRate_optional& x)
      {
        this->SimFlowPlant_RatedSrcSideFlowRate_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedHeatingCap_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingCap () const
      {
        return this->SimFlowPlant_RatedHeatingCap_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedHeatingCap_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingCap ()
      {
        return this->SimFlowPlant_RatedHeatingCap_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingCap (const SimFlowPlant_RatedHeatingCap_type& x)
      {
        this->SimFlowPlant_RatedHeatingCap_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingCap (const SimFlowPlant_RatedHeatingCap_optional& x)
      {
        this->SimFlowPlant_RatedHeatingCap_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedHeatingPwrConsump_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingPwrConsump () const
      {
        return this->SimFlowPlant_RatedHeatingPwrConsump_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_RatedHeatingPwrConsump_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingPwrConsump ()
      {
        return this->SimFlowPlant_RatedHeatingPwrConsump_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingPwrConsump (const SimFlowPlant_RatedHeatingPwrConsump_type& x)
      {
        this->SimFlowPlant_RatedHeatingPwrConsump_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_RatedHeatingPwrConsump (const SimFlowPlant_RatedHeatingPwrConsump_optional& x)
      {
        this->SimFlowPlant_RatedHeatingPwrConsump_ = x;
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_HeatingCapCoef_1_5_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCapCoef_1_5 () const
      {
        return this->SimFlowPlant_HeatingCapCoef_1_5_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_HeatingCapCoef_1_5_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCapCoef_1_5 ()
      {
        return this->SimFlowPlant_HeatingCapCoef_1_5_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCapCoef_1_5 (const SimFlowPlant_HeatingCapCoef_1_5_type& x)
      {
        this->SimFlowPlant_HeatingCapCoef_1_5_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCapCoef_1_5 (const SimFlowPlant_HeatingCapCoef_1_5_optional& x)
      {
        this->SimFlowPlant_HeatingCapCoef_1_5_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCapCoef_1_5 (::std::auto_ptr< SimFlowPlant_HeatingCapCoef_1_5_type > x)
      {
        this->SimFlowPlant_HeatingCapCoef_1_5_.set (x);
      }

      const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_HeatingCompPwrCoef_1_5_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCompPwrCoef_1_5 () const
      {
        return this->SimFlowPlant_HeatingCompPwrCoef_1_5_;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::SimFlowPlant_HeatingCompPwrCoef_1_5_optional& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCompPwrCoef_1_5 ()
      {
        return this->SimFlowPlant_HeatingCompPwrCoef_1_5_;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCompPwrCoef_1_5 (const SimFlowPlant_HeatingCompPwrCoef_1_5_type& x)
      {
        this->SimFlowPlant_HeatingCompPwrCoef_1_5_.set (x);
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCompPwrCoef_1_5 (const SimFlowPlant_HeatingCompPwrCoef_1_5_optional& x)
      {
        this->SimFlowPlant_HeatingCompPwrCoef_1_5_ = x;
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatingCompPwrCoef_1_5 (::std::auto_ptr< SimFlowPlant_HeatingCompPwrCoef_1_5_type > x)
      {
        this->SimFlowPlant_HeatingCompPwrCoef_1_5_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
      // SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating
      //

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating ()
      : ::schema::simxml::MepModel::SimFlowPlant_HeatPump (),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SrcSideInletNodeName_ (this),
        SimFlowPlant_SrcSideOutletNodeName_ (this),
        SimFlowPlant_LoadSideInletNodeName_ (this),
        SimFlowPlant_LoadSideOutletNodeName_ (this),
        SimFlowPlant_RatedLoadSideFlowRate_ (this),
        SimFlowPlant_RatedSrcSideFlowRate_ (this),
        SimFlowPlant_RatedHeatingCap_ (this),
        SimFlowPlant_RatedHeatingPwrConsump_ (this),
        SimFlowPlant_HeatingCapCoef_1_5_ (this),
        SimFlowPlant_HeatingCompPwrCoef_1_5_ (this)
      {
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating (const RefId_type& RefId)
      : ::schema::simxml::MepModel::SimFlowPlant_HeatPump (RefId),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SrcSideInletNodeName_ (this),
        SimFlowPlant_SrcSideOutletNodeName_ (this),
        SimFlowPlant_LoadSideInletNodeName_ (this),
        SimFlowPlant_LoadSideOutletNodeName_ (this),
        SimFlowPlant_RatedLoadSideFlowRate_ (this),
        SimFlowPlant_RatedSrcSideFlowRate_ (this),
        SimFlowPlant_RatedHeatingCap_ (this),
        SimFlowPlant_RatedHeatingPwrConsump_ (this),
        SimFlowPlant_HeatingCapCoef_1_5_ (this),
        SimFlowPlant_HeatingCompPwrCoef_1_5_ (this)
      {
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating (const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating& x,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_HeatPump (x, f, c),
        SimFlowPlant_Name_ (x.SimFlowPlant_Name_, f, this),
        SimFlowPlant_SrcSideInletNodeName_ (x.SimFlowPlant_SrcSideInletNodeName_, f, this),
        SimFlowPlant_SrcSideOutletNodeName_ (x.SimFlowPlant_SrcSideOutletNodeName_, f, this),
        SimFlowPlant_LoadSideInletNodeName_ (x.SimFlowPlant_LoadSideInletNodeName_, f, this),
        SimFlowPlant_LoadSideOutletNodeName_ (x.SimFlowPlant_LoadSideOutletNodeName_, f, this),
        SimFlowPlant_RatedLoadSideFlowRate_ (x.SimFlowPlant_RatedLoadSideFlowRate_, f, this),
        SimFlowPlant_RatedSrcSideFlowRate_ (x.SimFlowPlant_RatedSrcSideFlowRate_, f, this),
        SimFlowPlant_RatedHeatingCap_ (x.SimFlowPlant_RatedHeatingCap_, f, this),
        SimFlowPlant_RatedHeatingPwrConsump_ (x.SimFlowPlant_RatedHeatingPwrConsump_, f, this),
        SimFlowPlant_HeatingCapCoef_1_5_ (x.SimFlowPlant_HeatingCapCoef_1_5_, f, this),
        SimFlowPlant_HeatingCompPwrCoef_1_5_ (x.SimFlowPlant_HeatingCompPwrCoef_1_5_, f, this)
      {
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating (const ::xercesc::DOMElement& e,
                                                              ::xml_schema::flags f,
                                                              ::xml_schema::container* c)
      : ::schema::simxml::MepModel::SimFlowPlant_HeatPump (e, f | ::xml_schema::flags::base, c),
        SimFlowPlant_Name_ (this),
        SimFlowPlant_SrcSideInletNodeName_ (this),
        SimFlowPlant_SrcSideOutletNodeName_ (this),
        SimFlowPlant_LoadSideInletNodeName_ (this),
        SimFlowPlant_LoadSideOutletNodeName_ (this),
        SimFlowPlant_RatedLoadSideFlowRate_ (this),
        SimFlowPlant_RatedSrcSideFlowRate_ (this),
        SimFlowPlant_RatedHeatingCap_ (this),
        SimFlowPlant_RatedHeatingPwrConsump_ (this),
        SimFlowPlant_HeatingCapCoef_1_5_ (this),
        SimFlowPlant_HeatingCompPwrCoef_1_5_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::MepModel::SimFlowPlant_HeatPump::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimFlowPlant_Name
          //
          if (n.name () == "SimFlowPlant_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_Name_type > r (
              SimFlowPlant_Name_traits::create (i, f, this));

            if (!this->SimFlowPlant_Name_)
            {
              this->SimFlowPlant_Name_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SrcSideInletNodeName
          //
          if (n.name () == "SimFlowPlant_SrcSideInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SrcSideInletNodeName_type > r (
              SimFlowPlant_SrcSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SrcSideInletNodeName_)
            {
              this->SimFlowPlant_SrcSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_SrcSideOutletNodeName
          //
          if (n.name () == "SimFlowPlant_SrcSideOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_SrcSideOutletNodeName_type > r (
              SimFlowPlant_SrcSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_SrcSideOutletNodeName_)
            {
              this->SimFlowPlant_SrcSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_LoadSideInletNodeName
          //
          if (n.name () == "SimFlowPlant_LoadSideInletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_LoadSideInletNodeName_type > r (
              SimFlowPlant_LoadSideInletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_LoadSideInletNodeName_)
            {
              this->SimFlowPlant_LoadSideInletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_LoadSideOutletNodeName
          //
          if (n.name () == "SimFlowPlant_LoadSideOutletNodeName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_LoadSideOutletNodeName_type > r (
              SimFlowPlant_LoadSideOutletNodeName_traits::create (i, f, this));

            if (!this->SimFlowPlant_LoadSideOutletNodeName_)
            {
              this->SimFlowPlant_LoadSideOutletNodeName_.set (r);
              continue;
            }
          }

          // SimFlowPlant_RatedLoadSideFlowRate
          //
          if (n.name () == "SimFlowPlant_RatedLoadSideFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RatedLoadSideFlowRate_)
            {
              this->SimFlowPlant_RatedLoadSideFlowRate_.set (SimFlowPlant_RatedLoadSideFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RatedSrcSideFlowRate
          //
          if (n.name () == "SimFlowPlant_RatedSrcSideFlowRate" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RatedSrcSideFlowRate_)
            {
              this->SimFlowPlant_RatedSrcSideFlowRate_.set (SimFlowPlant_RatedSrcSideFlowRate_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RatedHeatingCap
          //
          if (n.name () == "SimFlowPlant_RatedHeatingCap" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RatedHeatingCap_)
            {
              this->SimFlowPlant_RatedHeatingCap_.set (SimFlowPlant_RatedHeatingCap_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_RatedHeatingPwrConsump
          //
          if (n.name () == "SimFlowPlant_RatedHeatingPwrConsump" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            if (!this->SimFlowPlant_RatedHeatingPwrConsump_)
            {
              this->SimFlowPlant_RatedHeatingPwrConsump_.set (SimFlowPlant_RatedHeatingPwrConsump_traits::create (i, f, this));
              continue;
            }
          }

          // SimFlowPlant_HeatingCapCoef_1_5
          //
          if (n.name () == "SimFlowPlant_HeatingCapCoef_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatingCapCoef_1_5_type > r (
              SimFlowPlant_HeatingCapCoef_1_5_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatingCapCoef_1_5_)
            {
              this->SimFlowPlant_HeatingCapCoef_1_5_.set (r);
              continue;
            }
          }

          // SimFlowPlant_HeatingCompPwrCoef_1_5
          //
          if (n.name () == "SimFlowPlant_HeatingCompPwrCoef_1_5" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/MepModel")
          {
            ::std::auto_ptr< SimFlowPlant_HeatingCompPwrCoef_1_5_type > r (
              SimFlowPlant_HeatingCompPwrCoef_1_5_traits::create (i, f, this));

            if (!this->SimFlowPlant_HeatingCompPwrCoef_1_5_)
            {
              this->SimFlowPlant_HeatingCompPwrCoef_1_5_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating* SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating (*this, f, c);
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating& SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      operator= (const SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::MepModel::SimFlowPlant_HeatPump& > (*this) = x;
          this->SimFlowPlant_Name_ = x.SimFlowPlant_Name_;
          this->SimFlowPlant_SrcSideInletNodeName_ = x.SimFlowPlant_SrcSideInletNodeName_;
          this->SimFlowPlant_SrcSideOutletNodeName_ = x.SimFlowPlant_SrcSideOutletNodeName_;
          this->SimFlowPlant_LoadSideInletNodeName_ = x.SimFlowPlant_LoadSideInletNodeName_;
          this->SimFlowPlant_LoadSideOutletNodeName_ = x.SimFlowPlant_LoadSideOutletNodeName_;
          this->SimFlowPlant_RatedLoadSideFlowRate_ = x.SimFlowPlant_RatedLoadSideFlowRate_;
          this->SimFlowPlant_RatedSrcSideFlowRate_ = x.SimFlowPlant_RatedSrcSideFlowRate_;
          this->SimFlowPlant_RatedHeatingCap_ = x.SimFlowPlant_RatedHeatingCap_;
          this->SimFlowPlant_RatedHeatingPwrConsump_ = x.SimFlowPlant_RatedHeatingPwrConsump_;
          this->SimFlowPlant_HeatingCapCoef_1_5_ = x.SimFlowPlant_HeatingCapCoef_1_5_;
          this->SimFlowPlant_HeatingCompPwrCoef_1_5_ = x.SimFlowPlant_HeatingCompPwrCoef_1_5_;
        }

        return *this;
      }

      SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating::
      ~SimFlowPlant_HeatPump_WaterToWater_EquationFit_Heating ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace MepModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

