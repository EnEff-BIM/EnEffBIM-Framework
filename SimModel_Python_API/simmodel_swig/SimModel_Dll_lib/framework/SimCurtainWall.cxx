// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimCurtainWall.hxx"

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimCurtainWall
      // 

      const SimCurtainWall::Name_optional& SimCurtainWall::
      Name () const
      {
        return this->Name_;
      }

      SimCurtainWall::Name_optional& SimCurtainWall::
      Name ()
      {
        return this->Name_;
      }

      void SimCurtainWall::
      Name (const Name_type& x)
      {
        this->Name_.set (x);
      }

      void SimCurtainWall::
      Name (const Name_optional& x)
      {
        this->Name_ = x;
      }

      void SimCurtainWall::
      Name (::std::auto_ptr< Name_type > x)
      {
        this->Name_.set (x);
      }

      const SimCurtainWall::ConstructionType_optional& SimCurtainWall::
      ConstructionType () const
      {
        return this->ConstructionType_;
      }

      SimCurtainWall::ConstructionType_optional& SimCurtainWall::
      ConstructionType ()
      {
        return this->ConstructionType_;
      }

      void SimCurtainWall::
      ConstructionType (const ConstructionType_type& x)
      {
        this->ConstructionType_.set (x);
      }

      void SimCurtainWall::
      ConstructionType (const ConstructionType_optional& x)
      {
        this->ConstructionType_ = x;
      }

      void SimCurtainWall::
      ConstructionType (::std::auto_ptr< ConstructionType_type > x)
      {
        this->ConstructionType_.set (x);
      }

      const SimCurtainWall::CurtainWallIsExternal_optional& SimCurtainWall::
      CurtainWallIsExternal () const
      {
        return this->CurtainWallIsExternal_;
      }

      SimCurtainWall::CurtainWallIsExternal_optional& SimCurtainWall::
      CurtainWallIsExternal ()
      {
        return this->CurtainWallIsExternal_;
      }

      void SimCurtainWall::
      CurtainWallIsExternal (const CurtainWallIsExternal_type& x)
      {
        this->CurtainWallIsExternal_.set (x);
      }

      void SimCurtainWall::
      CurtainWallIsExternal (const CurtainWallIsExternal_optional& x)
      {
        this->CurtainWallIsExternal_ = x;
      }

      const SimCurtainWall::CompositeThermalTrans_optional& SimCurtainWall::
      CompositeThermalTrans () const
      {
        return this->CompositeThermalTrans_;
      }

      SimCurtainWall::CompositeThermalTrans_optional& SimCurtainWall::
      CompositeThermalTrans ()
      {
        return this->CompositeThermalTrans_;
      }

      void SimCurtainWall::
      CompositeThermalTrans (const CompositeThermalTrans_type& x)
      {
        this->CompositeThermalTrans_.set (x);
      }

      void SimCurtainWall::
      CompositeThermalTrans (const CompositeThermalTrans_optional& x)
      {
        this->CompositeThermalTrans_ = x;
      }

      const SimCurtainWall::Windows6GlazingSystemName_optional& SimCurtainWall::
      Windows6GlazingSystemName () const
      {
        return this->Windows6GlazingSystemName_;
      }

      SimCurtainWall::Windows6GlazingSystemName_optional& SimCurtainWall::
      Windows6GlazingSystemName ()
      {
        return this->Windows6GlazingSystemName_;
      }

      void SimCurtainWall::
      Windows6GlazingSystemName (const Windows6GlazingSystemName_type& x)
      {
        this->Windows6GlazingSystemName_.set (x);
      }

      void SimCurtainWall::
      Windows6GlazingSystemName (const Windows6GlazingSystemName_optional& x)
      {
        this->Windows6GlazingSystemName_ = x;
      }

      void SimCurtainWall::
      Windows6GlazingSystemName (::std::auto_ptr< Windows6GlazingSystemName_type > x)
      {
        this->Windows6GlazingSystemName_.set (x);
      }

      const SimCurtainWall::ExteriorSurfaceColorofGlass_optional& SimCurtainWall::
      ExteriorSurfaceColorofGlass () const
      {
        return this->ExteriorSurfaceColorofGlass_;
      }

      SimCurtainWall::ExteriorSurfaceColorofGlass_optional& SimCurtainWall::
      ExteriorSurfaceColorofGlass ()
      {
        return this->ExteriorSurfaceColorofGlass_;
      }

      void SimCurtainWall::
      ExteriorSurfaceColorofGlass (const ExteriorSurfaceColorofGlass_type& x)
      {
        this->ExteriorSurfaceColorofGlass_.set (x);
      }

      void SimCurtainWall::
      ExteriorSurfaceColorofGlass (const ExteriorSurfaceColorofGlass_optional& x)
      {
        this->ExteriorSurfaceColorofGlass_ = x;
      }

      void SimCurtainWall::
      ExteriorSurfaceColorofGlass (::std::auto_ptr< ExteriorSurfaceColorofGlass_type > x)
      {
        this->ExteriorSurfaceColorofGlass_.set (x);
      }

      const SimCurtainWall::InteriorSurfaceColorofGlass_optional& SimCurtainWall::
      InteriorSurfaceColorofGlass () const
      {
        return this->InteriorSurfaceColorofGlass_;
      }

      SimCurtainWall::InteriorSurfaceColorofGlass_optional& SimCurtainWall::
      InteriorSurfaceColorofGlass ()
      {
        return this->InteriorSurfaceColorofGlass_;
      }

      void SimCurtainWall::
      InteriorSurfaceColorofGlass (const InteriorSurfaceColorofGlass_type& x)
      {
        this->InteriorSurfaceColorofGlass_.set (x);
      }

      void SimCurtainWall::
      InteriorSurfaceColorofGlass (const InteriorSurfaceColorofGlass_optional& x)
      {
        this->InteriorSurfaceColorofGlass_ = x;
      }

      void SimCurtainWall::
      InteriorSurfaceColorofGlass (::std::auto_ptr< InteriorSurfaceColorofGlass_type > x)
      {
        this->InteriorSurfaceColorofGlass_.set (x);
      }

      const SimCurtainWall::Transmittance_Visible_optional& SimCurtainWall::
      Transmittance_Visible () const
      {
        return this->Transmittance_Visible_;
      }

      SimCurtainWall::Transmittance_Visible_optional& SimCurtainWall::
      Transmittance_Visible ()
      {
        return this->Transmittance_Visible_;
      }

      void SimCurtainWall::
      Transmittance_Visible (const Transmittance_Visible_type& x)
      {
        this->Transmittance_Visible_.set (x);
      }

      void SimCurtainWall::
      Transmittance_Visible (const Transmittance_Visible_optional& x)
      {
        this->Transmittance_Visible_ = x;
      }

      const SimCurtainWall::Transmittance_Solar_optional& SimCurtainWall::
      Transmittance_Solar () const
      {
        return this->Transmittance_Solar_;
      }

      SimCurtainWall::Transmittance_Solar_optional& SimCurtainWall::
      Transmittance_Solar ()
      {
        return this->Transmittance_Solar_;
      }

      void SimCurtainWall::
      Transmittance_Solar (const Transmittance_Solar_type& x)
      {
        this->Transmittance_Solar_.set (x);
      }

      void SimCurtainWall::
      Transmittance_Solar (const Transmittance_Solar_optional& x)
      {
        this->Transmittance_Solar_ = x;
      }

      const SimCurtainWall::CompositeThermalTransGlazing_optional& SimCurtainWall::
      CompositeThermalTransGlazing () const
      {
        return this->CompositeThermalTransGlazing_;
      }

      SimCurtainWall::CompositeThermalTransGlazing_optional& SimCurtainWall::
      CompositeThermalTransGlazing ()
      {
        return this->CompositeThermalTransGlazing_;
      }

      void SimCurtainWall::
      CompositeThermalTransGlazing (const CompositeThermalTransGlazing_type& x)
      {
        this->CompositeThermalTransGlazing_.set (x);
      }

      void SimCurtainWall::
      CompositeThermalTransGlazing (const CompositeThermalTransGlazing_optional& x)
      {
        this->CompositeThermalTransGlazing_ = x;
      }

      const SimCurtainWall::ShadingCoefficient_SC_optional& SimCurtainWall::
      ShadingCoefficient_SC () const
      {
        return this->ShadingCoefficient_SC_;
      }

      SimCurtainWall::ShadingCoefficient_SC_optional& SimCurtainWall::
      ShadingCoefficient_SC ()
      {
        return this->ShadingCoefficient_SC_;
      }

      void SimCurtainWall::
      ShadingCoefficient_SC (const ShadingCoefficient_SC_type& x)
      {
        this->ShadingCoefficient_SC_.set (x);
      }

      void SimCurtainWall::
      ShadingCoefficient_SC (const ShadingCoefficient_SC_optional& x)
      {
        this->ShadingCoefficient_SC_ = x;
      }

      const SimCurtainWall::SolarHeatGainCoefficient_SHGC_optional& SimCurtainWall::
      SolarHeatGainCoefficient_SHGC () const
      {
        return this->SolarHeatGainCoefficient_SHGC_;
      }

      SimCurtainWall::SolarHeatGainCoefficient_SHGC_optional& SimCurtainWall::
      SolarHeatGainCoefficient_SHGC ()
      {
        return this->SolarHeatGainCoefficient_SHGC_;
      }

      void SimCurtainWall::
      SolarHeatGainCoefficient_SHGC (const SolarHeatGainCoefficient_SHGC_type& x)
      {
        this->SolarHeatGainCoefficient_SHGC_.set (x);
      }

      void SimCurtainWall::
      SolarHeatGainCoefficient_SHGC (const SolarHeatGainCoefficient_SHGC_optional& x)
      {
        this->SolarHeatGainCoefficient_SHGC_ = x;
      }

      const SimCurtainWall::GlazingAssemblyManufacturer_optional& SimCurtainWall::
      GlazingAssemblyManufacturer () const
      {
        return this->GlazingAssemblyManufacturer_;
      }

      SimCurtainWall::GlazingAssemblyManufacturer_optional& SimCurtainWall::
      GlazingAssemblyManufacturer ()
      {
        return this->GlazingAssemblyManufacturer_;
      }

      void SimCurtainWall::
      GlazingAssemblyManufacturer (const GlazingAssemblyManufacturer_type& x)
      {
        this->GlazingAssemblyManufacturer_.set (x);
      }

      void SimCurtainWall::
      GlazingAssemblyManufacturer (const GlazingAssemblyManufacturer_optional& x)
      {
        this->GlazingAssemblyManufacturer_ = x;
      }

      void SimCurtainWall::
      GlazingAssemblyManufacturer (::std::auto_ptr< GlazingAssemblyManufacturer_type > x)
      {
        this->GlazingAssemblyManufacturer_.set (x);
      }

      const SimCurtainWall::GlazingProductID_optional& SimCurtainWall::
      GlazingProductID () const
      {
        return this->GlazingProductID_;
      }

      SimCurtainWall::GlazingProductID_optional& SimCurtainWall::
      GlazingProductID ()
      {
        return this->GlazingProductID_;
      }

      void SimCurtainWall::
      GlazingProductID (const GlazingProductID_type& x)
      {
        this->GlazingProductID_.set (x);
      }

      void SimCurtainWall::
      GlazingProductID (const GlazingProductID_optional& x)
      {
        this->GlazingProductID_ = x;
      }

      void SimCurtainWall::
      GlazingProductID (::std::auto_ptr< GlazingProductID_type > x)
      {
        this->GlazingProductID_.set (x);
      }

      const SimCurtainWall::GrossSideArea_optional& SimCurtainWall::
      GrossSideArea () const
      {
        return this->GrossSideArea_;
      }

      SimCurtainWall::GrossSideArea_optional& SimCurtainWall::
      GrossSideArea ()
      {
        return this->GrossSideArea_;
      }

      void SimCurtainWall::
      GrossSideArea (const GrossSideArea_type& x)
      {
        this->GrossSideArea_.set (x);
      }

      void SimCurtainWall::
      GrossSideArea (const GrossSideArea_optional& x)
      {
        this->GrossSideArea_ = x;
      }

      const SimCurtainWall::FrameDepth_optional& SimCurtainWall::
      FrameDepth () const
      {
        return this->FrameDepth_;
      }

      SimCurtainWall::FrameDepth_optional& SimCurtainWall::
      FrameDepth ()
      {
        return this->FrameDepth_;
      }

      void SimCurtainWall::
      FrameDepth (const FrameDepth_type& x)
      {
        this->FrameDepth_.set (x);
      }

      void SimCurtainWall::
      FrameDepth (const FrameDepth_optional& x)
      {
        this->FrameDepth_ = x;
      }

      const SimCurtainWall::FrameThickness_optional& SimCurtainWall::
      FrameThickness () const
      {
        return this->FrameThickness_;
      }

      SimCurtainWall::FrameThickness_optional& SimCurtainWall::
      FrameThickness ()
      {
        return this->FrameThickness_;
      }

      void SimCurtainWall::
      FrameThickness (const FrameThickness_type& x)
      {
        this->FrameThickness_.set (x);
      }

      void SimCurtainWall::
      FrameThickness (const FrameThickness_optional& x)
      {
        this->FrameThickness_ = x;
      }

      const SimCurtainWall::ExternalCornersCount_optional& SimCurtainWall::
      ExternalCornersCount () const
      {
        return this->ExternalCornersCount_;
      }

      SimCurtainWall::ExternalCornersCount_optional& SimCurtainWall::
      ExternalCornersCount ()
      {
        return this->ExternalCornersCount_;
      }

      void SimCurtainWall::
      ExternalCornersCount (const ExternalCornersCount_type& x)
      {
        this->ExternalCornersCount_.set (x);
      }

      void SimCurtainWall::
      ExternalCornersCount (const ExternalCornersCount_optional& x)
      {
        this->ExternalCornersCount_ = x;
      }

      const SimCurtainWall::InternalCornersCount_optional& SimCurtainWall::
      InternalCornersCount () const
      {
        return this->InternalCornersCount_;
      }

      SimCurtainWall::InternalCornersCount_optional& SimCurtainWall::
      InternalCornersCount ()
      {
        return this->InternalCornersCount_;
      }

      void SimCurtainWall::
      InternalCornersCount (const InternalCornersCount_type& x)
      {
        this->InternalCornersCount_.set (x);
      }

      void SimCurtainWall::
      InternalCornersCount (const InternalCornersCount_optional& x)
      {
        this->InternalCornersCount_ = x;
      }

      const SimCurtainWall::ClassRef_UniFormat_optional& SimCurtainWall::
      ClassRef_UniFormat () const
      {
        return this->ClassRef_UniFormat_;
      }

      SimCurtainWall::ClassRef_UniFormat_optional& SimCurtainWall::
      ClassRef_UniFormat ()
      {
        return this->ClassRef_UniFormat_;
      }

      void SimCurtainWall::
      ClassRef_UniFormat (const ClassRef_UniFormat_type& x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      void SimCurtainWall::
      ClassRef_UniFormat (const ClassRef_UniFormat_optional& x)
      {
        this->ClassRef_UniFormat_ = x;
      }

      void SimCurtainWall::
      ClassRef_UniFormat (::std::auto_ptr< ClassRef_UniFormat_type > x)
      {
        this->ClassRef_UniFormat_.set (x);
      }

      const SimCurtainWall::MaterialList_optional& SimCurtainWall::
      MaterialList () const
      {
        return this->MaterialList_;
      }

      SimCurtainWall::MaterialList_optional& SimCurtainWall::
      MaterialList ()
      {
        return this->MaterialList_;
      }

      void SimCurtainWall::
      MaterialList (const MaterialList_type& x)
      {
        this->MaterialList_.set (x);
      }

      void SimCurtainWall::
      MaterialList (const MaterialList_optional& x)
      {
        this->MaterialList_ = x;
      }

      void SimCurtainWall::
      MaterialList (::std::auto_ptr< MaterialList_type > x)
      {
        this->MaterialList_.set (x);
      }

      const SimCurtainWall::VoidsInCurtainWall_optional& SimCurtainWall::
      VoidsInCurtainWall () const
      {
        return this->VoidsInCurtainWall_;
      }

      SimCurtainWall::VoidsInCurtainWall_optional& SimCurtainWall::
      VoidsInCurtainWall ()
      {
        return this->VoidsInCurtainWall_;
      }

      void SimCurtainWall::
      VoidsInCurtainWall (const VoidsInCurtainWall_type& x)
      {
        this->VoidsInCurtainWall_.set (x);
      }

      void SimCurtainWall::
      VoidsInCurtainWall (const VoidsInCurtainWall_optional& x)
      {
        this->VoidsInCurtainWall_ = x;
      }

      void SimCurtainWall::
      VoidsInCurtainWall (::std::auto_ptr< VoidsInCurtainWall_type > x)
      {
        this->VoidsInCurtainWall_.set (x);
      }

      const SimCurtainWall::ConnectedWalls_optional& SimCurtainWall::
      ConnectedWalls () const
      {
        return this->ConnectedWalls_;
      }

      SimCurtainWall::ConnectedWalls_optional& SimCurtainWall::
      ConnectedWalls ()
      {
        return this->ConnectedWalls_;
      }

      void SimCurtainWall::
      ConnectedWalls (const ConnectedWalls_type& x)
      {
        this->ConnectedWalls_.set (x);
      }

      void SimCurtainWall::
      ConnectedWalls (const ConnectedWalls_optional& x)
      {
        this->ConnectedWalls_ = x;
      }

      void SimCurtainWall::
      ConnectedWalls (::std::auto_ptr< ConnectedWalls_type > x)
      {
        this->ConnectedWalls_.set (x);
      }

      const SimCurtainWall::ConnectedSlabs_optional& SimCurtainWall::
      ConnectedSlabs () const
      {
        return this->ConnectedSlabs_;
      }

      SimCurtainWall::ConnectedSlabs_optional& SimCurtainWall::
      ConnectedSlabs ()
      {
        return this->ConnectedSlabs_;
      }

      void SimCurtainWall::
      ConnectedSlabs (const ConnectedSlabs_type& x)
      {
        this->ConnectedSlabs_.set (x);
      }

      void SimCurtainWall::
      ConnectedSlabs (const ConnectedSlabs_optional& x)
      {
        this->ConnectedSlabs_ = x;
      }

      void SimCurtainWall::
      ConnectedSlabs (::std::auto_ptr< ConnectedSlabs_type > x)
      {
        this->ConnectedSlabs_.set (x);
      }

      const SimCurtainWall::MembersInCurtainWall_optional& SimCurtainWall::
      MembersInCurtainWall () const
      {
        return this->MembersInCurtainWall_;
      }

      SimCurtainWall::MembersInCurtainWall_optional& SimCurtainWall::
      MembersInCurtainWall ()
      {
        return this->MembersInCurtainWall_;
      }

      void SimCurtainWall::
      MembersInCurtainWall (const MembersInCurtainWall_type& x)
      {
        this->MembersInCurtainWall_.set (x);
      }

      void SimCurtainWall::
      MembersInCurtainWall (const MembersInCurtainWall_optional& x)
      {
        this->MembersInCurtainWall_ = x;
      }

      void SimCurtainWall::
      MembersInCurtainWall (::std::auto_ptr< MembersInCurtainWall_type > x)
      {
        this->MembersInCurtainWall_.set (x);
      }

      const SimCurtainWall::PanelsInCurtainWall_optional& SimCurtainWall::
      PanelsInCurtainWall () const
      {
        return this->PanelsInCurtainWall_;
      }

      SimCurtainWall::PanelsInCurtainWall_optional& SimCurtainWall::
      PanelsInCurtainWall ()
      {
        return this->PanelsInCurtainWall_;
      }

      void SimCurtainWall::
      PanelsInCurtainWall (const PanelsInCurtainWall_type& x)
      {
        this->PanelsInCurtainWall_.set (x);
      }

      void SimCurtainWall::
      PanelsInCurtainWall (const PanelsInCurtainWall_optional& x)
      {
        this->PanelsInCurtainWall_ = x;
      }

      void SimCurtainWall::
      PanelsInCurtainWall (::std::auto_ptr< PanelsInCurtainWall_type > x)
      {
        this->PanelsInCurtainWall_.set (x);
      }

      const SimCurtainWall::Representation_optional& SimCurtainWall::
      Representation () const
      {
        return this->Representation_;
      }

      SimCurtainWall::Representation_optional& SimCurtainWall::
      Representation ()
      {
        return this->Representation_;
      }

      void SimCurtainWall::
      Representation (const Representation_type& x)
      {
        this->Representation_.set (x);
      }

      void SimCurtainWall::
      Representation (const Representation_optional& x)
      {
        this->Representation_ = x;
      }

      void SimCurtainWall::
      Representation (::std::auto_ptr< Representation_type > x)
      {
        this->Representation_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
      // SimCurtainWall
      //

      SimCurtainWall::
      SimCurtainWall ()
      : ::schema::simxml::SimModelCore::SimBuildingElementAssembly (),
        Name_ (this),
        ConstructionType_ (this),
        CurtainWallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        Windows6GlazingSystemName_ (this),
        ExteriorSurfaceColorofGlass_ (this),
        InteriorSurfaceColorofGlass_ (this),
        Transmittance_Visible_ (this),
        Transmittance_Solar_ (this),
        CompositeThermalTransGlazing_ (this),
        ShadingCoefficient_SC_ (this),
        SolarHeatGainCoefficient_SHGC_ (this),
        GlazingAssemblyManufacturer_ (this),
        GlazingProductID_ (this),
        GrossSideArea_ (this),
        FrameDepth_ (this),
        FrameThickness_ (this),
        ExternalCornersCount_ (this),
        InternalCornersCount_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInCurtainWall_ (this),
        ConnectedWalls_ (this),
        ConnectedSlabs_ (this),
        MembersInCurtainWall_ (this),
        PanelsInCurtainWall_ (this),
        Representation_ (this)
      {
      }

      SimCurtainWall::
      SimCurtainWall (const RefId_type& RefId)
      : ::schema::simxml::SimModelCore::SimBuildingElementAssembly (RefId),
        Name_ (this),
        ConstructionType_ (this),
        CurtainWallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        Windows6GlazingSystemName_ (this),
        ExteriorSurfaceColorofGlass_ (this),
        InteriorSurfaceColorofGlass_ (this),
        Transmittance_Visible_ (this),
        Transmittance_Solar_ (this),
        CompositeThermalTransGlazing_ (this),
        ShadingCoefficient_SC_ (this),
        SolarHeatGainCoefficient_SHGC_ (this),
        GlazingAssemblyManufacturer_ (this),
        GlazingProductID_ (this),
        GrossSideArea_ (this),
        FrameDepth_ (this),
        FrameThickness_ (this),
        ExternalCornersCount_ (this),
        InternalCornersCount_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInCurtainWall_ (this),
        ConnectedWalls_ (this),
        ConnectedSlabs_ (this),
        MembersInCurtainWall_ (this),
        PanelsInCurtainWall_ (this),
        Representation_ (this)
      {
      }

      SimCurtainWall::
      SimCurtainWall (const SimCurtainWall& x,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElementAssembly (x, f, c),
        Name_ (x.Name_, f, this),
        ConstructionType_ (x.ConstructionType_, f, this),
        CurtainWallIsExternal_ (x.CurtainWallIsExternal_, f, this),
        CompositeThermalTrans_ (x.CompositeThermalTrans_, f, this),
        Windows6GlazingSystemName_ (x.Windows6GlazingSystemName_, f, this),
        ExteriorSurfaceColorofGlass_ (x.ExteriorSurfaceColorofGlass_, f, this),
        InteriorSurfaceColorofGlass_ (x.InteriorSurfaceColorofGlass_, f, this),
        Transmittance_Visible_ (x.Transmittance_Visible_, f, this),
        Transmittance_Solar_ (x.Transmittance_Solar_, f, this),
        CompositeThermalTransGlazing_ (x.CompositeThermalTransGlazing_, f, this),
        ShadingCoefficient_SC_ (x.ShadingCoefficient_SC_, f, this),
        SolarHeatGainCoefficient_SHGC_ (x.SolarHeatGainCoefficient_SHGC_, f, this),
        GlazingAssemblyManufacturer_ (x.GlazingAssemblyManufacturer_, f, this),
        GlazingProductID_ (x.GlazingProductID_, f, this),
        GrossSideArea_ (x.GrossSideArea_, f, this),
        FrameDepth_ (x.FrameDepth_, f, this),
        FrameThickness_ (x.FrameThickness_, f, this),
        ExternalCornersCount_ (x.ExternalCornersCount_, f, this),
        InternalCornersCount_ (x.InternalCornersCount_, f, this),
        ClassRef_UniFormat_ (x.ClassRef_UniFormat_, f, this),
        MaterialList_ (x.MaterialList_, f, this),
        VoidsInCurtainWall_ (x.VoidsInCurtainWall_, f, this),
        ConnectedWalls_ (x.ConnectedWalls_, f, this),
        ConnectedSlabs_ (x.ConnectedSlabs_, f, this),
        MembersInCurtainWall_ (x.MembersInCurtainWall_, f, this),
        PanelsInCurtainWall_ (x.PanelsInCurtainWall_, f, this),
        Representation_ (x.Representation_, f, this)
      {
      }

      SimCurtainWall::
      SimCurtainWall (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f,
                      ::xml_schema::container* c)
      : ::schema::simxml::SimModelCore::SimBuildingElementAssembly (e, f | ::xml_schema::flags::base, c),
        Name_ (this),
        ConstructionType_ (this),
        CurtainWallIsExternal_ (this),
        CompositeThermalTrans_ (this),
        Windows6GlazingSystemName_ (this),
        ExteriorSurfaceColorofGlass_ (this),
        InteriorSurfaceColorofGlass_ (this),
        Transmittance_Visible_ (this),
        Transmittance_Solar_ (this),
        CompositeThermalTransGlazing_ (this),
        ShadingCoefficient_SC_ (this),
        SolarHeatGainCoefficient_SHGC_ (this),
        GlazingAssemblyManufacturer_ (this),
        GlazingProductID_ (this),
        GrossSideArea_ (this),
        FrameDepth_ (this),
        FrameThickness_ (this),
        ExternalCornersCount_ (this),
        InternalCornersCount_ (this),
        ClassRef_UniFormat_ (this),
        MaterialList_ (this),
        VoidsInCurtainWall_ (this),
        ConnectedWalls_ (this),
        ConnectedSlabs_ (this),
        MembersInCurtainWall_ (this),
        PanelsInCurtainWall_ (this),
        Representation_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimCurtainWall::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::SimModelCore::SimBuildingElementAssembly::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // Name
          //
          if (n.name () == "Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Name_type > r (
              Name_traits::create (i, f, this));

            if (!this->Name_)
            {
              this->Name_.set (r);
              continue;
            }
          }

          // ConstructionType
          //
          if (n.name () == "ConstructionType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConstructionType_type > r (
              ConstructionType_traits::create (i, f, this));

            if (!this->ConstructionType_)
            {
              this->ConstructionType_.set (r);
              continue;
            }
          }

          // CurtainWallIsExternal
          //
          if (n.name () == "CurtainWallIsExternal" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CurtainWallIsExternal_)
            {
              this->CurtainWallIsExternal_.set (CurtainWallIsExternal_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTrans
          //
          if (n.name () == "CompositeThermalTrans" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CompositeThermalTrans_)
            {
              this->CompositeThermalTrans_.set (CompositeThermalTrans_traits::create (i, f, this));
              continue;
            }
          }

          // Windows6GlazingSystemName
          //
          if (n.name () == "Windows6GlazingSystemName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Windows6GlazingSystemName_type > r (
              Windows6GlazingSystemName_traits::create (i, f, this));

            if (!this->Windows6GlazingSystemName_)
            {
              this->Windows6GlazingSystemName_.set (r);
              continue;
            }
          }

          // ExteriorSurfaceColorofGlass
          //
          if (n.name () == "ExteriorSurfaceColorofGlass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ExteriorSurfaceColorofGlass_type > r (
              ExteriorSurfaceColorofGlass_traits::create (i, f, this));

            if (!this->ExteriorSurfaceColorofGlass_)
            {
              this->ExteriorSurfaceColorofGlass_.set (r);
              continue;
            }
          }

          // InteriorSurfaceColorofGlass
          //
          if (n.name () == "InteriorSurfaceColorofGlass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< InteriorSurfaceColorofGlass_type > r (
              InteriorSurfaceColorofGlass_traits::create (i, f, this));

            if (!this->InteriorSurfaceColorofGlass_)
            {
              this->InteriorSurfaceColorofGlass_.set (r);
              continue;
            }
          }

          // Transmittance_Visible
          //
          if (n.name () == "Transmittance_Visible" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Transmittance_Visible_)
            {
              this->Transmittance_Visible_.set (Transmittance_Visible_traits::create (i, f, this));
              continue;
            }
          }

          // Transmittance_Solar
          //
          if (n.name () == "Transmittance_Solar" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->Transmittance_Solar_)
            {
              this->Transmittance_Solar_.set (Transmittance_Solar_traits::create (i, f, this));
              continue;
            }
          }

          // CompositeThermalTransGlazing
          //
          if (n.name () == "CompositeThermalTransGlazing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->CompositeThermalTransGlazing_)
            {
              this->CompositeThermalTransGlazing_.set (CompositeThermalTransGlazing_traits::create (i, f, this));
              continue;
            }
          }

          // ShadingCoefficient_SC
          //
          if (n.name () == "ShadingCoefficient_SC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ShadingCoefficient_SC_)
            {
              this->ShadingCoefficient_SC_.set (ShadingCoefficient_SC_traits::create (i, f, this));
              continue;
            }
          }

          // SolarHeatGainCoefficient_SHGC
          //
          if (n.name () == "SolarHeatGainCoefficient_SHGC" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->SolarHeatGainCoefficient_SHGC_)
            {
              this->SolarHeatGainCoefficient_SHGC_.set (SolarHeatGainCoefficient_SHGC_traits::create (i, f, this));
              continue;
            }
          }

          // GlazingAssemblyManufacturer
          //
          if (n.name () == "GlazingAssemblyManufacturer" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< GlazingAssemblyManufacturer_type > r (
              GlazingAssemblyManufacturer_traits::create (i, f, this));

            if (!this->GlazingAssemblyManufacturer_)
            {
              this->GlazingAssemblyManufacturer_.set (r);
              continue;
            }
          }

          // GlazingProductID
          //
          if (n.name () == "GlazingProductID" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< GlazingProductID_type > r (
              GlazingProductID_traits::create (i, f, this));

            if (!this->GlazingProductID_)
            {
              this->GlazingProductID_.set (r);
              continue;
            }
          }

          // GrossSideArea
          //
          if (n.name () == "GrossSideArea" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->GrossSideArea_)
            {
              this->GrossSideArea_.set (GrossSideArea_traits::create (i, f, this));
              continue;
            }
          }

          // FrameDepth
          //
          if (n.name () == "FrameDepth" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->FrameDepth_)
            {
              this->FrameDepth_.set (FrameDepth_traits::create (i, f, this));
              continue;
            }
          }

          // FrameThickness
          //
          if (n.name () == "FrameThickness" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->FrameThickness_)
            {
              this->FrameThickness_.set (FrameThickness_traits::create (i, f, this));
              continue;
            }
          }

          // ExternalCornersCount
          //
          if (n.name () == "ExternalCornersCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->ExternalCornersCount_)
            {
              this->ExternalCornersCount_.set (ExternalCornersCount_traits::create (i, f, this));
              continue;
            }
          }

          // InternalCornersCount
          //
          if (n.name () == "InternalCornersCount" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            if (!this->InternalCornersCount_)
            {
              this->InternalCornersCount_.set (InternalCornersCount_traits::create (i, f, this));
              continue;
            }
          }

          // ClassRef_UniFormat
          //
          if (n.name () == "ClassRef_UniFormat" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ClassRef_UniFormat_type > r (
              ClassRef_UniFormat_traits::create (i, f, this));

            if (!this->ClassRef_UniFormat_)
            {
              this->ClassRef_UniFormat_.set (r);
              continue;
            }
          }

          // MaterialList
          //
          if (n.name () == "MaterialList" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MaterialList_type > r (
              MaterialList_traits::create (i, f, this));

            if (!this->MaterialList_)
            {
              this->MaterialList_.set (r);
              continue;
            }
          }

          // VoidsInCurtainWall
          //
          if (n.name () == "VoidsInCurtainWall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< VoidsInCurtainWall_type > r (
              VoidsInCurtainWall_traits::create (i, f, this));

            if (!this->VoidsInCurtainWall_)
            {
              this->VoidsInCurtainWall_.set (r);
              continue;
            }
          }

          // ConnectedWalls
          //
          if (n.name () == "ConnectedWalls" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedWalls_type > r (
              ConnectedWalls_traits::create (i, f, this));

            if (!this->ConnectedWalls_)
            {
              this->ConnectedWalls_.set (r);
              continue;
            }
          }

          // ConnectedSlabs
          //
          if (n.name () == "ConnectedSlabs" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< ConnectedSlabs_type > r (
              ConnectedSlabs_traits::create (i, f, this));

            if (!this->ConnectedSlabs_)
            {
              this->ConnectedSlabs_.set (r);
              continue;
            }
          }

          // MembersInCurtainWall
          //
          if (n.name () == "MembersInCurtainWall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< MembersInCurtainWall_type > r (
              MembersInCurtainWall_traits::create (i, f, this));

            if (!this->MembersInCurtainWall_)
            {
              this->MembersInCurtainWall_.set (r);
              continue;
            }
          }

          // PanelsInCurtainWall
          //
          if (n.name () == "PanelsInCurtainWall" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< PanelsInCurtainWall_type > r (
              PanelsInCurtainWall_traits::create (i, f, this));

            if (!this->PanelsInCurtainWall_)
            {
              this->PanelsInCurtainWall_.set (r);
              continue;
            }
          }

          // Representation
          //
          if (n.name () == "Representation" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/BuildingModel")
          {
            ::std::auto_ptr< Representation_type > r (
              Representation_traits::create (i, f, this));

            if (!this->Representation_)
            {
              this->Representation_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimCurtainWall* SimCurtainWall::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimCurtainWall (*this, f, c);
      }

      SimCurtainWall& SimCurtainWall::
      operator= (const SimCurtainWall& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::SimModelCore::SimBuildingElementAssembly& > (*this) = x;
          this->Name_ = x.Name_;
          this->ConstructionType_ = x.ConstructionType_;
          this->CurtainWallIsExternal_ = x.CurtainWallIsExternal_;
          this->CompositeThermalTrans_ = x.CompositeThermalTrans_;
          this->Windows6GlazingSystemName_ = x.Windows6GlazingSystemName_;
          this->ExteriorSurfaceColorofGlass_ = x.ExteriorSurfaceColorofGlass_;
          this->InteriorSurfaceColorofGlass_ = x.InteriorSurfaceColorofGlass_;
          this->Transmittance_Visible_ = x.Transmittance_Visible_;
          this->Transmittance_Solar_ = x.Transmittance_Solar_;
          this->CompositeThermalTransGlazing_ = x.CompositeThermalTransGlazing_;
          this->ShadingCoefficient_SC_ = x.ShadingCoefficient_SC_;
          this->SolarHeatGainCoefficient_SHGC_ = x.SolarHeatGainCoefficient_SHGC_;
          this->GlazingAssemblyManufacturer_ = x.GlazingAssemblyManufacturer_;
          this->GlazingProductID_ = x.GlazingProductID_;
          this->GrossSideArea_ = x.GrossSideArea_;
          this->FrameDepth_ = x.FrameDepth_;
          this->FrameThickness_ = x.FrameThickness_;
          this->ExternalCornersCount_ = x.ExternalCornersCount_;
          this->InternalCornersCount_ = x.InternalCornersCount_;
          this->ClassRef_UniFormat_ = x.ClassRef_UniFormat_;
          this->MaterialList_ = x.MaterialList_;
          this->VoidsInCurtainWall_ = x.VoidsInCurtainWall_;
          this->ConnectedWalls_ = x.ConnectedWalls_;
          this->ConnectedSlabs_ = x.ConnectedSlabs_;
          this->MembersInCurtainWall_ = x.MembersInCurtainWall_;
          this->PanelsInCurtainWall_ = x.PanelsInCurtainWall_;
          this->Representation_ = x.Representation_;
        }

        return *this;
      }

      SimCurtainWall::
      ~SimCurtainWall ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace BuildingModel
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

