// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState.hxx"

#include "doublelist.hxx"

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState
      // 

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Name () const
      {
        return this->SimMatLayerSet_Name_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Name ()
      {
        return this->SimMatLayerSet_Name_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Name (const SimMatLayerSet_Name_type& x)
      {
        this->SimMatLayerSet_Name_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Name (const SimMatLayerSet_Name_optional& x)
      {
        this->SimMatLayerSet_Name_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Name (::std::auto_ptr< SimMatLayerSet_Name_type > x)
      {
        this->SimMatLayerSet_Name_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisType () const
      {
        return this->SimMatLayerSet_BasisType_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisType ()
      {
        return this->SimMatLayerSet_BasisType_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisType (const SimMatLayerSet_BasisType_type& x)
      {
        this->SimMatLayerSet_BasisType_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisType (const SimMatLayerSet_BasisType_optional& x)
      {
        this->SimMatLayerSet_BasisType_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisType (::std::auto_ptr< SimMatLayerSet_BasisType_type > x)
      {
        this->SimMatLayerSet_BasisType_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisSymmetryType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisSymmetryType () const
      {
        return this->SimMatLayerSet_BasisSymmetryType_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisSymmetryType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisSymmetryType ()
      {
        return this->SimMatLayerSet_BasisSymmetryType_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisSymmetryType (const SimMatLayerSet_BasisSymmetryType_type& x)
      {
        this->SimMatLayerSet_BasisSymmetryType_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisSymmetryType (const SimMatLayerSet_BasisSymmetryType_optional& x)
      {
        this->SimMatLayerSet_BasisSymmetryType_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisSymmetryType (::std::auto_ptr< SimMatLayerSet_BasisSymmetryType_type > x)
      {
        this->SimMatLayerSet_BasisSymmetryType_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_WindowThermalModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_WindowThermalModel () const
      {
        return this->SimMatLayerSet_WindowThermalModel_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_WindowThermalModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_WindowThermalModel ()
      {
        return this->SimMatLayerSet_WindowThermalModel_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_WindowThermalModel (const SimMatLayerSet_WindowThermalModel_type& x)
      {
        this->SimMatLayerSet_WindowThermalModel_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_WindowThermalModel (const SimMatLayerSet_WindowThermalModel_optional& x)
      {
        this->SimMatLayerSet_WindowThermalModel_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_WindowThermalModel (::std::auto_ptr< SimMatLayerSet_WindowThermalModel_type > x)
      {
        this->SimMatLayerSet_WindowThermalModel_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisMatrixName () const
      {
        return this->SimMatLayerSet_BasisMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_BasisMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisMatrixName ()
      {
        return this->SimMatLayerSet_BasisMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisMatrixName (const SimMatLayerSet_BasisMatrixName_type& x)
      {
        this->SimMatLayerSet_BasisMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisMatrixName (const SimMatLayerSet_BasisMatrixName_optional& x)
      {
        this->SimMatLayerSet_BasisMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_BasisMatrixName (::std::auto_ptr< SimMatLayerSet_BasisMatrixName_type > x)
      {
        this->SimMatLayerSet_BasisMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName () const
      {
        return this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName ()
      {
        return this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type& x)
      {
        this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_optional& x)
      {
        this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type > x)
      {
        this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName () const
      {
        return this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName ()
      {
        return this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (const SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type& x)
      {
        this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (const SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_optional& x)
      {
        this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName (::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type > x)
      {
        this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName () const
      {
        return this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName ()
      {
        return this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type& x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_optional& x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type > x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName () const
      {
        return this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName ()
      {
        return this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type& x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (const SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_optional& x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName (::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type > x)
      {
        this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerName () const
      {
        return this->SimMatLayerSet_OutsideLayerName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerName ()
      {
        return this->SimMatLayerSet_OutsideLayerName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerName (const SimMatLayerSet_OutsideLayerName_type& x)
      {
        this->SimMatLayerSet_OutsideLayerName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerName (const SimMatLayerSet_OutsideLayerName_optional& x)
      {
        this->SimMatLayerSet_OutsideLayerName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerName (::std::auto_ptr< SimMatLayerSet_OutsideLayerName_type > x)
      {
        this->SimMatLayerSet_OutsideLayerName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName () const
      {
        return this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName ()
      {
        return this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type& x)
      {
        this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_optional& x)
      {
        this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName (::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type > x)
      {
        this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName () const
      {
        return this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName ()
      {
        return this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type& x)
      {
        this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (const SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_optional& x)
      {
        this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName (::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type > x)
      {
        this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_Name () const
      {
        return this->SimMatLayerSet_Layer_2_5_Name_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_Name ()
      {
        return this->SimMatLayerSet_Layer_2_5_Name_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_Name (const SimMatLayerSet_Layer_2_5_Name_type& x)
      {
        this->SimMatLayerSet_Layer_2_5_Name_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_Name (const SimMatLayerSet_Layer_2_5_Name_optional& x)
      {
        this->SimMatLayerSet_Layer_2_5_Name_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_Name (::std::auto_ptr< SimMatLayerSet_Layer_2_5_Name_type > x)
      {
        this->SimMatLayerSet_Layer_2_5_Name_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName () const
      {
        return this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName ()
      {
        return this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type& x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_optional& x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type > x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName () const
      {
        return this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName ()
      {
        return this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type& x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (const SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_optional& x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type > x)
      {
        this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_Name () const
      {
        return this->SimMatLayerSet_Gap_1_4_Name_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_Name ()
      {
        return this->SimMatLayerSet_Gap_1_4_Name_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_Name (const SimMatLayerSet_Gap_1_4_Name_type& x)
      {
        this->SimMatLayerSet_Gap_1_4_Name_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_Name (const SimMatLayerSet_Gap_1_4_Name_optional& x)
      {
        this->SimMatLayerSet_Gap_1_4_Name_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_Name (::std::auto_ptr< SimMatLayerSet_Gap_1_4_Name_type > x)
      {
        this->SimMatLayerSet_Gap_1_4_Name_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName () const
      {
        return this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName ()
      {
        return this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type& x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_optional& x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type > x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName () const
      {
        return this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName ()
      {
        return this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type& x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (const SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_optional& x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName (::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type > x)
      {
        this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_Name () const
      {
        return this->WindowThermalModel_Params_Name_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_Name ()
      {
        return this->WindowThermalModel_Params_Name_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_Name (const WindowThermalModel_Params_Name_type& x)
      {
        this->WindowThermalModel_Params_Name_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_Name (const WindowThermalModel_Params_Name_optional& x)
      {
        this->WindowThermalModel_Params_Name_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_Name (::std::auto_ptr< WindowThermalModel_Params_Name_type > x)
      {
        this->WindowThermalModel_Params_Name_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_standard_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_standard () const
      {
        return this->WindowThermalModel_Params_standard_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_standard_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_standard ()
      {
        return this->WindowThermalModel_Params_standard_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_standard (const WindowThermalModel_Params_standard_type& x)
      {
        this->WindowThermalModel_Params_standard_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_standard (const WindowThermalModel_Params_standard_optional& x)
      {
        this->WindowThermalModel_Params_standard_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_standard (::std::auto_ptr< WindowThermalModel_Params_standard_type > x)
      {
        this->WindowThermalModel_Params_standard_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_ThermalModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_ThermalModel () const
      {
        return this->WindowThermalModel_Params_ThermalModel_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_ThermalModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_ThermalModel ()
      {
        return this->WindowThermalModel_Params_ThermalModel_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_ThermalModel (const WindowThermalModel_Params_ThermalModel_type& x)
      {
        this->WindowThermalModel_Params_ThermalModel_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_ThermalModel (const WindowThermalModel_Params_ThermalModel_optional& x)
      {
        this->WindowThermalModel_Params_ThermalModel_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_ThermalModel (::std::auto_ptr< WindowThermalModel_Params_ThermalModel_type > x)
      {
        this->WindowThermalModel_Params_ThermalModel_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_SDScalar_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_SDScalar () const
      {
        return this->WindowThermalModel_Params_SDScalar_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_SDScalar_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_SDScalar ()
      {
        return this->WindowThermalModel_Params_SDScalar_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_SDScalar (const WindowThermalModel_Params_SDScalar_type& x)
      {
        this->WindowThermalModel_Params_SDScalar_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_SDScalar (const WindowThermalModel_Params_SDScalar_optional& x)
      {
        this->WindowThermalModel_Params_SDScalar_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_DeflectionModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_DeflectionModel () const
      {
        return this->WindowThermalModel_Params_DeflectionModel_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_DeflectionModel_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_DeflectionModel ()
      {
        return this->WindowThermalModel_Params_DeflectionModel_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_DeflectionModel (const WindowThermalModel_Params_DeflectionModel_type& x)
      {
        this->WindowThermalModel_Params_DeflectionModel_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_DeflectionModel (const WindowThermalModel_Params_DeflectionModel_optional& x)
      {
        this->WindowThermalModel_Params_DeflectionModel_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_DeflectionModel (::std::auto_ptr< WindowThermalModel_Params_DeflectionModel_type > x)
      {
        this->WindowThermalModel_Params_DeflectionModel_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_VacuumPressureLimit_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_VacuumPressureLimit () const
      {
        return this->WindowThermalModel_Params_VacuumPressureLimit_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_VacuumPressureLimit_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_VacuumPressureLimit ()
      {
        return this->WindowThermalModel_Params_VacuumPressureLimit_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_VacuumPressureLimit (const WindowThermalModel_Params_VacuumPressureLimit_type& x)
      {
        this->WindowThermalModel_Params_VacuumPressureLimit_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_VacuumPressureLimit (const WindowThermalModel_Params_VacuumPressureLimit_optional& x)
      {
        this->WindowThermalModel_Params_VacuumPressureLimit_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_InitialTemperature_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialTemperature () const
      {
        return this->WindowThermalModel_Params_InitialTemperature_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_InitialTemperature_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialTemperature ()
      {
        return this->WindowThermalModel_Params_InitialTemperature_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialTemperature (const WindowThermalModel_Params_InitialTemperature_type& x)
      {
        this->WindowThermalModel_Params_InitialTemperature_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialTemperature (const WindowThermalModel_Params_InitialTemperature_optional& x)
      {
        this->WindowThermalModel_Params_InitialTemperature_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_InitialPressure_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialPressure () const
      {
        return this->WindowThermalModel_Params_InitialPressure_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::WindowThermalModel_Params_InitialPressure_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialPressure ()
      {
        return this->WindowThermalModel_Params_InitialPressure_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialPressure (const WindowThermalModel_Params_InitialPressure_type& x)
      {
        this->WindowThermalModel_Params_InitialPressure_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      WindowThermalModel_Params_InitialPressure (const WindowThermalModel_Params_InitialPressure_optional& x)
      {
        this->WindowThermalModel_Params_InitialPressure_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Name () const
      {
        return this->Matrix_TwoDimension_Name_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_Name_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Name ()
      {
        return this->Matrix_TwoDimension_Name_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Name (const Matrix_TwoDimension_Name_type& x)
      {
        this->Matrix_TwoDimension_Name_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Name (const Matrix_TwoDimension_Name_optional& x)
      {
        this->Matrix_TwoDimension_Name_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Name (::std::auto_ptr< Matrix_TwoDimension_Name_type > x)
      {
        this->Matrix_TwoDimension_Name_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_NumberofRows_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofRows () const
      {
        return this->Matrix_TwoDimension_NumberofRows_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_NumberofRows_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofRows ()
      {
        return this->Matrix_TwoDimension_NumberofRows_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofRows (const Matrix_TwoDimension_NumberofRows_type& x)
      {
        this->Matrix_TwoDimension_NumberofRows_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofRows (const Matrix_TwoDimension_NumberofRows_optional& x)
      {
        this->Matrix_TwoDimension_NumberofRows_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_NumberofColumns_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofColumns () const
      {
        return this->Matrix_TwoDimension_NumberofColumns_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_NumberofColumns_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofColumns ()
      {
        return this->Matrix_TwoDimension_NumberofColumns_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofColumns (const Matrix_TwoDimension_NumberofColumns_type& x)
      {
        this->Matrix_TwoDimension_NumberofColumns_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_NumberofColumns (const Matrix_TwoDimension_NumberofColumns_optional& x)
      {
        this->Matrix_TwoDimension_NumberofColumns_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_Value_1_2500_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Value_1_2500 () const
      {
        return this->Matrix_TwoDimension_Value_1_2500_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::Matrix_TwoDimension_Value_1_2500_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Value_1_2500 ()
      {
        return this->Matrix_TwoDimension_Value_1_2500_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Value_1_2500 (const Matrix_TwoDimension_Value_1_2500_type& x)
      {
        this->Matrix_TwoDimension_Value_1_2500_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Value_1_2500 (const Matrix_TwoDimension_Value_1_2500_optional& x)
      {
        this->Matrix_TwoDimension_Value_1_2500_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      Matrix_TwoDimension_Value_1_2500 (::std::auto_ptr< Matrix_TwoDimension_Value_1_2500_type > x)
      {
        this->Matrix_TwoDimension_Value_1_2500_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24AssmContext_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24AssmContext () const
      {
        return this->T24AssmContext_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24AssmContext_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24AssmContext ()
      {
        return this->T24AssmContext_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24AssmContext (const T24AssmContext_type& x)
      {
        this->T24AssmContext_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24AssmContext (const T24AssmContext_optional& x)
      {
        this->T24AssmContext_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24AssmContext (::std::auto_ptr< T24AssmContext_type > x)
      {
        this->T24AssmContext_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraCertMethod_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraCertMethod () const
      {
        return this->T24FenestraCertMethod_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraCertMethod_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraCertMethod ()
      {
        return this->T24FenestraCertMethod_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraCertMethod (const T24FenestraCertMethod_type& x)
      {
        this->T24FenestraCertMethod_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraCertMethod (const T24FenestraCertMethod_optional& x)
      {
        this->T24FenestraCertMethod_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraCertMethod (::std::auto_ptr< T24FenestraCertMethod_type > x)
      {
        this->T24FenestraCertMethod_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24Diffusing_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24Diffusing () const
      {
        return this->T24Diffusing_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24Diffusing_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24Diffusing ()
      {
        return this->T24Diffusing_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24Diffusing (const T24Diffusing_type& x)
      {
        this->T24Diffusing_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24Diffusing (const T24Diffusing_optional& x)
      {
        this->T24Diffusing_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraFrame_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraFrame () const
      {
        return this->T24FenestraFrame_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraFrame_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraFrame ()
      {
        return this->T24FenestraFrame_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraFrame (const T24FenestraFrame_type& x)
      {
        this->T24FenestraFrame_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraFrame (const T24FenestraFrame_optional& x)
      {
        this->T24FenestraFrame_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraFrame (::std::auto_ptr< T24FenestraFrame_type > x)
      {
        this->T24FenestraFrame_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraPanes_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraPanes () const
      {
        return this->T24FenestraPanes_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraPanes_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraPanes ()
      {
        return this->T24FenestraPanes_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraPanes (const T24FenestraPanes_type& x)
      {
        this->T24FenestraPanes_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraPanes (const T24FenestraPanes_optional& x)
      {
        this->T24FenestraPanes_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraPanes (::std::auto_ptr< T24FenestraPanes_type > x)
      {
        this->T24FenestraPanes_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraProdType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraProdType () const
      {
        return this->T24FenestraProdType_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraProdType_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraProdType ()
      {
        return this->T24FenestraProdType_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraProdType (const T24FenestraProdType_type& x)
      {
        this->T24FenestraProdType_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraProdType (const T24FenestraProdType_optional& x)
      {
        this->T24FenestraProdType_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraProdType (::std::auto_ptr< T24FenestraProdType_type > x)
      {
        this->T24FenestraProdType_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraTint_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraTint () const
      {
        return this->T24FenestraTint_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraTint_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraTint ()
      {
        return this->T24FenestraTint_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraTint (const T24FenestraTint_type& x)
      {
        this->T24FenestraTint_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraTint (const T24FenestraTint_optional& x)
      {
        this->T24FenestraTint_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraTint (::std::auto_ptr< T24FenestraTint_type > x)
      {
        this->T24FenestraTint_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24GreenhouseGardenWindow_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24GreenhouseGardenWindow () const
      {
        return this->T24GreenhouseGardenWindow_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24GreenhouseGardenWindow_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24GreenhouseGardenWindow ()
      {
        return this->T24GreenhouseGardenWindow_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24GreenhouseGardenWindow (const T24GreenhouseGardenWindow_type& x)
      {
        this->T24GreenhouseGardenWindow_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24GreenhouseGardenWindow (const T24GreenhouseGardenWindow_optional& x)
      {
        this->T24GreenhouseGardenWindow_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24SHGCCenterOfGlass_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24SHGCCenterOfGlass () const
      {
        return this->T24SHGCCenterOfGlass_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24SHGCCenterOfGlass_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24SHGCCenterOfGlass ()
      {
        return this->T24SHGCCenterOfGlass_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24SHGCCenterOfGlass (const T24SHGCCenterOfGlass_type& x)
      {
        this->T24SHGCCenterOfGlass_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24SHGCCenterOfGlass (const T24SHGCCenterOfGlass_optional& x)
      {
        this->T24SHGCCenterOfGlass_ = x;
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraSkyltCurb_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltCurb () const
      {
        return this->T24FenestraSkyltCurb_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraSkyltCurb_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltCurb ()
      {
        return this->T24FenestraSkyltCurb_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltCurb (const T24FenestraSkyltCurb_type& x)
      {
        this->T24FenestraSkyltCurb_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltCurb (const T24FenestraSkyltCurb_optional& x)
      {
        this->T24FenestraSkyltCurb_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltCurb (::std::auto_ptr< T24FenestraSkyltCurb_type > x)
      {
        this->T24FenestraSkyltCurb_.set (x);
      }

      const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraSkyltGlaze_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltGlaze () const
      {
        return this->T24FenestraSkyltGlaze_;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::T24FenestraSkyltGlaze_optional& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltGlaze ()
      {
        return this->T24FenestraSkyltGlaze_;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltGlaze (const T24FenestraSkyltGlaze_type& x)
      {
        this->T24FenestraSkyltGlaze_.set (x);
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltGlaze (const T24FenestraSkyltGlaze_optional& x)
      {
        this->T24FenestraSkyltGlaze_ = x;
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      T24FenestraSkyltGlaze (::std::auto_ptr< T24FenestraSkyltGlaze_type > x)
      {
        this->T24FenestraSkyltGlaze_.set (x);
      }
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, char >
  type_factory_plate_init;
}

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
      // SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState
      //

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState ()
      : ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet (),
        SimMatLayerSet_Name_ (this),
        SimMatLayerSet_BasisType_ (this),
        SimMatLayerSet_BasisSymmetryType_ (this),
        SimMatLayerSet_WindowThermalModel_ (this),
        SimMatLayerSet_BasisMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ (this),
        SimMatLayerSet_OutsideLayerName_ (this),
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ (this),
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_Name_ (this),
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_Name_ (this),
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ (this),
        WindowThermalModel_Params_Name_ (this),
        WindowThermalModel_Params_standard_ (this),
        WindowThermalModel_Params_ThermalModel_ (this),
        WindowThermalModel_Params_SDScalar_ (this),
        WindowThermalModel_Params_DeflectionModel_ (this),
        WindowThermalModel_Params_VacuumPressureLimit_ (this),
        WindowThermalModel_Params_InitialTemperature_ (this),
        WindowThermalModel_Params_InitialPressure_ (this),
        Matrix_TwoDimension_Name_ (this),
        Matrix_TwoDimension_NumberofRows_ (this),
        Matrix_TwoDimension_NumberofColumns_ (this),
        Matrix_TwoDimension_Value_1_2500_ (this),
        T24AssmContext_ (this),
        T24FenestraCertMethod_ (this),
        T24Diffusing_ (this),
        T24FenestraFrame_ (this),
        T24FenestraPanes_ (this),
        T24FenestraProdType_ (this),
        T24FenestraTint_ (this),
        T24GreenhouseGardenWindow_ (this),
        T24SHGCCenterOfGlass_ (this),
        T24FenestraSkyltCurb_ (this),
        T24FenestraSkyltGlaze_ (this)
      {
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const RefId_type& RefId)
      : ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet (RefId),
        SimMatLayerSet_Name_ (this),
        SimMatLayerSet_BasisType_ (this),
        SimMatLayerSet_BasisSymmetryType_ (this),
        SimMatLayerSet_WindowThermalModel_ (this),
        SimMatLayerSet_BasisMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ (this),
        SimMatLayerSet_OutsideLayerName_ (this),
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ (this),
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_Name_ (this),
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_Name_ (this),
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ (this),
        WindowThermalModel_Params_Name_ (this),
        WindowThermalModel_Params_standard_ (this),
        WindowThermalModel_Params_ThermalModel_ (this),
        WindowThermalModel_Params_SDScalar_ (this),
        WindowThermalModel_Params_DeflectionModel_ (this),
        WindowThermalModel_Params_VacuumPressureLimit_ (this),
        WindowThermalModel_Params_InitialTemperature_ (this),
        WindowThermalModel_Params_InitialPressure_ (this),
        Matrix_TwoDimension_Name_ (this),
        Matrix_TwoDimension_NumberofRows_ (this),
        Matrix_TwoDimension_NumberofColumns_ (this),
        Matrix_TwoDimension_Value_1_2500_ (this),
        T24AssmContext_ (this),
        T24FenestraCertMethod_ (this),
        T24Diffusing_ (this),
        T24FenestraFrame_ (this),
        T24FenestraPanes_ (this),
        T24FenestraProdType_ (this),
        T24FenestraTint_ (this),
        T24GreenhouseGardenWindow_ (this),
        T24SHGCCenterOfGlass_ (this),
        T24FenestraSkyltCurb_ (this),
        T24FenestraSkyltGlaze_ (this)
      {
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState& x,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet (x, f, c),
        SimMatLayerSet_Name_ (x.SimMatLayerSet_Name_, f, this),
        SimMatLayerSet_BasisType_ (x.SimMatLayerSet_BasisType_, f, this),
        SimMatLayerSet_BasisSymmetryType_ (x.SimMatLayerSet_BasisSymmetryType_, f, this),
        SimMatLayerSet_WindowThermalModel_ (x.SimMatLayerSet_WindowThermalModel_, f, this),
        SimMatLayerSet_BasisMatrixName_ (x.SimMatLayerSet_BasisMatrixName_, f, this),
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ (x.SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_, f, this),
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ (x.SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_, f, this),
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ (x.SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_, f, this),
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ (x.SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_, f, this),
        SimMatLayerSet_OutsideLayerName_ (x.SimMatLayerSet_OutsideLayerName_, f, this),
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ (x.SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_, f, this),
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ (x.SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_, f, this),
        SimMatLayerSet_Layer_2_5_Name_ (x.SimMatLayerSet_Layer_2_5_Name_, f, this),
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ (x.SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_, f, this),
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ (x.SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_, f, this),
        SimMatLayerSet_Gap_1_4_Name_ (x.SimMatLayerSet_Gap_1_4_Name_, f, this),
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ (x.SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_, f, this),
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ (x.SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_, f, this),
        WindowThermalModel_Params_Name_ (x.WindowThermalModel_Params_Name_, f, this),
        WindowThermalModel_Params_standard_ (x.WindowThermalModel_Params_standard_, f, this),
        WindowThermalModel_Params_ThermalModel_ (x.WindowThermalModel_Params_ThermalModel_, f, this),
        WindowThermalModel_Params_SDScalar_ (x.WindowThermalModel_Params_SDScalar_, f, this),
        WindowThermalModel_Params_DeflectionModel_ (x.WindowThermalModel_Params_DeflectionModel_, f, this),
        WindowThermalModel_Params_VacuumPressureLimit_ (x.WindowThermalModel_Params_VacuumPressureLimit_, f, this),
        WindowThermalModel_Params_InitialTemperature_ (x.WindowThermalModel_Params_InitialTemperature_, f, this),
        WindowThermalModel_Params_InitialPressure_ (x.WindowThermalModel_Params_InitialPressure_, f, this),
        Matrix_TwoDimension_Name_ (x.Matrix_TwoDimension_Name_, f, this),
        Matrix_TwoDimension_NumberofRows_ (x.Matrix_TwoDimension_NumberofRows_, f, this),
        Matrix_TwoDimension_NumberofColumns_ (x.Matrix_TwoDimension_NumberofColumns_, f, this),
        Matrix_TwoDimension_Value_1_2500_ (x.Matrix_TwoDimension_Value_1_2500_, f, this),
        T24AssmContext_ (x.T24AssmContext_, f, this),
        T24FenestraCertMethod_ (x.T24FenestraCertMethod_, f, this),
        T24Diffusing_ (x.T24Diffusing_, f, this),
        T24FenestraFrame_ (x.T24FenestraFrame_, f, this),
        T24FenestraPanes_ (x.T24FenestraPanes_, f, this),
        T24FenestraProdType_ (x.T24FenestraProdType_, f, this),
        T24FenestraTint_ (x.T24FenestraTint_, f, this),
        T24GreenhouseGardenWindow_ (x.T24GreenhouseGardenWindow_, f, this),
        T24SHGCCenterOfGlass_ (x.T24SHGCCenterOfGlass_, f, this),
        T24FenestraSkyltCurb_ (x.T24FenestraSkyltCurb_, f, this),
        T24FenestraSkyltGlaze_ (x.T24FenestraSkyltGlaze_, f, this)
      {
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (const ::xercesc::DOMElement& e,
                                                                    ::xml_schema::flags f,
                                                                    ::xml_schema::container* c)
      : ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet (e, f | ::xml_schema::flags::base, c),
        SimMatLayerSet_Name_ (this),
        SimMatLayerSet_BasisType_ (this),
        SimMatLayerSet_BasisSymmetryType_ (this),
        SimMatLayerSet_WindowThermalModel_ (this),
        SimMatLayerSet_BasisMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ (this),
        SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ (this),
        SimMatLayerSet_OutsideLayerName_ (this),
        SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ (this),
        SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_Name_ (this),
        SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_Name_ (this),
        SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ (this),
        SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ (this),
        WindowThermalModel_Params_Name_ (this),
        WindowThermalModel_Params_standard_ (this),
        WindowThermalModel_Params_ThermalModel_ (this),
        WindowThermalModel_Params_SDScalar_ (this),
        WindowThermalModel_Params_DeflectionModel_ (this),
        WindowThermalModel_Params_VacuumPressureLimit_ (this),
        WindowThermalModel_Params_InitialTemperature_ (this),
        WindowThermalModel_Params_InitialPressure_ (this),
        Matrix_TwoDimension_Name_ (this),
        Matrix_TwoDimension_NumberofRows_ (this),
        Matrix_TwoDimension_NumberofColumns_ (this),
        Matrix_TwoDimension_Value_1_2500_ (this),
        T24AssmContext_ (this),
        T24FenestraCertMethod_ (this),
        T24Diffusing_ (this),
        T24FenestraFrame_ (this),
        T24FenestraPanes_ (this),
        T24FenestraProdType_ (this),
        T24FenestraTint_ (this),
        T24GreenhouseGardenWindow_ (this),
        T24SHGCCenterOfGlass_ (this),
        T24FenestraSkyltCurb_ (this),
        T24FenestraSkyltGlaze_ (this)
      {
        if ((f & ::xml_schema::flags::base) == 0)
        {
          ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
          this->parse (p, f);
        }
      }

      void SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      parse (::xsd::cxx::xml::dom::parser< char >& p,
             ::xml_schema::flags f)
      {
        this->::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet::parse (p, f);

        for (; p.more_content (); p.next_content (false))
        {
          const ::xercesc::DOMElement& i (p.cur_element ());
          const ::xsd::cxx::xml::qualified_name< char > n (
            ::xsd::cxx::xml::dom::name< char > (i));

          // SimMatLayerSet_Name
          //
          if (n.name () == "SimMatLayerSet_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Name_type > r (
              SimMatLayerSet_Name_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Name_)
            {
              this->SimMatLayerSet_Name_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_BasisType
          //
          if (n.name () == "SimMatLayerSet_BasisType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_BasisType_type > r (
              SimMatLayerSet_BasisType_traits::create (i, f, this));

            if (!this->SimMatLayerSet_BasisType_)
            {
              this->SimMatLayerSet_BasisType_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_BasisSymmetryType
          //
          if (n.name () == "SimMatLayerSet_BasisSymmetryType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_BasisSymmetryType_type > r (
              SimMatLayerSet_BasisSymmetryType_traits::create (i, f, this));

            if (!this->SimMatLayerSet_BasisSymmetryType_)
            {
              this->SimMatLayerSet_BasisSymmetryType_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_WindowThermalModel
          //
          if (n.name () == "SimMatLayerSet_WindowThermalModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_WindowThermalModel_type > r (
              SimMatLayerSet_WindowThermalModel_traits::create (i, f, this));

            if (!this->SimMatLayerSet_WindowThermalModel_)
            {
              this->SimMatLayerSet_WindowThermalModel_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_BasisMatrixName
          //
          if (n.name () == "SimMatLayerSet_BasisMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_BasisMatrixName_type > r (
              SimMatLayerSet_BasisMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_BasisMatrixName_)
            {
              this->SimMatLayerSet_BasisMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName
          //
          if (n.name () == "SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_type > r (
              SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_)
            {
              this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName
          //
          if (n.name () == "SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_type > r (
              SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_)
            {
              this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName
          //
          if (n.name () == "SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_type > r (
              SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_)
            {
              this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName
          //
          if (n.name () == "SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_type > r (
              SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_)
            {
              this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_OutsideLayerName
          //
          if (n.name () == "SimMatLayerSet_OutsideLayerName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_OutsideLayerName_type > r (
              SimMatLayerSet_OutsideLayerName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_OutsideLayerName_)
            {
              this->SimMatLayerSet_OutsideLayerName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName
          //
          if (n.name () == "SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_type > r (
              SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_)
            {
              this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName
          //
          if (n.name () == "SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_type > r (
              SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_)
            {
              this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Layer_2_5_Name
          //
          if (n.name () == "SimMatLayerSet_Layer_2_5_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Layer_2_5_Name_type > r (
              SimMatLayerSet_Layer_2_5_Name_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Layer_2_5_Name_)
            {
              this->SimMatLayerSet_Layer_2_5_Name_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName
          //
          if (n.name () == "SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_type > r (
              SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_)
            {
              this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName
          //
          if (n.name () == "SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_type > r (
              SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_)
            {
              this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Gap_1_4_Name
          //
          if (n.name () == "SimMatLayerSet_Gap_1_4_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Gap_1_4_Name_type > r (
              SimMatLayerSet_Gap_1_4_Name_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Gap_1_4_Name_)
            {
              this->SimMatLayerSet_Gap_1_4_Name_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName
          //
          if (n.name () == "SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_type > r (
              SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_)
            {
              this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_.set (r);
              continue;
            }
          }

          // SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName
          //
          if (n.name () == "SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_type > r (
              SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_traits::create (i, f, this));

            if (!this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_)
            {
              this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_.set (r);
              continue;
            }
          }

          // WindowThermalModel_Params_Name
          //
          if (n.name () == "WindowThermalModel_Params_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WindowThermalModel_Params_Name_type > r (
              WindowThermalModel_Params_Name_traits::create (i, f, this));

            if (!this->WindowThermalModel_Params_Name_)
            {
              this->WindowThermalModel_Params_Name_.set (r);
              continue;
            }
          }

          // WindowThermalModel_Params_standard
          //
          if (n.name () == "WindowThermalModel_Params_standard" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WindowThermalModel_Params_standard_type > r (
              WindowThermalModel_Params_standard_traits::create (i, f, this));

            if (!this->WindowThermalModel_Params_standard_)
            {
              this->WindowThermalModel_Params_standard_.set (r);
              continue;
            }
          }

          // WindowThermalModel_Params_ThermalModel
          //
          if (n.name () == "WindowThermalModel_Params_ThermalModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WindowThermalModel_Params_ThermalModel_type > r (
              WindowThermalModel_Params_ThermalModel_traits::create (i, f, this));

            if (!this->WindowThermalModel_Params_ThermalModel_)
            {
              this->WindowThermalModel_Params_ThermalModel_.set (r);
              continue;
            }
          }

          // WindowThermalModel_Params_SDScalar
          //
          if (n.name () == "WindowThermalModel_Params_SDScalar" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->WindowThermalModel_Params_SDScalar_)
            {
              this->WindowThermalModel_Params_SDScalar_.set (WindowThermalModel_Params_SDScalar_traits::create (i, f, this));
              continue;
            }
          }

          // WindowThermalModel_Params_DeflectionModel
          //
          if (n.name () == "WindowThermalModel_Params_DeflectionModel" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< WindowThermalModel_Params_DeflectionModel_type > r (
              WindowThermalModel_Params_DeflectionModel_traits::create (i, f, this));

            if (!this->WindowThermalModel_Params_DeflectionModel_)
            {
              this->WindowThermalModel_Params_DeflectionModel_.set (r);
              continue;
            }
          }

          // WindowThermalModel_Params_VacuumPressureLimit
          //
          if (n.name () == "WindowThermalModel_Params_VacuumPressureLimit" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->WindowThermalModel_Params_VacuumPressureLimit_)
            {
              this->WindowThermalModel_Params_VacuumPressureLimit_.set (WindowThermalModel_Params_VacuumPressureLimit_traits::create (i, f, this));
              continue;
            }
          }

          // WindowThermalModel_Params_InitialTemperature
          //
          if (n.name () == "WindowThermalModel_Params_InitialTemperature" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->WindowThermalModel_Params_InitialTemperature_)
            {
              this->WindowThermalModel_Params_InitialTemperature_.set (WindowThermalModel_Params_InitialTemperature_traits::create (i, f, this));
              continue;
            }
          }

          // WindowThermalModel_Params_InitialPressure
          //
          if (n.name () == "WindowThermalModel_Params_InitialPressure" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->WindowThermalModel_Params_InitialPressure_)
            {
              this->WindowThermalModel_Params_InitialPressure_.set (WindowThermalModel_Params_InitialPressure_traits::create (i, f, this));
              continue;
            }
          }

          // Matrix_TwoDimension_Name
          //
          if (n.name () == "Matrix_TwoDimension_Name" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Matrix_TwoDimension_Name_type > r (
              Matrix_TwoDimension_Name_traits::create (i, f, this));

            if (!this->Matrix_TwoDimension_Name_)
            {
              this->Matrix_TwoDimension_Name_.set (r);
              continue;
            }
          }

          // Matrix_TwoDimension_NumberofRows
          //
          if (n.name () == "Matrix_TwoDimension_NumberofRows" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Matrix_TwoDimension_NumberofRows_)
            {
              this->Matrix_TwoDimension_NumberofRows_.set (Matrix_TwoDimension_NumberofRows_traits::create (i, f, this));
              continue;
            }
          }

          // Matrix_TwoDimension_NumberofColumns
          //
          if (n.name () == "Matrix_TwoDimension_NumberofColumns" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->Matrix_TwoDimension_NumberofColumns_)
            {
              this->Matrix_TwoDimension_NumberofColumns_.set (Matrix_TwoDimension_NumberofColumns_traits::create (i, f, this));
              continue;
            }
          }

          // Matrix_TwoDimension_Value_1_2500
          //
          if (n.name () == "Matrix_TwoDimension_Value_1_2500" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< Matrix_TwoDimension_Value_1_2500_type > r (
              Matrix_TwoDimension_Value_1_2500_traits::create (i, f, this));

            if (!this->Matrix_TwoDimension_Value_1_2500_)
            {
              this->Matrix_TwoDimension_Value_1_2500_.set (r);
              continue;
            }
          }

          // T24AssmContext
          //
          if (n.name () == "T24AssmContext" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24AssmContext_type > r (
              T24AssmContext_traits::create (i, f, this));

            if (!this->T24AssmContext_)
            {
              this->T24AssmContext_.set (r);
              continue;
            }
          }

          // T24FenestraCertMethod
          //
          if (n.name () == "T24FenestraCertMethod" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraCertMethod_type > r (
              T24FenestraCertMethod_traits::create (i, f, this));

            if (!this->T24FenestraCertMethod_)
            {
              this->T24FenestraCertMethod_.set (r);
              continue;
            }
          }

          // T24Diffusing
          //
          if (n.name () == "T24Diffusing" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->T24Diffusing_)
            {
              this->T24Diffusing_.set (T24Diffusing_traits::create (i, f, this));
              continue;
            }
          }

          // T24FenestraFrame
          //
          if (n.name () == "T24FenestraFrame" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraFrame_type > r (
              T24FenestraFrame_traits::create (i, f, this));

            if (!this->T24FenestraFrame_)
            {
              this->T24FenestraFrame_.set (r);
              continue;
            }
          }

          // T24FenestraPanes
          //
          if (n.name () == "T24FenestraPanes" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraPanes_type > r (
              T24FenestraPanes_traits::create (i, f, this));

            if (!this->T24FenestraPanes_)
            {
              this->T24FenestraPanes_.set (r);
              continue;
            }
          }

          // T24FenestraProdType
          //
          if (n.name () == "T24FenestraProdType" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraProdType_type > r (
              T24FenestraProdType_traits::create (i, f, this));

            if (!this->T24FenestraProdType_)
            {
              this->T24FenestraProdType_.set (r);
              continue;
            }
          }

          // T24FenestraTint
          //
          if (n.name () == "T24FenestraTint" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraTint_type > r (
              T24FenestraTint_traits::create (i, f, this));

            if (!this->T24FenestraTint_)
            {
              this->T24FenestraTint_.set (r);
              continue;
            }
          }

          // T24GreenhouseGardenWindow
          //
          if (n.name () == "T24GreenhouseGardenWindow" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->T24GreenhouseGardenWindow_)
            {
              this->T24GreenhouseGardenWindow_.set (T24GreenhouseGardenWindow_traits::create (i, f, this));
              continue;
            }
          }

          // T24SHGCCenterOfGlass
          //
          if (n.name () == "T24SHGCCenterOfGlass" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            if (!this->T24SHGCCenterOfGlass_)
            {
              this->T24SHGCCenterOfGlass_.set (T24SHGCCenterOfGlass_traits::create (i, f, this));
              continue;
            }
          }

          // T24FenestraSkyltCurb
          //
          if (n.name () == "T24FenestraSkyltCurb" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraSkyltCurb_type > r (
              T24FenestraSkyltCurb_traits::create (i, f, this));

            if (!this->T24FenestraSkyltCurb_)
            {
              this->T24FenestraSkyltCurb_.set (r);
              continue;
            }
          }

          // T24FenestraSkyltGlaze
          //
          if (n.name () == "T24FenestraSkyltGlaze" && n.namespace_ () == "http://d-alchemy.com/schema/simxml/ResourcesGeneral")
          {
            ::std::auto_ptr< T24FenestraSkyltGlaze_type > r (
              T24FenestraSkyltGlaze_traits::create (i, f, this));

            if (!this->T24FenestraSkyltGlaze_)
            {
              this->T24FenestraSkyltGlaze_.set (r);
              continue;
            }
          }

          break;
        }
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState* SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      _clone (::xml_schema::flags f,
              ::xml_schema::container* c) const
      {
        return new class SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState (*this, f, c);
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState& SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      operator= (const SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState& x)
      {
        if (this != &x)
        {
          static_cast< ::schema::simxml::ResourcesGeneral::SimMaterialLayerSet_GlazingLayerSet& > (*this) = x;
          this->SimMatLayerSet_Name_ = x.SimMatLayerSet_Name_;
          this->SimMatLayerSet_BasisType_ = x.SimMatLayerSet_BasisType_;
          this->SimMatLayerSet_BasisSymmetryType_ = x.SimMatLayerSet_BasisSymmetryType_;
          this->SimMatLayerSet_WindowThermalModel_ = x.SimMatLayerSet_WindowThermalModel_;
          this->SimMatLayerSet_BasisMatrixName_ = x.SimMatLayerSet_BasisMatrixName_;
          this->SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_ = x.SimMatLayerSet_SolarOpticalComplexFrontTransmitMatrixName_;
          this->SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_ = x.SimMatLayerSet_SolarOpticalComplexBackReflectMatrixName_;
          this->SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_ = x.SimMatLayerSet_VisibleOpticalComplexFrontTransmitMatrixName_;
          this->SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_ = x.SimMatLayerSet_VisibleOpticalComplexBackTransmitMatrixName_;
          this->SimMatLayerSet_OutsideLayerName_ = x.SimMatLayerSet_OutsideLayerName_;
          this->SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_ = x.SimMatLayerSet_OutsideLayerDirectFrontAbsoptMatrixName_;
          this->SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_ = x.SimMatLayerSet_OutsideLayerDirectBackAbsoptMatrixName_;
          this->SimMatLayerSet_Layer_2_5_Name_ = x.SimMatLayerSet_Layer_2_5_Name_;
          this->SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_ = x.SimMatLayerSet_Layer_2_5_DirectFrontAbsorpMatrixName_;
          this->SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_ = x.SimMatLayerSet_Layer_2_5_DirectBackAbsorpMatrixName_;
          this->SimMatLayerSet_Gap_1_4_Name_ = x.SimMatLayerSet_Gap_1_4_Name_;
          this->SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_ = x.SimMatLayerSet_Gap_1_4_DirectFrontAbsorpMatrixName_;
          this->SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_ = x.SimMatLayerSet_Gap_1_4_DirectBackAbsorpMatrixName_;
          this->WindowThermalModel_Params_Name_ = x.WindowThermalModel_Params_Name_;
          this->WindowThermalModel_Params_standard_ = x.WindowThermalModel_Params_standard_;
          this->WindowThermalModel_Params_ThermalModel_ = x.WindowThermalModel_Params_ThermalModel_;
          this->WindowThermalModel_Params_SDScalar_ = x.WindowThermalModel_Params_SDScalar_;
          this->WindowThermalModel_Params_DeflectionModel_ = x.WindowThermalModel_Params_DeflectionModel_;
          this->WindowThermalModel_Params_VacuumPressureLimit_ = x.WindowThermalModel_Params_VacuumPressureLimit_;
          this->WindowThermalModel_Params_InitialTemperature_ = x.WindowThermalModel_Params_InitialTemperature_;
          this->WindowThermalModel_Params_InitialPressure_ = x.WindowThermalModel_Params_InitialPressure_;
          this->Matrix_TwoDimension_Name_ = x.Matrix_TwoDimension_Name_;
          this->Matrix_TwoDimension_NumberofRows_ = x.Matrix_TwoDimension_NumberofRows_;
          this->Matrix_TwoDimension_NumberofColumns_ = x.Matrix_TwoDimension_NumberofColumns_;
          this->Matrix_TwoDimension_Value_1_2500_ = x.Matrix_TwoDimension_Value_1_2500_;
          this->T24AssmContext_ = x.T24AssmContext_;
          this->T24FenestraCertMethod_ = x.T24FenestraCertMethod_;
          this->T24Diffusing_ = x.T24Diffusing_;
          this->T24FenestraFrame_ = x.T24FenestraFrame_;
          this->T24FenestraPanes_ = x.T24FenestraPanes_;
          this->T24FenestraProdType_ = x.T24FenestraProdType_;
          this->T24FenestraTint_ = x.T24FenestraTint_;
          this->T24GreenhouseGardenWindow_ = x.T24GreenhouseGardenWindow_;
          this->T24SHGCCenterOfGlass_ = x.T24SHGCCenterOfGlass_;
          this->T24FenestraSkyltCurb_ = x.T24FenestraSkyltCurb_;
          this->T24FenestraSkyltGlaze_ = x.T24FenestraSkyltGlaze_;
        }

        return *this;
      }

      SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState::
      ~SimMaterialLayerSet_GlazingLayerSet_ComplexFenestrationState ()
      {
      }
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace schema
{
  namespace simxml
  {
    namespace ResourcesGeneral
    {
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

